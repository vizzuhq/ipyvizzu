{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p> <p>ipyvizzu - Build animated charts in Jupyter Notebook and similar environments with a simple Python syntax</p> <p> Documentation     \u00b7 Examples     \u00b7 Code reference     \u00b7 Repository </p> </p> <p> </p>"},{"location":"#ipyvizzu","title":"ipyvizzu","text":""},{"location":"#about-the-project","title":"About The Project","text":"<p><code>ipyvizzu</code> is an animated charting tool for Jupyter, Google Colab, Databricks, Kaggle and Deepnote notebooks among other platforms. <code>ipyvizzu</code> enables data scientists and analysts to utilize animation for storytelling with data using <code>Python</code>. It's built on the open-source <code>JavaScript</code>/<code>C++</code> charting library Vizzu.</p> <p>There is a new extension of <code>ipyvizzu</code>, ipyvizzu-story with which the animated charts can be presented right from the notebooks. Since <code>ipyvizzu-story</code>'s syntax is a bit different to <code>ipyvizzu</code>'s, we suggest you to start from the ipyvizzu-story repo if you're interested in using animated charts to present your findings live or to share your presentation as an HTML file.</p> <p>Similarly to <code>Vizzu</code>, <code>ipyvizzu</code> utilizes a generic dataviz engine that generates many types of charts and seamlessly animates between them. It is designed for building animated data stories as it enables showing different perspectives of the data that the viewers can easily follow.</p> <p>Main features:</p> <ul> <li>Designed with animation in focus;</li> <li>Defaults based on data visualization guidelines;</li> <li>Works with <code>Pandas</code> dataframe, while also <code>JSON</code> and inline data input is   available;</li> <li>Auto scrolling feature to keep the actual chart in position while executing   multiple cells.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install ipyvizzu</code></pre> <p>Visit Installation chapter for more options and details.</p>"},{"location":"#usage","title":"Usage","text":"<p>You can create the animation below with the following code snippet.</p> <p> </p> <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/showcases/titanic/titanic.csv\"\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart(width=\"640px\", height=\"360px\")\n\nchart.animate(data)\n\nchart.animate(\n    Config(\n        {\n            \"x\": \"Count\",\n            \"y\": \"Sex\",\n            \"label\": \"Count\",\n            \"title\": \"Passengers of the Titanic\",\n        }\n    )\n)\nchart.animate(\n    Config(\n        {\n            \"x\": [\"Count\", \"Survived\"],\n            \"label\": [\"Count\", \"Survived\"],\n            \"color\": \"Survived\",\n        }\n    )\n)\nchart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]}))</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p>Visit our Documentation site for more details and a step-by-step tutorial into <code>ipyvizzu</code> or check out our Example gallery.</p>"},{"location":"#environments","title":"Environments","text":"<p><code>ipyvizzu</code> can be used in a wide variety of environments, visit Environments chapter for more details.</p> <ul> <li>Notebooks<ul> <li>Jupyter Notebook</li> <li>Colab</li> <li>Databricks</li> <li>DataCamp</li> <li>Deepnote</li> <li>JupyterLab</li> <li>JupyterLite</li> <li>Kaggle</li> <li>Noteable</li> </ul> </li> <li>App platforms<ul> <li>Streamlit</li> <li>Flask</li> <li>Panel</li> <li>Mercury/mljar</li> <li>Voil\u00e0</li> </ul> </li> <li>BI tools<ul> <li>Mode</li> </ul> </li> <li>IDEs<ul> <li>PyCharm</li> <li>VSCode Python</li> </ul> </li> </ul>"},{"location":"#extensions","title":"Extensions","text":"<ul> <li>ipyvizzu-story adds presentation   controls to present data stories live or to share them as an interactive HTML   file.</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions to the project, visit our contributing guide for further info.</p>"},{"location":"#contact","title":"Contact","text":"<ul> <li>Join our Slack if you have any questions or comments:   vizzu-community.slack.com</li> <li>Drop us a line at hello@vizzuhq.com</li> <li>Follow us on Twitter: VizzuHQ</li> </ul>"},{"location":"#license","title":"License","text":"<p>Copyright \u00a9 2022-2023 Vizzu Inc.</p> <p>Released under the Apache 2.0 License.</p>"},{"location":"CODE_OF_CONDUCT/","title":"Code of Conduct","text":"<p>See Code of Conduct of the Vizzu community.</p>"},{"location":"CONTRIBUTING/","title":"Contributing","text":""},{"location":"CONTRIBUTING/#issues","title":"Issues","text":"<p>You can find our open issues in the project's issue tracker. Please let us know if you find any issues or have any feature requests there.</p>"},{"location":"CONTRIBUTING/#contributing_1","title":"Contributing","text":"<p>If you want to contribute to the project, your help is very welcome. Just fork the project, make your changes and send us a pull request. You can find the detailed description of how to do this in Github's guide to contributing to projects.</p>"},{"location":"CONTRIBUTING/#ci-cd","title":"CI-CD","text":""},{"location":"CONTRIBUTING/#development-environment","title":"Development environment","text":"<p>You can initialize the development environment of <code>ipyvizzu</code> with <code>Python</code> virtual env.</p> <p>Run the <code>dev</code> make target to set up your environment.</p> <pre><code>make dev</code></pre> <p>Note: The <code>dev</code> make target is going to set up pre-commit and pre-push hooks into your local git repository. Pre-commit hook is going to format the code with <code>black</code> and pre-push hook is going to run the CI steps.</p> <p>Run the <code>clean</code> make target to clear your environment.</p> <pre><code>make clean</code></pre>"},{"location":"CONTRIBUTING/#ci","title":"CI","text":"<p>The CI steps check code formatting, run code analyses, check typing and run unit tests over the <code>ipyvizzu</code> project.</p> <p>The <code>check</code> make target collects the above tasks. Run the <code>check</code> make target to run the CI steps.</p> <pre><code>make check</code></pre>"},{"location":"CONTRIBUTING/#formatting","title":"Formatting","text":"<p>The <code>ipyvizzu</code> project is formatted with <code>black</code>.</p> <p>Run the <code>format</code> make target to format your code.</p> <pre><code>make format</code></pre> <p>Run the <code>check-format</code> target to check code formatting.</p> <pre><code>make check-format</code></pre>"},{"location":"CONTRIBUTING/#code-analyses","title":"Code analyses","text":"<p>The <code>ipyvizzu</code> project is analysed with <code>pylint</code>.</p> <p>Run the <code>check-lint</code> make target to run code analyses.</p> <pre><code>make check-lint</code></pre>"},{"location":"CONTRIBUTING/#typing","title":"Typing","text":"<p>The <code>ipyvizzu</code> project is using type hints.</p> <p>Run the <code>check-typing</code> make target to run check code typing.</p> <pre><code>make check-typing</code></pre>"},{"location":"CONTRIBUTING/#testing","title":"Testing","text":"<p>The <code>ipyvizzu</code> project is tested with <code>unittest</code> testing framework.</p> <p>Run the <code>test</code> make target to run the tests.</p> <pre><code>make test</code></pre>"},{"location":"CONTRIBUTING/#documentation","title":"Documentation","text":"<p>Run the <code>doc</code> make target to build the documentation.</p> <p>Note: If you modify the documentation, you also need to configure the <code>JavaScript</code> development environment.</p> <pre><code>make dev-js\n\nmake check-js\n\nmake doc</code></pre> <p>Online version can be read at ipyvizzu.com.</p> <p>The preset, static and animated chart examples are generated from the vizzu-lib repository. If you would like to build them too, run the following commands.</p> <pre><code>git clone --depth 1 https://github.com/vizzuhq/vizzu-lib.git\n\nmake doc</code></pre>"},{"location":"CONTRIBUTING/#release","title":"Release","text":"<p><code>ipyvizzu</code> is distributed on pypi. Note: You need to be an administrator to release the project.</p> <p>If you want to release <code>ipyvizzu</code> follow the steps below.</p> <ul> <li>You should increase the version number in <code>setup.py</code>. The version bump should   be in a separated commit.</li> </ul> <ul> <li>Generate the release notes and publish the new release on   Releases.</li> </ul> <p>Note: Publishing a new release will automatically trigger the <code>release</code> workflow which builds, checks and uploads the <code>ipyvizzu</code> package to pypi.</p> <p>You can build and check the package before a release with the <code>release</code> make target.</p> <pre><code>make release</code></pre>"},{"location":"LICENSE/","title":"License","text":"<pre>                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n</pre>"},{"location":"installation/","title":"Installation","text":"<p><code>ipyvizzu</code> requires the <code>IPython</code>, <code>jsonschema</code> and <code>pandas</code> packages.</p> <p>Info</p> <p><code>ipyvizzu</code> requires and downloads the Vizzu <code>JavaScript</code>/<code>C++</code> library from <code>jsDelivr CDN</code>, but you can also use a different or self-hosted version of it. Check Chart settings chapter for more details.</p>"},{"location":"installation/#pypi","title":"pypi","text":"<p>Run the following command to install <code>ipyvizzu</code> from pypi</p> <pre><code>pip install ipyvizzu</code></pre> <p>and this is how to upgrade it.</p> <pre><code>pip install -U ipyvizzu</code></pre> <p>You can use <code>ipyvizzu</code> in <code>Jupyter/IPython</code>, <code>Streamlit</code> or <code>Panel</code> (see Environments chapter for more details).</p>"},{"location":"installation/#jupyteripython","title":"Jupyter/IPython","text":"<p>You can install <code>ipyvizzu</code> in your notebook without using the command line by entering the following code into a cell.</p> <pre><code>!pip install ipyvizzu</code></pre>"},{"location":"installation/#conda-mamba","title":"conda / mamba","text":"<p>Installing <code>ipyvizzu</code> from <code>conda-forge</code> can be achieved by adding <code>conda-forge</code> to your channels with:</p> <pre><code>conda config --add channels conda-forge\nconda config --set channel_priority strict</code></pre> <p>Once the <code>conda-forge</code> channel has been enabled, run the following command to install <code>ipyvizzu</code> from conda</p> <pre><code>conda install ipyvizzu\n\n# or with mamba:\n\nmamba install ipyvizzu</code></pre> <p>and this is how to upgrade it.</p> <pre><code>conda update ipyvizzu\n\n# or with mamba:\n\nmamba update ipyvizzu</code></pre>"},{"location":"dev/","title":"Development","text":"<p>We have compiled some information on the development of <code>ipyvizzu</code> here. If you're interested in contributing to our open-source tool (which we highly encourage), please refer to the Contributing chapter. Our community upholds a strict Code of Conduct that we expect all members to follow. Plus, we've got you covered with info on our code's test coverage.</p> <ul> <li>Contributing</li> <li>Code of Conduct</li> <li>Coverage report</li> </ul>"},{"location":"environments/","title":"Environments","text":"<p><code>ipyvizzu</code> can be used in a lot of different environments. We grouped these into several categories. We would love to add more environments and examples, so if you miss anything from our list, please open an issue in our Github repo.</p> <ul> <li>Notebooks</li> <li>App platforms</li> <li>BI tools</li> <li>IDEs</li> </ul>"},{"location":"environments/bi/","title":"BI tools","text":"<p><code>ipyvizzu</code> is available in the following BI tools. We would love to add more environments and examples, so if you miss anything from our list, please open an issue in our Github repo.</p> <ul> <li>Mode</li> </ul>"},{"location":"environments/bi/mode/","title":"Mode","text":""},{"location":"environments/bi/mode/#features","title":"Features","text":"<p>The features of <code>ipyvizzu</code> that are available in <code>Mode</code> are marked with a green check.</p> <ul> <li> Change the url of <code>Vizzu</code> (<code>vizzu</code>)</li> <li> Change the width of the <code>Chart</code> (<code>width</code>)</li> <li> Change the height of the <code>Chart</code> (<code>height</code>)</li> <li> Use scroll into view (<code>scroll_into_view</code>=<code>True</code>)</li> </ul> <p>Dislay features:</p> <ul> <li> Display all animations after <code>_repr_html_</code> method called   (<code>display</code>=<code>DisplayTarget.MANUAL</code>)</li> <li> Display all animations after <code>show</code> method called   (<code>display</code>=<code>DisplayTarget.MANUAL</code>)</li> <li> Automatically display all animations after the first cell   (<code>display</code>=<code>DisplayTarget.BEGIN</code>)</li> <li> Automatically display all animations after the currently running cell   (<code>display</code>=<code>DisplayTarget.ACTUAL</code>)</li> <li> Automatically display all animations after the last running cell   (<code>display</code>=<code>DisplayTarget.END</code>)</li> <li> Rerun any cell without rerun the first cell   (<code>display</code>!=<code>DisplayTarget.MANUAL</code>)</li> </ul> <p>Check Chart settings chapter for more details.</p>"},{"location":"environments/bi/mode/#installation","title":"Installation","text":"<p>Place the following code into a notebook cell in order to install <code>ipyvizzu</code> (visit Installation chapter for more options and details).</p> <pre><code>!pip install ipyvizzu -t \"/tmp\" &gt; /dev/null 2&gt;&amp;1</code></pre>"},{"location":"environments/bi/mode/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu</code> in <code>Mode</code> with the following sample.</p> <pre><code># import pandas and ipyvizzu\n\nimport pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style, DisplayTarget\n\n\n# initialize Chart\n\nchart = Chart(\n    width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL\n)\n\n\n# add data to Chart\n\ndata = Data()\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/showcases/titanic/titanic.csv\"\n)\ndata.add_data_frame(data_frame)\n\nchart.animate(data)\n\n\n# add config to Chart\n\nchart.animate(\n    Config(\n        {\n            \"x\": \"Count\",\n            \"y\": \"Sex\",\n            \"label\": \"Count\",\n            \"title\": \"Passengers of the Titanic\",\n        }\n    )\n)\nchart.animate(\n    Config(\n        {\n            \"x\": [\"Count\", \"Survived\"],\n            \"label\": [\"Count\", \"Survived\"],\n            \"color\": \"Survived\",\n        }\n    )\n)\nchart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]}))\n\n\n# add style to Chart\n\nchart.animate(Style({\"title\": {\"fontSize\": 35}}))\n\n\n# display Chart with _repr_html_ method (display=DisplayTarget.MANUAL)\n\nchart</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"environments/ide/","title":"IDEs","text":"<p><code>ipyvizzu</code> is available in the following IDEs. We would love to add more environments and examples, so if you miss anything from our list, please open an issue in our Github repo.</p> <ul> <li>PyCharm</li> <li>VSCode Python</li> </ul>"},{"location":"environments/ide/pycharm/","title":"PyCharm","text":""},{"location":"environments/ide/pycharm/#features","title":"Features","text":"<p>The features of <code>ipyvizzu</code> that are available in <code>PyCharm Professional</code> are marked with a green check.</p> <ul> <li> Change the url of <code>Vizzu</code> (<code>vizzu</code>)</li> <li> Change the width of the <code>Chart</code> (<code>width</code>)</li> <li> Change the height of the <code>Chart</code> (<code>height</code>)</li> <li> Use scroll into view (<code>scroll_into_view</code>=<code>True</code>)</li> </ul> <p>Dislay features:</p> <ul> <li> Display all animations after <code>_repr_html_</code> method called   (<code>display</code>=<code>DisplayTarget.MANUAL</code>)</li> <li> Display all animations after <code>show</code> method called   (<code>display</code>=<code>DisplayTarget.MANUAL</code>)</li> <li> Automatically display all animations after the first cell   (<code>display</code>=<code>DisplayTarget.BEGIN</code>)</li> <li> Automatically display all animations after the currently running cell   (<code>display</code>=<code>DisplayTarget.ACTUAL</code>)</li> <li> Automatically display all animations after the last running cell   (<code>display</code>=<code>DisplayTarget.END</code>)</li> <li> Rerun any cell without rerun the first cell   (<code>display</code>!=<code>DisplayTarget.MANUAL</code>)</li> </ul> <p>Check Chart settings chapter for more details.</p>"},{"location":"environments/ide/pycharm/#installation","title":"Installation","text":"<p>Run the following command in your command line</p> <pre><code>pip install ipyvizzu</code></pre> <p>or place the following code into a notebook cell in order to install <code>ipyvizzu</code> (visit Installation chapter for more options and details).</p> <pre><code>!pip install ipyvizzu</code></pre>"},{"location":"environments/ide/pycharm/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu</code> in <code>PyCharm Professional</code> with the following sample.</p> <pre><code># import pandas and ipyvizzu\n\nimport pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style, DisplayTarget\n\n\n# initialize Chart\n\nchart = Chart(\n    width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL\n)\n\n\n# add data to Chart\n\ndata = Data()\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/showcases/titanic/titanic.csv\"\n)\ndata.add_data_frame(data_frame)\n\nchart.animate(data)\n\n\n# add config to Chart\n\nchart.animate(\n    Config(\n        {\n            \"x\": \"Count\",\n            \"y\": \"Sex\",\n            \"label\": \"Count\",\n            \"title\": \"Passengers of the Titanic\",\n        }\n    )\n)\nchart.animate(\n    Config(\n        {\n            \"x\": [\"Count\", \"Survived\"],\n            \"label\": [\"Count\", \"Survived\"],\n            \"color\": \"Survived\",\n        }\n    )\n)\nchart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]}))\n\n\n# add style to Chart\n\nchart.animate(Style({\"title\": {\"fontSize\": 35}}))\n\n\n# display Chart with _repr_html_() method (display=DisplayTarget.MANUAL)\n\nchart</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"environments/ide/vscode/","title":"VSCode Python","text":""},{"location":"environments/ide/vscode/#features","title":"Features","text":"<p>The features of <code>ipyvizzu</code> that are available in <code>VSCode Python</code> are marked with a green check.</p> <ul> <li> Change the url of <code>Vizzu</code> (<code>vizzu</code>)</li> <li> Change the width of the <code>Chart</code> (<code>width</code>)</li> <li> Change the height of the <code>Chart</code> (<code>height</code>)</li> <li> Use scroll into view (<code>scroll_into_view</code>=<code>True</code>)</li> </ul> <p>Dislay features:</p> <ul> <li> Display all animations after <code>_repr_html_</code> method called   (<code>display</code>=<code>DisplayTarget.MANUAL</code>)</li> <li> Display all animations after <code>show</code> method called   (<code>display</code>=<code>DisplayTarget.MANUAL</code>)</li> <li> Automatically display all animations after the first cell   (<code>display</code>=<code>DisplayTarget.BEGIN</code>)</li> <li> Automatically display all animations after the currently running cell   (<code>display</code>=<code>DisplayTarget.ACTUAL</code>)</li> <li> Automatically display all animations after the last running cell   (<code>display</code>=<code>DisplayTarget.END</code>)</li> <li> Rerun any cell without rerun the first cell   (<code>display</code>!=<code>DisplayTarget.MANUAL</code>)</li> </ul> <p>Check Chart settings chapter for more details.</p>"},{"location":"environments/ide/vscode/#installation","title":"Installation","text":"<p>Run the following command in your command line</p> <pre><code>pip install ipyvizzu</code></pre> <p>or place the following code into a notebook cell in order to install <code>ipyvizzu</code> (visit Installation chapter for more options and details).</p> <pre><code>!pip install ipyvizzu</code></pre>"},{"location":"environments/ide/vscode/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu</code> in <code>VSCode Python</code> with the following sample.</p> <pre><code># import pandas and ipyvizzu\n\nimport pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style, DisplayTarget\n\n\n# initialize Chart\n\nchart = Chart(\n    width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL\n)\n\n\n# add data to Chart\n\ndata = Data()\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/showcases/titanic/titanic.csv\"\n)\ndata.add_data_frame(data_frame)\n\nchart.animate(data)\n\n\n# add config to Chart\n\nchart.animate(\n    Config(\n        {\n            \"x\": \"Count\",\n            \"y\": \"Sex\",\n            \"label\": \"Count\",\n            \"title\": \"Passengers of the Titanic\",\n        }\n    )\n)\nchart.animate(\n    Config(\n        {\n            \"x\": [\"Count\", \"Survived\"],\n            \"label\": [\"Count\", \"Survived\"],\n            \"color\": \"Survived\",\n        }\n    )\n)\nchart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]}))\n\n\n# add style to Chart\n\nchart.animate(Style({\"title\": {\"fontSize\": 35}}))\n\n\n# display Chart with _repr_html_() method (display=DisplayTarget.MANUAL)\n\nchart</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"environments/notebook/","title":"Notebooks","text":"<p><code>ipyvizzu</code> is available in the following Notebooks. We would love to add more environments and examples, so if you miss anything from our list, please open an issue in our Github repo.</p> <ul> <li>Jupyter Notebook</li> <li>Colab</li> <li>Databricks</li> <li>DataCamp</li> <li>Deepnote</li> <li>JupyterLab</li> <li>JupyterLite</li> <li>Kaggle</li> <li>Noteable</li> </ul>"},{"location":"environments/notebook/colab/","title":"Colab","text":""},{"location":"environments/notebook/colab/#features","title":"Features","text":"<p>The features of <code>ipyvizzu</code> that are available in <code>Colab</code> are marked with a green check.</p> <ul> <li> Change the url of <code>Vizzu</code> (<code>vizzu</code>)</li> <li> Change the width of the <code>Chart</code> (<code>width</code>)</li> <li> Change the height of the <code>Chart</code> (<code>height</code>)</li> <li> Use scroll into view (<code>scroll_into_view</code>=<code>True</code>)</li> </ul> <p>Dislay features:</p> <ul> <li> Display all animations after <code>_repr_html_</code> method called   (<code>display</code>=<code>DisplayTarget.MANUAL</code>)</li> <li> Display all animations after <code>show</code> method called   (<code>display</code>=<code>DisplayTarget.MANUAL</code>)</li> <li> Automatically display all animations after the first cell   (<code>display</code>=<code>DisplayTarget.BEGIN</code>)</li> <li> Automatically display all animations after the currently running cell   (<code>display</code>=<code>DisplayTarget.ACTUAL</code>)</li> <li> Automatically display all animations after the last running cell   (<code>display</code>=<code>DisplayTarget.END</code>)</li> <li> Rerun any cell without rerun the first cell   (<code>display</code>!=<code>DisplayTarget.MANUAL</code>)</li> </ul> <p>Check Chart settings chapter for more details.</p>"},{"location":"environments/notebook/colab/#live-example","title":"Live example","text":""},{"location":"environments/notebook/colab/#installation","title":"Installation","text":"<p>Place the following code into a notebook cell in order to install <code>ipyvizzu</code> (visit Installation chapter for more options and details).</p> <pre><code>!pip install ipyvizzu</code></pre>"},{"location":"environments/notebook/colab/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu</code> in <code>Colab</code> with the following sample.</p> <pre><code># import pandas and ipyvizzu\n\nimport pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style, DisplayTarget\n\n\n# initialize Chart\n\nchart = Chart(\n    width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL\n)\n\n\n# add data to Chart\n\ndata = Data()\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/showcases/titanic/titanic.csv\"\n)\ndata.add_data_frame(data_frame)\n\nchart.animate(data)\n\n\n# add config to Chart\n\nchart.animate(\n    Config(\n        {\n            \"x\": \"Count\",\n            \"y\": \"Sex\",\n            \"label\": \"Count\",\n            \"title\": \"Passengers of the Titanic\",\n        }\n    )\n)\nchart.animate(\n    Config(\n        {\n            \"x\": [\"Count\", \"Survived\"],\n            \"label\": [\"Count\", \"Survived\"],\n            \"color\": \"Survived\",\n        }\n    )\n)\nchart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]}))\n\n\n# add style to Chart\n\nchart.animate(Style({\"title\": {\"fontSize\": 35}}))\n\n\n# display Chart with show or _repr_html_ method (display=DisplayTarget.MANUAL)\n\nchart.show()\n# chart</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"environments/notebook/databricks/","title":"Databricks","text":""},{"location":"environments/notebook/databricks/#features","title":"Features","text":"<p>The features of <code>ipyvizzu</code> that are available in <code>Databricks</code> are marked with a green check.</p> <ul> <li> Change the url of <code>Vizzu</code> (<code>vizzu</code>)</li> <li> Change the width of the <code>Chart</code> (<code>width</code>)</li> <li> Change the height of the <code>Chart</code> (<code>height</code>)</li> <li> Use scroll into view (<code>scroll_into_view</code>=<code>True</code>)</li> </ul> <p>Dislay features:</p> <ul> <li> Display all animations after <code>_repr_html_</code> method called   (<code>display</code>=<code>DisplayTarget.MANUAL</code>)</li> <li> Display all animations after <code>show</code> method called   (<code>display</code>=<code>DisplayTarget.MANUAL</code>)</li> <li> Automatically display all animations after the first cell   (<code>display</code>=<code>DisplayTarget.BEGIN</code>)</li> <li> Automatically display all animations after the currently running cell   (<code>display</code>=<code>DisplayTarget.ACTUAL</code>)</li> <li> Automatically display all animations after the last running cell   (<code>display</code>=<code>DisplayTarget.END</code>)</li> <li> Rerun any cell without rerun the first cell   (<code>display</code>!=<code>DisplayTarget.MANUAL</code>)</li> </ul> <p>Check Chart settings chapter for more details.</p>"},{"location":"environments/notebook/databricks/#live-example","title":"Live example","text":"<p>Open in Databricks</p>"},{"location":"environments/notebook/databricks/#installation","title":"Installation","text":"<p>Place the following code into a notebook cell in order to install <code>ipyvizzu</code> (visit Installation chapter for more options and details).</p> <pre><code>!pip install ipyvizzu</code></pre>"},{"location":"environments/notebook/databricks/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu</code> in <code>Databricks</code> with the following sample.</p> <pre><code># import pandas and ipyvizzu\n\nimport pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style, DisplayTarget\n\n\n# initialize Chart\n\nchart = Chart(\n    width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL\n)\n\n\n# add data to Chart\n\ndata = Data()\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/showcases/titanic/titanic.csv\"\n)\ndata.add_data_frame(data_frame)\n\nchart.animate(data)\n\n\n# add config to Chart\n\nchart.animate(\n    Config(\n        {\n            \"x\": \"Count\",\n            \"y\": \"Sex\",\n            \"label\": \"Count\",\n            \"title\": \"Passengers of the Titanic\",\n        }\n    )\n)\nchart.animate(\n    Config(\n        {\n            \"x\": [\"Count\", \"Survived\"],\n            \"label\": [\"Count\", \"Survived\"],\n            \"color\": \"Survived\",\n        }\n    )\n)\nchart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]}))\n\n\n# add style to Chart\n\nchart.animate(Style({\"title\": {\"fontSize\": 35}}))\n\n\n# display Chart with _repr_html_ method (display=DisplayTarget.MANUAL)\n\nchart</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"environments/notebook/datacamp/","title":"DataCamp","text":""},{"location":"environments/notebook/datacamp/#features","title":"Features","text":"<p>The features of <code>ipyvizzu</code> that are available in <code>DataCamp</code> are marked with a green check.</p> <ul> <li> Change the url of <code>Vizzu</code> (<code>vizzu</code>)</li> <li> Change the width of the <code>Chart</code> (<code>width</code>)</li> <li> Change the height of the <code>Chart</code> (<code>height</code>)</li> <li> Use scroll into view (<code>scroll_into_view</code>=<code>True</code>)</li> </ul> <p>Dislay features:</p> <ul> <li> Display all animations after <code>_repr_html_</code> method called   (<code>display</code>=<code>DisplayTarget.MANUAL</code>) *</li> <li> Display all animations after <code>show</code> method called   (<code>display</code>=<code>DisplayTarget.MANUAL</code>) *</li> <li> Automatically display all animations after the first cell   (<code>display</code>=<code>DisplayTarget.BEGIN</code>) *</li> <li> Automatically display all animations after the currently running cell   (<code>display</code>=<code>DisplayTarget.ACTUAL</code>) *</li> <li> Automatically display all animations after the last running cell   (<code>display</code>=<code>DisplayTarget.END</code>) *</li> <li> Rerun any cell without rerun the first cell   (<code>display</code>!=<code>DisplayTarget.MANUAL</code>)</li> </ul> <p>*<code>ipyvizzu</code> does not work in the default editor, switch to the <code>JupyterLab</code>-style editor</p> <p>Check Chart settings chapter for more details.</p>"},{"location":"environments/notebook/datacamp/#installation","title":"Installation","text":"<p>Place the following code into a notebook cell in order to install <code>ipyvizzu</code> (visit Installation chapter for more options and details).</p> <pre><code>!pip install ipyvizzu</code></pre>"},{"location":"environments/notebook/datacamp/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu</code> in <code>DataCamp</code> with the following sample.</p> <pre><code># import pandas and ipyvizzu\nimport pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style, DisplayTarget\n\n\n# initialize Chart\n\nchart = Chart(\n    width=\"640px\", height=\"360px\"\n)  # or Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.ACTUAL)\n# chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.BEGIN)\n# chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.END)\n# chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL)\n\n\n# add data to Chart\n\ndata = Data()\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/showcases/titanic/titanic.csv\"\n)\ndata.add_data_frame(data_frame)\nchart.animate(data)\n\n\n# add config to Chart\n\nchart.animate(\n    Config(\n        {\n            \"x\": \"Count\",\n            \"y\": \"Sex\",\n            \"label\": \"Count\",\n            \"title\": \"Passengers of the Titanic\",\n        }\n    )\n)\nchart.animate(\n    Config(\n        {\n            \"x\": [\"Count\", \"Survived\"],\n            \"label\": [\"Count\", \"Survived\"],\n            \"color\": \"Survived\",\n        }\n    )\n)\nchart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]}))\n\n\n# add style to Chart\n\nchart.animate(Style({\"title\": {\"fontSize\": 35}}))\n\n\n# display Chart with show or _repr_html_ method (display=DisplayTarget.MANUAL)\n\n# chart.show()\n# chart</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"environments/notebook/deepnote/","title":"Deepnote","text":""},{"location":"environments/notebook/deepnote/#features","title":"Features","text":"<p>The features of <code>ipyvizzu</code> that are available in <code>Deepnote</code> are marked with a green check.</p> <ul> <li> Change the url of <code>Vizzu</code> (<code>vizzu</code>)</li> <li> Change the width of the <code>Chart</code> (<code>width</code>)</li> <li> Change the height of the <code>Chart</code> (<code>height</code>)</li> <li> Use scroll into view (<code>scroll_into_view</code>=<code>True</code>)</li> </ul> <p>Dislay features:</p> <ul> <li> Display all animations after <code>_repr_html_</code> method called   (<code>display</code>=<code>DisplayTarget.MANUAL</code>)</li> <li> Display all animations after <code>show</code> method called   (<code>display</code>=<code>DisplayTarget.MANUAL</code>)</li> <li> Automatically display all animations after the first cell   (<code>display</code>=<code>DisplayTarget.BEGIN</code>)</li> <li> Automatically display all animations after the currently running cell   (<code>display</code>=<code>DisplayTarget.ACTUAL</code>)</li> <li> Automatically display all animations after the last running cell   (<code>display</code>=<code>DisplayTarget.END</code>)</li> <li> Rerun any cell without rerun the first cell   (<code>display</code>!=<code>DisplayTarget.MANUAL</code>)</li> </ul> <p>Check Chart settings chapter for more details.</p>"},{"location":"environments/notebook/deepnote/#live-example","title":"Live example","text":""},{"location":"environments/notebook/deepnote/#installation","title":"Installation","text":"<p>Place the following code into a notebook cell in order to install <code>ipyvizzu</code> (visit Installation chapter for more options and details).</p> <pre><code>!pip install ipyvizzu</code></pre>"},{"location":"environments/notebook/deepnote/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu</code> in <code>Deepnote</code> with the following sample.</p> <pre><code># import pandas and ipyvizzu\n\nimport pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style, DisplayTarget\n\n\n# initialize Chart\n\nchart = Chart(\n    width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL\n)\n\n\n# add data to Chart\n\ndata = Data()\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/showcases/titanic/titanic.csv\"\n)\ndata.add_data_frame(data_frame)\n\nchart.animate(data)\n\n\n# add config to Chart\n\nchart.animate(\n    Config(\n        {\n            \"x\": \"Count\",\n            \"y\": \"Sex\",\n            \"label\": \"Count\",\n            \"title\": \"Passengers of the Titanic\",\n        }\n    )\n)\nchart.animate(\n    Config(\n        {\n            \"x\": [\"Count\", \"Survived\"],\n            \"label\": [\"Count\", \"Survived\"],\n            \"color\": \"Survived\",\n        }\n    )\n)\nchart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]}))\n\n\n# add style to Chart\n\nchart.animate(Style({\"title\": {\"fontSize\": 35}}))\n\n\n# display Chart with show or _repr_html_ method (display=DisplayTarget.MANUAL)\n\nchart.show()\n# chart</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"environments/notebook/jupyterlab/","title":"JupyterLab","text":""},{"location":"environments/notebook/jupyterlab/#features","title":"Features","text":"<p>The features of <code>ipyvizzu</code> that are available in <code>JupyterLab</code> are marked with a green check.</p> <ul> <li> Change the url of <code>Vizzu</code> (<code>vizzu</code>)</li> <li> Change the width of the <code>Chart</code> (<code>width</code>)</li> <li> Change the height of the <code>Chart</code> (<code>height</code>)</li> <li> Use scroll into view (<code>scroll_into_view</code>=<code>True</code>)</li> </ul> <p>Dislay features:</p> <ul> <li> Display all animations after <code>_repr_html_</code> method called   (<code>display</code>=<code>DisplayTarget.MANUAL</code>)</li> <li> Display all animations after <code>show</code> method called   (<code>display</code>=<code>DisplayTarget.MANUAL</code>)</li> <li> Automatically display all animations after the first cell   (<code>display</code>=<code>DisplayTarget.BEGIN</code>)</li> <li> Automatically display all animations after the currently running cell   (<code>display</code>=<code>DisplayTarget.ACTUAL</code>)</li> <li> Automatically display all animations after the last running cell   (<code>display</code>=<code>DisplayTarget.END</code>)</li> <li> Rerun any cell without rerun the first cell   (<code>display</code>!=<code>DisplayTarget.MANUAL</code>)</li> </ul> <p>Check Chart settings chapter for more details.</p>"},{"location":"environments/notebook/jupyterlab/#installation","title":"Installation","text":"<p>Run the following command in your command line</p> <pre><code>pip install ipyvizzu</code></pre> <p>or place the following code into a notebook cell in order to install <code>ipyvizzu</code> (visit Installation chapter for more options and details).</p> <pre><code>!pip install ipyvizzu</code></pre>"},{"location":"environments/notebook/jupyterlab/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu</code> in <code>JupyterLab</code> with the following sample.</p> <pre><code># import pandas and ipyvizzu\n\nimport pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style, DisplayTarget\n\n\n# initialize Chart\n\nchart = Chart(\n    width=\"640px\", height=\"360px\"\n)  # or Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.ACTUAL)\n# chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.BEGIN)\n# chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.END)\n# chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL)\n\n\n# add data to Chart\n\ndata = Data()\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/showcases/titanic/titanic.csv\"\n)\ndata.add_data_frame(data_frame)\n\nchart.animate(data)\n\n\n# add config to Chart\n\nchart.animate(\n    Config(\n        {\n            \"x\": \"Count\",\n            \"y\": \"Sex\",\n            \"label\": \"Count\",\n            \"title\": \"Passengers of the Titanic\",\n        }\n    )\n)\nchart.animate(\n    Config(\n        {\n            \"x\": [\"Count\", \"Survived\"],\n            \"label\": [\"Count\", \"Survived\"],\n            \"color\": \"Survived\",\n        }\n    )\n)\nchart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]}))\n\n\n# add style to Chart\n\nchart.animate(Style({\"title\": {\"fontSize\": 35}}))\n\n\n# display Chart with show or _repr_html_ method (display=DisplayTarget.MANUAL)\n\n# chart.show()\n# chart</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"environments/notebook/jupyterlite/","title":"JupyterLite","text":""},{"location":"environments/notebook/jupyterlite/#features","title":"Features","text":"<p>The features of <code>ipyvizzu</code> that are available in <code>JupyterLite</code> are marked with a green check.</p> <ul> <li> Change the url of <code>Vizzu</code> (<code>vizzu</code>)</li> <li> Change the width of the <code>Chart</code> (<code>width</code>)</li> <li> Change the height of the <code>Chart</code> (<code>height</code>)</li> <li> Use scroll into view (<code>scroll_into_view</code>=<code>True</code>)</li> </ul> <p>Dislay features:</p> <ul> <li> Display all animations after <code>_repr_html_</code> method called   (<code>display</code>=<code>DisplayTarget.MANUAL</code>)</li> <li> Display all animations after <code>show</code> method called   (<code>display</code>=<code>DisplayTarget.MANUAL</code>)</li> <li> Automatically display all animations after the first cell   (<code>display</code>=<code>DisplayTarget.BEGIN</code>)</li> <li> Automatically display all animations after the currently running cell   (<code>display</code>=<code>DisplayTarget.ACTUAL</code>)</li> <li> Automatically display all animations after the last running cell   (<code>display</code>=<code>DisplayTarget.END</code>)</li> <li> Rerun any cell without rerun the first cell   (<code>display</code>!=<code>DisplayTarget.MANUAL</code>)</li> </ul> <p>Check Chart settings chapter for more details.</p>"},{"location":"environments/notebook/jupyterlite/#installation","title":"Installation","text":"<p>Place the following code into a notebook cell in order to install <code>ipyvizzu</code> (visit Installation chapter for more options and details).</p> <pre><code>import micropip\n\nawait micropip.install(\"ipyvizzu\")</code></pre>"},{"location":"environments/notebook/jupyterlite/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu</code> in <code>JupyterLite</code> with the following sample.</p> <pre><code># import pandas, js, asyncio, StringIO and ipyvizzu\n\nimport pandas as pd\nimport js, asyncio\nfrom io import StringIO\nfrom ipyvizzu import Chart, Data, Config, Style, DisplayTarget\n\n\n# initialize Chart\n\nchart = Chart(\n    width=\"640px\", height=\"360px\"\n)  # or Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.ACTUAL)\n# chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.BEGIN)\n# chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.END)\n# chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL)\n\n\n# add data to Chart\n# download data from\n# \"https://ipyvizzu.vizzuhq.com/0.15/showcases/titanic/titanic.csv\"\n# and place it in your JupyterLite workspace\n\nDB_NAME = \"JupyterLite Storage\"\n\n\nasync def get_contents(path):\n    \"\"\"use the IndexedDB API to acess JupyterLite's in-browser storage\n    for documentation purposes, the full names of the JS API objects are used.\n    see https://developer.mozilla.org/en-US/docs/Web/API/IDBRequest\n    \"\"\"\n    queue = asyncio.Queue(1)\n\n    IDBOpenDBRequest = js.self.indexedDB.open(DB_NAME)\n    IDBOpenDBRequest.onsuccess = (\n        IDBOpenDBRequest.onerror\n    ) = queue.put_nowait\n\n    await queue.get()\n\n    if IDBOpenDBRequest.result is None:\n        return None\n\n    IDBTransaction = IDBOpenDBRequest.result.transaction(\n        \"files\", \"readonly\"\n    )\n    IDBObjectStore = IDBTransaction.objectStore(\"files\")\n    IDBRequest = IDBObjectStore.get(path, \"key\")\n    IDBRequest.onsuccess = IDBRequest.onerror = queue.put_nowait\n\n    await queue.get()\n\n    return IDBRequest.result.to_py() if IDBRequest.result else None\n\n\ndata = Data()\ndata_csv = await get_contents(\"titanic.csv\")\ndata_frame = pd.read_csv(StringIO(data_csv[\"content\"]))\ndata.add_data_frame(data_frame)\n\nchart.animate(data)\n\n\n# add config to Chart\n\nchart.animate(\n    Config(\n        {\n            \"x\": \"Count\",\n            \"y\": \"Sex\",\n            \"label\": \"Count\",\n            \"title\": \"Passengers of the Titanic\",\n        }\n    )\n)\nchart.animate(\n    Config(\n        {\n            \"x\": [\"Count\", \"Survived\"],\n            \"label\": [\"Count\", \"Survived\"],\n            \"color\": \"Survived\",\n        }\n    )\n)\nchart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]}))\n\n\n# add style to Chart\n\nchart.animate(Style({\"title\": {\"fontSize\": 35}}))\n\n\n# display Chart with show or _repr_html_ method (display=DisplayTarget.MANUAL)\n\n# chart.show()\n# chart</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"environments/notebook/jupyternotebook/","title":"Jupyter Notebook","text":""},{"location":"environments/notebook/jupyternotebook/#features","title":"Features","text":"<p>The features of <code>ipyvizzu</code> that are available in <code>Jupyter Notebook</code> are marked with a green check.</p> <ul> <li> Change the url of <code>Vizzu</code> (<code>vizzu</code>)</li> <li> Change the width of the <code>Chart</code> (<code>width</code>)</li> <li> Change the height of the <code>Chart</code> (<code>height</code>)</li> <li> Use scroll into view (<code>scroll_into_view</code>=<code>True</code>)</li> </ul> <p>Dislay features:</p> <ul> <li> Display all animations after <code>_repr_html_</code> method called   (<code>display</code>=<code>DisplayTarget.MANUAL</code>)</li> <li> Display all animations after <code>show</code> method called   (<code>display</code>=<code>DisplayTarget.MANUAL</code>)</li> <li> Automatically display all animations after the first cell   (<code>display</code>=<code>DisplayTarget.BEGIN</code>)</li> <li> Automatically display all animations after the currently running cell   (<code>display</code>=<code>DisplayTarget.ACTUAL</code>)</li> <li> Automatically display all animations after the last running cell   (<code>display</code>=<code>DisplayTarget.END</code>)</li> <li> Rerun any cell without rerun the first cell   (<code>display</code>!=<code>DisplayTarget.MANUAL</code>)</li> </ul> <p>Check Chart settings chapter for more details.</p>"},{"location":"environments/notebook/jupyternotebook/#installation","title":"Installation","text":"<p>Run the following command in your command line</p> <pre><code>pip install ipyvizzu</code></pre> <p>or place the following code into a notebook cell in order to install <code>ipyvizzu</code> (visit Installation chapter for more options and details).</p> <pre><code>!pip install ipyvizzu</code></pre>"},{"location":"environments/notebook/jupyternotebook/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu</code> in <code>Jupyter Notebook</code> with the following sample.</p> <pre><code># import pandas and ipyvizzu\n\nimport pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style, DisplayTarget\n\n\n# initialize Chart\n\nchart = Chart(\n    width=\"640px\", height=\"360px\"\n)  # or Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.ACTUAL)\n# chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.BEGIN)\n# chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.END)\n# chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL)\n\n\n# add data to Chart\n\ndata = Data()\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/showcases/titanic/titanic.csv\"\n)\ndata.add_data_frame(data_frame)\n\nchart.animate(data)\n\n\n# add config to Chart\n\nchart.animate(\n    Config(\n        {\n            \"x\": \"Count\",\n            \"y\": \"Sex\",\n            \"label\": \"Count\",\n            \"title\": \"Passengers of the Titanic\",\n        }\n    )\n)\nchart.animate(\n    Config(\n        {\n            \"x\": [\"Count\", \"Survived\"],\n            \"label\": [\"Count\", \"Survived\"],\n            \"color\": \"Survived\",\n        }\n    )\n)\nchart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]}))\n\n\n# add style to Chart\n\nchart.animate(Style({\"title\": {\"fontSize\": 35}}))\n\n\n# display Chart with show or _repr_html_ method (display=DisplayTarget.MANUAL)\n\n# chart.show()\n# chart</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"environments/notebook/kaggle/","title":"Kaggle","text":""},{"location":"environments/notebook/kaggle/#features","title":"Features","text":"<p>The features of <code>ipyvizzu</code> that are available in <code>Kaggle</code> are marked with a green check.</p> <ul> <li> Change the url of <code>Vizzu</code> (<code>vizzu</code>)</li> <li> Change the width of the <code>Chart</code> (<code>width</code>)</li> <li> Change the height of the <code>Chart</code> (<code>height</code>)</li> <li> Use scroll into view (<code>scroll_into_view</code>=<code>True</code>)</li> </ul> <p>Dislay features:</p> <ul> <li> Display all animations after <code>_repr_html_</code> method called   (<code>display</code>=<code>DisplayTarget.MANUAL</code>)</li> <li> Display all animations after <code>show</code> method called   (<code>display</code>=<code>DisplayTarget.MANUAL</code>)</li> <li> Automatically display all animations after the first cell   (<code>display</code>=<code>DisplayTarget.BEGIN</code>)</li> <li> Automatically display all animations after the currently running cell   (<code>display</code>=<code>DisplayTarget.ACTUAL</code>)</li> <li> Automatically display all animations after the last running cell   (<code>display</code>=<code>DisplayTarget.END</code>)</li> <li> Rerun any cell without rerun the first cell   (<code>display</code>!=<code>DisplayTarget.MANUAL</code>)</li> </ul> <p>Check Chart settings chapter for more details.</p>"},{"location":"environments/notebook/kaggle/#live-example","title":"Live example","text":""},{"location":"environments/notebook/kaggle/#installation","title":"Installation","text":"<p>Place the following code into a notebook cell in order to install <code>ipyvizzu</code> (visit Installation chapter for more options and details).</p> <pre><code>!pip install ipyvizzu</code></pre>"},{"location":"environments/notebook/kaggle/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu</code> in <code>Kaggle</code> with the following sample.</p> <pre><code># import pandas and ipyvizzu\n\nimport pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style, DisplayTarget\n\n\n# initialize Chart\n\nchart = Chart(\n    width=\"640px\", height=\"360px\"\n)  # or Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.ACTUAL)\n# chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.BEGIN)\n# chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.END)\n# chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL)\n\n\n# add data to Chart\n\ndata = Data()\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/showcases/titanic/titanic.csv\"\n)\ndata.add_data_frame(data_frame)\n\nchart.animate(data)\n\n\n# add config to Chart\n\nchart.animate(\n    Config(\n        {\n            \"x\": \"Count\",\n            \"y\": \"Sex\",\n            \"label\": \"Count\",\n            \"title\": \"Passengers of the Titanic\",\n        }\n    )\n)\nchart.animate(\n    Config(\n        {\n            \"x\": [\"Count\", \"Survived\"],\n            \"label\": [\"Count\", \"Survived\"],\n            \"color\": \"Survived\",\n        }\n    )\n)\nchart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]}))\n\n\n# add style to Chart\n\nchart.animate(Style({\"title\": {\"fontSize\": 35}}))\n\n\n# display Chart with show or _repr_html_ method (display=DisplayTarget.MANUAL)\n\n# chart.show()\n# chart</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"environments/notebook/noteable/","title":"Noteable","text":""},{"location":"environments/notebook/noteable/#features","title":"Features","text":"<p>The features of <code>ipyvizzu</code> that are available in <code>Noteable</code> are marked with a green check.</p> <ul> <li> Change the url of <code>Vizzu</code> (<code>vizzu</code>)</li> <li> Change the width of the <code>Chart</code> (<code>width</code>)</li> <li> Change the height of the <code>Chart</code> (<code>height</code>)</li> <li> Use scroll into view (<code>scroll_into_view</code>=<code>True</code>)</li> </ul> <p>Dislay features:</p> <ul> <li> Display all animations after <code>_repr_html_</code> method called   (<code>display</code>=<code>DisplayTarget.MANUAL</code>)</li> <li> Display all animations after <code>show</code> method called   (<code>display</code>=<code>DisplayTarget.MANUAL</code>)</li> <li> Automatically display all animations after the first cell   (<code>display</code>=<code>DisplayTarget.BEGIN</code>)</li> <li> Automatically display all animations after the currently running cell   (<code>display</code>=<code>DisplayTarget.ACTUAL</code>)</li> <li> Automatically display all animations after the last running cell   (<code>display</code>=<code>DisplayTarget.END</code>)</li> <li> Rerun any cell without rerun the first cell   (<code>display</code>!=<code>DisplayTarget.MANUAL</code>)</li> </ul> <p>Check Chart settings chapter for more details.</p>"},{"location":"environments/notebook/noteable/#installation","title":"Installation","text":"<p>Place the following code into a notebook cell in order to install <code>ipyvizzu</code> (visit Installation chapter for more options and details).</p> <pre><code>!pip install ipyvizzu</code></pre>"},{"location":"environments/notebook/noteable/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu</code> in <code>Noteable</code> with the following sample.</p> <pre><code># import pandas and ipyvizzu\n\nimport pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style, DisplayTarget\n\n\n# initialize Chart\n\nchart = Chart(\n    width=\"640px\", height=\"360px\"\n)  # or Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.ACTUAL)\n# chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.BEGIN)\n# chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.END)\n# chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL)\n\n\n# add data to Chart\n\ndata = Data()\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/showcases/titanic/titanic.csv\"\n)\ndata.add_data_frame(data_frame)\n\nchart.animate(data)\n\n\n# add config to Chart\n\nchart.animate(\n    Config(\n        {\n            \"x\": \"Count\",\n            \"y\": \"Sex\",\n            \"label\": \"Count\",\n            \"title\": \"Passengers of the Titanic\",\n        }\n    )\n)\nchart.animate(\n    Config(\n        {\n            \"x\": [\"Count\", \"Survived\"],\n            \"label\": [\"Count\", \"Survived\"],\n            \"color\": \"Survived\",\n        }\n    )\n)\nchart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]}))\n\n\n# add style to Chart\n\nchart.animate(Style({\"title\": {\"fontSize\": 35}}))\n\n\n# display Chart with show or _repr_html_ method (display=DisplayTarget.MANUAL)\n\n# chart.show()\n# chart</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"environments/platform/","title":"App platforms","text":"<p><code>ipyvizzu</code> is available in the following App platforms. We would love to add more environments and examples, so if you miss anything from our list, please open an issue in our Github repo.</p> <ul> <li>Streamlit</li> <li>Flask</li> <li>Panel</li> <li>Mercury/mljar</li> <li>Voil\u00e0</li> </ul>"},{"location":"environments/platform/flask/","title":"Flask","text":""},{"location":"environments/platform/flask/#features","title":"Features","text":"<p>The features of <code>ipyvizzu</code> that are available in <code>Flask</code> are marked with a green check.</p> <ul> <li> Change the url of <code>Vizzu</code> (<code>vizzu</code>)</li> <li> Change the width of the <code>Chart</code> (<code>width</code>)</li> <li> Change the height of the <code>Chart</code> (<code>height</code>)</li> <li> Use scroll into view (<code>scroll_into_view</code>=<code>True</code>)</li> </ul> <p>Dislay features:</p> <ul> <li> Display all animations after <code>_repr_html_</code> method called   (<code>display</code>=<code>DisplayTarget.MANUAL</code>) *</li> <li> Display all animations after <code>show</code> method called   (<code>display</code>=<code>DisplayTarget.MANUAL</code>)</li> <li> Automatically display all animations after the first cell   (<code>display</code>=<code>DisplayTarget.BEGIN</code>)</li> <li> Automatically display all animations after the currently running cell   (<code>display</code>=<code>DisplayTarget.ACTUAL</code>)</li> <li> Automatically display all animations after the last running cell   (<code>display</code>=<code>DisplayTarget.END</code>)</li> <li> Rerun any cell without rerun the first cell   (<code>display</code>!=<code>DisplayTarget.MANUAL</code>)</li> </ul> <p>Check Chart settings chapter for more details.</p> <p>*you can display the <code>Chart</code> in other ways, see the sample below</p>"},{"location":"environments/platform/flask/#installation","title":"Installation","text":"<p>Run the following command in your command line in order to install <code>ipyvizzu</code> (visit Installation chapter for more options and details).</p> <pre><code>pip install ipyvizzu flask</code></pre>"},{"location":"environments/platform/flask/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu</code> in <code>Flask</code> with the following sample.</p> <pre><code># import flask, pandas and ipyvizzu\n\nimport pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style, DisplayTarget\n\nfrom flask import Flask, render_template\n\n\n# initialize Chart\n\nchart = Chart(\n    width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL\n)\n\n\n# add data to Chart\n\ndata = Data()\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/showcases/titanic/titanic.csv\"\n)\ndata.add_data_frame(data_frame)\n\nchart.animate(data)\n\n\n# add config to Chart\n\nchart.animate(\n    Config(\n        {\n            \"x\": \"Count\",\n            \"y\": \"Sex\",\n            \"label\": \"Count\",\n            \"title\": \"Passengers of the Titanic\",\n        }\n    )\n)\nchart.animate(\n    Config(\n        {\n            \"x\": [\"Count\", \"Survived\"],\n            \"label\": [\"Count\", \"Survived\"],\n            \"color\": \"Survived\",\n        }\n    )\n)\nchart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]}))\n\n\n# add style to Chart\n\nchart.animate(Style({\"title\": {\"fontSize\": 35}}))\n\n\n# display Chart\n\napp = Flask(__name__)\nhtml = chart._repr_html_()\n\n\n@app.route(\"/\")\ndef vizzu():\n    return render_template(\"vizzu.html\", mychart=html)</code></pre> <p>Place the above code blocks into a python file (for example called <code>application.py</code>), create the html template (<code>templates/vizzu.html</code>) with the following content</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n &lt;body&gt;\n  &lt;div class=\"container\"&gt;\n   &lt;iframe frameborder=\"0\" height=\"480px\" scrolling=\"no\" src=\"data:text/html, {{ mychart }}\" width=\"800px\"&gt;\n   &lt;/iframe&gt;\n  &lt;/div&gt;\n &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>and run the following command in your command line in order to try it.</p> <pre><code>flask --app application run</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"environments/platform/mercury/","title":"Mercury/mljar","text":""},{"location":"environments/platform/mercury/#features","title":"Features","text":"<p>The features of <code>ipyvizzu</code> that are available in <code>Mercury/mljar</code> are marked with a green check.</p> <ul> <li> Change the url of <code>Vizzu</code> (<code>vizzu</code>)</li> <li> Change the width of the <code>Chart</code> (<code>width</code>)</li> <li> Change the height of the <code>Chart</code> (<code>height</code>)</li> <li> Use scroll into view (<code>scroll_into_view</code>=<code>True</code>)</li> </ul> <p>Dislay features:</p> <ul> <li> Display all animations after <code>_repr_html_</code> method called   (<code>display</code>=<code>DisplayTarget.MANUAL</code>)</li> <li> Display all animations after <code>show</code> method called   (<code>display</code>=<code>DisplayTarget.MANUAL</code>)</li> <li> Automatically display all animations after the first cell   (<code>display</code>=<code>DisplayTarget.BEGIN</code>)</li> <li> Automatically display all animations after the currently running cell   (<code>display</code>=<code>DisplayTarget.ACTUAL</code>)</li> <li> Automatically display all animations after the last running cell   (<code>display</code>=<code>DisplayTarget.END</code>)</li> <li> Rerun any cell without rerun the first cell   (<code>display</code>!=<code>DisplayTarget.MANUAL</code>)</li> </ul> <p>Check Chart settings chapter for more details.</p>"},{"location":"environments/platform/mercury/#live-example","title":"Live example","text":""},{"location":"environments/platform/mercury/#installation","title":"Installation","text":"<p>Add <code>ipyvizzu</code> to <code>requirements.txt</code>.</p> <pre><code>python-dotenv\npandas\nmljar-mercury\nipyvizzu</code></pre>"},{"location":"environments/platform/mercury/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu</code> in <code>Mercury/mljar</code> with the following sample.</p> <pre><code># configure application\n\n---\ntitle: ipyvizzu demo\ndescription: ipyvizzu mercury demo\nshow-code: False\nparams:\nparams:\n    gender:\n        input: select\n        label: select the gender\n        choices: [male, female]\n        multi: False\n---</code></pre> <pre><code># configure default choice\n\ngender = \"male\"</code></pre> <pre><code># import pandas and ipyvizzu\n\nimport pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style, DisplayTarget\n\n\n# initialize Chart\n\nchart = Chart(\n    width=\"640px\", height=\"360px\"\n)  # or Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.ACTUAL)\n# chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.BEGIN)\n# chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.END)\n# chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL)\n\n\n# add data to Chart\n\ndata = Data()\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/showcases/titanic/titanic.csv\"\n)\ndata.add_data_frame(data_frame)\n\nchart.animate(data)\n\n\n# add config to Chart\n\nchart.animate(\n    Config(\n        {\n            \"x\": \"Count\",\n            \"y\": \"Sex\",\n            \"label\": \"Count\",\n            \"title\": \"Passengers of the Titanic\",\n        }\n    )\n)\nchart.animate(\n    Config(\n        {\n            \"x\": [\"Count\", \"Survived\"],\n            \"label\": [\"Count\", \"Survived\"],\n            \"color\": \"Survived\",\n        }\n    )\n)\nchart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]}))\n\n\n# add style to Chart\n\nchart.animate(Style({\"title\": {\"fontSize\": 35}}))\n\n\n# filter data by the selected gender to Chart\n\ndata_filter = Data.filter(f\"record['Sex'] == '{gender}'\")\nchart.animate(data_filter)\n\n\n# display Chart with show method (display=DisplayTarget.MANUAL)\n\n# chart.show()</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"environments/platform/panel/","title":"Panel","text":""},{"location":"environments/platform/panel/#features","title":"Features","text":"<p>The features of <code>ipyvizzu</code> that are available in <code>Panel</code> are marked with a green check.</p> <ul> <li> Change the url of <code>Vizzu</code> (<code>vizzu</code>)</li> <li> Change the width of the <code>Chart</code> (<code>width</code>)</li> <li> Change the height of the <code>Chart</code> (<code>height</code>)</li> <li> Use scroll into view (<code>scroll_into_view</code>=<code>True</code>)</li> </ul> <p>Dislay features:</p> <ul> <li> Display all animations after <code>_repr_html_</code> method called   (<code>display</code>=<code>DisplayTarget.MANUAL</code>)</li> <li> Display all animations after <code>show</code> method called   (<code>display</code>=<code>DisplayTarget.MANUAL</code>)</li> <li> Automatically display all animations after the first cell   (<code>display</code>=<code>DisplayTarget.BEGIN</code>)</li> <li> Automatically display all animations after the currently running cell   (<code>display</code>=<code>DisplayTarget.ACTUAL</code>)</li> <li> Automatically display all animations after the last running cell   (<code>display</code>=<code>DisplayTarget.END</code>)</li> <li> Rerun any cell without rerun the first cell   (<code>display</code>!=<code>DisplayTarget.MANUAL</code>)</li> </ul> <p>Check Chart settings chapter for more details.</p>"},{"location":"environments/platform/panel/#installation","title":"Installation","text":"<p>Run the following command in your command line in order to install <code>ipyvizzu</code> (visit Installation chapter for more options and details).</p> <pre><code>pip install ipyvizzu panel</code></pre>"},{"location":"environments/platform/panel/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu</code> in <code>Panel</code> with the following sample.</p> <pre><code># import panel, pandas and ipyvizzu\n\nimport panel as pn\nimport pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style, DisplayTarget\n\n\ndef create_chart():\n    # initialize chart\n\n    chart = Chart(\n        width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL\n    )\n\n    # create and add data to Chart\n\n    data = Data()\n    data_frame = pd.read_csv(\n        \"https://ipyvizzu.vizzuhq.com/0.15/showcases/titanic/titanic.csv\"\n    )\n    data.add_data_frame(data_frame)\n\n    chart.animate(data)\n\n    # add config to Chart\n\n    chart.animate(\n        Config(\n            {\n                \"x\": \"Count\",\n                \"y\": \"Sex\",\n                \"label\": \"Count\",\n                \"title\": \"Passengers of the Titanic\",\n            }\n        )\n    )\n    chart.animate(\n        Config(\n            {\n                \"x\": [\"Count\", \"Survived\"],\n                \"label\": [\"Count\", \"Survived\"],\n                \"color\": \"Survived\",\n            }\n        )\n    )\n    chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]}))\n\n    # add style to Chart\n\n    chart.animate(Style({\"title\": {\"fontSize\": 35}}))\n\n    # return Chart\n\n    return chart\n\n\n# create Chart\n\nCHART = create_chart()\n\n\n# display Chart\n\npn.extension(sizing_mode=\"stretch_width\", template=\"fast\")\n\npn.state.template.param.update(\n    title=\"ipyvizzu\",\n)\n\npn.pane.Markdown(\n    \"\"\"\n# Panel demo with ipyvizzu\n\"\"\"\n).servable()\n\npn.pane.HTML(CHART, height=370, sizing_mode=\"stretch_both\").servable()</code></pre> <p>Place the above code blocks into a python file (for example called <code>ipyvizzu_example.py</code>) and run the following command in your command line in order to try it.</p> <pre><code>panel serve ipyvizzu_example.py --autoreload</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"environments/platform/streamlit/","title":"Streamlit","text":"<p>There is a new <code>Streamlit</code> component, streamlit-vizzu, that allow you to interact with an <code>ipyvizzu</code> chart within a <code>Streamlit</code> app without the chart being redrawn on every interaction.</p>"},{"location":"environments/platform/streamlit/#features","title":"Features","text":"<p>The features of <code>ipyvizzu</code> that are available in <code>Streamlit</code> are marked with a green check.</p> <ul> <li> Change the url of <code>Vizzu</code> (<code>vizzu</code>)</li> <li> Change the width of the <code>Chart</code> (<code>width</code>)</li> <li> Change the height of the <code>Chart</code> (<code>height</code>)</li> <li> Use scroll into view (<code>scroll_into_view</code>=<code>True</code>)</li> </ul> <p>Dislay features:</p> <ul> <li> Display all animations after <code>_repr_html_</code> method called   (<code>display</code>=<code>DisplayTarget.MANUAL</code>)</li> <li> Display all animations after <code>show</code> method called   (<code>display</code>=<code>DisplayTarget.MANUAL</code>)</li> <li> Automatically display all animations after the first cell   (<code>display</code>=<code>DisplayTarget.BEGIN</code>)</li> <li> Automatically display all animations after the currently running cell   (<code>display</code>=<code>DisplayTarget.ACTUAL</code>)</li> <li> Automatically display all animations after the last running cell   (<code>display</code>=<code>DisplayTarget.END</code>)</li> <li> Rerun any cell without rerun the first cell   (<code>display</code>!=<code>DisplayTarget.MANUAL</code>)</li> </ul> <p>Check Chart settings chapter for more details.</p>"},{"location":"environments/platform/streamlit/#installation","title":"Installation","text":"<p>Run the following command in your command line in order to install <code>ipyvizzu</code> (visit Installation chapter for more options and details).</p> <pre><code>pip install ipyvizzu streamlit</code></pre>"},{"location":"environments/platform/streamlit/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu</code> in <code>Streamlit</code> with the following sample.</p> <pre><code># import streamlit, pandas and ipyvizzu\n\nfrom streamlit.components.v1 import html\nimport pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style, DisplayTarget\n\n\ndef create_chart():\n    # initialize Chart\n\n    chart = Chart(\n        width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL\n    )\n\n    # create and add data to Chart\n\n    data = Data()\n    data_frame = pd.read_csv(\n        \"https://ipyvizzu.vizzuhq.com/0.15/showcases/titanic/titanic.csv\"\n    )\n    data.add_data_frame(data_frame)\n\n    chart.animate(data)\n\n    # add config to Chart\n\n    chart.animate(\n        Config(\n            {\n                \"x\": \"Count\",\n                \"y\": \"Sex\",\n                \"label\": \"Count\",\n                \"title\": \"Passengers of the Titanic\",\n            }\n        )\n    )\n    chart.animate(\n        Config(\n            {\n                \"x\": [\"Count\", \"Survived\"],\n                \"label\": [\"Count\", \"Survived\"],\n                \"color\": \"Survived\",\n            }\n        )\n    )\n    chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]}))\n\n    # add style to Chart\n\n    chart.animate(Style({\"title\": {\"fontSize\": 35}}))\n\n    # return generated html code\n\n    return chart._repr_html_()\n\n\n# generate Chart's html code\n\nCHART = create_chart()\n\n\n# display Chart\n\nhtml(CHART, width=650, height=370)</code></pre> <p>Place the above code blocks into a python file (for example called <code>ipyvizzu_example.py</code>) and run the following command in your command line in order to try it.</p> <pre><code>streamlit run ipyvizzu_example.py</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"environments/platform/voila/","title":"Voil\u00e0","text":""},{"location":"environments/platform/voila/#features","title":"Features","text":"<p>The features of <code>ipyvizzu</code> that are available in <code>Voil\u00e0</code> are marked with a green check.</p> <ul> <li> Change the url of <code>Vizzu</code> (<code>vizzu</code>)</li> <li> Change the width of the <code>Chart</code> (<code>width</code>)</li> <li> Change the height of the <code>Chart</code> (<code>height</code>)</li> <li> Use scroll into view (<code>scroll_into_view</code>=<code>True</code>)</li> </ul> <p>Dislay features:</p> <ul> <li> Display all animations after <code>_repr_html_</code> method called   (<code>display</code>=<code>DisplayTarget.MANUAL</code>)</li> <li> Display all animations after <code>show</code> method called   (<code>display</code>=<code>DisplayTarget.MANUAL</code>)</li> <li> Automatically display all animations after the first cell   (<code>display</code>=<code>DisplayTarget.BEGIN</code>)</li> <li> Automatically display all animations after the currently running cell   (<code>display</code>=<code>DisplayTarget.ACTUAL</code>)</li> <li> Automatically display all animations after the last running cell   (<code>display</code>=<code>DisplayTarget.END</code>)</li> <li> Rerun any cell without rerun the first cell   (<code>display</code>!=<code>DisplayTarget.MANUAL</code>)</li> </ul> <p>Check Chart settings chapter for more details.</p>"},{"location":"environments/platform/voila/#installation","title":"Installation","text":"<p>Run the following command in your command line</p> <pre><code>pip install ipyvizzu voila</code></pre> <p>or place the following code into a notebook cell in order to install <code>ipyvizzu</code> (visit Installation chapter for more options and details).</p> <pre><code>!pip install ipyvizzu</code></pre>"},{"location":"environments/platform/voila/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu</code> in <code>Voil\u00e0</code> with the following sample.</p> <pre><code># import pandas and ipyvizzu\n\nimport pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style, DisplayTarget\n\n\n# initialize Chart\n\nchart = Chart(\n    width=\"640px\", height=\"360px\"\n)  # or Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.ACTUAL)\n# chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.BEGIN)\n# chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.END)\n# chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL)\n\n\n# add data to Chart\n\ndata = Data()\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/showcases/titanic/titanic.csv\"\n)\ndata.add_data_frame(data_frame)\n\nchart.animate(data)\n\n\n# add config to Chart\n\nchart.animate(\n    Config(\n        {\n            \"x\": \"Count\",\n            \"y\": \"Sex\",\n            \"label\": \"Count\",\n            \"title\": \"Passengers of the Titanic\",\n        }\n    )\n)\nchart.animate(\n    Config(\n        {\n            \"x\": [\"Count\", \"Survived\"],\n            \"label\": [\"Count\", \"Survived\"],\n            \"color\": \"Survived\",\n        }\n    )\n)\nchart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]}))\n\n\n# add style to Chart\n\nchart.animate(Style({\"title\": {\"fontSize\": 35}}))\n\n\n# display Chart with show or _repr_html_ method (display=DisplayTarget.MANUAL)\n\n# chart.show()\n# chart</code></pre> <p>Place the above code blocks into notebook cells in a notebook file (for example called <code>ipyvizzu_example.ipynb</code>) and run the following command in your command line in order to try it.</p> <pre><code>voila ipyvizzu_example.ipynb</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"examples/","title":"Examples","text":"<p>The <code>ipyvizzu</code> examples are grouped into four categories.</p> <ul> <li>Preset charts: Examples of the well-known chart types   <code>ipyvizzu</code> offers a shorthand for, as described in the   Chart presets chapter of the Tutorial.</li> <li>Analytical operations: A collection of   examples to help you apply animated transitions that show another facet of the   data under analysis. Also a great source of inspiration for finding the next   chart when you're building a story.</li> <li>Static charts: Examples of well-known chart types   configured with the original chart type-agnostic syntax of <code>ipyvizzu</code>.</li> </ul>"},{"location":"examples/analytical_operations/","title":"Analytical Operations","text":"<pre> src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/drilldown/Area_Area.mp4' type='video/mp4'&gt;Drill down\n src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/sum/Area_100percent_Stacked_Area.mp4' type='video/mp4'&gt;Sum\n src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/compare/Area_100percent_Stacked_Area.mp4' type='video/mp4'&gt;Compare\n src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/split/Area_Polar_Stacked_Area.mp4' type='video/mp4'&gt;Split\n src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/stretch_to_proportion/Area_Stacked_Area.mp4' type='video/mp4'&gt;Stretch to proportion\n src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/distribute/ExistingMeasureArea_Stacked_Area.mp4' type='video/mp4'&gt;Distribute\n src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/filter/Area_Polar_Stacked_Area.mp4' type='video/mp4'&gt;Filter\n src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/change_dimension/Area_Polar_Stacked_Area.mp4' type='video/mp4'&gt;Change dimension\n src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/misc/Donut_Donut_to_Coxcomb.mp4' type='video/mp4'&gt;Miscellaneous\n</pre>"},{"location":"examples/analytical_operations/change_dimension/","title":"Change dimension","text":"<p> src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/change_dimension/Area_Polar_Stacked_Area.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/change_dimension/Area_Stacked_Area.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/change_dimension/Column_Stacked_Column.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/change_dimension/DotPlot_Dot_plot_1.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/change_dimension/DotPlot_Dot_plot_2.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/change_dimension/DotPlot_Polar_Dot_plot.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/change_dimension/Line_Line.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/change_dimension/Line_Polar_Line.mp4' type='video/mp4'&gt;</p>"},{"location":"examples/analytical_operations/change_dimension/Area_Polar_Stacked_Area/","title":"Polar Stacked Area","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>replace the Dimension and the Measure on the Y-axis with new ones</li> <li>and the Dimension on the Color channel with a new one</li> <li>+ here is an example how you can add a color palette to the Style</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": {\n                    \"set\": [\"Country\", \"Value 2 (+)\"],\n                    \"range\": {\"min\": \"-20%\"},\n                },\n                \"color\": \"Country\",\n            },\n            \"geometry\": \"area\",\n            \"coordSystem\": \"polar\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"y\": [\"Joy factors\", \"Value 3 (+)\"],\n                \"color\": \"Joy factors\",\n            }\n        }\n    ),\n    Style(\n        {\n            \"plot\": {\n                \"marker\": {\n                    \"colorPalette\": \"#ef675aFF #6d8cccFF #e6cf99FF #9c50abFF\"\n                }\n            }\n        }\n    ),\n)</code></pre>"},{"location":"examples/analytical_operations/change_dimension/Area_Stacked_Area/","title":"Stacked Area","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>replace the Dimension and the Measure on the Y-axis with new ones</li> <li>and the Dimension on the Color channel with a new one</li> <li>+ here is an example how you can add a color palette to the Style</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": [\"Country\", \"Value 2 (+)\"],\n                \"color\": \"Country\",\n            },\n            \"geometry\": \"area\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"y\": [\"Joy factors\", \"Value 3 (+)\"],\n                \"color\": \"Joy factors\",\n            }\n        }\n    ),\n    Style(\n        {\n            \"plot\": {\n                \"marker\": {\n                    \"colorPalette\": \"#ef675aFF #6d8cccFF #e6cf99FF #9c50abFF\"\n                }\n            }\n        }\n    ),\n)</code></pre>"},{"location":"examples/analytical_operations/change_dimension/Column_Stacked_Column/","title":"Stacked Column","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>replace the Dimension on the X-axis with a new one</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": [\"Country\", \"Value 2 (+)\"],\n                \"color\": \"Country\",\n            }\n        }\n    )\n)\n\nchart.animate(Config({\"channels\": {\"x\": \"Joy factors\"}}))</code></pre>"},{"location":"examples/analytical_operations/change_dimension/DotPlot_Dot_plot_1/","title":"Dot plot 1","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_8.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>replace the Dimension on the X-axis with a new one</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": \"Value 2 (+)\",\n                \"color\": \"Country\",\n            },\n            \"geometry\": \"circle\",\n        }\n    )\n)\n\nchart.animate(Config({\"channels\": {\"x\": \"Joy factors\"}}))</code></pre>"},{"location":"examples/analytical_operations/change_dimension/DotPlot_Dot_plot_2/","title":"Dot plot 2","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>replace the Dimension on the Color channel with a new one</li> <li>+ here is an example how you can add a color palette to the Style</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": \"Value 2 (+)\",\n                \"color\": \"Country\",\n            },\n            \"geometry\": \"circle\",\n        }\n    )\n)\n\nchart.animate(\n    Config({\"channels\": {\"color\": \"Joy factors\"}}),\n    Style(\n        {\n            \"plot\": {\n                \"marker\": {\n                    \"colorPalette\": \"#ef675aFF #6d8cccFF #e6cf99FF #9c50abFF\"\n                }\n            }\n        }\n    ),\n)</code></pre>"},{"location":"examples/analytical_operations/change_dimension/DotPlot_Polar_Dot_plot/","title":"Polar Dot plot","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>replace the Dimension on the Color channel with a new one</li> <li>+ here is an example how you can add a color palette to the Style</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": \"Value 2 (+)\",\n                \"color\": \"Country\",\n            },\n            \"geometry\": \"circle\",\n            \"coordSystem\": \"polar\",\n        }\n    )\n)\n\nchart.animate(\n    Config({\"channels\": {\"color\": \"Joy factors\"}}),\n    Style(\n        {\n            \"plot\": {\n                \"marker\": {\n                    \"colorPalette\": \"#ef675aFF #6d8cccFF #e6cf99FF #9c50abFF\"\n                }\n            }\n        }\n    ),\n)</code></pre>"},{"location":"examples/analytical_operations/change_dimension/Line_Line/","title":"Line","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>replace the Dimension on the Color channel with a new one</li> <li>+ here is an example how you can add a color palette to the Style</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": \"Value 2 (+)\",\n                \"color\": \"Joy factors\",\n            },\n            \"geometry\": \"line\",\n        }\n    ),\n    Style(\n        {\n            \"plot\": {\n                \"marker\": {\n                    \"colorPalette\": \"#ef675aFF #6d8cccFF #e6cf99FF #9c50abFF\"\n                }\n            }\n        }\n    ),\n)\n\nchart.animate(\n    Config({\"channels\": {\"color\": \"Country\"}}),\n    Style({\"plot\": {\"marker\": {\"colorPalette\": None}}}),\n)</code></pre>"},{"location":"examples/analytical_operations/change_dimension/Line_Polar_Line/","title":"Polar Line","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>replace the Dimension on the Color channel with a new one</li> <li>+ here is an example how you can add a color palette to the Style</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": \"Value 2 (+)\",\n                \"color\": \"Joy factors\",\n            },\n            \"geometry\": \"line\",\n            \"coordSystem\": \"polar\",\n        }\n    ),\n    Style(\n        {\n            \"plot\": {\n                \"marker\": {\n                    \"colorPalette\": \"#ef675aFF #6d8cccFF #e6cf99FF #9c50abFF\"\n                }\n            }\n        }\n    ),\n)\n\nchart.animate(\n    Config({\"channels\": {\"color\": \"Country\"}}),\n    Style({\"plot\": {\"marker\": {\"colorPalette\": None}}}),\n)</code></pre>"},{"location":"examples/analytical_operations/compare/","title":"Compare","text":"<p> src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/compare/Area_100percent_Stacked_Area.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/compare/Area_Polar_Split_Area.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/compare/Area_Polar_Stacked_Area.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/compare/Area_Split_Stacked_Area.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/compare/Area_Stacked_Area.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/compare/Column_100percent_Stacked_Column.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/compare/Column_Groupped_Column_1.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/compare/Column_Groupped_Column_2.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/compare/Column_Split_Stacked_Column_1.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/compare/Column_Split_Stacked_Column_2.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/compare/Column_Stacked_Column_1.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/compare/Column_Stacked_Column_2.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/compare/Coxcomb_Coxcomb_1.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/compare/Coxcomb_Coxcomb_2.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/compare/Line_Line.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/compare/Line_Polar_Line.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/compare/Stream_Stacked_Stream.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/compare/Waterfall_Waterfall.mp4' type='video/mp4'&gt;</p>"},{"location":"examples/analytical_operations/compare/Area_100percent_Stacked_Area/","title":"100% Stacked Area","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>remove the Dimension from Y-axis</li> <li>set the Align parameter from 'stretch' to 'min'</li> <li>switch the Geometry from Area to Line</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": [\"Value 2 (+)\", \"Country\"],\n                \"color\": \"Country\",\n            },\n            \"geometry\": \"area\",\n            \"align\": \"stretch\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\"y\": \"Value 2 (+)\"},\n            \"geometry\": \"line\",\n            \"align\": \"min\",\n        }\n    )\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/compare/Area_Polar_Split_Area/","title":"Polar Split Area","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_8.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>remove the Dimension from Y-axis a</li> <li>set the Split parameter from True to False</li> <li>switch the Geometry from Area to Line</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": [\"Value 1 (+)\", \"Country\"],\n                \"color\": \"Country\",\n            },\n            \"geometry\": \"area\",\n            \"split\": True,\n            \"coordSystem\": \"polar\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\"y\": \"Value 1 (+)\"},\n            \"geometry\": \"line\",\n            \"split\": False,\n        }\n    )\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/compare/Area_Polar_Stacked_Area/","title":"Polar Stacked Area","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>remove the Dimension from Y-axis</li> <li>switch the Geometry from Area to Line</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": [\"Value 2 (+)\", \"Country\"],\n                \"color\": \"Country\",\n            },\n            \"geometry\": \"area\",\n            \"coordSystem\": \"polar\",\n        }\n    )\n)\n\nchart.animate(\n    Config({\"channels\": {\"y\": \"Value 2 (+)\"}, \"geometry\": \"line\"})\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/compare/Area_Split_Stacked_Area/","title":"Split Stacked Area","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_8.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>remove the Dimension from Y-axis a</li> <li>set the Split parameter from True to False</li> <li>switch the Geometry from Area to Line</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": [\"Value 2 (+)\", \"Country\"],\n                \"color\": \"Country\",\n            },\n            \"geometry\": \"area\",\n            \"split\": True,\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\"y\": \"Value 2 (+)\"},\n            \"geometry\": \"line\",\n            \"split\": False,\n        }\n    )\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/compare/Area_Stacked_Area/","title":"Stacked Area","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>remove the Dimension from Y-axis</li> <li>switch the Geometry from Area to Line</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": [\"Value 2 (+)\", \"Country\"],\n                \"color\": \"Country\",\n            },\n            \"geometry\": \"area\",\n        }\n    )\n)\n\nchart.animate(\n    Config({\"channels\": {\"y\": \"Value 2 (+)\"}, \"geometry\": \"line\"})\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/compare/Column_100percent_Stacked_Column/","title":"100% Stacked Column","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_4.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>move the Dimension from the Y-axis to the X-axis, behind the one there (group)</li> <li>set the Align parameter from 'stretch' to 'min'</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": [\"Country\", \"Value 2 (+)\"],\n                \"color\": \"Country\",\n            },\n            \"align\": \"stretch\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": [\"Year\", \"Country\"],\n                \"y\": \"Value 2 (+)\",\n            },\n            \"align\": \"min\",\n        }\n    )\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/compare/Column_Groupped_Column_1/","title":"Groupped Column 1","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_4.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>move the 2nd Dimension from X-axis to the Y-axis</li> <li>add the Measure to the Label channel too</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": [\"Year\", \"Country\"],\n                \"y\": \"Value 2 (+)\",\n                \"color\": \"Country\",\n            },\n            \"geometry\": \"rectangle\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": [\"Country\", \"Value 2 (+)\"],\n                \"label\": \"Value 2 (+)\",\n            },\n            \"split\": True,\n        }\n    ),\n    Style(\n        {\n            \"plot\": {\n                \"marker\": {\n                    \"label\": {\"position\": \"top\", \"fontSize\": \"0.6em\"}\n                }\n            }\n        }\n    ),\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/compare/Column_Groupped_Column_2/","title":"Groupped Column 2","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_8.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>move the 2nd Dimension from X-axis to the Y-axis</li> <li>add the Measure to the Label channel too</li> <li>set the Split parameter to True</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": [\"Country\", \"Year\"],\n                \"y\": \"Value 2 (+)\",\n                \"color\": \"Country\",\n            }\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": [\"Country\", \"Value 2 (+)\"],\n                \"label\": \"Value 2 (+)\",\n            },\n            \"split\": True,\n        }\n    ),\n    Style(\n        {\n            \"plot\": {\n                \"marker\": {\n                    \"label\": {\"position\": \"top\", \"fontSize\": \"0.6em\"}\n                }\n            }\n        }\n    ),\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/compare/Column_Split_Stacked_Column_1/","title":"Split Stacked Column 1","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>move the dimension from the Y-axis to the X-axis, in front of the one there</li> <li>None the Label channel</li> <li>set the Split parameter to False</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": [\"Country\", \"Value 2 (+)\"],\n                \"color\": \"Country\",\n                \"label\": \"Value 2 (+)\",\n            },\n            \"split\": True,\n        }\n    ),\n    Style(\n        {\n            \"plot\": {\n                \"marker\": {\n                    \"label\": {\"position\": \"top\", \"fontSize\": \"0.6em\"}\n                }\n            }\n        }\n    ),\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": [\"Year\", \"Country\"],\n                \"y\": \"Value 2 (+)\",\n                \"label\": None,\n            },\n            \"split\": False,\n        }\n    )\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/compare/Column_Split_Stacked_Column_2/","title":"Split Stacked Column 2","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>move the dimension from the Y-axis to the X-axis, behind the one there</li> <li>None the Label channel</li> <li>set the Split parameter to False</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": [\"Country\", \"Value 2 (+)\"],\n                \"color\": \"Country\",\n                \"label\": \"Value 2 (+)\",\n            },\n            \"split\": True,\n        }\n    ),\n    Style(\n        {\n            \"plot\": {\n                \"marker\": {\n                    \"label\": {\"position\": \"top\", \"fontSize\": \"0.6em\"}\n                }\n            }\n        }\n    ),\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": [\"Country\", \"Year\"],\n                \"y\": \"Value 2 (+)\",\n                \"label\": None,\n            },\n            \"split\": False,\n        }\n    )\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/compare/Column_Stacked_Column_1/","title":"Stacked Column 1","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_4.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>move the Dimension from the Y-axis to the X-axis, behind the one there (group)</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": [\"Country\", \"Value 2 (+)\"],\n                \"color\": \"Country\",\n            }\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\"channels\": {\"x\": [\"Year\", \"Country\"], \"y\": \"Value 2 (+)\"}}\n    )\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/compare/Column_Stacked_Column_2/","title":"Stacked Column 2","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_8.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>remove the Dimension from the Y-axis</li> <li>switch the Geometry from Rectangle to Line</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": [\"Country\", \"Value 2 (+)\"],\n                \"color\": \"Country\",\n            }\n        }\n    )\n)\n\nchart.animate(\n    Config({\"channels\": {\"y\": \"Value 2 (+)\"}, \"geometry\": \"line\"})\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/compare/Coxcomb_Coxcomb_1/","title":"Coxcomb 1","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_8.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>move the 2nd Dimension from X-axis to the Y-axis</li> <li>set the Split parameter to True</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": [\"Country\", \"Year\"],\n                \"y\": {\"set\": \"Value 2 (+)\", \"range\": {\"min\": \"-20%\"}},\n                \"color\": \"Country\",\n            },\n            \"coordSystem\": \"polar\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": [\"Country\", \"Value 2 (+)\"],\n            },\n            \"split\": True,\n        }\n    )\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/compare/Coxcomb_Coxcomb_2/","title":"Coxcomb 2","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_4.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>move the Dimension from the Y-axis to the X-axis, behind the one there (group)</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": [\"Country\", \"Value 2 (+)\"],\n                \"color\": \"Country\",\n            },\n            \"coordSystem\": \"polar\",\n        }\n    ),\n    Style({\"plot\": {\"marker\": {\"rectangleSpacing\": \"0.1em\"}}}),\n)\n\nchart.animate(\n    Config(\n        {\"channels\": {\"x\": [\"Year\", \"Country\"], \"y\": \"Value 2 (+)\"}}\n    )\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/compare/Line_Line/","title":"Line","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_8.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>add the Dimension which is on the Color channel to the Y-axis too</li> <li>switch the Geometry from Line to Area</li> <li>set the Split parameter to True</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": \"Value 2 (+)\",\n                \"color\": \"Country\",\n            },\n            \"geometry\": \"line\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\"y\": [\"Value 2 (+)\", \"Country\"]},\n            \"geometry\": \"area\",\n            \"split\": True,\n        }\n    )\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/compare/Line_Polar_Line/","title":"Polar Line","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_8.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>add the Dimension which is on the Color channel to the Y-axis too</li> <li>switch the Geometry from Line to Area</li> <li>set the Split parameter to True</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": \"Value 2 (+)\",\n                \"color\": \"Country\",\n            },\n            \"geometry\": \"line\",\n            \"coordSystem\": \"polar\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"y\": {\n                    \"set\": [\"Country\", \"Value 2 (+)\"],\n                    \"range\": {\"min\": \"-20%\"},\n                }\n            },\n            \"geometry\": \"area\",\n            \"split\": True,\n        }\n    )\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/compare/Stream_Stacked_Stream/","title":"Stacked Stream","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/music_industry_history_1.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <p>This is a 2-step animation:</p> <p>1st:</p> <ul> <li>set the Split parameter to True</li> <li>set the Align parameter to 'min'</li> </ul> <p>2nd:</p> <ul> <li>move the Dimension from the Y-axis to the X-axis (before the other)</li> <li>set the Split parameter to False</li> </ul> <pre><code>method = \"\"\"\n      let year = parseFloat(event.data.text);\n      if (!event.data.text.includes(\"$\") &amp;&amp; !isNaN(year) &amp;&amp; year % 5 != 0)\n        event.preventDefault();\n    \"\"\"\nhandler = chart.on(\"plot-axis-label-draw\", method)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": [\"Revenue [$]\", \"Format\"],\n                \"color\": \"Format\",\n            },\n            \"geometry\": \"area\",\n            \"align\": \"center\",\n        }\n    ),\n    Style(\n        {\"plot\": {\"yAxis\": {\"label\": {\"numberScale\": \"K, M, B, T\"}}}}\n    ),\n)\n\nchart.animate(Config({\"align\": \"min\", \"split\": True}))\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\"x\": [\"Format\", \"Year\"], \"y\": \"Revenue [$]\"},\n            \"split\": False,\n        }\n    )\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/compare/Waterfall_Waterfall/","title":"Waterfall","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>remove the Dimension from the Y-axis</li> <li>+ here is an example of how you can set a colorGradient palette in the Style</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": [\"Year\", \"Value 5 (+/-)\"],\n                \"color\": {\n                    \"set\": \"Value 5 (+/-)\",\n                    \"range\": {\"min\": \"-45\", \"max\": \"45\"},\n                },\n                \"label\": \"Value 5 (+/-)\",\n            },\n            \"legend\": \"color\",\n        }\n    ),\n    Style(\n        {\n            \"plot\": {\n                \"marker\": {\n                    \"colorGradient\": \"#ac1727 0,#e36c56 0.15,#f4b096 0.35,#d5d7d9 0.5,#9fbffa 0.65,#6389ec 0.85,#3d51b8 1\",\n                    \"label\": {\"position\": \"top\"},\n                }\n            }\n        }\n    ),\n)\n\nchart.animate(Config({\"channels\": {\"y\": {\"set\": [\"Value 5 (+/-)\"]}}}))\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/distribute/","title":"Distribute","text":"<p> src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/distribute/ExistingMeasureArea_Stacked_Area.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/distribute/ExistingMeasureBubble_Bubble.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/distribute/ExistingMeasureBubble_Stacked_Bubble_1.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/distribute/ExistingMeasureBubble_Stacked_Bubble_2.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/distribute/ExistingMeasureColumn_Stacked_Column.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/distribute/ExistingMeasureCoxcomb_Coxcomb.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/distribute/ExistingMeasureDotPlot_Dot_plot.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/distribute/ExistingMeasureScatterPlot_Scatter_plot.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/distribute/ExistingMeasureScatterPlot_Split_Scatter_plot.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/distribute/ExistingMeasureTreemap_Stacked_Treemap.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/distribute/NewMeasureColumn_Column.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/distribute/NewMeasureColumn_Split_Stacked_Column.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/distribute/NewMeasureColumn_Stacked_Column.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/distribute/NewMeasureDotPlot_Dot_plot_1.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/distribute/NewMeasureDotPlot_Dot_plot_2.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/distribute/NewMeasureDotPlot_Dot_plot_3.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/distribute/NewMeasureDotPlot_Dot_plot_4.mp4' type='video/mp4'&gt;</p>"},{"location":"examples/analytical_operations/distribute/ExistingMeasureArea_Stacked_Area/","title":"Stacked Area","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>remove the Dimension from the Y-axis</li> <li>switch the Geometry from Area to Circle</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": [\"Country\", \"Value 2 (+)\"],\n                \"color\": \"Country\",\n            },\n            \"geometry\": \"area\",\n        }\n    )\n)\n\nchart.animate(\n    Config({\"channels\": {\"y\": \"Value 2 (+)\"}, \"geometry\": \"circle\"})\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/distribute/ExistingMeasureBubble_Bubble/","title":"Bubble","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_14.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>move the Measure from the Size channel to the Y-axis</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"noop\": [\"Year\", \"Country\"],\n                \"size\": \"Value 2 (+)\",\n            },\n            \"geometry\": \"circle\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"noop\": [\"Year\", \"Country\"],\n                \"y\": \"Value 2 (+)\",\n                \"size\": None,\n            }\n        }\n    )\n)</code></pre>"},{"location":"examples/analytical_operations/distribute/ExistingMeasureBubble_Stacked_Bubble_1/","title":"Stacked Bubble 1","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_4.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>move the Size channel's Dimension to the X-axis</li> <li>move the Measure to the Y-axis</li> <li>duplicate the Dimension in the Color channel onto the Y-axis</li> <li>None the Label channel</li> <li>switch the Geometry from Circle to Rectangle</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"color\": \"Country\",\n                \"size\": [\"Year\", \"Value 2 (+)\"],\n                \"label\": \"Value 2 (+)\",\n            },\n            \"geometry\": \"circle\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": {\n                    \"set\": [\"Country\", \"Value 2 (+)\"],\n                    \"range\": {\"min\": \"-20%\"},\n                },\n                \"size\": None,\n                \"label\": None,\n            },\n            \"geometry\": \"rectangle\",\n            \"coordSystem\": \"polar\",\n        }\n    ),\n    Style({\"plot\": {\"marker\": {\"rectangleSpacing\": \"0.1em\"}}}),\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/distribute/ExistingMeasureBubble_Stacked_Bubble_2/","title":"Stacked Bubble 2","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_4.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>move the Size channel's Dimension to the X-axis</li> <li>move the Measure to the Y-axis</li> <li>duplicate the Dimension in the Color channel onto the Y-axis</li> <li>None the Label channel</li> <li>switch the Geometry from Circle to Rectangle</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"color\": \"Country\",\n                \"size\": [\"Year\", \"Value 2 (+)\"],\n                \"label\": \"Value 2 (+)\",\n            },\n            \"geometry\": \"circle\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": [\"Country\", \"Value 2 (+)\"],\n                \"size\": None,\n                \"label\": None,\n            },\n            \"geometry\": \"rectangle\",\n        }\n    )\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/distribute/ExistingMeasureColumn_Stacked_Column/","title":"Stacked Column","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_8.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>remove the Dimension from the Y-axis</li> <li>switch the Geometry from Rectangle to Circle</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": [\"Country\", \"Value 2 (+)\"],\n                \"color\": \"Country\",\n            }\n        }\n    )\n)\n\nchart.animate(\n    Config({\"channels\": {\"y\": \"Value 2 (+)\"}, \"geometry\": \"circle\"})\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/distribute/ExistingMeasureCoxcomb_Coxcomb/","title":"Coxcomb","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_8.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>remove the Dimension from the Y-axis</li> <li>switch the Geometry from Rectangle to Circle</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": {\n                    \"set\": [\"Country\", \"Value 2 (+)\"],\n                    \"range\": {\"min\": \"-20%\"},\n                },\n                \"color\": \"Country\",\n            },\n            \"coordSystem\": \"polar\",\n        }\n    ),\n    Style({\"plot\": {\"marker\": {\"rectangleSpacing\": \"0.1em\"}}}),\n)\n\nchart.animate(\n    Config({\"channels\": {\"y\": \"Value 2 (+)\"}, \"geometry\": \"circle\"})\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/distribute/ExistingMeasureDotPlot_Dot_plot/","title":"Dot plot","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_8.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>replace the Dimension on the Y-axis with the Measure from the X-axis</li> <li>the other Dimension, which is on the no-operation (Noop) channel, is added to   the X-axis also</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Value 3 (+)\",\n                \"y\": \"Country\",\n                \"noop\": \"Year\",\n                \"color\": \"Country\",\n            },\n            \"geometry\": \"circle\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\"x\": \"Year\", \"y\": \"Value 3 (+)\"},\n            \"orientation\": \"horizontal\",\n        }\n    )\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/distribute/ExistingMeasureScatterPlot_Scatter_plot/","title":"Scatter plot","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <p>This Vizzu animation has 4 simple steps (4 animates):</p> <p>1st: replace the Measure on the X-axis to the Dimension whitch is on the Lightness channel</p> <p>2nd: back</p> <p>3rd: replace the Measure on the Y-axis to the Dimension whitch is on the Noop channel</p> <p>4th: back</p> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Value 5 (+/-)\",\n                \"y\": \"Value 6 (+/-)\",\n                \"noop\": \"Joy factors\",\n                \"lightness\": \"Year\",\n            },\n            \"geometry\": \"circle\",\n        }\n    )\n)\n\nchart.animate(\n    Config({\"channels\": {\"x\": \"Year\"}, \"orientation\": \"horizontal\"})\n)\n\nchart.animate(Config({\"channels\": {\"x\": \"Value 5 (+/-)\"}}))\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\"y\": \"Joy factors\", \"noop\": None},\n            \"orientation\": \"vertical\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\"channels\": {\"y\": \"Value 6 (+/-)\", \"noop\": \"Joy factors\"}}\n    )\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/distribute/ExistingMeasureScatterPlot_Split_Scatter_plot/","title":"Split Scatter plot","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>remove the Dimension from the X-axis</li> <li>set the Split parameter from True to False</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": [\"Value 1 (+)\", \"Country\"],\n                \"y\": \"Value 3 (+)\",\n                \"noop\": \"Year\",\n                \"color\": \"Country\",\n            },\n            \"geometry\": \"circle\",\n            \"split\": True,\n            \"orientation\": \"vertical\",\n        }\n    )\n)\n\nchart.animate(\n    Config({\"channels\": {\"x\": \"Value 1 (+)\"}, \"split\": False})\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/distribute/ExistingMeasureTreemap_Stacked_Treemap/","title":"Stacked Treemap","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_4.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>move the Size channel's Dimension to the X-axis</li> <li>move the Measure to the Y-axis</li> <li>duplicate the Dimension in the Color channel onto the Y-axis</li> <li>None the Label channel</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"color\": \"Country\",\n                \"size\": [\"Year\", \"Value 2 (+)\"],\n                \"label\": \"Year\",\n            }\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": [\"Country\", \"Value 2 (+)\"],\n                \"size\": None,\n                \"label\": None,\n            }\n        }\n    ),\n    Style({\"plot\": {\"marker\": {\"colorPalette\": None}}}),\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/distribute/NewMeasureColumn_Column/","title":"Column","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_8.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>move the Dimension from the X-axis &amp; replace the Measure with it on the Label   channel</li> <li>add this Dimension to the Color channel too</li> <li>add a new Measure to the X-axis</li> <li>switch the Geometry from Rectangle (default) to Circe</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Country\",\n                \"y\": \"Value 2 (+)\",\n                \"label\": \"Value 2 (+)\",\n            }\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Value 4 (+/-)\",\n                \"color\": \"Country\",\n                \"label\": \"Country\",\n            },\n            \"geometry\": \"circle\",\n        }\n    )\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/distribute/NewMeasureColumn_Split_Stacked_Column/","title":"Split Stacked Column","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_4.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>move the Dimension from the X-axis &amp; replace the Measure with it on the Label   channel</li> <li>remove the Dimension from the Y-axis</li> <li>add a new Measure to the X-axis</li> <li>switch the Geometry from Rectangle (default) to Circe</li> <li>set the Split parameter from True to False</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": [\"Country\", \"Value 2 (+)\"],\n                \"color\": \"Country\",\n                \"label\": \"Value 2 (+)\",\n            },\n            \"split\": True,\n        }\n    ),\n    Style(\n        {\n            \"plot\": {\n                \"marker\": {\n                    \"label\": {\"position\": \"top\", \"fontSize\": \"0.6em\"}\n                }\n            }\n        }\n    ),\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Value 5 (+/-)\",\n                \"y\": \"Value 2 (+)\",\n                \"label\": \"Year\",\n            },\n            \"geometry\": \"circle\",\n            \"split\": False,\n        }\n    )\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/distribute/NewMeasureColumn_Stacked_Column/","title":"Stacked Column","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_4.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>move the Dimension from the X-axis &amp; replace the Measure with it on the Label   channel</li> <li>remove the Dimension from the Y-axis</li> <li>add a new Measure to the X-axis</li> <li>switch the Geometry from Rectangle (default) to Circe</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": [\"Country\", \"Value 2 (+)\"],\n                \"color\": \"Country\",\n            }\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Value 5 (+/-)\",\n                \"y\": \"Value 2 (+)\",\n                \"label\": \"Year\",\n            },\n            \"geometry\": \"circle\",\n        }\n    )\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/distribute/NewMeasureDotPlot_Dot_plot_1/","title":"Dot plot 1","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/IMDB_data_data_1974_1990.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>move the Dimension from Y-axis to the no-operation (Noop) channel</li> <li>add a Measure to the Y-axis</li> <li>set the Split parameter to True</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": {\"set\": \"Index\", \"range\": {\"max\": \"105%\"}},\n            },\n            \"geometry\": \"circle\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"y\": {\"set\": \"IMDb Rating\", \"range\": {\"max\": \"105%\"}},\n                \"noop\": \"Index\",\n            },\n            \"orientation\": \"vertical\",\n            \"split\": True,\n        }\n    )\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/distribute/NewMeasureDotPlot_Dot_plot_2/","title":"Dot plot 2","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>add a new Measure to the X-axis</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"y\": \"Value 2 (+)\",\n                \"noop\": \"Year\",\n                \"color\": \"Country\",\n            },\n            \"geometry\": \"circle\",\n        }\n    )\n)\n\nchart.animate(Config({\"channels\": {\"x\": \"Value 3 (+)\"}}))</code></pre>"},{"location":"examples/analytical_operations/distribute/NewMeasureDotPlot_Dot_plot_3/","title":"Dot plot 3","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_4.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>replace the Dimension on the Y-axis to a new Measure</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Value 1 (+)\",\n                \"y\": \"Country\",\n                \"noop\": [\"Year\"],\n                \"color\": \"Country\",\n            },\n            \"geometry\": \"circle\",\n        }\n    )\n)\n\nchart.animate(Config({\"channels\": {\"y\": \"Value 3 (+)\"}}))\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/distribute/NewMeasureDotPlot_Dot_plot_4/","title":"Dot plot 4","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>add a new Measure to the X-axis</li> <li>move the Dimension from the no-operation (Noop) channel to the Label channel</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Joy factors\",\n                \"y\": \"Value 5 (+/-)\",\n                \"color\": \"Joy factors\",\n                \"noop\": \"Country_code\",\n            },\n            \"geometry\": \"circle\",\n        }\n    ),\n    Style(\n        {\n            \"plot\": {\n                \"marker\": {\n                    \"colorPalette\": \"#ef675aFF #6d8cccFF #e6cf99FF #9c50abFF\"\n                }\n            }\n        }\n    ),\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": [\"Joy factors\", \"Value 6 (+/-)\"],\n                \"label\": \"Country_code\",\n                \"noop\": None,\n            }\n        }\n    )\n)</code></pre>"},{"location":"examples/analytical_operations/drilldown/","title":"Drill down","text":"<p> src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/drilldown/Area_Area.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/drilldown/Area_Polar_Area.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/drilldown/Bubble_Bubble_and_distribution.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/drilldown/Column_Column_1.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/drilldown/Column_Column_2.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/drilldown/Column_Column_3.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/drilldown/Column_Column_4.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/drilldown/Column_Stacked_Column.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/drilldown/Donut_Donut.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/drilldown/Line_Line_1.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/drilldown/Line_Line_2.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/drilldown/Line_Polar_Line_1.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/drilldown/Line_Polar_Line_2.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/drilldown/Radial_Radial.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/drilldown/ScatterPlot_Scatter_plot.mp4' type='video/mp4'&gt;</p>"},{"location":"examples/analytical_operations/drilldown/Area_Area/","title":"Area","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>add a new Dimension to the Y-axis and the Color channel</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\"x\": \"Year\", \"y\": \"Value 2 (+)\"},\n            \"geometry\": \"area\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"y\": [\"Value 2 (+)\", \"Country\"],\n                \"color\": \"Country\",\n            }\n        }\n    )\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/drilldown/Area_Polar_Area/","title":"Polar Area","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>add a new Dimension to the Y-axis and the Color channel</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\"x\": \"Year\", \"y\": \"Value 2 (+)\"},\n            \"geometry\": \"area\",\n            \"coordSystem\": \"polar\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"y\": [\"Value 2 (+)\", \"Country\"],\n                \"color\": \"Country\",\n            }\n        }\n    )\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/drilldown/Bubble_Bubble_and_distribution/","title":"Bubble and distribution","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_8.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <p>This Vizzu animation consist of 2 steps (animates):</p> <p>1st:</p> <ul> <li>add a new Sub Dimension to the Size channel</li> </ul> <p>2nd:</p> <ul> <li>add two new Measures to the X and Y-axes</li> <li>move the new Sub Dimension to the No-Operation (Noop) channel</li> <li>None the Label channel</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"color\": \"Country\",\n                \"size\": \"Value 2 (+)\",\n                \"label\": \"Value 2 (+)\",\n            },\n            \"geometry\": \"circle\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\"size\": [\"Year\", \"Value 2 (+)\"]},\n            \"geometry\": \"circle\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Value 1 (+)\",\n                \"y\": \"Value 3 (+)\",\n                \"noop\": \"Year\",\n                \"size\": \"Value 2 (+)\",\n                \"label\": None,\n            }\n        }\n    )\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/drilldown/Column_Column_1/","title":"Column 1","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_4.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>add 2 new Dimensions to the X-axis</li> <li>and one of them to the Color channel too</li> </ul> <pre><code>chart.animate(\n    Config({\"channels\": {\"y\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\"}})\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": [\"Year\", \"Country\"],\n                \"y\": \"Value 2 (+)\",\n                \"color\": \"Country\",\n                \"label\": None,\n            }\n        }\n    )\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/drilldown/Column_Column_2/","title":"Column 2","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_4.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>add a new Dimension to the X-axis</li> <li>and another to the Y axis and the Color channel</li> </ul> <pre><code>chart.animate(\n    Config({\"channels\": {\"y\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\"}})\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": [\"Country\", \"Value 2 (+)\"],\n                \"color\": \"Country\",\n                \"label\": None,\n            }\n        }\n    )\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/drilldown/Column_Column_3/","title":"Column 3","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_8.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>add a new Dimension to the X-axis.</li> </ul> <pre><code>chart.animate(\n    Config({\"channels\": {\"y\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\"}})\n)\n\nchart.animate(Config({\"channels\": {\"x\": \"Country\"}}))\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/drilldown/Column_Column_4/","title":"Column 4","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_8.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>add 2 new Dimensions to the Y-axis and the Color channel</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Country\",\n                \"y\": \"Value 2 (+)\",\n                \"label\": \"Value 2 (+)\",\n            }\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"y\": [\"Value 2 (+)\", \"Joy factors\"],\n                \"color\": \"Joy factors\",\n            }\n        }\n    ),\n    Style(\n        {\n            \"plot\": {\n                \"marker\": {\n                    \"colorPalette\": \"#ef675aFF #6d8cccFF #e6cf99FF #9c50abFF\"\n                }\n            }\n        }\n    ),\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/drilldown/Column_Stacked_Column/","title":"Stacked Column","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_8.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>add a new Dimension to the X-axis</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"y\": [\"Country\", \"Value 2 (+)\"],\n                \"color\": \"Country\",\n                \"label\": \"Value 2 (+)\",\n            }\n        }\n    )\n)\n\nchart.animate(Config({\"channels\": {\"x\": \"Year\", \"label\": None}}))\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/drilldown/Donut_Donut/","title":"Donut","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_8.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <p>This Vizzu animation consist of 2 steps (animates):</p> <p>1st:</p> <ul> <li>move the Dimension from X-axis to the Y-axis</li> <li>add a new Dimension to the X-axis</li> <li>remove the Measure from the label channel</li> </ul> <p>2nd:</p> <ul> <li>move the Measure from X to Y-axis</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": [\"Country\", \"Value 2 (+)\"],\n                \"y\": {\"range\": {\"min\": \"-200%\"}},\n                \"color\": \"Country\",\n                \"label\": \"Value 2 (+)\",\n            },\n            \"coordSystem\": \"polar\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": [\"Year\", \"Value 2 (+)\"],\n                \"y\": {\"set\": \"Country\", \"range\": {\"min\": \"-30%\"}},\n                \"label\": None,\n            }\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": {\n                    \"set\": [\"Country\", \"Value 2 (+)\"],\n                    \"range\": {\"min\": \"-30%\"},\n                },\n            }\n        }\n    ),\n    Style({\"plot\": {\"marker\": {\"rectangleSpacing\": \"0.1em\"}}}),\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/drilldown/Line_Line_1/","title":"Line 1","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>add a new Dimension to the Color channel</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\"x\": \"Year\", \"y\": \"Value 2 (+)\"},\n            \"geometry\": \"line\",\n        }\n    )\n)\n\nchart.animate(Config({\"channels\": {\"color\": \"Country\"}}))\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/drilldown/Line_Line_2/","title":"Line 2","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>add a new Dimension to the Y-axis &amp; the Color channel</li> <li>switch the Geometry from Line to Area</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\"x\": \"Year\", \"y\": \"Value 3 (+)\"},\n            \"geometry\": \"line\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"y\": [\"Country\", \"Value 3 (+)\"],\n                \"color\": \"Country\",\n            },\n            \"geometry\": \"area\",\n        }\n    )\n)</code></pre>"},{"location":"examples/analytical_operations/drilldown/Line_Polar_Line_1/","title":"Polar Line 1","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>add a new Dimension to the Y-axis &amp; the Color channel</li> <li>switch the Geometry from Line to Area</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\"x\": \"Year\", \"y\": \"Value 3 (+)\"},\n            \"geometry\": \"line\",\n            \"coordSystem\": \"polar\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"y\": [\"Country\", \"Value 3 (+)\"],\n                \"color\": \"Country\",\n            },\n            \"geometry\": \"area\",\n        }\n    )\n)</code></pre>"},{"location":"examples/analytical_operations/drilldown/Line_Polar_Line_2/","title":"Polar Line 2","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>add a new Dimension to the Color channel</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\"x\": \"Year\", \"y\": \"Value 2 (+)\"},\n            \"geometry\": \"line\",\n            \"coordSystem\": \"polar\",\n        }\n    )\n)\n\nchart.animate(Config({\"channels\": {\"color\": \"Country\"}}))\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/drilldown/Radial_Radial/","title":"Radial","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_8.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>add 2 new Dimensions to the Y-axis and the Color channel</li> <li>remove the Measure from the Label channel</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Value 2 (+)\",\n                \"y\": {\"set\": \"Country\", \"range\": {\"min\": \"-30%\"}},\n                \"label\": \"Value 2 (+)\",\n            },\n            \"coordSystem\": \"polar\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": [\"Value 2 (+)\", \"Joy factors\"],\n                \"color\": \"Joy factors\",\n                \"label\": None,\n            }\n        }\n    ),\n    Style(\n        {\n            \"plot\": {\n                \"marker\": {\n                    \"colorPalette\": \"#ef675aFF #6d8cccFF #e6cf99FF #9c50abFF\"\n                }\n            }\n        }\n    ),\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/drilldown/ScatterPlot_Scatter_plot/","title":"Scatter plot","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_14.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>add a new Dimension to the no-operation (Noop) channel</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"y\": \"Value 4 (+/-)\",\n                \"x\": \"Value 2 (+)\",\n                \"color\": \"Country\",\n                \"label\": \"Country\",\n            },\n            \"geometry\": \"circle\",\n        }\n    )\n)\n\nchart.animate(Config({\"channels\": {\"noop\": \"Year\", \"label\": None}}))</code></pre>"},{"location":"examples/analytical_operations/filter/","title":"Filter","text":"<p> src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/filter/Area_Polar_Stacked_Area.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/filter/Area_Stacked_Area.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/filter/Line_Line.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/filter/Line_Polar_Line.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/filter/Stream_Stream_1.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/filter/Stream_Stream_2.mp4' type='video/mp4'&gt;</p>"},{"location":"examples/analytical_operations/filter/Area_Polar_Stacked_Area/","title":"Polar Stacked Area","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_8.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>filter the Diemsion data series which is on the Y-axis</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": [\"Value 2 (+)\", \"Country_code\"],\n                \"color\": \"Country_code\",\n            },\n            \"geometry\": \"area\",\n            \"coordSystem\": \"polar\",\n        }\n    )\n)\n\nchart.animate(\n    data.filter(\n        \"\"\"\n  (record) =&gt;\n  record[\"Country_code\"] == \"FR\" || record[\"Country_code\"] == \"CY\"\n  \"\"\"\n    ),\n    Config({}),\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/filter/Area_Stacked_Area/","title":"Stacked Area","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_8.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>filter the Diemsion data series which is on the Y-axis</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": [\"Year\"],\n                \"y\": [\"Value 2 (+)\", \"Country_code\"],\n                \"color\": \"Country_code\",\n            },\n            \"geometry\": \"area\",\n        }\n    )\n)\n\nchart.animate(\n    data.filter(\n        \"\"\"\n  (record) =&gt;\n  record[\"Country_code\"] == \"FR\" || record[\"Country_code\"] == \"CY\"\n  \"\"\"\n    ),\n    Config({}),\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/filter/Line_Line/","title":"Line","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_8.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>filter the Diemsion data series which is on the Color channel</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": \"Value 3 (+)\",\n                \"color\": \"Country_code\",\n            },\n            \"geometry\": \"line\",\n        }\n    )\n)\n\nchart.animate(\n    data.filter(\n        \"\"\"\n  (record) =&gt;\n  record[\"Country_code\"] == \"CY\" || record[\"Country_code\"] == \"ES\"\n  \"\"\"\n    ),\n    Config({}),\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/filter/Line_Polar_Line/","title":"Polar Line","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_8.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>filter the Diemsion data series which is on the Color channel</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": \"Value 3 (+)\",\n                \"color\": \"Country_code\",\n            },\n            \"geometry\": \"line\",\n            \"coordSystem\": \"polar\",\n        }\n    )\n)\n\nchart.animate(\n    data.filter(\n        \"\"\"\n  (record) =&gt;\n  record[\"Country_code\"] == \"CY\" || record[\"Country_code\"] == \"ES\"\n  \"\"\"\n    ),\n    Config({}),\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/filter/Stream_Stream_1/","title":"Stream 1","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/music_industry_history_1.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>filter the Diemsion data series on the Y-axis step-by-step, combined with   their dominant time period on Year data series</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": [\"Year\"],\n                \"y\": [\"Revenue [$]\", \"Format\"],\n                \"color\": \"Format\",\n            },\n            \"geometry\": \"area\",\n            \"align\": \"center\",\n        }\n    ),\n    Style(\n        {\"plot\": {\"yAxis\": {\"label\": {\"numberScale\": \"K, M, B, T\"}}}}\n    ),\n)\n\nchart.animate(\n    data.filter(\n        \"\"\"\n  (record) =&gt;\n  (record.Format == \"Tapes\" || record.Format == \"Vinyl\") &amp;&amp;\n  record[\"Year\"] &lt;= 1989\n  \"\"\"\n    ),\n    Config({}),\n)\n\nmethod = \"\"\"\n      let year = parseFloat(event.data.text);\n      if (!event.data.text.includes(\"$\") &amp;&amp; !isNaN(year) &amp;&amp; year % 5 != 0)\n        event.preventDefault();\n    \"\"\"\nhandler = chart.on(\"plot-axis-label-draw\", method)\n\nchart.animate(\n    data.filter(\n        \"\"\"\n  (record) =&gt;\n  (record.Format == \"Tapes\" ||\n  record.Format == \"Cassette\" ||\n  record.Format == \"Vinyl\") &amp;&amp;\n  record[\"Year\"] &lt;= 1999\n  \"\"\"\n    ),\n    Config({}),\n)\n\nchart.animate(\n    data.filter(\n        \"\"\"\n  (record) =&gt;\n  record.Format == \"DVD\" ||\n  record.Format == \"Other\" ||\n  record.Format == \"Tapes\" ||\n  record.Format == \"Cassette\" ||\n  record.Format == \"Vinyl\" ||\n  record.Format == \"CD\"\n  \"\"\"\n    ),\n    Config({}),\n)\n\nchart.animate(\n    data.filter(\n        \"\"\"\n  (record) =&gt;\n  record.Format == \"DVD\" ||\n  record.Format == \"Other\" ||\n  record.Format == \"Tapes\" ||\n  record.Format == \"Download\" ||\n  record.Format == \"Cassette\" ||\n  record.Format == \"Vinyl\" ||\n  record.Format == \"CD\"\n  \"\"\"\n    ),\n    Config({}),\n)\n\nchart.animate(\n    data.filter(\n        \"\"\"\n  (record) =&gt;\n  record.Format == \"DVD\" ||\n  record.Format == \"Other\" ||\n  record.Format == \"Tapes\" ||\n  record.Format == \"Download\" ||\n  record.Format == \"Streaming\" ||\n  record.Format == \"Cassette\" ||\n  record.Format == \"Vinyl\" ||\n  record.Format == \"CD\"\n  \"\"\"\n    ),\n    Config({}),\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/filter/Stream_Stream_2/","title":"Stream 2","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/music_industry_history_1.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>fix the X-axis-range</li> <li>filter the Diemsion data series on the Y-axis step-by-step</li> </ul> <pre><code>method = \"\"\"\n      let year = parseFloat(event.data.text);\n      if (!event.data.text.includes(\"$\") &amp;&amp; !isNaN(year) &amp;&amp; year % 5 != 0)\n        event.preventDefault();\n    \"\"\"\nhandler = chart.on(\"plot-axis-label-draw\", method)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": {\"set\": \"Year\", \"range\": {\"max\": \"48\"}},\n                \"y\": [\"Revenue [$]\", \"Format\"],\n                \"color\": \"Format\",\n            },\n            \"geometry\": \"area\",\n            \"align\": \"center\",\n        }\n    ),\n    Style(\n        {\"plot\": {\"yAxis\": {\"label\": {\"numberScale\": \"K, M, B, T\"}}}}\n    ),\n)\n\nchart.animate(\n    data.filter(\n        \"\"\"\n  (record) =&gt;\n  record.Format == \"Tapes\" || record.Format == \"Vinyl\"\n  \"\"\"\n    ),\n    Config({}),\n)\n\nchart.animate(\n    data.filter(\n        \"\"\"\n  (record) =&gt;\n  record.Format == \"Tapes\" ||\n  record.Format == \"Cassette\" ||\n  record.Format == \"Vinyl\"\n  \"\"\"\n    ),\n    Config({}),\n)\n\nchart.animate(\n    data.filter(\n        \"\"\"\n  (record) =&gt;\n  record.Format == \"DVD\" ||\n  record.Format == \"Tapes\" ||\n  record.Format == \"Cassette\" ||\n  record.Format == \"Vinyl\" ||\n  record.Format == \"CD\"\n  \"\"\"\n    ),\n    Config({}),\n)\n\nchart.animate(\n    data.filter(\n        \"\"\"\n  (record) =&gt;\n  record.Format == \"DVD\" ||\n  record.Format == \"Other\" ||\n  record.Format == \"Tapes\" ||\n  record.Format == \"Cassette\" ||\n  record.Format == \"Vinyl\" ||\n  record.Format == \"CD\"\n  \"\"\"\n    ),\n    Config({}),\n)\n\nchart.animate(\n    data.filter(\n        \"\"\"\n  (record) =&gt;\n  record.Format == \"DVD\" ||\n  record.Format == \"Other\" ||\n  record.Format == \"Tapes\" ||\n  record.Format == \"Download\" ||\n  record.Format == \"Cassette\" ||\n  record.Format == \"Vinyl\" ||\n  record.Format == \"CD\"\n  \"\"\"\n    ),\n    Config({}),\n)\n\nchart.animate(\n    data.filter(\n        \"\"\"\n  (record) =&gt;\n  record.Format == \"DVD\" ||\n  record.Format == \"Other\" ||\n  record.Format == \"Tapes\" ||\n  record.Format == \"Download\" ||\n  record.Format == \"Streaming\" ||\n  record.Format == \"Cassette\" ||\n  record.Format == \"Vinyl\" ||\n  record.Format == \"CD\"\n  \"\"\"\n    ),\n    Config({}),\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/misc/","title":"Miscellaneous","text":"<p> src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/misc/Donut_Donut_to_Coxcomb.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/misc/Marimekko_Marimekko_Orientation.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/misc/Pie_From_Pie_to_Donut.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/misc/Polar_Make_Space_with_Polar.mp4' type='video/mp4'&gt;</p>"},{"location":"examples/analytical_operations/misc/Donut_Donut_to_Coxcomb/","title":"Donut to Coxcomb","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>add a new Measure to the Y-axis</li> <li>change the range of the Y-axis to disappear empty circle from the center</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": [\"Value 2 (+)\", \"Country\"],\n                \"y\": {\"range\": {\"min\": \"-200%\"}},\n                \"color\": \"Country\",\n                \"label\": \"Value 2 (+)\",\n            },\n            \"coordSystem\": \"polar\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": [\"Value 2 (+)\", \"Country\"],\n                \"y\": {\"set\": \"Value 3 (+)\", \"range\": {\"min\": \"0\"}},\n            }\n        }\n    )\n)</code></pre>"},{"location":"examples/analytical_operations/misc/Marimekko_Marimekko_Orientation/","title":"Marimekko Orientation","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_4.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>change the orientation from 'horizontal' to 'vertical'</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": [\"Country\", \"Value 2 (+)\"],\n                \"y\": [\"Joy factors\", \"Value 3 (+)\"],\n                \"color\": \"Joy factors\",\n                \"label\": \"Country\",\n                \"lightness\": \"Country\",\n            },\n            \"align\": \"stretch\",\n            \"orientation\": \"horizontal\",\n        }\n    )\n)\n\nchart.animate(Config({\"orientation\": \"vertical\"}))</code></pre>"},{"location":"examples/analytical_operations/misc/Pie_From_Pie_to_Donut/","title":"From Pie to Donut","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>set the range of the Y-axis to make empty circle in the center</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": [\"Joy factors\", \"Value 2 (+)\"],\n                \"color\": \"Joy factors\",\n                \"label\": \"Value 2 (+)\",\n            },\n            \"coordSystem\": \"polar\",\n        }\n    )\n)\n\nchart.animate(\n    Config({\"channels\": {\"y\": {\"range\": {\"min\": \"-200%\"}}}})\n)</code></pre>"},{"location":"examples/analytical_operations/misc/Polar_Make_Space_with_Polar/","title":"Make Space with Polar","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_8.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>change coordinate system to 'polar'</li> <li>add left padding in the Style to make space near the chart for something</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Value 2 (+)\",\n                \"y\": \"Country\",\n                \"color\": \"Country\",\n            }\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": [\"Value 2 (+)\"],\n                \"y\": {\"set\": \"Country\", \"range\": {\"min\": \"-30%\"}},\n                \"size\": None,\n            },\n            \"coordSystem\": \"polar\",\n        }\n    ),\n    Style({\"plot\": {\"paddingLeft\": \"25em\"}}),\n)</code></pre>"},{"location":"examples/analytical_operations/split/","title":"Split","text":"<p> src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/split/Area_Polar_Stacked_Area.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/split/Area_Stacked_Area.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/split/Column_100percent_Stacked_Column.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/split/Column_Stacked_Column.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/split/Coxcomb_Coxcomb.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/split/Radial_Stacked_Radial.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/split/ScatterPlot_Scatter_plot_1.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/split/ScatterPlot_Scatter_plot_2.mp4' type='video/mp4'&gt;</p>"},{"location":"examples/analytical_operations/split/Area_Polar_Stacked_Area/","title":"Polar Stacked Area","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_8.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>set the Split parameter to True</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": {\n                    \"set\": [\"Country\", \"Value 2 (+)\"],\n                    \"range\": {\"min\": \"-20%\"},\n                },\n                \"color\": \"Country\",\n            },\n            \"geometry\": \"area\",\n            \"coordSystem\": \"polar\",\n        }\n    )\n)\n\nchart.animate(Config({\"split\": True}))\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/split/Area_Stacked_Area/","title":"Stacked Area","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_8.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>set the Split parameter to True</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": [\"Value 2 (+)\", \"Country\"],\n                \"color\": \"Country\",\n            },\n            \"geometry\": \"area\",\n        }\n    )\n)\n\nchart.animate(Config({\"split\": True}))\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/split/Column_100percent_Stacked_Column/","title":"100% Stacked Column","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_8.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>add the Measure to the Label channel too</li> <li>set the Align parameter from 'stretch' to 'min'</li> <li>set the Split parameter to True</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": [\"Country\", \"Value 2 (+)\"],\n                \"color\": \"Country\",\n            },\n            \"align\": \"stretch\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\"label\": \"Value 2 (+)\"},\n            \"align\": \"min\",\n            \"split\": True,\n        }\n    ),\n    Style(\n        {\n            \"plot\": {\n                \"marker\": {\n                    \"label\": {\"position\": \"top\", \"fontSize\": \"0.6em\"}\n                }\n            }\n        }\n    ),\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/split/Column_Stacked_Column/","title":"Stacked Column","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>add the Measure to the Label channel too</li> <li>set the Split parameter to True</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": [\"Country\", \"Value 2 (+)\"],\n                \"color\": \"Country\",\n            }\n        }\n    )\n)\n\nchart.animate(\n    Config({\"channels\": {\"label\": \"Value 2 (+)\"}, \"split\": True}),\n    Style(\n        {\n            \"plot\": {\n                \"marker\": {\n                    \"label\": {\"position\": \"top\", \"fontSize\": \"0.6em\"}\n                }\n            }\n        }\n    ),\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/split/Coxcomb_Coxcomb/","title":"Coxcomb","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>set the Split parameter to True</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": {\n                    \"set\": [\"Country\", \"Value 2 (+)\"],\n                    \"range\": {\"min\": \"-20%\"},\n                },\n                \"color\": \"Country\",\n            },\n            \"coordSystem\": \"polar\",\n        }\n    ),\n    Style({\"plot\": {\"marker\": {\"rectangleSpacing\": \"0.1em\"}}}),\n)\n\nchart.animate(Config({\"split\": True}))\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/split/Radial_Stacked_Radial/","title":"Stacked Radial","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_8.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>set the Split parameter to True</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": [\"Country\", \"Value 2 (+)\"],\n                \"y\": {\"set\": \"Year\", \"range\": {\"min\": \"-3\"}},\n                \"color\": \"Country\",\n            },\n            \"coordSystem\": \"polar\",\n        }\n    )\n)\n\nchart.animate(Config({\"split\": True}))</code></pre>"},{"location":"examples/analytical_operations/split/ScatterPlot_Scatter_plot_1/","title":"Scatter plot 1","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_4.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>add the Dimension which is on the Color channel to the X-axis too</li> <li>set the Orientation parameter to 'vertical'</li> <li>set the Split parameter to True</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Value 2 (+)\",\n                \"y\": \"Value 3 (+)\",\n                \"noop\": \"Year\",\n                \"color\": \"Country\",\n            },\n            \"geometry\": \"circle\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\"x\": [\"Value 2 (+)\", \"Country\"]},\n            \"geometry\": \"circle\",\n            \"orientation\": \"vertical\",\n            \"split\": True,\n        }\n    )\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/split/ScatterPlot_Scatter_plot_2/","title":"Scatter plot 2","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_4.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>add the Dimension which is on the Color channel to the X-axis too</li> <li>set the Orientation parameter to 'horizontal'</li> <li>set the Split parameter to True</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Value 2 (+)\",\n                \"y\": \"Value 3 (+)\",\n                \"noop\": \"Year\",\n                \"color\": \"Country\",\n            },\n            \"geometry\": \"circle\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\"y\": [\"Value 3 (+)\", \"Country\"]},\n            \"geometry\": \"circle\",\n            \"orientation\": \"horizontal\",\n            \"split\": True,\n        }\n    )\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/stretch_to_proportion/","title":"Stretch to proportion","text":"<p> src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/stretch_to_proportion/Area_Stacked_Area.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/stretch_to_proportion/Column_Groupped_Column.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/stretch_to_proportion/Column_Split_Stacked_Column.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/stretch_to_proportion/Column_Stacked_Column.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/stretch_to_proportion/Line_Line.mp4' type='video/mp4'&gt;</p>"},{"location":"examples/analytical_operations/stretch_to_proportion/Area_Stacked_Area/","title":"Stacked Area","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_8.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>set the Align parameter to 'stretch'</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": [\"Value 2 (+)\", \"Country\"],\n                \"color\": \"Country\",\n            },\n            \"geometry\": \"area\",\n        }\n    )\n)\n\nchart.animate(Config({\"align\": \"stretch\"}))\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/stretch_to_proportion/Column_Groupped_Column/","title":"Groupped Column","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_4.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>move the 2nd dimension from the X-axis to the Y-axis</li> <li>set the Align parameter to 'stretch'</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": [\"Year\", \"Country\"],\n                \"y\": \"Value 2 (+)\",\n                \"color\": \"Country\",\n            }\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": [\"Country\", \"Value 2 (+)\"],\n            },\n            \"align\": \"stretch\",\n        }\n    )\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/stretch_to_proportion/Column_Split_Stacked_Column/","title":"Split Stacked Column","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_8.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>set the Align parameter to 'stretch'</li> <li>set the the Split parameter to False</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": [\"Country\", \"Value 2 (+)\"],\n                \"color\": \"Country\",\n                \"label\": \"Value 2 (+)\",\n            },\n            \"split\": True,\n        }\n    ),\n    Style(\n        {\n            \"plot\": {\n                \"marker\": {\n                    \"label\": {\"position\": \"top\", \"fontSize\": \"0.6em\"}\n                }\n            }\n        }\n    ),\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\"label\": None},\n            \"align\": \"stretch\",\n            \"split\": False,\n        }\n    )\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/stretch_to_proportion/Column_Stacked_Column/","title":"Stacked Column","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_8.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>set the Align parameter to 'stretch'</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": [\"Country\", \"Value 2 (+)\"],\n                \"color\": \"Country\",\n            }\n        }\n    )\n)\n\nchart.animate(Config({\"align\": \"stretch\"}))\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/stretch_to_proportion/Line_Line/","title":"Line","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_8.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>add the Dimension which is on the Color channel to the Y-axis too</li> <li>switch the Geometry from Line to Area</li> <li>set the Align parameter to 'stretch'</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": \"Value 2 (+)\",\n                \"color\": \"Country\",\n            },\n            \"geometry\": \"line\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\"y\": [\"Value 2 (+)\", \"Country\"]},\n            \"geometry\": \"area\",\n            \"align\": \"stretch\",\n        }\n    )\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/sum/","title":"Sum","text":"<p> src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/sum/Area_100percent_Stacked_Area.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/sum/Area_Polar_Split_Area.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/sum/Area_Polar_Stacked_Area.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/sum/Area_Split_Area.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/sum/Area_Stacked_Area.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/sum/Bubble_Bubble.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/sum/Bubble_Bubble_plot_1.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/sum/Bubble_Bubble_plot_2.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/sum/Bubble_Bubble_plot_to_Radial.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/sum/Bubble_Bubble_to_Column.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/sum/Bubble_Bubble_to_Coxcomb.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/sum/Bubble_Bubble_to_Radial.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/sum/Column_100percent_Stacked_Column.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/sum/Column_Column_1.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/sum/Column_Column_2.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/sum/Column_Column_to_Bar.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/sum/Column_Column_to_Waterfall.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/sum/Column_Groupped_Column.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/sum/Column_Split_Stacked_Column.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/sum/Column_Stacked_Column_1.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/sum/Column_Stacked_Column_2.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/sum/Coxcomb_Coxcomb_1.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/sum/Coxcomb_Coxcomb_2.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/sum/Coxcomb_Split_Coxcomb.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/sum/DotPlot_Dot_plot.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/sum/Line_Line_1.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/sum/Line_Line_2.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/sum/Line_Polar_Line_1.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/sum/Line_Polar_Line_2.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/sum/ScatterPlot_Polar_Scatter_plot.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/sum/ScatterPlot_Scatter_plot.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/sum/Stream_Stacked_Stream.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/analytical_operations/sum/Treemap_Treemap.mp4' type='video/mp4'&gt;</p>"},{"location":"examples/analytical_operations/sum/Area_100percent_Stacked_Area/","title":"100% Stacked Area","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>set Align parameter from 'stretch' to 'min'</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": [\"Value 2 (+)\", \"Country\"],\n                \"color\": \"Country\",\n            },\n            \"geometry\": \"area\",\n            \"align\": \"stretch\",\n        }\n    )\n)\n\nchart.animate(Config({\"align\": \"min\"}))\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/sum/Area_Polar_Split_Area/","title":"Polar Split Area","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>set Split parameter from True to False</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": {\n                    \"set\": [\"Country\", \"Value 2 (+)\"],\n                    \"range\": {\"min\": \"-20%\"},\n                },\n                \"color\": \"Country\",\n            },\n            \"geometry\": \"area\",\n            \"split\": True,\n            \"coordSystem\": \"polar\",\n        }\n    )\n)\n\nchart.animate(Config({\"split\": False}))\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/sum/Area_Polar_Stacked_Area/","title":"Polar Stacked Area","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>remove the Dimension from Y-axis and the Color channel</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": [\"Value 2 (+)\", \"Country\"],\n                \"color\": \"Country\",\n            },\n            \"geometry\": \"area\",\n            \"coordSystem\": \"polar\",\n        }\n    )\n)\n\nchart.animate(\n    Config({\"channels\": {\"y\": \"Value 2 (+)\", \"color\": None}})\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/sum/Area_Split_Area/","title":"Split Area","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>set Split parameter from True to False</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": [\"Value 2 (+)\", \"Country\"],\n                \"color\": \"Country\",\n            },\n            \"geometry\": \"area\",\n            \"split\": True,\n        }\n    )\n)\n\nchart.animate(Config({\"split\": False}))\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/sum/Area_Stacked_Area/","title":"Stacked Area","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>remove the Dimension from Y-axis and the Color channel</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": [\"Value 2 (+)\", \"Country\"],\n                \"color\": \"Country\",\n            },\n            \"geometry\": \"area\",\n        }\n    )\n)\n\nchart.animate(\n    Config({\"channels\": {\"y\": \"Value 2 (+)\", \"color\": None}})\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/sum/Bubble_Bubble/","title":"Bubble","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>add the Dimension whitch is on Label channel to the Size channel too (stack)</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"color\": \"Joy factors\",\n                \"size\": \"Value 2 (+)\",\n                \"label\": \"Country_code\",\n            },\n            \"geometry\": \"circle\",\n        }\n    )\n)\n\nchart.animate(\n    Config({\"channels\": {\"size\": [\"Country_code\", \"Value 2 (+)\"]}})\n)</code></pre>"},{"location":"examples/analytical_operations/sum/Bubble_Bubble_plot_1/","title":"Bubble plot 1","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>remove the Dimension from the Label channel and add the othere Dimension to it</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Value 1 (+)\",\n                \"y\": \"Value 3 (+)\",\n                \"size\": \"Value 2 (+)\",\n                \"color\": \"Year\",\n                \"label\": \"Country_code\",\n            },\n            \"geometry\": \"circle\",\n        }\n    )\n)\n\nchart.animate(Config({\"channels\": {\"label\": \"Year\"}}))\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/sum/Bubble_Bubble_plot_2/","title":"Bubble plot 2","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <p>This Vizzu animation consist of 2 steps (animates):</p> <p>1st:</p> <ul> <li>remove two Measures from the axes</li> <li>move the Dimension from the Label channel and the third Measure from the Size   channel to the X-axis</li> <li>switch the Geometry from Circle to Rectangle</li> </ul> <p>2nd:</p> <ul> <li>remove the Dimension from the X-axis</li> <li>add the remaining Measure to the Label channel</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": [\"Joy factors\", \"Value 6 (+/-)\"],\n                \"y\": \"Value 5 (+/-)\",\n                \"color\": \"Joy factors\",\n                \"size\": \"Value 2 (+)\",\n                \"label\": \"Country_code\",\n            },\n            \"geometry\": \"circle\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": [\"Country_code\", \"Value 2 (+)\"],\n                \"y\": \"Joy factors\",\n                \"label\": None,\n            },\n            \"geometry\": \"rectangle\",\n            \"orientation\": \"vertical\",\n        }\n    )\n)\n\nchart.animate(\n    Config({\"channels\": {\"x\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\"}})\n)</code></pre>"},{"location":"examples/analytical_operations/sum/Bubble_Bubble_plot_to_Radial/","title":"Bubble plot to Radial","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <p>This Vizzu animation consist of 2 steps (animates):</p> <p>1st:</p> <ul> <li>remove two Measures from the axes</li> <li>move the Dimension from the no-operation (Noop) channel and the third Measure   from the Size channel to the X-axis</li> <li>switch the Geometry from Circle to Rectangle</li> </ul> <p>2nd:</p> <ul> <li>remove the Dimension from the X-axis</li> <li>add the remaining Measure to the Label channel</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": [\"Joy factors\", \"Value 6 (+/-)\"],\n                \"y\": \"Value 5 (+/-)\",\n                \"color\": \"Joy factors\",\n                \"size\": \"Value 2 (+)\",\n                \"noop\": \"Country_code\",\n            },\n            \"geometry\": \"circle\",\n        }\n    ),\n    Style({\"plot\": {\"marker\": {\"guides\": {\"color\": \"#ffffff00\"}}}}),\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": [\"Country_code\", \"Value 2 (+)\"],\n                \"y\": {\"set\": \"Joy factors\", \"range\": {\"min\": \"-30%\"}},\n                \"noop\": None,\n            },\n            \"geometry\": \"rectangle\",\n            \"orientation\": \"vertical\",\n            \"coordSystem\": \"polar\",\n        }\n    )\n)\n\nchart.animate(\n    Config({\"channels\": {\"x\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\"}})\n)</code></pre>"},{"location":"examples/analytical_operations/sum/Bubble_Bubble_to_Column/","title":"Bubble to Column","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <p>This Vizzu animation consist of 2 steps (animates):</p> <p>1st:</p> <ul> <li>move the Dimension from the Label channel to the Y-axis</li> <li>move the Measure from the Size channel to the Y-axis</li> <li>add the other Dimension to the X-axis</li> <li>switch the Geometry from Circle to Rectangle</li> </ul> <p>2nd:</p> <ul> <li>remove the other Dimension from the X-axis</li> <li>add the Measure to the Label channel too</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"color\": \"Joy factors\",\n                \"label\": \"Country_code\",\n                \"size\": [\"Country_code\", \"Value 2 (+)\"],\n            },\n            \"geometry\": \"circle\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Joy factors\",\n                \"y\": [\"Country_code\", \"Value 2 (+)\"],\n                \"label\": None,\n                \"size\": None,\n            },\n            \"geometry\": \"rectangle\",\n        }\n    )\n)\n\nchart.animate(\n    Config({\"channels\": {\"y\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\"}})\n)</code></pre>"},{"location":"examples/analytical_operations/sum/Bubble_Bubble_to_Coxcomb/","title":"Bubble to Coxcomb","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <p>This Vizzu animation consist of 2 steps (animates):</p> <p>1st:</p> <ul> <li>move the Dimension from the Label channel to the Y-axis</li> <li>move the Measure from the Size channel to the Y-axis</li> <li>add the other Dimension to the X-axis</li> <li>switch the Geometry from Circle to Rectangle</li> </ul> <p>2nd:</p> <ul> <li>remove the other Dimension from the X-axis</li> <li>add the Measure to the Label channel too</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"color\": \"Joy factors\",\n                \"label\": \"Country_code\",\n                \"size\": [\"Country_code\", \"Value 2 (+)\"],\n            },\n            \"geometry\": \"circle\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Joy factors\",\n                \"y\": [\"Country_code\", \"Value 2 (+)\"],\n                \"label\": None,\n                \"size\": None,\n            },\n            \"geometry\": \"rectangle\",\n            \"coordSystem\": \"polar\",\n        }\n    ),\n    Style({\"plot\": {\"marker\": {\"rectangleSpacing\": \"0em\"}}}),\n)\n\nchart.animate(\n    Config({\"channels\": {\"y\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\"}})\n)</code></pre>"},{"location":"examples/analytical_operations/sum/Bubble_Bubble_to_Radial/","title":"Bubble to Radial","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <p>This Vizzu animation consist of 2 steps (animates):</p> <p>1st:</p> <ul> <li>move the Dimension from the Label channel to the X-axis</li> <li>move the Measure from the Size channel to the X-axis</li> <li>add the other Dimension to the Y-axis</li> <li>set the Y-axis range min to make empty circle in the center</li> <li>switch the Geometry from Circle to Rectangle</li> </ul> <p>2nd:</p> <ul> <li>remove the other Dimension from the X-axis</li> <li>add the Measure to the Label channel too</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"color\": \"Joy factors\",\n                \"label\": \"Country_code\",\n                \"size\": [\"Country_code\", \"Value 2 (+)\"],\n            },\n            \"geometry\": \"circle\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"y\": {\"set\": \"Joy factors\", \"range\": {\"min\": \"-30%\"}},\n                \"x\": [\"Country_code\", \"Value 2 (+)\"],\n                \"label\": None,\n                \"size\": None,\n            },\n            \"geometry\": \"rectangle\",\n            \"coordSystem\": \"polar\",\n            \"sort\": \"byValue\",\n        }\n    )\n)\n\nchart.animate(\n    Config({\"channels\": {\"x\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\"}})\n)</code></pre>"},{"location":"examples/analytical_operations/sum/Column_100percent_Stacked_Column/","title":"100% Stacked Column","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_8.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>set Align parameter from 'stretch' to 'min'</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": [\"Country\", \"Value 2 (+)\"],\n                \"color\": \"Country\",\n            },\n            \"align\": \"stretch\",\n        }\n    )\n)\n\nchart.animate(Config({\"align\": \"min\"}))\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/sum/Column_Column_1/","title":"Column 1","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_8.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>move the Dimension from X-axis to the Y-axis and the Color channel</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Country\",\n                \"y\": \"Value 2 (+)\",\n                \"label\": \"Value 2 (+)\",\n            }\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": None,\n                \"y\": [\"Country\", \"Value 2 (+)\"],\n                \"color\": \"Country\",\n            }\n        }\n    )\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/sum/Column_Column_2/","title":"Column 2","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_8.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>remove the Dimension from the X-axis</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Country\",\n                \"y\": \"Value 2 (+)\",\n                \"label\": \"Value 2 (+)\",\n            }\n        }\n    )\n)\n\nchart.animate(Config({\"channels\": {\"x\": None}}))\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/sum/Column_Column_to_Bar/","title":"Column to Bar","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_8.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>remove the Dimension from the X-axis</li> <li>shift the Meassure from the Y-axis to the X-axis</li> <li>set the Orientation to vertical</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Country\",\n                \"y\": \"Value 2 (+)\",\n                \"label\": \"Value 2 (+)\",\n            }\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\"x\": \"Value 2 (+)\", \"y\": None},\n            \"orientation\": \"vertical\",\n        }\n    )\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/sum/Column_Column_to_Waterfall/","title":"Column to Waterfall","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>add the existing Dimension to the Y-axis as well</li> <li>+ here is an example of how you can set a colorGradient palette in the Style</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": \"Value 5 (+/-)\",\n                \"color\": {\n                    \"set\": \"Value 5 (+/-)\",\n                    \"range\": {\"min\": \"-45\", \"max\": \"45\"},\n                },\n                \"noop\": \"Country\",\n                \"label\": \"Value 5 (+/-)\",\n            },\n            \"legend\": \"color\",\n        }\n    ),\n    Style(\n        {\n            \"plot\": {\n                \"marker\": {\n                    \"colorGradient\": \"#ac1727 0,#e36c56 0.15,#f4b096 0.35,#d5d7d9 0.5,#9fbffa 0.65,#6389ec 0.85,#3d51b8 1\",\n                    \"label\": {\"position\": \"top\"},\n                }\n            }\n        }\n    ),\n)\n\nchart.animate(Config({\"channels\": {\"y\": [\"Year\", \"Value 5 (+/-)\"]}}))</code></pre>"},{"location":"examples/analytical_operations/sum/Column_Groupped_Column/","title":"Groupped Column","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>move one Dimension from X-axis to the Y-axis (stack)</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": [\"Year\", \"Country\"],\n                \"y\": \"Value 2 (+)\",\n                \"color\": \"Country\",\n            }\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": [\"Country\", \"Value 2 (+)\"],\n                \"color\": \"Country\",\n            }\n        }\n    )\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/sum/Column_Split_Stacked_Column/","title":"Split Stacked Column","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_8.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>set Split parameter from True to False</li> <li>None Label channel</li> <li>+ if you like set the marker-label fontSize in the Style</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": [\"Country\", \"Value 2 (+)\"],\n                \"color\": \"Country\",\n                \"label\": \"Value 2 (+)\",\n            },\n            \"split\": True,\n        }\n    ),\n    Style(\n        {\n            \"plot\": {\n                \"marker\": {\n                    \"label\": {\"position\": \"top\", \"fontSize\": \"0.6em\"}\n                }\n            }\n        }\n    ),\n)\n\nchart.animate(Config({\"channels\": {\"label\": None}, \"split\": False}))\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/sum/Column_Stacked_Column_1/","title":"Stacked Column 1","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_8.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>remove the Dimension from Y-axis and the Color channel</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Country\",\n                \"y\": [\"Value 2 (+)\", \"Joy factors\"],\n                \"color\": \"Joy factors\",\n                \"label\": \"Value 2 (+)\",\n            }\n        }\n    )\n)\n\nchart.animate(\n    Config({\"channels\": {\"y\": \"Value 2 (+)\", \"color\": None}})\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/sum/Column_Stacked_Column_2/","title":"Stacked Column 2","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>remove the Dimension from the X-axis and Color channel</li> <li>shift the Measure from X to the Y-axis (change orientation), and add it to the   Label channel</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": [\"Joy factors\", \"Value 2 (+)\"],\n                \"color\": \"Joy factors\",\n            }\n        }\n    ),\n    Style(\n        {\n            \"plot\": {\n                \"marker\": {\n                    \"colorPalette\": \"#ef675aFF #6d8cccFF #e6cf99FF #9c50abFF\"\n                }\n            }\n        }\n    ),\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Value 2 (+)\",\n                \"y\": [\"Joy factors\"],\n                \"label\": \"Value 2 (+)\",\n            }\n        }\n    )\n)</code></pre>"},{"location":"examples/analytical_operations/sum/Coxcomb_Coxcomb_1/","title":"Coxcomb 1","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_8.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>remove the Dimension from Y-axis and the Color channel</li> <li>add the Measure to the Label channel too</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Country\",\n                \"y\": [\"Value 2 (+)\", \"Joy factors\"],\n                \"color\": \"Joy factors\",\n            },\n            \"coordSystem\": \"polar\",\n        }\n    ),\n    Style({\"plot\": {\"marker\": {\"rectangleSpacing\": \"0.1em\"}}}),\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"y\": \"Value 2 (+)\",\n                \"color\": None,\n                \"label\": \"Value 2 (+)\",\n            }\n        }\n    )\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/sum/Coxcomb_Coxcomb_2/","title":"Coxcomb 2","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>remove the Dimension from the X-axis and Color channel</li> <li>shift the Measure from X to the Y-axis (change orientation), and add it to the   Label channel</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": [\"Joy factors\", \"Value 2 (+)\"],\n                \"color\": \"Joy factors\",\n            },\n            \"coordSystem\": \"polar\",\n        }\n    ),\n    Style(\n        {\n            \"plot\": {\n                \"marker\": {\n                    \"colorPalette\": \"#ef675aFF #6d8cccFF #e6cf99FF #9c50abFF\",\n                    \"rectangleSpacing\": \"0.1em\",\n                }\n            }\n        }\n    ),\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Value 2 (+)\",\n                \"y\": {\"set\": \"Joy factors\", \"range\": {\"min\": \"-30%\"}},\n                \"label\": \"Value 2 (+)\",\n            }\n        }\n    ),\n    Style({\"plot\": {\"marker\": {\"rectangleSpacing\": None}}}),\n)</code></pre>"},{"location":"examples/analytical_operations/sum/Coxcomb_Split_Coxcomb/","title":"Split Coxcomb","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_8.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>set Split parameter from True to False</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": {\n                    \"set\": [\"Country\", \"Value 2 (+)\"],\n                    \"range\": {\"min\": \"-20%\"},\n                },\n                \"color\": \"Country\",\n            },\n            \"split\": True,\n            \"coordSystem\": \"polar\",\n        }\n    ),\n    Style({\"plot\": {\"marker\": {\"rectangleSpacing\": \"0.1em\"}}}),\n)\n\nchart.animate(Config({\"split\": False}))\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/sum/DotPlot_Dot_plot/","title":"Dot plot","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_8.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>add the Dimension whitch is on the Color channel to the Y-axis too</li> <li>switch the Geometry from Circle to Rectangle</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": \"Value 2 (+)\",\n                \"color\": \"Country\",\n            },\n            \"geometry\": \"circle\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\"y\": [\"Country\", \"Value 2 (+)\"]},\n            \"geometry\": \"rectangle\",\n        }\n    )\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/sum/Line_Line_1/","title":"Line 1","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>add the Dimension whitch is on Color channel to the Y-axis too</li> <li>switch the Geometry from Line to Area</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": \"Value 2 (+)\",\n                \"color\": \"Country\",\n            },\n            \"geometry\": \"line\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\"y\": [\"Country\", \"Value 2 (+)\"]},\n            \"geometry\": \"area\",\n        }\n    )\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/sum/Line_Line_2/","title":"Line 2","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>remove the Dimension from the Color channel</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": \"Value 2 (+)\",\n                \"color\": \"Country\",\n            },\n            \"geometry\": \"line\",\n        }\n    )\n)\n\nchart.animate(Config({\"channels\": {\"color\": None}}))\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/sum/Line_Polar_Line_1/","title":"Polar Line 1","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>remove the Dimension from the Color channel</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": \"Value 2 (+)\",\n                \"color\": \"Country\",\n            },\n            \"geometry\": \"line\",\n            \"coordSystem\": \"polar\",\n        }\n    )\n)\n\nchart.animate(Config({\"channels\": {\"color\": None}}))\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/sum/Line_Polar_Line_2/","title":"Polar Line 2","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>add the Dimension whitch is on Color channel to the Y-axis too</li> <li>switch the Geometry from Line to Area</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": {\"set\": \"Value 2 (+)\", \"range\": {\"min\": \"-20%\"}},\n                \"color\": \"Country\",\n            },\n            \"geometry\": \"line\",\n            \"coordSystem\": \"polar\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\"y\": [\"Country\", \"Value 2 (+)\"]},\n            \"geometry\": \"area\",\n        }\n    )\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/sum/ScatterPlot_Polar_Scatter_plot/","title":"Polar Scatter plot","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_8.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>add the Dimension whitch is on the Color channel to the Y-axis too</li> <li>switch the Geometry from Circle to Rectangle</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": \"Value 2 (+)\",\n                \"color\": \"Country\",\n            },\n            \"geometry\": \"circle\",\n            \"coordSystem\": \"polar\",\n        }\n    ),\n    Style(\n        {\n            \"plot\": {\n                \"marker\": {\n                    \"rectangleSpacing\": \"0.1em\",\n                    \"label\": {\"position\": \"top\", \"fontSize\": \"0.6em\"},\n                }\n            }\n        }\n    ),\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\"y\": [\"Country\", \"Value 2 (+)\"]},\n            \"geometry\": \"rectangle\",\n        }\n    )\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/sum/ScatterPlot_Scatter_plot/","title":"Scatter plot","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>remove the Dimension from the Label channel and add the othere Dimension to it</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Value 1 (+)\",\n                \"y\": \"Value 3 (+)\",\n                \"color\": \"Country\",\n                \"label\": \"Year\",\n            },\n            \"geometry\": \"circle\",\n        }\n    )\n)\n\nchart.animate(Config({\"channels\": {\"label\": \"Country\"}}))\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/sum/Stream_Stacked_Stream/","title":"Stacked Stream","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/music_industry_history_1.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <p>This is a 2-step animation:</p> <p>1st: set the Split parameter to True</p> <p>2nd:</p> <ul> <li>move the Measure to the X-axis</li> <li>set the Align parameter 'center'</li> <li>set the Split parameter to False</li> <li>arrange the markers in reverse order</li> <li>switch the Geometry from Area to Rectangle</li> </ul> <pre><code>method = \"\"\"\n      let year = parseFloat(event.data.text);\n      if (!event.data.text.includes(\"$\") &amp;&amp; !isNaN(year) &amp;&amp; year % 5 != 0)\n        event.preventDefault();\n    \"\"\"\nhandler = chart.on(\"plot-axis-label-draw\", method)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": [\"Revenue [$]\", \"Format\"],\n                \"color\": \"Format\",\n            },\n            \"geometry\": \"area\",\n            \"align\": \"center\",\n        }\n    ),\n    Style(\n        {\"plot\": {\"yAxis\": {\"label\": {\"numberScale\": \"K, M, B, T\"}}}}\n    ),\n)\n\nchart.animate(Config({\"split\": True}))\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"y\": [\"Revenue [$]\", \"Year\"],\n                \"x\": [\"Format\"],\n            },\n            \"geometry\": \"rectangle\",\n            \"align\": \"min\",\n            \"split\": False,\n            \"sort\": \"byValue\",\n            \"reverse\": True,\n        }\n    )\n)\n\nchart.feature(\"tooltip\", True)</code></pre>"},{"location":"examples/analytical_operations/sum/Treemap_Treemap/","title":"Treemap","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <ul> <li>add the Dimension whitch is on Label channel to the Size channel too (stack)</li> </ul> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"size\": \"Value 2 (+)\",\n                \"noop\": \"Country_code\",\n                \"color\": \"Joy factors\",\n                \"label\": \"Country_code\",\n            }\n        }\n    )\n)\n\nchart.animate(\n    Config({\"channels\": {\"size\": [\"Country_code\", \"Value 2 (+)\"]}})\n)</code></pre>"},{"location":"examples/animated/","title":"Animated charts","text":"<p> src='https://lib.vizzuhq.com/0.7/examples/animated/composition_comparison_pie_coxcomb_column_2dis_2con.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/animated/composition_comparison_waterfall_column_2dis_1con.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/animated/composition_percentage_area_stream_3dis_1con.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/animated/composition_percentage_column_3dis_1con.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/animated/composition_percentage_column_stream_3dis_1con.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/animated/distribution_relationship_dotplot_dotplot.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/animated/drill_aggreg_improve_line.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/animated/drilldown_aggregate_line.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/animated/merge_split_area_stream_3dis_1con.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/animated/merge_split_bar.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/animated/merge_split_radial_stacked_rectangle_2dis_1con.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/animated/orientation_circle.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/animated/orientation_dot_circle.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/animated/orientation_marimekko_rectangle_2dis_2con.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/animated/orientation_rectangle.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/animated/pie_donut2_rectangle_1dis_1con.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/animated/relationship_comparison_circle_2_bubble_plot.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/animated/relationship_total_bubble_plot_column.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/animated/stack_group_area_line.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/animated/stack_group_circle.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/animated/stack_group_treemap.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/animated/total_element_bubble_2_bar.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/animated/total_element_bubble_column.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/animated/treemap_radial.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/animated/zoom_area.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/animated/zoom_area_polar.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/animated/zoom_line.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/examples/animated/zoom_line_polar.mp4' type='video/mp4'&gt;</p>"},{"location":"examples/animated/composition_comparison_pie_coxcomb_column_2dis_2con/","title":"Pie  to Coxcomb","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/infinite_data.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": [\"Value 1\", \"Joy factors\"],\n                \"color\": \"Joy factors\",\n                \"label\": \"Value 1\",\n            },\n            \"title\": \"Pie Chart\",\n            \"coordSystem\": \"polar\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": [\n                    \"Value 1\",\n                    \"Joy factors\",\n                    \"Region\",\n                    \"Country code\",\n                ],\n                \"label\": None,\n            }\n        }\n    ),\n    duration=\"500ms\",\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": [\n                    \"Value 1\",\n                    \"Joy factors\",\n                    \"Region\",\n                    \"Country code\",\n                ],\n                \"y\": {\"set\": \"Value 3\", \"range\": {\"min\": \"-60%\"}},\n            },\n            \"title\": \"Coxcomb Chart\",\n        }\n    )\n)</code></pre>"},{"location":"examples/animated/composition_comparison_waterfall_column_2dis_1con/","title":"Waterfall  to Column","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": [\"Year\", \"Value 5 (+/-)\"],\n                \"color\": {\n                    \"set\": [\"Value 5 (+/-)\"],\n                    \"range\": {\"min\": \"-45\", \"max\": \"45\"},\n                },\n                \"noop\": \"Country\",\n                \"label\": \"Value 5 (+/-)\",\n            },\n            \"title\": \"Waterfall Chart\",\n            \"legend\": \"color\",\n        }\n    ),\n    Style(\n        {\n            \"plot\": {\n                \"marker\": {\n                    \"colorGradient\": \"#3d51b8 0,#6389ec 0.15,#9fbffa 0.35,#d5d7d9 0.5,#f4b096 0.65,#e36c56 0.85,#ac1727 1\",\n                    \"label\": {\"position\": \"top\"},\n                }\n            }\n        }\n    ),\n)\n\nchart.animate(\n    Config(\n        {\"channels\": {\"y\": \"Value 5 (+/-)\"}, \"title\": \"Column Chart\"}\n    )\n)</code></pre>"},{"location":"examples/animated/composition_percentage_area_stream_3dis_1con/","title":"Stacked Area  to Split Area","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_14.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": [\"Value 2 (+)\", \"Country\"],\n                \"color\": \"Country\",\n            },\n            \"title\": \"Stacked Area Chart\",\n            \"geometry\": \"area\",\n        }\n    )\n)\n\nchart.animate(\n    Config({\"title\": \"100% Stacked Area Chart\", \"align\": \"stretch\"})\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\"y\": {\"range\": {\"max\": \"100%\"}}},\n            \"title\": \"Split Area Chart\",\n            \"align\": \"min\",\n            \"split\": True,\n        }\n    )\n)</code></pre>"},{"location":"examples/animated/composition_percentage_column_3dis_1con/","title":"Stacked Column  to Split Column","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_14.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": [\"Value 2 (+)\", \"Country\"],\n                \"color\": \"Country\",\n            },\n            \"title\": \"Stacked Column Chart\",\n        }\n    )\n)\n\nchart.animate(\n    Config({\"title\": \"100% Stacked Column Chart\", \"align\": \"stretch\"})\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\"y\": {\"range\": {\"max\": \"100%\"}}},\n            \"title\": \"Split Column Chart\",\n            \"align\": \"min\",\n            \"split\": True,\n        }\n    )\n)</code></pre>"},{"location":"examples/animated/composition_percentage_column_stream_3dis_1con/","title":"Column  to 100% Column","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_14.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": [\"Value 2 (+)\", \"Country\"],\n                \"noop\": \"Country\",\n            },\n            \"title\": \"Column Chart\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"y\": {\"range\": {\"max\": \"100%\"}},\n                \"color\": \"Country\",\n                \"noop\": None,\n            },\n            \"title\": \"Split Column Chart\",\n            \"split\": True,\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\"y\": {\"range\": {\"max\": \"auto\"}}},\n            \"title\": \"Stacked Column Chart\",\n            \"split\": False,\n        }\n    )\n)\n\nchart.animate(\n    Config({\"title\": \"100% Column Chart\", \"align\": \"stretch\"})\n)</code></pre>"},{"location":"examples/animated/distribution_relationship_dotplot_dotplot/","title":"Distribution Plot to Scatter Plot","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Joy factors\",\n                \"y\": \"Value 5 (+/-)\",\n                \"color\": \"Joy factors\",\n                \"noop\": \"Country_code\",\n            },\n            \"title\": \"Distribution Plot\",\n            \"geometry\": \"circle\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": [\"Joy factors\", \"Value 6 (+/-)\"],\n                \"label\": \"Country_code\",\n            },\n            \"title\": \"Scatter Plot\",\n        }\n    )\n)</code></pre>"},{"location":"examples/animated/drill_aggreg_improve_line/","title":"Single Line  to Line  I","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\"x\": \"Year\", \"y\": \"Value 3 (+)\"},\n            \"title\": \"Single Line Chart\",\n            \"geometry\": \"line\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"y\": [\"Country\", \"Value 3 (+)\"],\n                \"color\": \"Country\",\n            },\n            \"title\": \"Drill down\",\n            \"geometry\": \"area\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\"y\": \"Value 3 (+)\"},\n            \"title\": \"Line Chart I\",\n            \"geometry\": \"line\",\n        }\n    )\n)</code></pre>"},{"location":"examples/animated/drilldown_aggregate_line/","title":"Single Line  to Line  II","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": {\n                    \"set\": \"Value 3 (+)\",\n                    \"range\": {\"max\": \"6000000000\"},\n                },\n                \"size\": \"Country\",\n            },\n            \"title\": \"Single Line Chart\",\n            \"geometry\": \"line\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\"color\": \"Country\", \"size\": None},\n            \"title\": \"Drill down\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\"y\": {\"range\": {\"max\": \"auto\"}}},\n            \"title\": \"Line Chart II\",\n        }\n    )\n)</code></pre>"},{"location":"examples/animated/merge_split_area_stream_3dis_1con/","title":"Stacked Streamgraph to Split Area","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": [\"Year\", \"Joy factors\"],\n                \"y\": [\"Value 3 (+)\", \"Country\"],\n                \"color\": \"Country\",\n            },\n            \"title\": \"Stacked Streamgraph\",\n            \"geometry\": \"area\",\n            \"align\": \"center\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\"y\": {\"range\": {\"max\": \"100%\"}}},\n            \"title\": \"Split Area Chart\",\n            \"split\": True,\n            \"align\": \"min\",\n        }\n    )\n)</code></pre>"},{"location":"examples/animated/merge_split_bar/","title":"Stacked Bar  to Split Bar","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": [\"Value 3 (+)\", \"Country\"],\n                \"y\": [\"Year\", \"Joy factors\"],\n                \"color\": \"Country\",\n            },\n            \"title\": \"Stacked Bar Chart\",\n        }\n    )\n)\n\nchart.animate(Config({\"title\": \"Split Bar Chart\", \"split\": True}))</code></pre>"},{"location":"examples/animated/merge_split_radial_stacked_rectangle_2dis_1con/","title":"Radial Bar  to Split Radial Bar","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": [\"Country\", \"Value 2 (+)\"],\n                \"y\": {\"set\": \"Year\", \"range\": {\"min\": \"-3\"}},\n                \"color\": \"Country\",\n            },\n            \"title\": \"Radial Bar Chart\",\n            \"coordSystem\": \"polar\",\n        }\n    )\n)\n\nchart.animate(\n    Config({\"title\": \"Split Radial Bar Chart\", \"split\": True})\n)</code></pre>"},{"location":"examples/animated/orientation_circle/","title":"Dot Plot to Dot Plot with Other Orientation","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Value 5 (+/-)\",\n                \"y\": \"Joy factors\",\n                \"lightness\": \"Joy factors\",\n                \"noop\": \"Year\",\n            },\n            \"title\": \"Dot Plot\",\n            \"geometry\": \"circle\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": \"Value 5 (+/-)\",\n                \"noop\": \"Joy factors\",\n            },\n            \"title\": \"Dot Plot with Other Orientation\",\n        }\n    )\n)</code></pre>"},{"location":"examples/animated/orientation_dot_circle/","title":"Scatter Plot to Dot Plot","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Value 5 (+/-)\",\n                \"y\": \"Value 6 (+/-)\",\n                \"noop\": \"Joy factors\",\n                \"lightness\": \"Year\",\n            },\n            \"title\": \"Scatter Plot\",\n            \"geometry\": \"circle\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\"x\": \"Year\"},\n            \"title\": \"Dot Plot\",\n            \"legend\": \"lightness\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\"x\": \"Value 5 (+/-)\", \"y\": \"Value 6 (+/-)\"},\n            \"title\": \"Scatter Plot\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\"y\": \"Joy factors\", \"noop\": None},\n            \"title\": \"Dot Plot\",\n        }\n    )\n)</code></pre>"},{"location":"examples/animated/orientation_marimekko_rectangle_2dis_2con/","title":"Marimekko  to Marimekko with Other Orientation","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_4.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": [\"Country\", \"Value 2 (+)\"],\n                \"y\": [\"Joy factors\", \"Value 3 (+)\"],\n                \"color\": \"Joy factors\",\n                \"label\": \"Country\",\n                \"lightness\": \"Country\",\n            },\n            \"title\": \"Marimekko Chart\",\n            \"align\": \"stretch\",\n            \"orientation\": \"horizontal\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"title\": \"Marimekko with Other Orientation\",\n            \"orientation\": \"vertical\",\n        }\n    )\n)</code></pre>"},{"location":"examples/animated/orientation_rectangle/","title":"Stacked Column  to Bar","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/tutorial.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Timeseries\",\n                \"y\": [\"Values 1\", \"Categ. Parent\"],\n                \"color\": \"Categ. Parent\",\n                \"label\": \"Values 1\",\n            },\n            \"title\": \"Stacked Column Chart\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\"x\": \"Values 1\", \"y\": \"Categ. Parent\"},\n            \"title\": \"Bar Chart\",\n        }\n    )\n)</code></pre>"},{"location":"examples/animated/pie_donut2_rectangle_1dis_1con/","title":"Pie  to Donut","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": [\"Joy factors\", \"Value 2 (+)\"],\n                \"color\": \"Joy factors\",\n                \"label\": \"Value 2 (+)\",\n            },\n            \"title\": \"Pie Chart\",\n            \"coordSystem\": \"polar\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\"y\": {\"range\": {\"min\": \"-200%\"}}},\n            \"title\": \"Donut Chart\",\n        }\n    )\n)</code></pre>"},{"location":"examples/animated/relationship_comparison_circle_2_bubble_plot/","title":"Bubble Plot to Bubble","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": [\"Joy factors\", \"Value 6 (+/-)\"],\n                \"y\": \"Value 5 (+/-)\",\n                \"color\": \"Joy factors\",\n                \"size\": \"Value 2 (+)\",\n                \"label\": \"Country_code\",\n            },\n            \"title\": \"Bubble Plot\",\n            \"geometry\": \"circle\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": None,\n                \"y\": None,\n                \"size\": [\"Value 2 (+)\", \"Country_code\"],\n            },\n            \"title\": \"Stacked Bubble Chart\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\"channels\": {\"size\": \"Value 2 (+)\"}, \"title\": \"Bubble Chart\"}\n    )\n)</code></pre>"},{"location":"examples/animated/relationship_total_bubble_plot_column/","title":"Bubble Plot to Bar","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": [\"Joy factors\", \"Value 6 (+/-)\"],\n                \"y\": \"Value 5 (+/-)\",\n                \"color\": \"Joy factors\",\n                \"size\": \"Value 2 (+)\",\n                \"label\": \"Country_code\",\n            },\n            \"title\": \"Bubble Plot\",\n            \"geometry\": \"circle\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"y\": \"Joy factors\",\n                \"x\": [\"Value 2 (+)\", \"Country_code\"],\n                \"label\": None,\n            },\n            \"title\": \"Bar Chart\",\n            \"geometry\": \"rectangle\",\n            \"orientation\": \"vertical\",\n        }\n    )\n)\n\nchart.animate(\n    Config({\"channels\": {\"x\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\"}})\n)</code></pre>"},{"location":"examples/animated/stack_group_area_line/","title":"Stacked Area  to Line","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/tutorial.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Timeseries\",\n                \"y\": {\n                    \"set\": [\"Values 1\", \"Categ. Parent\"],\n                    \"range\": {\"max\": \"400\"},\n                },\n                \"label\": \"Values 1\",\n                \"color\": \"Categ. Parent\",\n            },\n            \"title\": \"Stacked Area Chart\",\n            \"geometry\": \"area\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\"y\": \"Values 1\"},\n            \"title\": \"Line Chart\",\n            \"geometry\": \"line\",\n        }\n    )\n)\n\nchart.animate(Config({\"channels\": {\"y\": {\"range\": {\"max\": \"auto\"}}}}))</code></pre>"},{"location":"examples/animated/stack_group_circle/","title":"Bubble  to Stacked Bubble","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"color\": \"Joy factors\",\n                \"size\": \"Value 2 (+)\",\n                \"label\": \"Country_code\",\n            },\n            \"title\": \"Bubble Chart\",\n            \"geometry\": \"circle\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\"size\": [\"Value 2 (+)\", \"Country_code\"]},\n            \"title\": \"Stacked Bubble Chart\",\n        }\n    )\n)</code></pre>"},{"location":"examples/animated/stack_group_treemap/","title":"Treemap to Stacked Treemap","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"size\": \"Value 2 (+)\",\n                \"noop\": \"Country_code\",\n                \"color\": \"Joy factors\",\n                \"label\": \"Country_code\",\n            },\n            \"title\": \"Treemap\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\"size\": [\"Value 2 (+)\", \"Country_code\"]},\n            \"title\": \"Stacked Treemap\",\n        }\n    )\n)</code></pre>"},{"location":"examples/animated/total_element_bubble_2_bar/","title":"Stacked Bubble  to Bar","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"color\": \"Joy factors\",\n                \"label\": \"Country_code\",\n                \"size\": [\"Country_code\", \"Value 2 (+)\"],\n            },\n            \"title\": \"Stacked Bubble Chart\",\n            \"geometry\": \"circle\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": [\"Country_code\", \"Value 2 (+)\"],\n                \"y\": \"Joy factors\",\n                \"label\": None,\n                \"size\": None,\n            },\n            \"title\": \"Bar Chart\",\n            \"geometry\": \"rectangle\",\n            \"orientation\": \"vertical\",\n        }\n    )\n)\n\nchart.animate(\n    Config({\"channels\": {\"x\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\"}})\n)</code></pre>"},{"location":"examples/animated/total_element_bubble_column/","title":"Stacked Bubble  to Column","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"color\": \"Joy factors\",\n                \"label\": \"Country_code\",\n                \"size\": [\"Country_code\", \"Value 2 (+)\"],\n            },\n            \"title\": \"Stacked Bubble Chart\",\n            \"geometry\": \"circle\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Joy factors\",\n                \"y\": [\"Country_code\", \"Value 2 (+)\"],\n                \"label\": None,\n                \"size\": None,\n            },\n            \"title\": \"Column Chart\",\n            \"geometry\": \"rectangle\",\n            \"orientation\": \"vertical\",\n        }\n    )\n)\n\nchart.animate(\n    Config({\"channels\": {\"y\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\"}})\n)</code></pre>"},{"location":"examples/animated/treemap_radial/","title":"Treemap to Radial","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"color\": \"Joy factors\",\n                \"size\": \"Value 2 (+)\",\n                \"label\": \"Joy factors\",\n            },\n            \"title\": \"Treemap\",\n        }\n    )\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Value 2 (+)\",\n                \"y\": {\"set\": \"Joy factors\", \"range\": {\"min\": \"-30%\"}},\n                \"size\": None,\n                \"label\": \"Value 2 (+)\",\n            },\n            \"title\": \"Radial Chart\",\n            \"coordSystem\": \"polar\",\n        }\n    )\n)</code></pre>"},{"location":"examples/animated/zoom_area/","title":"Stacked Area to Zoomed Stacked Area","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": [\"Year\", \"Joy factors\"],\n                \"y\": [\"Value 3 (+)\", \"Country_code\"],\n                \"color\": \"Country_code\",\n            },\n            \"title\": \"Stacked Area\",\n            \"geometry\": \"area\",\n        }\n    )\n)\n\nchart.animate(\n    data.filter(\n        \"\"\"\n  (record) =&gt;\n  data_6.filter(record) &amp;&amp; record.Year &lt; 12 &amp;&amp; record.Year &gt; 6\n  \"\"\"\n    ),\n    Config({\"title\": \"Zoomed Stacked Area\"}),\n)</code></pre>"},{"location":"examples/animated/zoom_area_polar/","title":"Polar Stacked Area to Zoomed Polar Stacked Area","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": [\"Year\", \"Joy factors\"],\n                \"y\": [\"Value 3 (+)\", \"Country_code\"],\n                \"color\": \"Country_code\",\n            },\n            \"title\": \"Polar Stacked Area\",\n            \"geometry\": \"area\",\n            \"coordSystem\": \"polar\",\n        }\n    )\n)\n\nchart.animate(\n    data.filter(\n        \"\"\"\n  (record) =&gt;\n  data_6.filter(record) &amp;&amp; record.Year &lt; 12 &amp;&amp; record.Year &gt; 6\n  \"\"\"\n    ),\n    Config({\"title\": \"Zoomed Polar Stacked Area\"}),\n)</code></pre>"},{"location":"examples/animated/zoom_line/","title":"Line chart to Zoomed Line chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": [\"Year\", \"Joy factors\"],\n                \"y\": \"Value 3 (+)\",\n                \"color\": \"Country_code\",\n            },\n            \"title\": \"Line chart\",\n            \"geometry\": \"line\",\n        }\n    )\n)\n\nchart.animate(\n    data.filter(\n        \"\"\"\n  (record) =&gt;\n  data_6.filter(record) &amp;&amp; record.Year &lt; 8 &amp;&amp; record.Year &gt; 2\n  \"\"\"\n    ),\n    Config({\"title\": \"Zoomed Line chart\"}),\n)</code></pre>"},{"location":"examples/animated/zoom_line_polar/","title":"Polar Line chart to Zoomed Polar Line chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": [\"Year\", \"Joy factors\"],\n                \"y\": \"Value 3 (+)\",\n                \"color\": \"Country_code\",\n            },\n            \"title\": \"Polar Line chart\",\n            \"geometry\": \"line\",\n            \"coordSystem\": \"polar\",\n        }\n    )\n)\n\nchart.animate(\n    data.filter(\n        \"\"\"\n  (record) =&gt;\n  data_6.filter(record) &amp;&amp; record.Year &lt; 8 &amp;&amp; record.Year &gt; 2\n  \"\"\"\n    ),\n    Config({\"title\": \"Zoomed Polar Line chart\"}),\n)</code></pre>"},{"location":"examples/presets/","title":"Preset charts","text":""},{"location":"examples/presets/02_C_R_column/","title":"Column Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config.column(\n        {\n            \"x\": \"Joy factors\",\n            \"y\": \"Value 2 (+)\",\n            \"title\": \"Column Chart\",\n        }\n    )\n)</code></pre>"},{"location":"examples/presets/03_C_R_grouped_column_negative/","title":"Grouped Column Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config.groupedColumn(\n        {\n            \"x\": \"Country\",\n            \"y\": \"Value 5 (+/-)\",\n            \"groupedBy\": \"Joy factors\",\n            \"title\": \"Grouped Column Chart\",\n        }\n    )\n)</code></pre>"},{"location":"examples/presets/04_C_R_stacked_column/","title":"Stacked Column Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config.stackedColumn(\n        {\n            \"x\": \"Country\",\n            \"y\": \"Value 2 (+)\",\n            \"stackedBy\": \"Joy factors\",\n            \"title\": \"Stacked Column Chart\",\n        }\n    )\n)</code></pre>"},{"location":"examples/presets/05_C_R_splitted_column/","title":"Splitted Column Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config.splittedColumn(\n        {\n            \"x\": \"Year\",\n            \"y\": \"Value 2 (+)\",\n            \"splittedBy\": \"Joy factors\",\n            \"title\": \"Splitted Column Chart\",\n        }\n    )\n)</code></pre>"},{"location":"examples/presets/06_C_R_percentage_column/","title":"Percentage Column Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config.percentageColumn(\n        {\n            \"x\": \"Country\",\n            \"y\": \"Value 2 (+)\",\n            \"stackedBy\": \"Joy factors\",\n            \"title\": \"Percentage Column Chart\",\n        }\n    )\n)</code></pre>"},{"location":"examples/presets/08_C_R_waterfall/","title":"Waterfall Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config.waterfall(\n        {\n            \"x\": \"Year\",\n            \"y\": \"Value 5 (+/-)\",\n            \"title\": \"Waterfall Chart\",\n        }\n    ),\n    Style(\n        {\n            \"plot\": {\n                \"marker\": {\n                    \"colorGradient\": \"#ff001b 0,#ff001b 0.5,#7e79e8 0.5,#7e79e8 1\",\n                    \"label\": {\"position\": \"top\"},\n                }\n            }\n        }\n    ),\n)</code></pre>"},{"location":"examples/presets/09_C_R_stacked_mekko/","title":"Stacked Mekko Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_4.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config.mekko(\n        {\n            \"x\": \"Value 1 (+)\",\n            \"y\": \"Value 2 (+)\",\n            \"stackedBy\": \"Joy factors\",\n            \"groupedBy\": \"Country\",\n            \"title\": \"Stacked Mekko Chart\",\n        }\n    )\n)</code></pre>"},{"location":"examples/presets/10_C_R_marimekko/","title":"Marimekko Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_4.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config.marimekko(\n        {\n            \"x\": \"Value 2 (+)\",\n            \"y\": \"Value 3 (+)\",\n            \"stackedBy\": \"Joy factors\",\n            \"groupedBy\": \"Country\",\n            \"title\": \"Marimekko Chart\",\n        }\n    )\n)</code></pre>"},{"location":"examples/presets/13_C_R_bar_negative/","title":"Bar Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config.bar(\n        {\"x\": \"Value 5 (+/-)\", \"y\": \"Country\", \"title\": \"Bar Chart\"}\n    )\n)</code></pre>"},{"location":"examples/presets/14_C_R_grouped_bar_negative/","title":"Grouped Bar Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config.groupedBar(\n        {\n            \"x\": \"Value 5 (+/-)\",\n            \"y\": \"Country\",\n            \"groupedBy\": \"Joy factors\",\n            \"title\": \"Grouped Bar Chart\",\n        }\n    )\n)</code></pre>"},{"location":"examples/presets/15_C_R_stacked_bar/","title":"Stacked Bar Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config.stackedBar(\n        {\n            \"x\": \"Value 2 (+)\",\n            \"y\": \"Country\",\n            \"stackedBy\": \"Joy factors\",\n            \"title\": \"Stacked Bar Chart\",\n        }\n    )\n)</code></pre>"},{"location":"examples/presets/16_C_R_splitted_bar/","title":"Splitted Bar Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config.splittedBar(\n        {\n            \"x\": \"Value 2 (+)\",\n            \"y\": \"Year\",\n            \"splittedBy\": \"Joy factors\",\n            \"title\": \"Splitted Bar Chart\",\n        }\n    )\n)</code></pre>"},{"location":"examples/presets/17_C_R_percentage_bar/","title":"Percentage Bar Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config.percentageBar(\n        {\n            \"x\": \"Value 2 (+)\",\n            \"y\": \"Country\",\n            \"stackedBy\": \"Joy factors\",\n            \"title\": \"Percentage Bar Chart\",\n        }\n    )\n)</code></pre>"},{"location":"examples/presets/20_C_C_lollipop_chart/","title":"Lollipop Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config.lollipop(\n        {\"x\": \"Year\", \"y\": \"Value 1 (+)\", \"title\": \"Lollipop Chart\"}\n    )\n)</code></pre>"},{"location":"examples/presets/22_C_C_scatter/","title":"Scatter Plot","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config.scatter(\n        {\n            \"x\": \"Value 6 (+/-)\",\n            \"y\": \"Value 5 (+/-)\",\n            \"dividedBy\": \"Year\",\n            \"title\": \"Scatter Plot\",\n        }\n    )\n)</code></pre>"},{"location":"examples/presets/24_C_C_bubbleplot/","title":"Bubble Plot","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config.bubbleplot(\n        {\n            \"x\": \"Value 4 (+/-)\",\n            \"y\": \"Value 5 (+/-)\",\n            \"color\": \"Joy factors\",\n            \"dividedBy\": \"Country\",\n            \"size\": \"Value 3 (+)\",\n            \"title\": \"Bubble Plot\",\n        }\n    )\n)</code></pre>"},{"location":"examples/presets/27_C_A_area_negative/","title":"Area Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config.area(\n        {\"x\": \"Year\", \"y\": \"Value 5 (+/-)\", \"title\": \"Area Chart\"}\n    )\n)</code></pre>"},{"location":"examples/presets/28_C_A_stacked_area/","title":"Stacked Area Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config.stackedArea(\n        {\n            \"x\": \"Year\",\n            \"y\": \"Value 2 (+)\",\n            \"stackedBy\": \"Country\",\n            \"title\": \"Stacked Area Chart\",\n        }\n    )\n)</code></pre>"},{"location":"examples/presets/29_C_A_percentage_area/","title":"Percentage Area Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config.percentageArea(\n        {\n            \"x\": \"Year\",\n            \"y\": \"Value 2 (+)\",\n            \"stackedBy\": \"Country\",\n            \"title\": \"Percentage Area Chart\",\n        }\n    )\n)</code></pre>"},{"location":"examples/presets/31_C_A_splitted_area/","title":"Splitted Area Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config.splittedArea(\n        {\n            \"x\": \"Year\",\n            \"y\": \"Value 2 (+)\",\n            \"splittedBy\": \"Country\",\n            \"title\": \"Splitted Area Chart\",\n        }\n    )\n)</code></pre>"},{"location":"examples/presets/32_C_A_stream/","title":"Stream Graph","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/music_industry_history_1.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config.stream(\n        {\n            \"x\": \"Year\",\n            \"y\": \"Revenue [$]\",\n            \"stackedBy\": \"Format\",\n            \"title\": \"Stream Graph\",\n        }\n    ),\n    Style(\n        {\n            \"plot\": {\n                \"yAxis\": {\"label\": {\"numberScale\": \"K, M, B, T\"}},\n                \"xAxis\": {\"label\": {\"angle\": \"-45deg\"}},\n            }\n        }\n    ),\n)</code></pre>"},{"location":"examples/presets/33_C_A_vertical_stream/","title":"Vertical Stream Graph","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/music_industry_history_1.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config.verticalStream(\n        {\n            \"x\": \"Revenue [$]\",\n            \"y\": \"Year\",\n            \"stackedBy\": \"Format\",\n            \"title\": \"Vertical Stream Graph\",\n        }\n    ),\n    Style(\n        {\n            \"plot\": {\n                \"yAxis\": {\"label\": {\"numberScale\": \"K, M, B, T\"}},\n                \"xAxis\": {\"label\": {\"angle\": \"-45deg\"}},\n            }\n        }\n    ),\n)</code></pre>"},{"location":"examples/presets/34_C_A_violin/","title":"Violin Graph","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/music_industry_history_1.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config.violin(\n        {\n            \"x\": \"Year\",\n            \"y\": \"Revenue [$]\",\n            \"splittedBy\": \"Format\",\n            \"title\": \"Violin Graph\",\n        }\n    ),\n    Style(\n        {\n            \"plot\": {\n                \"yAxis\": {\"label\": {\"numberScale\": \"K, M, B, T\"}},\n                \"xAxis\": {\"label\": {\"angle\": \"-45deg\"}},\n            }\n        }\n    ),\n)</code></pre>"},{"location":"examples/presets/35_C_A_vertical_violin/","title":"Vertical Violin Graph","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/music_industry_history_1.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config.verticalViolin(\n        {\n            \"x\": \"Revenue [$]\",\n            \"y\": \"Year\",\n            \"splittedBy\": \"Format\",\n            \"title\": \"Vertical Violin Graph\",\n        }\n    ),\n    Style(\n        {\n            \"plot\": {\n                \"xAxis\": {\"interlacing\": {\"color\": \"#ffffff00\"}},\n                \"yAxis\": {\"label\": {\"numberScale\": \"K, M, B, T\"}},\n            }\n        }\n    ),\n)</code></pre>"},{"location":"examples/presets/38_C_L_line/","title":"Line Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config.line(\n        {\n            \"x\": \"Year\",\n            \"y\": \"Value 6 (+/-)\",\n            \"dividedBy\": \"Country\",\n            \"title\": \"Line Chart\",\n        }\n    )\n)</code></pre>"},{"location":"examples/presets/39_C_L_vertical_line/","title":"Vertical Line Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config.line(\n        {\n            \"x\": \"Value 6 (+/-)\",\n            \"y\": \"Year\",\n            \"dividedBy\": \"Country\",\n            \"title\": \"Vertical Line Chart\",\n        }\n    )\n)</code></pre>"},{"location":"examples/presets/40_P_R_pie/","title":"Pie Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config.pie(\n        {\n            \"angle\": \"Value 2 (+)\",\n            \"by\": \"Joy factors\",\n            \"title\": \"Pie Chart\",\n        }\n    )\n)</code></pre>"},{"location":"examples/presets/42_P_R_polar_column/","title":"Polar Column Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config.polarColumn(\n        {\n            \"angle\": \"Joy factors\",\n            \"radius\": \"Value 2 (+)\",\n            \"title\": \"Polar Column Chart\",\n        }\n    )\n)</code></pre>"},{"location":"examples/presets/42a_P_R_polar_stacked_column/","title":"Polar Stacked Column Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config.polarStackedColumn(\n        {\n            \"angle\": \"Country\",\n            \"radius\": \"Value 2 (+)\",\n            \"stackedBy\": \"Joy factors\",\n            \"title\": \"Polar Stacked Column Chart\",\n        }\n    )\n)</code></pre>"},{"location":"examples/presets/44_P_R_variable_radius_pie_chart/","title":"Variable Radius Pie Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config.variableRadiusPie(\n        {\n            \"angle\": \"Value 2 (+)\",\n            \"radius\": \"Value 1 (+)\",\n            \"by\": \"Joy factors\",\n            \"title\": \"Variable Radius Pie Chart\",\n        }\n    )\n)</code></pre>"},{"location":"examples/presets/49_P_R_radial_bar/","title":"Radial Bar Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config.radialBar(\n        {\n            \"angle\": \"Value 1 (+)\",\n            \"radius\": \"Country\",\n            \"title\": \"Radial Bar Chart\",\n        }\n    )\n)</code></pre>"},{"location":"examples/presets/50_P_R_radial_stacked_bar/","title":"Radial Stacked Bar Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config.radialStackedBar(\n        {\n            \"angle\": \"Value 2 (+)\",\n            \"radius\": \"Country\",\n            \"stackedBy\": \"Joy factors\",\n            \"title\": \"Radial Stacked Bar Chart\",\n        }\n    )\n)</code></pre>"},{"location":"examples/presets/51_P_R_donut/","title":"Donut Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config.donut(\n        {\n            \"angle\": \"Value 2 (+)\",\n            \"stackedBy\": \"Joy factors\",\n            \"title\": \"Donut Chart\",\n        }\n    )\n)</code></pre>"},{"location":"examples/presets/52_P_R_nested_donut/","title":"Nested Donut Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_3.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config.nestedDonut(\n        {\n            \"angle\": \"Value 2 (+)\",\n            \"stackedBy\": \"Joy factors\",\n            \"radius\": \"Country\",\n            \"title\": \"Nested Donut Chart\",\n        }\n    ),\n    Style(\n        {\n            \"plot\": {\n                \"marker\": {\n                    \"rectangleSpacing\": \"0\",\n                    \"borderWidth\": 1,\n                    \"borderOpacity\": 0,\n                }\n            }\n        }\n    ),\n)</code></pre>"},{"location":"examples/presets/53_P_C_polar_scatter/","title":"Polar Scatter Plot","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config.polarScatter(\n        {\n            \"angle\": \"Value 3 (+)\",\n            \"radius\": \"Value 2 (+)\",\n            \"dividedBy\": \"Country\",\n            \"title\": \"Polar Scatter Plot\",\n        }\n    )\n)</code></pre>"},{"location":"examples/presets/56_P_A_polar_line/","title":"Polar Line Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config.polarLine(\n        {\n            \"angle\": \"Year\",\n            \"radius\": \"Value 2 (+)\",\n            \"dividedBy\": \"Country\",\n            \"title\": \"Polar Line Chart\",\n        }\n    )\n)</code></pre>"},{"location":"examples/presets/58_W_R_treemap/","title":"Treemap","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config.treemap(\n        {\n            \"size\": \"Value 2 (+)\",\n            \"color\": \"Country_code\",\n            \"title\": \"Treemap\",\n        }\n    )\n)</code></pre>"},{"location":"examples/presets/59_W_R_stacked_treemap/","title":"Stacked Treemap","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config.stackedTreemap(\n        {\n            \"size\": \"Value 2 (+)\",\n            \"color\": \"Joy factors\",\n            \"title\": \"Stacked Treemap\",\n            \"dividedBy\": \"Country_code\",\n        }\n    )\n)</code></pre>"},{"location":"examples/presets/60_W_R_heatmap/","title":"Heatmap","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_6.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config.heatmap(\n        {\n            \"x\": \"Year\",\n            \"y\": \"Country_code\",\n            \"lightness\": \"Value 3 (+)\",\n            \"title\": \"Heatmap\",\n        }\n    ),\n    Style({\"plot\": {\"marker\": {\"rectangleSpacing\": 0}}}),\n)</code></pre>"},{"location":"examples/presets/61_W_R_bubble_chart/","title":"Bubble Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config.bubble(\n        {\n            \"size\": \"Value 5 (+/-)\",\n            \"color\": \"Country_code\",\n            \"title\": \"Bubble Chart\",\n        }\n    )\n)</code></pre>"},{"location":"examples/presets/62_W_R_stacked_bubble/","title":"Stacked Bubble Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config.stackedBubble(\n        {\n            \"size\": \"Value 2 (+)\",\n            \"color\": \"Joy factors\",\n            \"stackedBy\": \"Country_code\",\n            \"title\": \"Stacked Bubble Chart\",\n        }\n    )\n)</code></pre>"},{"location":"examples/static/","title":"Static charts","text":""},{"location":"examples/static/NO_spiderweb_line_2dis_1con/","title":"Polar Line Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": \"Value 2 (+)\",\n                \"color\": \"Country\",\n            },\n            \"title\": \"Polar Line Chart\",\n            \"geometry\": \"line\",\n            \"coordSystem\": \"polar\",\n        }\n    )\n)</code></pre>"},{"location":"examples/static/area_negative_1dis_1con/","title":"Area Chart with (-) Nums","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": \"Value 5 (+/-)\",\n                \"label\": \"Value 5 (+/-)\",\n            },\n            \"title\": \"Area Chart with (-) Nums\",\n            \"geometry\": \"area\",\n        }\n    )\n)</code></pre>"},{"location":"examples/static/bar_rectangle_negative_1dis_1con/","title":"Bar Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Value 5 (+/-)\",\n                \"y\": \"Country\",\n                \"color\": \"Country\",\n                \"label\": \"Value 5 (+/-)\",\n            },\n            \"title\": \"Bar Chart\",\n        }\n    )\n)</code></pre>"},{"location":"examples/static/bubble_circle_1dis_2con/","title":"Bubble Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"color\": \"Country_code\",\n                \"label\": \"Country_code\",\n                \"size\": \"Value 5 (+/-)\",\n            },\n            \"title\": \"Bubble Chart\",\n            \"geometry\": \"circle\",\n        }\n    )\n)</code></pre>"},{"location":"examples/static/bubble_circle_2dis_2con/","title":"Stacked Bubble Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"color\": \"Joy factors\",\n                \"size\": [\"Country_code\", \"Value 2 (+)\"],\n                \"label\": \"Country_code\",\n            },\n            \"title\": \"Stacked Bubble Chart\",\n            \"geometry\": \"circle\",\n        }\n    )\n)</code></pre>"},{"location":"examples/static/column/","title":"Column Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config.column(\n        {\n            \"x\": \"Joy factors\",\n            \"y\": \"Value 2 (+)\",\n            \"title\": \"Column Chart\",\n        }\n    )\n)</code></pre>"},{"location":"examples/static/column_grouped_rectangle_negative_2dis_1con/","title":"Grouped Column Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": [\"Joy factors\", \"Country\"],\n                \"y\": \"Value 5 (+/-)\",\n                \"color\": \"Joy factors\",\n                \"label\": \"Value 5 (+/-)\",\n            },\n            \"title\": \"Grouped Column Chart\",\n        }\n    ),\n    Style(\n        {\n            \"plot\": {\n                \"marker\": {\n                    \"label\": {\n                        \"fontSize\": 6,\n                        \"orientation\": \"vertical\",\n                        \"angle\": -3.14,\n                    }\n                }\n            }\n        }\n    ),\n)</code></pre>"},{"location":"examples/static/column_stacked_rectangle_1dis_1con/","title":"Single Stacked Column Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"y\": [\"Joy factors\", \"Value 2 (+)\"],\n                \"color\": \"Joy factors\",\n                \"label\": \"Value 2 (+)\",\n            },\n            \"title\": \"Single Stacked Column Chart\",\n        }\n    )\n)</code></pre>"},{"location":"examples/static/column_stacked_rectangle_negative_2dis_1con/","title":"Stacked Column Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Country\",\n                \"y\": [\"Joy factors\", \"Value 2 (+)\"],\n                \"color\": \"Joy factors\",\n                \"label\": \"Value 2 (+)\",\n            },\n            \"title\": \"Stacked Column Chart\",\n        }\n    ),\n    Style(\n        {\n            \"plot\": {\n                \"xAxis\": {\"label\": {\"angle\": 2.3}},\n                \"marker\": {\n                    \"label\": {\n                        \"fontSize\": 7,\n                        \"orientation\": \"vertical\",\n                        \"angle\": -3.14,\n                    }\n                },\n            }\n        }\n    ),\n)</code></pre>"},{"location":"examples/static/coxcomb_stacked_rectangle_2dis_1con/","title":"Coxcomb Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": [\"Joy factors\", \"Value 2 (+)\"],\n                \"color\": \"Joy factors\",\n            },\n            \"title\": \"Coxcomb Chart\",\n            \"coordSystem\": \"polar\",\n        }\n    )\n)</code></pre>"},{"location":"examples/static/donut_rectangle_1dis_1con/","title":"Donut Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": [\"Joy factors\", \"Value 2 (+)\"],\n                \"y\": {\"range\": {\"min\": \"-200%\"}},\n                \"color\": \"Joy factors\",\n                \"label\": \"Value 2 (+)\",\n            },\n            \"title\": \"Donut Chart\",\n            \"coordSystem\": \"polar\",\n        }\n    )\n)</code></pre>"},{"location":"examples/static/dotplot_circle_negative_1dis_1con/","title":"Dot Plot","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\"x\": [\"Year\", \"Value 5 (+/-)\"]},\n            \"title\": \"Dot Plot\",\n            \"geometry\": \"circle\",\n        }\n    )\n)</code></pre>"},{"location":"examples/static/histogram_rectangle_negative_1dis_1con/","title":"Histogram","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": \"Value 5 (+/-)\",\n                \"label\": \"Value 5 (+/-)\",\n            },\n            \"title\": \"Histogram\",\n            \"align\": \"none\",\n        }\n    ),\n    Style({\"plot.marker.rectangleSpacing\": 0.07}),\n)</code></pre>"},{"location":"examples/static/line_negative_1dis_1con/","title":"Single Line Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": \"Value 5 (+/-)\",\n                \"label\": \"Value 5 (+/-)\",\n            },\n            \"title\": \"Single Line Chart\",\n            \"geometry\": \"line\",\n        }\n    )\n)</code></pre>"},{"location":"examples/static/line_negative_2dis_1con/","title":"Line Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": \"Value 5 (+/-)\",\n                \"color\": \"Country\",\n            },\n            \"title\": \"Line Chart\",\n            \"geometry\": \"line\",\n        }\n    )\n)</code></pre>"},{"location":"examples/static/marimekko_rectangle_2dis_2con/","title":"Marimekko Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_4.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": [\"Country\", \"Value 2 (+)\"],\n                \"y\": [\"Joy factors\", \"Value 3 (+)\"],\n                \"color\": \"Joy factors\",\n                \"label\": [\"Country\", \"Value 2 (+)\"],\n            },\n            \"title\": \"Marimekko Chart\",\n            \"align\": \"stretch\",\n            \"orientation\": \"horizontal\",\n        }\n    ),\n    Style(\n        {\n            \"plot\": {\n                \"marker\": {\n                    \"label\": {\n                        \"format\": \"dimensionsFirst\",\n                        \"fontSize\": \"0.7em\",\n                    }\n                }\n            }\n        }\n    ),\n)</code></pre>"},{"location":"examples/static/mekko_rectangle_1dis_2con/","title":"Mekko Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_4.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": [\"Country\", \"Value 2 (+)\"],\n                \"y\": {\n                    \"set\": [\"Value 1 (+)\"],\n                    \"range\": {\"max\": \"110%\"},\n                },\n                \"color\": \"Country\",\n                \"label\": [\"Value 2 (+)\", \"Country\"],\n            },\n            \"title\": \"Mekko Chart\",\n        }\n    )\n)</code></pre>"},{"location":"examples/static/pie_rectangle_1dis_1con/","title":"Pie Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": [\"Joy factors\", \"Value 2 (+)\"],\n                \"color\": \"Joy factors\",\n                \"label\": \"Value 2 (+)\",\n            },\n            \"title\": \"Pie Chart\",\n            \"coordSystem\": \"polar\",\n        }\n    )\n)</code></pre>"},{"location":"examples/static/radial_rectangle_1dis_1con/","title":"Radial Bar Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Value 2 (+)\",\n                \"y\": {\n                    \"set\": [\"Joy factors\"],\n                    \"range\": {\"min\": \"-30%\"},\n                },\n                \"color\": \"Joy factors\",\n                \"label\": \"Value 2 (+)\",\n            },\n            \"title\": \"Radial Bar Chart\",\n            \"coordSystem\": \"polar\",\n        }\n    )\n)</code></pre>"},{"location":"examples/static/radial_stacked_rectangle_2dis_1con/","title":"Stacked Radial Bar Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": [\"Country\", \"Value 2 (+)\"],\n                \"y\": {\"set\": [\"Year\"], \"range\": {\"min\": \"-20%\"}},\n                \"color\": \"Country\",\n                \"lightness\": \"Year\",\n            },\n            \"title\": \"Stacked Radial Bar Chart\",\n            \"coordSystem\": \"polar\",\n        }\n    )\n)</code></pre>"},{"location":"examples/static/scatterplot_circle_negative_1dis_2con/","title":"Scatter Plot","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Value 6 (+/-)\",\n                \"y\": \"Value 5 (+/-)\",\n                \"noop\": \"Year\",\n                \"label\": \"Year\",\n            },\n            \"title\": \"Scatter Plot\",\n            \"geometry\": \"circle\",\n        }\n    )\n)</code></pre>"},{"location":"examples/static/scatterplot_circle_negative_2dis_3con/","title":"Bubble Plot","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Value 6 (+/-)\",\n                \"y\": \"Value 5 (+/-)\",\n                \"color\": \"Country\",\n                \"size\": \"Value 4 (+/-)\",\n                \"label\": \"Value 5 (+/-)\",\n            },\n            \"title\": \"Bubble Plot\",\n            \"geometry\": \"circle\",\n        }\n    )\n)</code></pre>"},{"location":"examples/static/spiderweb_area_1dis_1con/","title":"Polar Area Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": {\n                    \"set\": [\"Value 2 (+)\"],\n                    \"range\": {\"max\": \"130%\"},\n                },\n                \"label\": \"Value 2 (+)\",\n            },\n            \"title\": \"Polar Area Chart\",\n            \"geometry\": \"area\",\n            \"coordSystem\": \"polar\",\n        }\n    ),\n    Style(\n        {\n            \"plot\": {\n                \"marker\": {\n                    \"label\": {\n                        \"orientation\": \"tangential\",\n                        \"angle\": -1.57,\n                    }\n                }\n            }\n        }\n    ),\n)</code></pre>"},{"location":"examples/static/spiderweb_line_1dis_1con/","title":"Polar Single Line Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": {\n                    \"set\": [\"Value 2 (+)\"],\n                    \"range\": {\"max\": \"130%\"},\n                },\n                \"label\": \"Value 2 (+)\",\n            },\n            \"title\": \"Polar Single Line Chart\",\n            \"geometry\": \"line\",\n            \"coordSystem\": \"polar\",\n        }\n    ),\n    Style(\n        {\n            \"plot\": {\n                \"marker\": {\n                    \"label\": {\n                        \"orientation\": \"tangential\",\n                        \"angle\": -1.57,\n                    }\n                }\n            }\n        }\n    ),\n)</code></pre>"},{"location":"examples/static/stacked_area_2dis_1con/","title":"Stacked Area Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": [\"Country\", \"Value 2 (+)\"],\n                \"color\": \"Country\",\n            },\n            \"title\": \"Stacked Area Chart\",\n            \"geometry\": \"area\",\n        }\n    )\n)</code></pre>"},{"location":"examples/static/stacked_mekko_rectangle_2dis_2con/","title":"Stacked Mekko Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu_data_4.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": [\"Country\", \"Value 2 (+)\"],\n                \"y\": {\n                    \"set\": [\"Joy factors\", \"Value 3 (+)\"],\n                    \"range\": {\"max\": \"110%\"},\n                },\n                \"color\": \"Joy factors\",\n                \"label\": [\"Value 2 (+)\", \"Country\"],\n            },\n            \"title\": \"Stacked Mekko Chart\",\n            \"orientation\": \"horizontal\",\n        }\n    )\n)</code></pre>"},{"location":"examples/static/stream_stacked_area_3dis_1con/","title":"Stacked Streamgraph","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": [\"Year\", \"Joy factors\"],\n                \"y\": [\"Value 3 (+)\", \"Country_code\"],\n                \"color\": \"Country_code\",\n            },\n            \"title\": \"Stacked Streamgraph\",\n            \"geometry\": \"area\",\n            \"align\": \"center\",\n        }\n    )\n)</code></pre>"},{"location":"examples/static/treemap_rectangle_1dis_1con/","title":"Treemap","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"label\": \"Country_code\",\n                \"size\": \"Value 2 (+)\",\n            },\n            \"title\": \"Treemap\",\n        }\n    )\n)</code></pre>"},{"location":"examples/static/treemap_rectangle_2dis_2con/","title":"Stacked Treemap","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"color\": \"Joy factors\",\n                \"size\": [\"Value 2 (+)\", \"Country_code\"],\n                \"label\": \"Country_code\",\n                \"lightness\": \"Value 2 (+)\",\n            },\n            \"title\": \"Stacked Treemap\",\n        }\n    )\n)</code></pre>"},{"location":"examples/static/waterfall_rectangle_negative_1dis_1con/","title":"Waterfall Chart","text":"Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/chart_types_eu.csv\",\n    dtype={\"Year\": str, \"Timeseries\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": \"Year\",\n                \"y\": [\"Year\", \"Value 5 (+/-)\"],\n                \"label\": \"Value 5 (+/-)\",\n            },\n            \"title\": \"Waterfall Chart\",\n            \"legend\": None,\n        }\n    ),\n    Style({\"plot\": {\"marker\": {\"label\": {\"position\": \"top\"}}}}),\n)</code></pre>"},{"location":"reference/ipyvizzu/","title":"Code reference","text":"<p>Build animated charts in <code>Jupyter Notebook</code> and similar environments with a simple <code>Python</code> syntax.</p> <p><code>ipyvizzu</code> package consists of the following main modules:</p> <ul> <li>Chart</li> <li>Animation</li> <li>Animation Control</li> <li>Method</li> <li>Event</li> <li>Json</li> <li>Template</li> <li>Schema</li> </ul> <p><code>ipyvizzu</code> package imports the following objects in <code>__init__.py</code>:</p> <ul> <li>Chart</li> <li>Data</li> <li>Config</li> <li>Style</li> <li>Keyframe</li> <li>Snapshot</li> <li>Animation</li> <li>InferType</li> <li>AbstractAnimation</li> <li>PlainAnimation</li> <li>AnimationMerger</li> <li>AnimationControl</li> <li>Animate</li> <li>Feature</li> <li>Store</li> <li>EventOn</li> <li>EventOff</li> <li>Log</li> <li>Method</li> <li>EventHandler</li> <li>RawJavaScript</li> <li>RawJavaScriptEncoder</li> <li>ChartProperty</li> <li>DisplayTarget</li> <li>DisplayTemplate</li> </ul>"},{"location":"reference/ipyvizzu/#ipyvizzu.Chart","title":"<code>ipyvizzu.Chart</code>","text":"<p>A class for representing a wrapper over Vizzu chart.</p> Source code in <code>src/ipyvizzu/chart.py</code> <pre><code>class Chart:\n    \"\"\"A class for representing a wrapper over Vizzu chart.\"\"\"\n\n    # pylint: disable=too-many-instance-attributes\n\n    VIZZU: str = \"https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js\"\n    \"\"\"A variable for storing the default url of vizzu package.\"\"\"\n\n    def __init__(\n        self,\n        vizzu: str = VIZZU,\n        width: str = \"800px\",\n        height: str = \"480px\",\n        display: Union[DisplayTarget, str] = DisplayTarget.ACTUAL,\n    ):\n        \"\"\"\n        Chart constructor.\n\n        Args:\n            vizzu: The url of Vizzu JavaScript package.\n            width: The width of the chart.\n            height: The height of the chart.\n            display: The display behaviour of the chart.\n        \"\"\"\n\n        self._chart_id: str = uuid.uuid4().hex[:7]\n\n        self._vizzu: str = vizzu\n        self._width: str = width\n        self._height: str = height\n\n        self._display_target: DisplayTarget = DisplayTarget(display)\n        self._calls: List[str] = []\n        self._last_anim: Optional[str] = None\n        self._showed: bool = False\n\n        self._initialized: bool = False\n        self._scroll_into_view: bool = False\n\n    @staticmethod\n    def _register_events() -&gt; None:\n        ipy = get_ipython()\n        if ipy is not None:\n            ipy.events.register(\"pre_run_cell\", Chart._register_pre_run_cell)\n\n    @staticmethod\n    def _register_pre_run_cell() -&gt; None:\n        display_javascript(DisplayTemplate.CLEAR_INHIBITSCROLL, raw=True)\n\n    @property\n    def scroll_into_view(self) -&gt; bool:\n        \"\"\"\n        A property for turning on/off the scroll into view feature.\n\n        Returns:\n            The value of the property (default `False`).\n        \"\"\"\n\n        return self._scroll_into_view\n\n    @scroll_into_view.setter\n    def scroll_into_view(self, scroll_into_view: Optional[bool]):\n        self._scroll_into_view = bool(scroll_into_view)\n\n    @property\n    def control(self) -&gt; AnimationControl:\n        \"\"\"\n        A property for returning a control object of the last animation.\n\n        Raises:\n            AssertionError: If called before any animation plays.\n\n        Returns:\n            The control object of the last animation.\n        \"\"\"\n        assert self._last_anim, \"must be used after an animation.\"\n        return AnimationControl(self._chart_id, self._last_anim, self._display)\n\n    def initializing(self) -&gt; None:\n        \"\"\"A method for initializing the chart.\"\"\"\n\n        if not self._initialized:\n            self._initialized = True\n            ipyvizzurawjs = pkgutil.get_data(__name__, \"templates/ipyvizzu.js\")\n            ipyvizzujs = ipyvizzurawjs.decode(\"utf-8\")  # type: ignore\n            self._display(DisplayTemplate.IPYVIZZUJS.format(ipyvizzujs=ipyvizzujs))\n\n            if self._display_target != DisplayTarget.MANUAL:\n                Chart._register_events()\n\n            self._display(\n                DisplayTemplate.INIT.format(\n                    chart_id=self._chart_id,\n                    vizzu=self._vizzu,\n                    div_width=self._width,\n                    div_height=self._height,\n                )\n            )\n\n    def animate(\n        self,\n        *animations: AbstractAnimation,\n        **options: Optional[Union[str, int, float, dict]],\n    ) -&gt; None:\n        \"\"\"\n        A method for changing the state of the chart.\n\n        Args:\n            *animations:\n                List of AbstractAnimation inherited objects such as [Data][ipyvizzu.animation.Data],\n                [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style].\n            **options: Dictionary of animation options for example `duration=1`.\n                For information on all available animation options see the\n                [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/interfaces/vizzu.Anim.Options/#properties).\n\n        Raises:\n            ValueError: If `animations` is not set.\n\n        Example:\n            Reset the chart styles:\n\n                chart.animate(Style(None))\n        \"\"\"  # pylint: disable=line-too-long\n\n        if not animations:\n            raise ValueError(\"No animation was set.\")\n\n        animation = AnimationMerger.merge_animations(animations)\n        animate = Animate(animation, options)\n\n        self._last_anim = uuid.uuid4().hex[:7]\n        self._display(\n            DisplayTemplate.ANIMATE.format(\n                display_target=self._display_target.value,\n                chart_id=self._chart_id,\n                anim_id=self._last_anim,\n                scroll=str(self._scroll_into_view).lower(),\n                **animate.dump(),\n            )\n        )\n\n    def feature(self, name: str, enabled: bool) -&gt; None:\n        \"\"\"\n        A method for turning on/off features of the chart.\n\n        Args:\n            name:\n                The name of the chart feature.\n                For information on all available features see the\n                [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/modules/vizzu/#feature).\n            enabled: The new state of the chart feature.\n\n        Example:\n            Turn on `tooltip` of the chart:\n\n                chart.feature(\"tooltip\", True)\n        \"\"\"  # pylint: disable=line-too-long\n\n        self._display(\n            DisplayTemplate.FEATURE.format(\n                chart_id=self._chart_id,\n                **Feature(name, enabled).dump(),\n            )\n        )\n\n    def store(self) -&gt; Snapshot:\n        \"\"\"\n        A method for saving and storing the actual state of the chart.\n\n        Returns:\n            A Snapshot object wich stores the actual state of the chart.\n\n        Example:\n            Save and restore the actual state of the chart:\n\n                snapshot = chart.store()\n                ...\n                chart.animate(snapshot)\n        \"\"\"\n\n        snapshot_id = uuid.uuid4().hex[:7]\n        self._display(\n            DisplayTemplate.STORE.format(\n                chart_id=self._chart_id, **Store(snapshot_id).dump()\n            )\n        )\n        return Snapshot(snapshot_id)\n\n    def on(  # pylint: disable=invalid-name\n        self, event: str, handler: str\n    ) -&gt; EventHandler:\n        \"\"\"\n        A method for creating and turning on an event handler.\n\n        Args:\n            event:\n                The type of the event.\n                For information on all available events see the\n                [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/modules/vizzu.Event/#type).\n            handler: The JavaScript method of the event.\n\n        Returns:\n            The turned on event handler object.\n\n        Example:\n            Turn on an event handler which prints an alert message\n            when someone clicks on the chart:\n\n                handler = chart.on(\"click\", \"alert(JSON.stringify(event.data));\")\n        \"\"\"  # pylint: disable=line-too-long\n\n        event_handler = EventHandler(event, handler)\n        self._display(\n            DisplayTemplate.SET_EVENT.format(\n                chart_id=self._chart_id,\n                **EventOn(event_handler).dump(),\n            )\n        )\n        return event_handler\n\n    def off(self, event_handler: EventHandler) -&gt; None:\n        \"\"\"\n        A method for turning off an event handler.\n\n        Args:\n            event_handler: A previously created event handler object.\n\n        Example:\n            Turn off a previously created event handler:\n\n                chart.off(handler)\n        \"\"\"\n\n        self._display(\n            DisplayTemplate.CLEAR_EVENT.format(\n                chart_id=self._chart_id,\n                **EventOff(event_handler).dump(),\n            )\n        )\n\n    def log(self, chart_property: ChartProperty) -&gt; None:\n        \"\"\"\n        A method for printing chart properties to the browser console.\n\n        Args:\n            chart_property:\n                A chart property such as\n                [CONFIG][ipyvizzu.template.ChartProperty] and\n                [STYLE][ipyvizzu.template.ChartProperty].\n\n        Example:\n            Log the actual style of the chart to the browser console:\n\n                chart.log(ChartProperty.STYLE)\n        \"\"\"\n\n        self._display(\n            DisplayTemplate.LOG.format(\n                chart_id=self._chart_id, **Log(chart_property).dump()\n            )\n        )\n\n    def _repr_html_(self) -&gt; str:\n        assert (\n            self._display_target == DisplayTarget.MANUAL\n        ), \"chart._repr_html_() can be used with display=DisplayTarget.MANUAL only\"\n        assert not self._showed, \"cannot be used after chart displayed.\"\n        self._showed = True\n        if not self._initialized:\n            return \"\"\n        html_id = uuid.uuid4().hex[:7]\n        script = (\n            self._calls[0]\n            + \"\\n\"\n            + \"\\n\".join(self._calls[1:]).replace(\n                \"element\", f'document.getElementById(\"{html_id}\")'\n            )\n        )\n        return f'&lt;div id=\"{html_id}\"&gt;&lt;script&gt;{script}&lt;/script&gt;&lt;/div&gt;'\n\n    def show(self) -&gt; None:\n        \"\"\"\n        A method for displaying the assembled JavaScript code.\n\n        Raises:\n            AssertionError: If [display][ipyvizzu.Chart.__init__]\n                is not [DisplayTarget.MANUAL][ipyvizzu.template.DisplayTarget].\n            AssertionError: If chart already has been displayed.\n        \"\"\"\n\n        assert (\n            self._display_target == DisplayTarget.MANUAL\n        ), \"chart.show() can be used with display=DisplayTarget.MANUAL only\"\n        assert not self._showed, \"cannot be used after chart displayed\"\n        display_javascript(\n            \"\\n\".join(self._calls),\n            raw=True,\n        )\n        self._showed = True\n\n    def _display(self, javascript: str) -&gt; None:\n        if not self._initialized:\n            self.initializing()\n        if self._display_target != DisplayTarget.MANUAL:\n            display_javascript(\n                javascript,\n                raw=True,\n            )\n        else:\n            assert not self._showed, \"cannot be used after chart displayed\"\n            self._calls.append(javascript)</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.chart.Chart.VIZZU","title":"<code>VIZZU: str = 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js'</code>  <code>class-attribute</code>","text":"<p>A variable for storing the default url of vizzu package.</p>"},{"location":"reference/ipyvizzu/#ipyvizzu.chart.Chart.scroll_into_view","title":"<code>scroll_into_view: bool</code>  <code>property</code> <code>writable</code>","text":"<p>A property for turning on/off the scroll into view feature.</p> <p>Returns:</p> Type Description <code>bool</code> <p>The value of the property (default <code>False</code>).</p>"},{"location":"reference/ipyvizzu/#ipyvizzu.chart.Chart.control","title":"<code>control: AnimationControl</code>  <code>property</code>","text":"<p>A property for returning a control object of the last animation.</p> <p>Raises:</p> Type Description <code>AssertionError</code> <p>If called before any animation plays.</p> <p>Returns:</p> Type Description <code>AnimationControl</code> <p>The control object of the last animation.</p>"},{"location":"reference/ipyvizzu/#ipyvizzu.chart.Chart.__init__","title":"<code>__init__(vizzu=VIZZU, width='800px', height='480px', display=DisplayTarget.ACTUAL)</code>","text":"<p>Chart constructor.</p> <p>Parameters:</p> Name Type Description Default <code>vizzu</code> <code>str</code> <p>The url of Vizzu JavaScript package.</p> <code>VIZZU</code> <code>width</code> <code>str</code> <p>The width of the chart.</p> <code>'800px'</code> <code>height</code> <code>str</code> <p>The height of the chart.</p> <code>'480px'</code> <code>display</code> <code>Union[DisplayTarget, str]</code> <p>The display behaviour of the chart.</p> <code>DisplayTarget.ACTUAL</code> Source code in <code>src/ipyvizzu/chart.py</code> <pre><code>def __init__(\n    self,\n    vizzu: str = VIZZU,\n    width: str = \"800px\",\n    height: str = \"480px\",\n    display: Union[DisplayTarget, str] = DisplayTarget.ACTUAL,\n):\n    \"\"\"\n    Chart constructor.\n\n    Args:\n        vizzu: The url of Vizzu JavaScript package.\n        width: The width of the chart.\n        height: The height of the chart.\n        display: The display behaviour of the chart.\n    \"\"\"\n\n    self._chart_id: str = uuid.uuid4().hex[:7]\n\n    self._vizzu: str = vizzu\n    self._width: str = width\n    self._height: str = height\n\n    self._display_target: DisplayTarget = DisplayTarget(display)\n    self._calls: List[str] = []\n    self._last_anim: Optional[str] = None\n    self._showed: bool = False\n\n    self._initialized: bool = False\n    self._scroll_into_view: bool = False</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.chart.Chart.initializing","title":"<code>initializing()</code>","text":"<p>A method for initializing the chart.</p> Source code in <code>src/ipyvizzu/chart.py</code> <pre><code>def initializing(self) -&gt; None:\n    \"\"\"A method for initializing the chart.\"\"\"\n\n    if not self._initialized:\n        self._initialized = True\n        ipyvizzurawjs = pkgutil.get_data(__name__, \"templates/ipyvizzu.js\")\n        ipyvizzujs = ipyvizzurawjs.decode(\"utf-8\")  # type: ignore\n        self._display(DisplayTemplate.IPYVIZZUJS.format(ipyvizzujs=ipyvizzujs))\n\n        if self._display_target != DisplayTarget.MANUAL:\n            Chart._register_events()\n\n        self._display(\n            DisplayTemplate.INIT.format(\n                chart_id=self._chart_id,\n                vizzu=self._vizzu,\n                div_width=self._width,\n                div_height=self._height,\n            )\n        )</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.chart.Chart.animate","title":"<code>animate(*animations, **options)</code>","text":"<p>A method for changing the state of the chart.</p> <p>Parameters:</p> Name Type Description Default <code>*animations</code> <code>AbstractAnimation</code> <p>List of AbstractAnimation inherited objects such as Data, Config and Style.</p> <code>()</code> <code>**options</code> <code>Optional[Union[str, int, float, dict]]</code> <p>Dictionary of animation options for example <code>duration=1</code>. For information on all available animation options see the Vizzu Code reference.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If <code>animations</code> is not set.</p> Example <p>Reset the chart styles:</p> <pre><code>chart.animate(Style(None))</code></pre> Source code in <code>src/ipyvizzu/chart.py</code> <pre><code>def animate(\n    self,\n    *animations: AbstractAnimation,\n    **options: Optional[Union[str, int, float, dict]],\n) -&gt; None:\n    \"\"\"\n    A method for changing the state of the chart.\n\n    Args:\n        *animations:\n            List of AbstractAnimation inherited objects such as [Data][ipyvizzu.animation.Data],\n            [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style].\n        **options: Dictionary of animation options for example `duration=1`.\n            For information on all available animation options see the\n            [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/interfaces/vizzu.Anim.Options/#properties).\n\n    Raises:\n        ValueError: If `animations` is not set.\n\n    Example:\n        Reset the chart styles:\n\n            chart.animate(Style(None))\n    \"\"\"  # pylint: disable=line-too-long\n\n    if not animations:\n        raise ValueError(\"No animation was set.\")\n\n    animation = AnimationMerger.merge_animations(animations)\n    animate = Animate(animation, options)\n\n    self._last_anim = uuid.uuid4().hex[:7]\n    self._display(\n        DisplayTemplate.ANIMATE.format(\n            display_target=self._display_target.value,\n            chart_id=self._chart_id,\n            anim_id=self._last_anim,\n            scroll=str(self._scroll_into_view).lower(),\n            **animate.dump(),\n        )\n    )</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.chart.Chart.feature","title":"<code>feature(name, enabled)</code>","text":"<p>A method for turning on/off features of the chart.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the chart feature. For information on all available features see the Vizzu Code reference.</p> required <code>enabled</code> <code>bool</code> <p>The new state of the chart feature.</p> required Example <p>Turn on <code>tooltip</code> of the chart:</p> <pre><code>chart.feature(\"tooltip\", True)</code></pre> Source code in <code>src/ipyvizzu/chart.py</code> <pre><code>def feature(self, name: str, enabled: bool) -&gt; None:\n    \"\"\"\n    A method for turning on/off features of the chart.\n\n    Args:\n        name:\n            The name of the chart feature.\n            For information on all available features see the\n            [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/modules/vizzu/#feature).\n        enabled: The new state of the chart feature.\n\n    Example:\n        Turn on `tooltip` of the chart:\n\n            chart.feature(\"tooltip\", True)\n    \"\"\"  # pylint: disable=line-too-long\n\n    self._display(\n        DisplayTemplate.FEATURE.format(\n            chart_id=self._chart_id,\n            **Feature(name, enabled).dump(),\n        )\n    )</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.chart.Chart.store","title":"<code>store()</code>","text":"<p>A method for saving and storing the actual state of the chart.</p> <p>Returns:</p> Type Description <code>Snapshot</code> <p>A Snapshot object wich stores the actual state of the chart.</p> Example <p>Save and restore the actual state of the chart:</p> <pre><code>snapshot = chart.store()\n...\nchart.animate(snapshot)</code></pre> Source code in <code>src/ipyvizzu/chart.py</code> <pre><code>def store(self) -&gt; Snapshot:\n    \"\"\"\n    A method for saving and storing the actual state of the chart.\n\n    Returns:\n        A Snapshot object wich stores the actual state of the chart.\n\n    Example:\n        Save and restore the actual state of the chart:\n\n            snapshot = chart.store()\n            ...\n            chart.animate(snapshot)\n    \"\"\"\n\n    snapshot_id = uuid.uuid4().hex[:7]\n    self._display(\n        DisplayTemplate.STORE.format(\n            chart_id=self._chart_id, **Store(snapshot_id).dump()\n        )\n    )\n    return Snapshot(snapshot_id)</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.chart.Chart.on","title":"<code>on(event, handler)</code>","text":"<p>A method for creating and turning on an event handler.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>str</code> <p>The type of the event. For information on all available events see the Vizzu Code reference.</p> required <code>handler</code> <code>str</code> <p>The JavaScript method of the event.</p> required <p>Returns:</p> Type Description <code>EventHandler</code> <p>The turned on event handler object.</p> Example <p>Turn on an event handler which prints an alert message when someone clicks on the chart:</p> <pre><code>handler = chart.on(\"click\", \"alert(JSON.stringify(event.data));\")</code></pre> Source code in <code>src/ipyvizzu/chart.py</code> <pre><code>def on(  # pylint: disable=invalid-name\n    self, event: str, handler: str\n) -&gt; EventHandler:\n    \"\"\"\n    A method for creating and turning on an event handler.\n\n    Args:\n        event:\n            The type of the event.\n            For information on all available events see the\n            [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/modules/vizzu.Event/#type).\n        handler: The JavaScript method of the event.\n\n    Returns:\n        The turned on event handler object.\n\n    Example:\n        Turn on an event handler which prints an alert message\n        when someone clicks on the chart:\n\n            handler = chart.on(\"click\", \"alert(JSON.stringify(event.data));\")\n    \"\"\"  # pylint: disable=line-too-long\n\n    event_handler = EventHandler(event, handler)\n    self._display(\n        DisplayTemplate.SET_EVENT.format(\n            chart_id=self._chart_id,\n            **EventOn(event_handler).dump(),\n        )\n    )\n    return event_handler</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.chart.Chart.off","title":"<code>off(event_handler)</code>","text":"<p>A method for turning off an event handler.</p> <p>Parameters:</p> Name Type Description Default <code>event_handler</code> <code>EventHandler</code> <p>A previously created event handler object.</p> required Example <p>Turn off a previously created event handler:</p> <pre><code>chart.off(handler)</code></pre> Source code in <code>src/ipyvizzu/chart.py</code> <pre><code>def off(self, event_handler: EventHandler) -&gt; None:\n    \"\"\"\n    A method for turning off an event handler.\n\n    Args:\n        event_handler: A previously created event handler object.\n\n    Example:\n        Turn off a previously created event handler:\n\n            chart.off(handler)\n    \"\"\"\n\n    self._display(\n        DisplayTemplate.CLEAR_EVENT.format(\n            chart_id=self._chart_id,\n            **EventOff(event_handler).dump(),\n        )\n    )</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.chart.Chart.log","title":"<code>log(chart_property)</code>","text":"<p>A method for printing chart properties to the browser console.</p> <p>Parameters:</p> Name Type Description Default <code>chart_property</code> <code>ChartProperty</code> <p>A chart property such as CONFIG and STYLE.</p> required Example <p>Log the actual style of the chart to the browser console:</p> <pre><code>chart.log(ChartProperty.STYLE)</code></pre> Source code in <code>src/ipyvizzu/chart.py</code> <pre><code>def log(self, chart_property: ChartProperty) -&gt; None:\n    \"\"\"\n    A method for printing chart properties to the browser console.\n\n    Args:\n        chart_property:\n            A chart property such as\n            [CONFIG][ipyvizzu.template.ChartProperty] and\n            [STYLE][ipyvizzu.template.ChartProperty].\n\n    Example:\n        Log the actual style of the chart to the browser console:\n\n            chart.log(ChartProperty.STYLE)\n    \"\"\"\n\n    self._display(\n        DisplayTemplate.LOG.format(\n            chart_id=self._chart_id, **Log(chart_property).dump()\n        )\n    )</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.chart.Chart.show","title":"<code>show()</code>","text":"<p>A method for displaying the assembled JavaScript code.</p> <p>Raises:</p> Type Description <code>AssertionError</code> <p>If display is not DisplayTarget.MANUAL.</p> <code>AssertionError</code> <p>If chart already has been displayed.</p> Source code in <code>src/ipyvizzu/chart.py</code> <pre><code>def show(self) -&gt; None:\n    \"\"\"\n    A method for displaying the assembled JavaScript code.\n\n    Raises:\n        AssertionError: If [display][ipyvizzu.Chart.__init__]\n            is not [DisplayTarget.MANUAL][ipyvizzu.template.DisplayTarget].\n        AssertionError: If chart already has been displayed.\n    \"\"\"\n\n    assert (\n        self._display_target == DisplayTarget.MANUAL\n    ), \"chart.show() can be used with display=DisplayTarget.MANUAL only\"\n    assert not self._showed, \"cannot be used after chart displayed\"\n    display_javascript(\n        \"\\n\".join(self._calls),\n        raw=True,\n    )\n    self._showed = True</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.Data","title":"<code>ipyvizzu.Data</code>","text":"<p>         Bases: <code>dict</code>, <code>AbstractAnimation</code></p> <p>A class for representing data animation. It can build data option of the chart.</p> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>class Data(dict, AbstractAnimation):\n    \"\"\"\n    A class for representing data animation.\n    It can build data option of the chart.\n    \"\"\"\n\n    @classmethod\n    def filter(cls, filter_expr: Optional[str] = None):  # -&gt; Data:\n        \"\"\"\n        A class method for creating a [Data][ipyvizzu.animation.Data]\n        class instance with a data filter.\n\n        Args:\n            filter_expr: The JavaScript data filter expression.\n\n        Returns:\n            (Data): A data animation instance that contains a data filter.\n\n        Example:\n            Create a [Data][ipyvizzu.animation.Data] class with a data filter:\n\n                filter = Data.filter(\"record['Genres'] == 'Pop'\")\n        \"\"\"\n\n        data = cls()\n        data.set_filter(filter_expr)\n        return data\n\n    def set_filter(self, filter_expr: Optional[str] = None) -&gt; None:\n        \"\"\"\n        A method for adding a filter to an existing\n        [Data][ipyvizzu.animation.Data] class instance.\n\n        Args:\n            filter_expr: The JavaScript data filter expression.\n\n        Example:\n            Add a data filter to a [Data][ipyvizzu.animation.Data] class instance:\n\n                data = Data()\n                data.set_filter(\"record['Genres'] == 'Pop'\")\n        \"\"\"\n\n        filter_expr_raw_js = (\n            RawJavaScript(f\"record =&gt; {{ return ({' '.join(filter_expr.split())}) }}\")\n            if filter_expr is not None\n            else filter_expr\n        )\n        self.update({\"filter\": filter_expr_raw_js})\n\n    @classmethod\n    def from_json(cls, filename: Union[str, bytes, PathLike]):  # -&gt; Data:\n        \"\"\"\n        A method for returning a [Data][ipyvizzu.animation.Data]\n        class instance which has been created from a json file.\n\n        Args:\n            filename: The path of the data source json file.\n\n        Returns:\n            (Data): A data animation instance that has been created from a json file.\n        \"\"\"\n\n        with open(filename, \"r\", encoding=\"utf8\") as file_desc:\n            return cls(json.load(file_desc))\n\n    def add_record(self, record: list) -&gt; None:\n        \"\"\"\n        A method for adding a record to an existing\n        [Data][ipyvizzu.animation.Data] class instance.\n\n        Args:\n            record: A list that contains data values.\n\n        Example:\n            Adding a record to a [Data][ipyvizzu.animation.Data] class instance:\n\n                data = Data()\n                record = [\"Pop\", \"Hard\", 114]\n                data.add_record(record)\n        \"\"\"\n\n        self._add_value(\"records\", record)\n\n    def add_records(self, records: List[list]) -&gt; None:\n        \"\"\"\n        A method for adding records to an existing\n        [Data][ipyvizzu.animation.Data] class instance.\n\n        Args:\n            records: A list that contains data records.\n\n        Example:\n            Adding records to a [Data][ipyvizzu.animation.Data] class instance:\n\n                data = Data()\n                records = [\n                    [\"Pop\", \"Hard\", 114],\n                    [\"Rock\", \"Hard\", 96],\n                    [\"Pop\", \"Experimental\", 127],\n                    [\"Rock\", \"Experimental\", 83],\n                ]\n                data.add_records(records)\n        \"\"\"\n\n        list(map(self.add_record, records))\n\n    def add_series(self, name: str, values: Optional[list] = None, **kwargs) -&gt; None:\n        \"\"\"\n        A method for adding a series to an existing\n        [Data][ipyvizzu.animation.Data] class instance.\n\n        Args:\n            name: The name of the series.\n            values: The data values of the series.\n            **kwargs (Optional):\n                Arbitrary keyword arguments.\n\n                For example infer type can be set with the `type` keywod argument.\n\n        Example:\n            Adding a series without values to a [Data][ipyvizzu.animation.Data] class instance:\n\n                data = Data()\n                data.add_series(\"Genres\")\n\n            Adding a series without values and with infer type to\n            a [Data][ipyvizzu.animation.Data] class instance:\n\n                data = Data()\n                data.add_series(\"Kinds\", type=\"dimension\")\n\n            Adding a series with values to a [Data][ipyvizzu.animation.Data] class instance:\n\n                data = Data()\n                data.add_series(\n                    \"Popularity\", [114, 96, 127, 83]\n                )\n        \"\"\"\n\n        self._add_named_value(\"series\", name, values, **kwargs)\n\n    def add_dimension(self, name: str, values: Optional[list] = None, **kwargs) -&gt; None:\n        \"\"\"\n        A method for adding a dimension to an existing\n        [Data][ipyvizzu.animation.Data] class instance.\n\n        Args:\n            name: The name of the dimension.\n            values: The data values of the dimension.\n            **kwargs (Optional): Arbitrary keyword arguments.\n\n        Example:\n            Adding a dimension with values to a [Data][ipyvizzu.animation.Data] class instance:\n\n                data = Data()\n                data.add_dimension(\"Genres\", [\"Pop\", \"Rock\"])\n        \"\"\"\n\n        self._add_named_value(\"dimensions\", name, values, **kwargs)\n\n    def add_measure(self, name: str, values: Optional[list] = None, **kwargs) -&gt; None:\n        \"\"\"\n        A method for adding a measure to an existing\n        [Data][ipyvizzu.animation.Data] class instance.\n\n        Args:\n            name: The name of the measure.\n            values: The data values of the measure.\n            **kwargs (Optional): Arbitrary keyword arguments.\n\n        Example:\n            Adding a measure with values to a [Data][ipyvizzu.animation.Data] class instance:\n\n                data = Data()\n                data.add_measure(\n                    \"Popularity\",\n                    [\n                        [114, 96],\n                        [127, 83],\n                    ],\n                )\n        \"\"\"\n\n        self._add_named_value(\"measures\", name, values, **kwargs)\n\n    def add_data_frame(\n        self,\n        data_frame: Union[pd.DataFrame, pd.Series],\n        default_measure_value: Optional[Any] = 0,\n        default_dimension_value: Optional[Any] = \"\",\n    ) -&gt; None:\n        \"\"\"\n        A method for adding data frame to an existing\n        [Data][ipyvizzu.animation.Data] class instance.\n\n        Args:\n            data_frame: The pandas data frame object.\n            default_measure_value: The default measure value to fill the empty values.\n            default_dimension_value: The default dimension value to fill the empty values.\n\n        Raises:\n            TypeError: If `data_frame` is not instance of [pd.DataFrame][pandas.DataFrame]\n                or [pd.Series][pandas.Series].\n\n        Example:\n            Adding a data frame to a [Data][ipyvizzu.animation.Data] class instance:\n\n                data_frame = pd.DataFrame(\n                    {\n                        \"Genres\": [\"Pop\", \"Rock\", \"Pop\", \"Rock\"],\n                        \"Kinds\": [\"Hard\", \"Hard\", \"Experimental\", \"Experimental\"],\n                        \"Popularity\": [114, 96, 127, 83],\n                    }\n                )\n                data = Data()\n                data.add_data_frame(data_frame)\n        \"\"\"\n\n        if not isinstance(data_frame, type(None)):\n            if isinstance(data_frame, pd.Series):\n                data_frame = pd.DataFrame(data_frame)\n            if not isinstance(data_frame, pd.DataFrame):\n                raise TypeError(\n                    \"data_frame must be instance of pandas.DataFrame or pandas.Series\"\n                )\n            for name in data_frame.columns:\n                values = []\n                if is_numeric_dtype(data_frame[name].dtype):\n                    infer_type = InferType.MEASURE\n                    values = (\n                        data_frame[name]\n                        .fillna(default_measure_value)\n                        .astype(float)\n                        .values.tolist()\n                    )\n                else:\n                    infer_type = InferType.DIMENSION\n                    values = (\n                        data_frame[name]\n                        .fillna(default_dimension_value)\n                        .astype(str)\n                        .values.tolist()\n                    )\n                self.add_series(\n                    name,\n                    values,\n                    type=infer_type.value,\n                )\n\n    def add_data_frame_index(\n        self,\n        data_frame: Union[pd.DataFrame, pd.Series],\n        name: Optional[str],\n    ) -&gt; None:\n        \"\"\"\n        A method for adding data frame's index to an existing\n        [Data][ipyvizzu.animation.Data] class instance.\n\n        Args:\n            data_frame: The pandas data frame object.\n            name: The name of the index series.\n\n        Raises:\n            TypeError: If `data_frame` is not instance of [pd.DataFrame][pandas.DataFrame]\n                or [pd.Series][pandas.Series].\n\n        Example:\n            Adding a data frame's index to a [Data][ipyvizzu.animation.Data] class instance:\n\n                data_frame = pd.DataFrame(\n                    {\"Popularity\": [114, 96]},\n                    index=[\"x\", \"y\"]\n                )\n                data = Data()\n                data.add_data_frame_index(data_frame, \"DataFrameIndex\")\n                data.add_data_frame(data_frame)\n        \"\"\"\n\n        if data_frame is not None:\n            if isinstance(data_frame, pd.Series):\n                data_frame = pd.DataFrame(data_frame)\n            if not isinstance(data_frame, pd.DataFrame):\n                raise TypeError(\n                    \"data_frame must be instance of pandas.DataFrame or pandas.Series\"\n                )\n            self.add_series(\n                str(name),\n                [str(i) for i in data_frame.index],\n                type=InferType.DIMENSION.value,\n            )\n\n    def _add_named_value(\n        self, dest: str, name: str, values: Optional[list] = None, **kwargs\n    ) -&gt; None:\n        value = {\"name\": name, **kwargs}\n\n        if values is not None:\n            value[\"values\"] = values  # type: ignore\n\n        self._add_value(dest, value)\n\n    def _add_value(self, dest: str, value: Union[dict, list]) -&gt; None:\n        self.setdefault(dest, []).append(value)\n\n    def build(self) -&gt; dict:\n        \"\"\"\n        A method for validating and returning the data animation dictionary.\n\n        Returns:\n            A dictionary that stored in the data animation object.\n                It contains a `data` key whose value is the stored animation.\n        \"\"\"\n\n        jsonschema.validate(self, DATA_SCHEMA)\n        return {\"data\": self}</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Data.filter","title":"<code>filter(filter_expr=None)</code>  <code>classmethod</code>","text":"<p>A class method for creating a Data class instance with a data filter.</p> <p>Parameters:</p> Name Type Description Default <code>filter_expr</code> <code>Optional[str]</code> <p>The JavaScript data filter expression.</p> <code>None</code> <p>Returns:</p> Type Description <code>Data</code> <p>A data animation instance that contains a data filter.</p> Example <p>Create a Data class with a data filter:</p> <pre><code>filter = Data.filter(\"record['Genres'] == 'Pop'\")</code></pre> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>@classmethod\ndef filter(cls, filter_expr: Optional[str] = None):  # -&gt; Data:\n    \"\"\"\n    A class method for creating a [Data][ipyvizzu.animation.Data]\n    class instance with a data filter.\n\n    Args:\n        filter_expr: The JavaScript data filter expression.\n\n    Returns:\n        (Data): A data animation instance that contains a data filter.\n\n    Example:\n        Create a [Data][ipyvizzu.animation.Data] class with a data filter:\n\n            filter = Data.filter(\"record['Genres'] == 'Pop'\")\n    \"\"\"\n\n    data = cls()\n    data.set_filter(filter_expr)\n    return data</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Data.set_filter","title":"<code>set_filter(filter_expr=None)</code>","text":"<p>A method for adding a filter to an existing Data class instance.</p> <p>Parameters:</p> Name Type Description Default <code>filter_expr</code> <code>Optional[str]</code> <p>The JavaScript data filter expression.</p> <code>None</code> Example <p>Add a data filter to a Data class instance:</p> <pre><code>data = Data()\ndata.set_filter(\"record['Genres'] == 'Pop'\")</code></pre> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>def set_filter(self, filter_expr: Optional[str] = None) -&gt; None:\n    \"\"\"\n    A method for adding a filter to an existing\n    [Data][ipyvizzu.animation.Data] class instance.\n\n    Args:\n        filter_expr: The JavaScript data filter expression.\n\n    Example:\n        Add a data filter to a [Data][ipyvizzu.animation.Data] class instance:\n\n            data = Data()\n            data.set_filter(\"record['Genres'] == 'Pop'\")\n    \"\"\"\n\n    filter_expr_raw_js = (\n        RawJavaScript(f\"record =&gt; {{ return ({' '.join(filter_expr.split())}) }}\")\n        if filter_expr is not None\n        else filter_expr\n    )\n    self.update({\"filter\": filter_expr_raw_js})</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Data.from_json","title":"<code>from_json(filename)</code>  <code>classmethod</code>","text":"<p>A method for returning a Data class instance which has been created from a json file.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>Union[str, bytes, PathLike]</code> <p>The path of the data source json file.</p> required <p>Returns:</p> Type Description <code>Data</code> <p>A data animation instance that has been created from a json file.</p> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>@classmethod\ndef from_json(cls, filename: Union[str, bytes, PathLike]):  # -&gt; Data:\n    \"\"\"\n    A method for returning a [Data][ipyvizzu.animation.Data]\n    class instance which has been created from a json file.\n\n    Args:\n        filename: The path of the data source json file.\n\n    Returns:\n        (Data): A data animation instance that has been created from a json file.\n    \"\"\"\n\n    with open(filename, \"r\", encoding=\"utf8\") as file_desc:\n        return cls(json.load(file_desc))</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Data.add_record","title":"<code>add_record(record)</code>","text":"<p>A method for adding a record to an existing Data class instance.</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>list</code> <p>A list that contains data values.</p> required Example <p>Adding a record to a Data class instance:</p> <pre><code>data = Data()\nrecord = [\"Pop\", \"Hard\", 114]\ndata.add_record(record)</code></pre> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>def add_record(self, record: list) -&gt; None:\n    \"\"\"\n    A method for adding a record to an existing\n    [Data][ipyvizzu.animation.Data] class instance.\n\n    Args:\n        record: A list that contains data values.\n\n    Example:\n        Adding a record to a [Data][ipyvizzu.animation.Data] class instance:\n\n            data = Data()\n            record = [\"Pop\", \"Hard\", 114]\n            data.add_record(record)\n    \"\"\"\n\n    self._add_value(\"records\", record)</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Data.add_records","title":"<code>add_records(records)</code>","text":"<p>A method for adding records to an existing Data class instance.</p> <p>Parameters:</p> Name Type Description Default <code>records</code> <code>List[list]</code> <p>A list that contains data records.</p> required Example <p>Adding records to a Data class instance:</p> <pre><code>data = Data()\nrecords = [\n    [\"Pop\", \"Hard\", 114],\n    [\"Rock\", \"Hard\", 96],\n    [\"Pop\", \"Experimental\", 127],\n    [\"Rock\", \"Experimental\", 83],\n]\ndata.add_records(records)</code></pre> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>def add_records(self, records: List[list]) -&gt; None:\n    \"\"\"\n    A method for adding records to an existing\n    [Data][ipyvizzu.animation.Data] class instance.\n\n    Args:\n        records: A list that contains data records.\n\n    Example:\n        Adding records to a [Data][ipyvizzu.animation.Data] class instance:\n\n            data = Data()\n            records = [\n                [\"Pop\", \"Hard\", 114],\n                [\"Rock\", \"Hard\", 96],\n                [\"Pop\", \"Experimental\", 127],\n                [\"Rock\", \"Experimental\", 83],\n            ]\n            data.add_records(records)\n    \"\"\"\n\n    list(map(self.add_record, records))</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Data.add_series","title":"<code>add_series(name, values=None, **kwargs)</code>","text":"<p>A method for adding a series to an existing Data class instance.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the series.</p> required <code>values</code> <code>Optional[list]</code> <p>The data values of the series.</p> <code>None</code> <code>**kwargs</code> <code>Optional</code> <p>Arbitrary keyword arguments.</p> <p>For example infer type can be set with the <code>type</code> keywod argument.</p> <code>{}</code> Example <p>Adding a series without values to a Data class instance:</p> <pre><code>data = Data()\ndata.add_series(\"Genres\")</code></pre> <p>Adding a series without values and with infer type to a Data class instance:</p> <pre><code>data = Data()\ndata.add_series(\"Kinds\", type=\"dimension\")</code></pre> <p>Adding a series with values to a Data class instance:</p> <pre><code>data = Data()\ndata.add_series(\n    \"Popularity\", [114, 96, 127, 83]\n)</code></pre> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>def add_series(self, name: str, values: Optional[list] = None, **kwargs) -&gt; None:\n    \"\"\"\n    A method for adding a series to an existing\n    [Data][ipyvizzu.animation.Data] class instance.\n\n    Args:\n        name: The name of the series.\n        values: The data values of the series.\n        **kwargs (Optional):\n            Arbitrary keyword arguments.\n\n            For example infer type can be set with the `type` keywod argument.\n\n    Example:\n        Adding a series without values to a [Data][ipyvizzu.animation.Data] class instance:\n\n            data = Data()\n            data.add_series(\"Genres\")\n\n        Adding a series without values and with infer type to\n        a [Data][ipyvizzu.animation.Data] class instance:\n\n            data = Data()\n            data.add_series(\"Kinds\", type=\"dimension\")\n\n        Adding a series with values to a [Data][ipyvizzu.animation.Data] class instance:\n\n            data = Data()\n            data.add_series(\n                \"Popularity\", [114, 96, 127, 83]\n            )\n    \"\"\"\n\n    self._add_named_value(\"series\", name, values, **kwargs)</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Data.add_dimension","title":"<code>add_dimension(name, values=None, **kwargs)</code>","text":"<p>A method for adding a dimension to an existing Data class instance.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the dimension.</p> required <code>values</code> <code>Optional[list]</code> <p>The data values of the dimension.</p> <code>None</code> <code>**kwargs</code> <code>Optional</code> <p>Arbitrary keyword arguments.</p> <code>{}</code> Example <p>Adding a dimension with values to a Data class instance:</p> <pre><code>data = Data()\ndata.add_dimension(\"Genres\", [\"Pop\", \"Rock\"])</code></pre> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>def add_dimension(self, name: str, values: Optional[list] = None, **kwargs) -&gt; None:\n    \"\"\"\n    A method for adding a dimension to an existing\n    [Data][ipyvizzu.animation.Data] class instance.\n\n    Args:\n        name: The name of the dimension.\n        values: The data values of the dimension.\n        **kwargs (Optional): Arbitrary keyword arguments.\n\n    Example:\n        Adding a dimension with values to a [Data][ipyvizzu.animation.Data] class instance:\n\n            data = Data()\n            data.add_dimension(\"Genres\", [\"Pop\", \"Rock\"])\n    \"\"\"\n\n    self._add_named_value(\"dimensions\", name, values, **kwargs)</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Data.add_measure","title":"<code>add_measure(name, values=None, **kwargs)</code>","text":"<p>A method for adding a measure to an existing Data class instance.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the measure.</p> required <code>values</code> <code>Optional[list]</code> <p>The data values of the measure.</p> <code>None</code> <code>**kwargs</code> <code>Optional</code> <p>Arbitrary keyword arguments.</p> <code>{}</code> Example <p>Adding a measure with values to a Data class instance:</p> <pre><code>data = Data()\ndata.add_measure(\n    \"Popularity\",\n    [\n        [114, 96],\n        [127, 83],\n    ],\n)</code></pre> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>def add_measure(self, name: str, values: Optional[list] = None, **kwargs) -&gt; None:\n    \"\"\"\n    A method for adding a measure to an existing\n    [Data][ipyvizzu.animation.Data] class instance.\n\n    Args:\n        name: The name of the measure.\n        values: The data values of the measure.\n        **kwargs (Optional): Arbitrary keyword arguments.\n\n    Example:\n        Adding a measure with values to a [Data][ipyvizzu.animation.Data] class instance:\n\n            data = Data()\n            data.add_measure(\n                \"Popularity\",\n                [\n                    [114, 96],\n                    [127, 83],\n                ],\n            )\n    \"\"\"\n\n    self._add_named_value(\"measures\", name, values, **kwargs)</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Data.add_data_frame","title":"<code>add_data_frame(data_frame, default_measure_value=0, default_dimension_value='')</code>","text":"<p>A method for adding data frame to an existing Data class instance.</p> <p>Parameters:</p> Name Type Description Default <code>data_frame</code> <code>Union[pd.DataFrame, pd.Series]</code> <p>The pandas data frame object.</p> required <code>default_measure_value</code> <code>Optional[Any]</code> <p>The default measure value to fill the empty values.</p> <code>0</code> <code>default_dimension_value</code> <code>Optional[Any]</code> <p>The default dimension value to fill the empty values.</p> <code>''</code> <p>Raises:</p> Type Description <code>TypeError</code> <p>If <code>data_frame</code> is not instance of pd.DataFrame or pd.Series.</p> Example <p>Adding a data frame to a Data class instance:</p> <pre><code>data_frame = pd.DataFrame(\n    {\n        \"Genres\": [\"Pop\", \"Rock\", \"Pop\", \"Rock\"],\n        \"Kinds\": [\"Hard\", \"Hard\", \"Experimental\", \"Experimental\"],\n        \"Popularity\": [114, 96, 127, 83],\n    }\n)\ndata = Data()\ndata.add_data_frame(data_frame)</code></pre> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>def add_data_frame(\n    self,\n    data_frame: Union[pd.DataFrame, pd.Series],\n    default_measure_value: Optional[Any] = 0,\n    default_dimension_value: Optional[Any] = \"\",\n) -&gt; None:\n    \"\"\"\n    A method for adding data frame to an existing\n    [Data][ipyvizzu.animation.Data] class instance.\n\n    Args:\n        data_frame: The pandas data frame object.\n        default_measure_value: The default measure value to fill the empty values.\n        default_dimension_value: The default dimension value to fill the empty values.\n\n    Raises:\n        TypeError: If `data_frame` is not instance of [pd.DataFrame][pandas.DataFrame]\n            or [pd.Series][pandas.Series].\n\n    Example:\n        Adding a data frame to a [Data][ipyvizzu.animation.Data] class instance:\n\n            data_frame = pd.DataFrame(\n                {\n                    \"Genres\": [\"Pop\", \"Rock\", \"Pop\", \"Rock\"],\n                    \"Kinds\": [\"Hard\", \"Hard\", \"Experimental\", \"Experimental\"],\n                    \"Popularity\": [114, 96, 127, 83],\n                }\n            )\n            data = Data()\n            data.add_data_frame(data_frame)\n    \"\"\"\n\n    if not isinstance(data_frame, type(None)):\n        if isinstance(data_frame, pd.Series):\n            data_frame = pd.DataFrame(data_frame)\n        if not isinstance(data_frame, pd.DataFrame):\n            raise TypeError(\n                \"data_frame must be instance of pandas.DataFrame or pandas.Series\"\n            )\n        for name in data_frame.columns:\n            values = []\n            if is_numeric_dtype(data_frame[name].dtype):\n                infer_type = InferType.MEASURE\n                values = (\n                    data_frame[name]\n                    .fillna(default_measure_value)\n                    .astype(float)\n                    .values.tolist()\n                )\n            else:\n                infer_type = InferType.DIMENSION\n                values = (\n                    data_frame[name]\n                    .fillna(default_dimension_value)\n                    .astype(str)\n                    .values.tolist()\n                )\n            self.add_series(\n                name,\n                values,\n                type=infer_type.value,\n            )</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Data.add_data_frame_index","title":"<code>add_data_frame_index(data_frame, name)</code>","text":"<p>A method for adding data frame's index to an existing Data class instance.</p> <p>Parameters:</p> Name Type Description Default <code>data_frame</code> <code>Union[pd.DataFrame, pd.Series]</code> <p>The pandas data frame object.</p> required <code>name</code> <code>Optional[str]</code> <p>The name of the index series.</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>If <code>data_frame</code> is not instance of pd.DataFrame or pd.Series.</p> Example <p>Adding a data frame's index to a Data class instance:</p> <pre><code>data_frame = pd.DataFrame(\n    {\"Popularity\": [114, 96]},\n    index=[\"x\", \"y\"]\n)\ndata = Data()\ndata.add_data_frame_index(data_frame, \"DataFrameIndex\")\ndata.add_data_frame(data_frame)</code></pre> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>def add_data_frame_index(\n    self,\n    data_frame: Union[pd.DataFrame, pd.Series],\n    name: Optional[str],\n) -&gt; None:\n    \"\"\"\n    A method for adding data frame's index to an existing\n    [Data][ipyvizzu.animation.Data] class instance.\n\n    Args:\n        data_frame: The pandas data frame object.\n        name: The name of the index series.\n\n    Raises:\n        TypeError: If `data_frame` is not instance of [pd.DataFrame][pandas.DataFrame]\n            or [pd.Series][pandas.Series].\n\n    Example:\n        Adding a data frame's index to a [Data][ipyvizzu.animation.Data] class instance:\n\n            data_frame = pd.DataFrame(\n                {\"Popularity\": [114, 96]},\n                index=[\"x\", \"y\"]\n            )\n            data = Data()\n            data.add_data_frame_index(data_frame, \"DataFrameIndex\")\n            data.add_data_frame(data_frame)\n    \"\"\"\n\n    if data_frame is not None:\n        if isinstance(data_frame, pd.Series):\n            data_frame = pd.DataFrame(data_frame)\n        if not isinstance(data_frame, pd.DataFrame):\n            raise TypeError(\n                \"data_frame must be instance of pandas.DataFrame or pandas.Series\"\n            )\n        self.add_series(\n            str(name),\n            [str(i) for i in data_frame.index],\n            type=InferType.DIMENSION.value,\n        )</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Data.build","title":"<code>build()</code>","text":"<p>A method for validating and returning the data animation dictionary.</p> <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary that stored in the data animation object. It contains a <code>data</code> key whose value is the stored animation.</p> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>def build(self) -&gt; dict:\n    \"\"\"\n    A method for validating and returning the data animation dictionary.\n\n    Returns:\n        A dictionary that stored in the data animation object.\n            It contains a `data` key whose value is the stored animation.\n    \"\"\"\n\n    jsonschema.validate(self, DATA_SCHEMA)\n    return {\"data\": self}</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.Config","title":"<code>ipyvizzu.Config</code>","text":"<p>         Bases: <code>AbstractAnimation</code></p> <p>A class for representing config animation. It can build config option of the chart.</p> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>class Config(AbstractAnimation, metaclass=ConfigAttr):\n    \"\"\"\n    A class for representing config animation.\n    It can build config option of the chart.\n    \"\"\"\n\n    def __init__(self, data: Optional[dict]):\n        \"\"\"\n        Config constructor.\n\n        Args:\n            data:\n                A config animation dictionary.\n                For information on all available config parameters see the\n                [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/interfaces/vizzu.Config.Chart/#properties).\n        \"\"\"  # pylint: disable=line-too-long\n\n        self._data = data\n\n    def build(self) -&gt; dict:\n        \"\"\"\n        A method for returning the config animation dictionary.\n\n        Returns:\n            A dictionary that stored in the config animation object.\n                It contains a `config` key whose value is the stored animation.\n        \"\"\"\n\n        return {\"config\": self._data}</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Config.__init__","title":"<code>__init__(data)</code>","text":"<p>Config constructor.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Optional[dict]</code> <p>A config animation dictionary. For information on all available config parameters see the Vizzu Code reference.</p> required Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>def __init__(self, data: Optional[dict]):\n    \"\"\"\n    Config constructor.\n\n    Args:\n        data:\n            A config animation dictionary.\n            For information on all available config parameters see the\n            [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/interfaces/vizzu.Config.Chart/#properties).\n    \"\"\"  # pylint: disable=line-too-long\n\n    self._data = data</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Config.build","title":"<code>build()</code>","text":"<p>A method for returning the config animation dictionary.</p> <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary that stored in the config animation object. It contains a <code>config</code> key whose value is the stored animation.</p> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>def build(self) -&gt; dict:\n    \"\"\"\n    A method for returning the config animation dictionary.\n\n    Returns:\n        A dictionary that stored in the config animation object.\n            It contains a `config` key whose value is the stored animation.\n    \"\"\"\n\n    return {\"config\": self._data}</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.Style","title":"<code>ipyvizzu.Style</code>","text":"<p>         Bases: <code>AbstractAnimation</code></p> <p>A class for representing style animation. It can build style option of the chart.</p> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>class Style(AbstractAnimation):\n    \"\"\"\n    A class for representing style animation.\n    It can build style option of the chart.\n    \"\"\"\n\n    def __init__(self, data: Optional[dict]):\n        \"\"\"\n        Style constructor.\n\n        Args:\n            data:\n                A style animation dictionary.\n                For information on all available style parameters see the [Style][styling-properties]\n                chapter or the\n                [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/interfaces/vizzu.Styles.Chart/#properties).\n        \"\"\"  # pylint: disable=line-too-long\n\n        self._data = data\n\n    def build(self) -&gt; dict:\n        \"\"\"\n        A method for returning the style animation dictionary.\n\n        Returns:\n            A dictionary that stored in the style animation object.\n                It contains a `style` key whose value is the stored animation.\n        \"\"\"\n\n        return {\"style\": self._data}</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Style.__init__","title":"<code>__init__(data)</code>","text":"<p>Style constructor.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Optional[dict]</code> <p>A style animation dictionary. For information on all available style parameters see the Style chapter or the Vizzu Code reference.</p> required Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>def __init__(self, data: Optional[dict]):\n    \"\"\"\n    Style constructor.\n\n    Args:\n        data:\n            A style animation dictionary.\n            For information on all available style parameters see the [Style][styling-properties]\n            chapter or the\n            [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/interfaces/vizzu.Styles.Chart/#properties).\n    \"\"\"  # pylint: disable=line-too-long\n\n    self._data = data</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Style.build","title":"<code>build()</code>","text":"<p>A method for returning the style animation dictionary.</p> <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary that stored in the style animation object. It contains a <code>style</code> key whose value is the stored animation.</p> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>def build(self) -&gt; dict:\n    \"\"\"\n    A method for returning the style animation dictionary.\n\n    Returns:\n        A dictionary that stored in the style animation object.\n            It contains a `style` key whose value is the stored animation.\n    \"\"\"\n\n    return {\"style\": self._data}</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.Keyframe","title":"<code>ipyvizzu.Keyframe</code>","text":"<p>         Bases: <code>AbstractAnimation</code></p> <p>A class for representing keyframe animation. It can build keyframe of the chart.</p> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>class Keyframe(AbstractAnimation):\n    \"\"\"\n    A class for representing keyframe animation.\n    It can build keyframe of the chart.\n    \"\"\"\n\n    def __init__(\n        self,\n        *animations: AbstractAnimation,\n        **options: Optional[Union[str, int, float, dict]],\n    ):\n        \"\"\"\n        Keyframe constructor.\n\n        Args:\n            *animations:\n                List of AbstractAnimation inherited objects such as [Data][ipyvizzu.animation.Data],\n                [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style].\n            **options: Dictionary of animation options for example `duration=1`.\n                For information on all available animation options see the\n                [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/interfaces/vizzu.Anim.Options/#properties).\n\n        Raises:\n            ValueError: If `animations` is not set.\n            ValueError: If initialized with a `Keyframe`.\n        \"\"\"  # pylint: disable=line-too-long\n\n        if not animations:\n            raise ValueError(\"No animation was set.\")\n        if [animation for animation in animations if isinstance(animation, Keyframe)]:\n            raise ValueError(\"A Keyframe cannot contain a Keyframe.\")\n\n        self._keyframe = {}\n        self._keyframe[\"target\"] = AnimationMerger.merge_animations(animations).build()\n        if options:\n            self._keyframe[\"options\"] = options\n\n    def build(self) -&gt; dict:\n        \"\"\"\n        A method for returning the keyframe animation dictionary.\n\n        Returns:\n            A dictionary that stored in the keyframe animation object.\n                It contains a `target` key whose value is the stored animation\n                and an optional `options` key whose value is the stored animation options.\n        \"\"\"\n\n        return self._keyframe</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Keyframe.__init__","title":"<code>__init__(*animations, **options)</code>","text":"<p>Keyframe constructor.</p> <p>Parameters:</p> Name Type Description Default <code>*animations</code> <code>AbstractAnimation</code> <p>List of AbstractAnimation inherited objects such as Data, Config and Style.</p> <code>()</code> <code>**options</code> <code>Optional[Union[str, int, float, dict]]</code> <p>Dictionary of animation options for example <code>duration=1</code>. For information on all available animation options see the Vizzu Code reference.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If <code>animations</code> is not set.</p> <code>ValueError</code> <p>If initialized with a <code>Keyframe</code>.</p> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>def __init__(\n    self,\n    *animations: AbstractAnimation,\n    **options: Optional[Union[str, int, float, dict]],\n):\n    \"\"\"\n    Keyframe constructor.\n\n    Args:\n        *animations:\n            List of AbstractAnimation inherited objects such as [Data][ipyvizzu.animation.Data],\n            [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style].\n        **options: Dictionary of animation options for example `duration=1`.\n            For information on all available animation options see the\n            [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/interfaces/vizzu.Anim.Options/#properties).\n\n    Raises:\n        ValueError: If `animations` is not set.\n        ValueError: If initialized with a `Keyframe`.\n    \"\"\"  # pylint: disable=line-too-long\n\n    if not animations:\n        raise ValueError(\"No animation was set.\")\n    if [animation for animation in animations if isinstance(animation, Keyframe)]:\n        raise ValueError(\"A Keyframe cannot contain a Keyframe.\")\n\n    self._keyframe = {}\n    self._keyframe[\"target\"] = AnimationMerger.merge_animations(animations).build()\n    if options:\n        self._keyframe[\"options\"] = options</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Keyframe.build","title":"<code>build()</code>","text":"<p>A method for returning the keyframe animation dictionary.</p> <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary that stored in the keyframe animation object. It contains a <code>target</code> key whose value is the stored animation and an optional <code>options</code> key whose value is the stored animation options.</p> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>def build(self) -&gt; dict:\n    \"\"\"\n    A method for returning the keyframe animation dictionary.\n\n    Returns:\n        A dictionary that stored in the keyframe animation object.\n            It contains a `target` key whose value is the stored animation\n            and an optional `options` key whose value is the stored animation options.\n    \"\"\"\n\n    return self._keyframe</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.Snapshot","title":"<code>ipyvizzu.Snapshot</code>","text":"<p>         Bases: <code>AbstractAnimation</code></p> <p>A class for representing a stored chart state. It can build the snapshot id of the chart.</p> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>class Snapshot(AbstractAnimation):\n    \"\"\"\n    A class for representing a stored chart state.\n    It can build the snapshot id of the chart.\n    \"\"\"\n\n    def __init__(self, snapshot_id: str):\n        \"\"\"\n        Snapshot constructor.\n\n        Args:\n            snapshot_id: A snapshot id.\n        \"\"\"\n\n        self._snapshot_id = snapshot_id\n\n    def build(self) -&gt; str:  # type: ignore\n        \"\"\"\n        A method for returning the snapshot id str.\n\n        Returns:\n            An str snapshot id that stored in the snapshot animation object.\n        \"\"\"\n\n        return self._snapshot_id</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Snapshot.__init__","title":"<code>__init__(snapshot_id)</code>","text":"<p>Snapshot constructor.</p> <p>Parameters:</p> Name Type Description Default <code>snapshot_id</code> <code>str</code> <p>A snapshot id.</p> required Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>def __init__(self, snapshot_id: str):\n    \"\"\"\n    Snapshot constructor.\n\n    Args:\n        snapshot_id: A snapshot id.\n    \"\"\"\n\n    self._snapshot_id = snapshot_id</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Snapshot.build","title":"<code>build()</code>","text":"<p>A method for returning the snapshot id str.</p> <p>Returns:</p> Type Description <code>str</code> <p>An str snapshot id that stored in the snapshot animation object.</p> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>def build(self) -&gt; str:  # type: ignore\n    \"\"\"\n    A method for returning the snapshot id str.\n\n    Returns:\n        An str snapshot id that stored in the snapshot animation object.\n    \"\"\"\n\n    return self._snapshot_id</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.Animation","title":"<code>ipyvizzu.Animation</code>","text":"<p>         Bases: <code>Snapshot</code></p> <p>A class for representing a stored animation. It can build the snapshot id of the animation.</p> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>class Animation(Snapshot):\n    \"\"\"\n    A class for representing a stored animation.\n    It can build the snapshot id of the animation.\n    \"\"\"</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.InferType","title":"<code>ipyvizzu.InferType</code>","text":"<p>         Bases: <code>Enum</code></p> <p>An enum class for storing data infer types.</p> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>class InferType(Enum):\n    \"\"\"An enum class for storing data infer types.\"\"\"\n\n    DIMENSION = \"dimension\"\n    \"\"\"An enum key-value for storing dimension infer type.\"\"\"\n\n    MEASURE = \"measure\"\n    \"\"\"An enum key-value for storing measure infer type.\"\"\"</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.InferType.DIMENSION","title":"<code>DIMENSION = 'dimension'</code>  <code>class-attribute</code>","text":"<p>An enum key-value for storing dimension infer type.</p>"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.InferType.MEASURE","title":"<code>MEASURE = 'measure'</code>  <code>class-attribute</code>","text":"<p>An enum key-value for storing measure infer type.</p>"},{"location":"reference/ipyvizzu/#ipyvizzu.AbstractAnimation","title":"<code>ipyvizzu.AbstractAnimation</code>","text":"<p>An abstract class for representing animation objects that have <code>dump</code> and <code>build</code> methods.</p> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>class AbstractAnimation:\n    \"\"\"\n    An abstract class for representing animation objects\n    that have `dump` and `build` methods.\n    \"\"\"\n\n    def dump(self) -&gt; str:\n        \"\"\"\n        A method for converting the built dictionary into string.\n\n        Returns:\n            An str that has been json dumped with\n                [RawJavaScriptEncoder][ipyvizzu.json.RawJavaScriptEncoder] from a dictionary.\n        \"\"\"\n\n        return json.dumps(self.build(), cls=RawJavaScriptEncoder)\n\n    @abc.abstractmethod\n    def build(self) -&gt; dict:\n        \"\"\"\n        An abstract method for returning a dictionary with values\n        that can be converted into json string.\n\n        Returns:\n            A dictionary that stored in the animation object.\n        \"\"\"</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.AbstractAnimation.dump","title":"<code>dump()</code>","text":"<p>A method for converting the built dictionary into string.</p> <p>Returns:</p> Type Description <code>str</code> <p>An str that has been json dumped with RawJavaScriptEncoder from a dictionary.</p> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>def dump(self) -&gt; str:\n    \"\"\"\n    A method for converting the built dictionary into string.\n\n    Returns:\n        An str that has been json dumped with\n            [RawJavaScriptEncoder][ipyvizzu.json.RawJavaScriptEncoder] from a dictionary.\n    \"\"\"\n\n    return json.dumps(self.build(), cls=RawJavaScriptEncoder)</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.AbstractAnimation.build","title":"<code>build()</code>  <code>abstractmethod</code>","text":"<p>An abstract method for returning a dictionary with values that can be converted into json string.</p> <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary that stored in the animation object.</p> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>@abc.abstractmethod\ndef build(self) -&gt; dict:\n    \"\"\"\n    An abstract method for returning a dictionary with values\n    that can be converted into json string.\n\n    Returns:\n        A dictionary that stored in the animation object.\n    \"\"\"</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.PlainAnimation","title":"<code>ipyvizzu.PlainAnimation</code>","text":"<p>         Bases: <code>dict</code>, <code>AbstractAnimation</code></p> <p>A class for representing plain animation. It can build any dictionary.</p> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>class PlainAnimation(dict, AbstractAnimation):\n    \"\"\"\n    A class for representing plain animation.\n    It can build any dictionary.\n    \"\"\"\n\n    def build(self) -&gt; dict:\n        \"\"\"\n        A method for returning the plain animation dictionary.\n\n        Returns:\n            A dictionary that stored in the plain animation object.\n        \"\"\"\n\n        return self</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.PlainAnimation.build","title":"<code>build()</code>","text":"<p>A method for returning the plain animation dictionary.</p> <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary that stored in the plain animation object.</p> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>def build(self) -&gt; dict:\n    \"\"\"\n    A method for returning the plain animation dictionary.\n\n    Returns:\n        A dictionary that stored in the plain animation object.\n    \"\"\"\n\n    return self</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.AnimationMerger","title":"<code>ipyvizzu.AnimationMerger</code>","text":"<p>         Bases: <code>AbstractAnimation</code></p> <p>A class for merging different types of animations.</p> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>class AnimationMerger(AbstractAnimation):\n    \"\"\"A class for merging different types of animations.\"\"\"\n\n    def __init__(self):\n        \"\"\"AnimationMerger constructor.\"\"\"\n\n        self._dict = {}\n        self._list = []\n\n    @classmethod\n    def merge_animations(\n        cls, animations: Tuple[AbstractAnimation, ...]\n    ) -&gt; AbstractAnimation:\n        \"\"\"\n        A class method for merging animations.\n\n        Args:\n            animations: List of `AbstractAnimation` inherited objects.\n\n        Returns:\n            An `AnimationMerger` class with the merged animations.\n        \"\"\"\n\n        if len(animations) == 1 and not isinstance(animations[0], Keyframe):\n            return animations[0]\n\n        merger = cls()\n        for animation in animations:\n            merger.merge(animation)\n\n        return merger\n\n    def merge(self, animation: AbstractAnimation) -&gt; None:\n        \"\"\"\n        A method for merging an animation with the previously merged animations.\n\n        Args:\n            animation: An animation to be merged with with previously merged animations.\n\n        Raises:\n            ValueError: If the type of an animation is already merged.\n            ValueError: If `Keyframe` is merged with different type of animation.\n        \"\"\"\n\n        if isinstance(animation, Keyframe):\n            if self._dict:\n                raise ValueError(\"Keyframe cannot be merged with other animations.\")\n            data = animation.build()\n            self._list.append(data)\n        else:\n            if self._list:\n                raise ValueError(\"Keyframe cannot be merged with other animations.\")\n            data = self._validate(animation)\n            self._dict.update(data)\n\n    def _validate(self, animation: AbstractAnimation) -&gt; dict:\n        if isinstance(animation, Snapshot):\n            raise ValueError(\"Snapshot cannot be merged with other animations.\")\n        data = animation.build()\n        common_keys = set(data).intersection(self._dict)\n\n        if common_keys:\n            raise ValueError(f\"{common_keys} is already merged.\")\n\n        return data\n\n    def build(self) -&gt; Union[dict, list]:  # type: ignore\n        \"\"\"\n        A method for returning a merged list of `Keyframes`\n        or a merged dictionary from different types of animations.\n\n        Returns:\n            A merged list of [Keyframes][ipyvizzu.animation.Keyframe] or\n                a merged dictionary from\n                [Data][ipyvizzu.animation.Data],\n                [Config][ipyvizzu.animation.Config] and\n                [Style][ipyvizzu.animation.Style] animations.\n        \"\"\"\n\n        if self._dict:\n            return self._dict\n        return self._list</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.AnimationMerger.__init__","title":"<code>__init__()</code>","text":"<p>AnimationMerger constructor.</p> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>def __init__(self):\n    \"\"\"AnimationMerger constructor.\"\"\"\n\n    self._dict = {}\n    self._list = []</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.AnimationMerger.merge_animations","title":"<code>merge_animations(animations)</code>  <code>classmethod</code>","text":"<p>A class method for merging animations.</p> <p>Parameters:</p> Name Type Description Default <code>animations</code> <code>Tuple[AbstractAnimation, ...]</code> <p>List of <code>AbstractAnimation</code> inherited objects.</p> required <p>Returns:</p> Type Description <code>AbstractAnimation</code> <p>An <code>AnimationMerger</code> class with the merged animations.</p> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>@classmethod\ndef merge_animations(\n    cls, animations: Tuple[AbstractAnimation, ...]\n) -&gt; AbstractAnimation:\n    \"\"\"\n    A class method for merging animations.\n\n    Args:\n        animations: List of `AbstractAnimation` inherited objects.\n\n    Returns:\n        An `AnimationMerger` class with the merged animations.\n    \"\"\"\n\n    if len(animations) == 1 and not isinstance(animations[0], Keyframe):\n        return animations[0]\n\n    merger = cls()\n    for animation in animations:\n        merger.merge(animation)\n\n    return merger</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.AnimationMerger.merge","title":"<code>merge(animation)</code>","text":"<p>A method for merging an animation with the previously merged animations.</p> <p>Parameters:</p> Name Type Description Default <code>animation</code> <code>AbstractAnimation</code> <p>An animation to be merged with with previously merged animations.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the type of an animation is already merged.</p> <code>ValueError</code> <p>If <code>Keyframe</code> is merged with different type of animation.</p> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>def merge(self, animation: AbstractAnimation) -&gt; None:\n    \"\"\"\n    A method for merging an animation with the previously merged animations.\n\n    Args:\n        animation: An animation to be merged with with previously merged animations.\n\n    Raises:\n        ValueError: If the type of an animation is already merged.\n        ValueError: If `Keyframe` is merged with different type of animation.\n    \"\"\"\n\n    if isinstance(animation, Keyframe):\n        if self._dict:\n            raise ValueError(\"Keyframe cannot be merged with other animations.\")\n        data = animation.build()\n        self._list.append(data)\n    else:\n        if self._list:\n            raise ValueError(\"Keyframe cannot be merged with other animations.\")\n        data = self._validate(animation)\n        self._dict.update(data)</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.AnimationMerger.build","title":"<code>build()</code>","text":"<p>A method for returning a merged list of <code>Keyframes</code> or a merged dictionary from different types of animations.</p> <p>Returns:</p> Type Description <code>Union[dict, list]</code> <p>A merged list of Keyframes or a merged dictionary from Data, Config and Style animations.</p> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>def build(self) -&gt; Union[dict, list]:  # type: ignore\n    \"\"\"\n    A method for returning a merged list of `Keyframes`\n    or a merged dictionary from different types of animations.\n\n    Returns:\n        A merged list of [Keyframes][ipyvizzu.animation.Keyframe] or\n            a merged dictionary from\n            [Data][ipyvizzu.animation.Data],\n            [Config][ipyvizzu.animation.Config] and\n            [Style][ipyvizzu.animation.Style] animations.\n    \"\"\"\n\n    if self._dict:\n        return self._dict\n    return self._list</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.Animate","title":"<code>ipyvizzu.Animate</code>","text":"<p>         Bases: <code>Method</code></p> <p>A class for dumping chart independent parameters to DisplayTemplate.ANIMATE template.</p> Source code in <code>src/ipyvizzu/method.py</code> <pre><code>class Animate(Method):\n    \"\"\"\n    A class for dumping chart independent parameters to\n    [DisplayTemplate.ANIMATE][ipyvizzu.template.DisplayTemplate] template.\n    \"\"\"\n\n    # pylint: disable=too-few-public-methods\n\n    def __init__(\n        self,\n        chart_target: AbstractAnimation,\n        chart_anim_opts: Optional[dict] = None,\n    ):\n        \"\"\"\n        Animate constructor.\n\n        It stores and dumps `chart_target` and `chart_anim_opts` parameters.\n\n        Args:\n            chart_target:\n                AbstractAnimation inherited object such as\n                [Data][ipyvizzu.animation.Data]\n                [Config][ipyvizzu.animation.Config] or\n                [Style][ipyvizzu.animation.Style].\n            chart_anim_opts:\n                Animation options' dictionary. If it is not set, it dumps `undefined`.\n        \"\"\"\n\n        self._data = {\n            \"chart_target\": chart_target.dump(),\n            \"chart_anim_opts\": PlainAnimation(chart_anim_opts).dump()\n            if chart_anim_opts\n            else \"undefined\",\n        }</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.method.Animate.__init__","title":"<code>__init__(chart_target, chart_anim_opts=None)</code>","text":"<p>Animate constructor.</p> <p>It stores and dumps <code>chart_target</code> and <code>chart_anim_opts</code> parameters.</p> <p>Parameters:</p> Name Type Description Default <code>chart_target</code> <code>AbstractAnimation</code> <p>AbstractAnimation inherited object such as Data Config or Style.</p> required <code>chart_anim_opts</code> <code>Optional[dict]</code> <p>Animation options' dictionary. If it is not set, it dumps <code>undefined</code>.</p> <code>None</code> Source code in <code>src/ipyvizzu/method.py</code> <pre><code>def __init__(\n    self,\n    chart_target: AbstractAnimation,\n    chart_anim_opts: Optional[dict] = None,\n):\n    \"\"\"\n    Animate constructor.\n\n    It stores and dumps `chart_target` and `chart_anim_opts` parameters.\n\n    Args:\n        chart_target:\n            AbstractAnimation inherited object such as\n            [Data][ipyvizzu.animation.Data]\n            [Config][ipyvizzu.animation.Config] or\n            [Style][ipyvizzu.animation.Style].\n        chart_anim_opts:\n            Animation options' dictionary. If it is not set, it dumps `undefined`.\n    \"\"\"\n\n    self._data = {\n        \"chart_target\": chart_target.dump(),\n        \"chart_anim_opts\": PlainAnimation(chart_anim_opts).dump()\n        if chart_anim_opts\n        else \"undefined\",\n    }</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.Feature","title":"<code>ipyvizzu.Feature</code>","text":"<p>         Bases: <code>Method</code></p> <p>A class for dumping chart independent parameters to DisplayTemplate.FEATURE template.</p> Source code in <code>src/ipyvizzu/method.py</code> <pre><code>class Feature(Method):\n    \"\"\"\n    A class for dumping chart independent parameters to\n    [DisplayTemplate.FEATURE][ipyvizzu.template.DisplayTemplate] template.\n    \"\"\"\n\n    # pylint: disable=too-few-public-methods\n\n    def __init__(self, name: str, enabled: bool):\n        \"\"\"\n        Feature constructor.\n\n        It stores and dumps `name` and `enabled` parameters.\n\n        Args:\n            name: The name of a chart feature.\n            enabled: The new state of a chart feature.\n        \"\"\"\n\n        self._data = {\"name\": name, \"enabled\": json.dumps(enabled)}</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.method.Feature.__init__","title":"<code>__init__(name, enabled)</code>","text":"<p>Feature constructor.</p> <p>It stores and dumps <code>name</code> and <code>enabled</code> parameters.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of a chart feature.</p> required <code>enabled</code> <code>bool</code> <p>The new state of a chart feature.</p> required Source code in <code>src/ipyvizzu/method.py</code> <pre><code>def __init__(self, name: str, enabled: bool):\n    \"\"\"\n    Feature constructor.\n\n    It stores and dumps `name` and `enabled` parameters.\n\n    Args:\n        name: The name of a chart feature.\n        enabled: The new state of a chart feature.\n    \"\"\"\n\n    self._data = {\"name\": name, \"enabled\": json.dumps(enabled)}</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.Store","title":"<code>ipyvizzu.Store</code>","text":"<p>         Bases: <code>Method</code></p> <p>A class for dumping chart independent parameters to DisplayTemplate.STORE template.</p> Source code in <code>src/ipyvizzu/method.py</code> <pre><code>class Store(Method):\n    \"\"\"\n    A class for dumping chart independent parameters to\n    [DisplayTemplate.STORE][ipyvizzu.template.DisplayTemplate] template.\n    \"\"\"\n\n    # pylint: disable=too-few-public-methods\n\n    def __init__(self, snapshot_id: str):\n        \"\"\"\n        Store constructor.\n\n        It stores and dumps `snapshot_id` parameter.\n\n        Args:\n            snapshot_id: The id of snapshot object.\n        \"\"\"\n\n        self._data = {\"id\": snapshot_id}</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.method.Store.__init__","title":"<code>__init__(snapshot_id)</code>","text":"<p>Store constructor.</p> <p>It stores and dumps <code>snapshot_id</code> parameter.</p> <p>Parameters:</p> Name Type Description Default <code>snapshot_id</code> <code>str</code> <p>The id of snapshot object.</p> required Source code in <code>src/ipyvizzu/method.py</code> <pre><code>def __init__(self, snapshot_id: str):\n    \"\"\"\n    Store constructor.\n\n    It stores and dumps `snapshot_id` parameter.\n\n    Args:\n        snapshot_id: The id of snapshot object.\n    \"\"\"\n\n    self._data = {\"id\": snapshot_id}</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.EventOn","title":"<code>ipyvizzu.EventOn</code>","text":"<p>         Bases: <code>Method</code></p> <p>A class for dumping chart independent parameters to DisplayTemplate.SET_EVENT template.</p> Source code in <code>src/ipyvizzu/method.py</code> <pre><code>class EventOn(Method):\n    \"\"\"\n    A class for dumping chart independent parameters to\n    [DisplayTemplate.SET_EVENT][ipyvizzu.template.DisplayTemplate] template.\n    \"\"\"\n\n    # pylint: disable=too-few-public-methods\n\n    def __init__(self, event_handler: EventHandler):\n        \"\"\"\n        EventOn constructor.\n\n        It stores and dumps the `id`, the `event` and the `handler` of the event handler object.\n\n        Args:\n            event_handler: An event handler object.\n        \"\"\"\n\n        self._data = {\n            \"id\": event_handler.id,\n            \"event\": event_handler.event,\n            \"handler\": event_handler.handler,\n        }</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.method.EventOn.__init__","title":"<code>__init__(event_handler)</code>","text":"<p>EventOn constructor.</p> <p>It stores and dumps the <code>id</code>, the <code>event</code> and the <code>handler</code> of the event handler object.</p> <p>Parameters:</p> Name Type Description Default <code>event_handler</code> <code>EventHandler</code> <p>An event handler object.</p> required Source code in <code>src/ipyvizzu/method.py</code> <pre><code>def __init__(self, event_handler: EventHandler):\n    \"\"\"\n    EventOn constructor.\n\n    It stores and dumps the `id`, the `event` and the `handler` of the event handler object.\n\n    Args:\n        event_handler: An event handler object.\n    \"\"\"\n\n    self._data = {\n        \"id\": event_handler.id,\n        \"event\": event_handler.event,\n        \"handler\": event_handler.handler,\n    }</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.EventOff","title":"<code>ipyvizzu.EventOff</code>","text":"<p>         Bases: <code>Method</code></p> <p>A class for dumping chart independent parameters to DisplayTemplate.CLEAR_EVENT template.</p> Source code in <code>src/ipyvizzu/method.py</code> <pre><code>class EventOff(Method):\n    \"\"\"\n    A class for dumping chart independent parameters to\n    [DisplayTemplate.CLEAR_EVENT][ipyvizzu.template.DisplayTemplate] template.\n    \"\"\"\n\n    # pylint: disable=too-few-public-methods\n\n    def __init__(self, event_handler: EventHandler):\n        \"\"\"\n        EventOff constructor.\n\n        It stores and dumps the `id` and the `event` of the event handler object.\n\n        Args:\n            event_handler: An event handler object.\n        \"\"\"\n\n        self._data = {\"id\": event_handler.id, \"event\": event_handler.event}</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.method.EventOff.__init__","title":"<code>__init__(event_handler)</code>","text":"<p>EventOff constructor.</p> <p>It stores and dumps the <code>id</code> and the <code>event</code> of the event handler object.</p> <p>Parameters:</p> Name Type Description Default <code>event_handler</code> <code>EventHandler</code> <p>An event handler object.</p> required Source code in <code>src/ipyvizzu/method.py</code> <pre><code>def __init__(self, event_handler: EventHandler):\n    \"\"\"\n    EventOff constructor.\n\n    It stores and dumps the `id` and the `event` of the event handler object.\n\n    Args:\n        event_handler: An event handler object.\n    \"\"\"\n\n    self._data = {\"id\": event_handler.id, \"event\": event_handler.event}</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.Log","title":"<code>ipyvizzu.Log</code>","text":"<p>         Bases: <code>Method</code></p> <p>A class for dumping chart independent parameters to DisplayTemplate.LOG template.</p> Source code in <code>src/ipyvizzu/method.py</code> <pre><code>class Log(Method):\n    \"\"\"\n    A class for dumping chart independent parameters to\n    [DisplayTemplate.LOG][ipyvizzu.template.DisplayTemplate] template.\n    \"\"\"\n\n    # pylint: disable=too-few-public-methods\n\n    def __init__(self, chart_property: ChartProperty):\n        \"\"\"\n        Log constructor.\n\n        It stores and dumps the value of the chart property object.\n\n        Args:\n            chart_property:\n                A chart property such as\n                [CONFIG][ipyvizzu.template.ChartProperty] and\n                [STYLE][ipyvizzu.template.ChartProperty].\n        \"\"\"\n\n        self._data = {\"chart_property\": chart_property.value}</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.method.Log.__init__","title":"<code>__init__(chart_property)</code>","text":"<p>Log constructor.</p> <p>It stores and dumps the value of the chart property object.</p> <p>Parameters:</p> Name Type Description Default <code>chart_property</code> <code>ChartProperty</code> <p>A chart property such as CONFIG and STYLE.</p> required Source code in <code>src/ipyvizzu/method.py</code> <pre><code>def __init__(self, chart_property: ChartProperty):\n    \"\"\"\n    Log constructor.\n\n    It stores and dumps the value of the chart property object.\n\n    Args:\n        chart_property:\n            A chart property such as\n            [CONFIG][ipyvizzu.template.ChartProperty] and\n            [STYLE][ipyvizzu.template.ChartProperty].\n    \"\"\"\n\n    self._data = {\"chart_property\": chart_property.value}</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.AnimationControl","title":"<code>ipyvizzu.AnimationControl</code>","text":"<p>A class for controlling animations.</p> Source code in <code>src/ipyvizzu/animationcontrol.py</code> <pre><code>class AnimationControl:\n    \"\"\"\n    A class for controlling animations.\n    \"\"\"\n\n    def __init__(self, prev_id: str, last_id: str, display_method: Callable):\n        \"\"\"\n        AnimationControl constructor.\n\n        Args:\n            prev_id: Id of the previous animation promise.\n            last_id: Id of the animation to be controlled.\n            display_method: Displaying function.\n        \"\"\"\n\n        self._ids = \", \".join([f\"'{prev_id}'\", f\"'{last_id}'\"])\n        self._display = display_method\n\n    def cancel(self) -&gt; None:\n        \"\"\"Cancels the animation, will reject the animation promise.\"\"\"\n\n        self._display(\n            DisplayTemplate.CONTROL.format(\n                method=\"cancel\",\n                params=self._ids,\n            )\n        )\n\n    def pause(self) -&gt; None:\n        \"\"\"Pauses the controlled animation.\"\"\"\n\n        self._display(\n            DisplayTemplate.CONTROL.format(\n                method=\"pause\",\n                params=self._ids,\n            )\n        )\n\n    def play(self) -&gt; None:\n        \"\"\"Plays/resumes playing of the controlled animation.\"\"\"\n\n        self._display(\n            DisplayTemplate.CONTROL.format(\n                method=\"play\",\n                params=self._ids,\n            )\n        )\n\n    def reverse(self) -&gt; None:\n        \"\"\"Changes the direction of the controlled animation.\"\"\"\n\n        self._display(\n            DisplayTemplate.CONTROL.format(\n                method=\"reverse\",\n                params=self._ids,\n            )\n        )\n\n    def seek(self, value: Union[int, str]) -&gt; None:\n        \"\"\"\n        Seeks the animation to the position specified by time or progress percentage.\n\n        Args:\n            value: The position specified by time or progress percentage.\n        \"\"\"\n\n        params = \", \".join([self._ids, f\"'{value}'\"])\n        self._display(\n            DisplayTemplate.CONTROL.format(\n                method=\"seek\",\n                params=params,\n            )\n        )\n\n    def stop(self) -&gt; None:\n        \"\"\"Stops the current animation seeking it back to its start position.\"\"\"\n\n        self._display(\n            DisplayTemplate.CONTROL.format(\n                method=\"stop\",\n                params=self._ids,\n            )\n        )\n\n    def store(self) -&gt; Animation:\n        \"\"\"\n        A method for saving and storing the actual state of the animation.\n\n        Returns:\n            An `Animation` object wich stores the actual state of the animation.\n        \"\"\"\n\n        animation_id = uuid.uuid4().hex[:7]\n        params = \", \".join([self._ids, f\"'{animation_id}'\"])\n        self._display(\n            DisplayTemplate.CONTROL.format(\n                method=\"store\",\n                params=params,\n            )\n        )\n        return Animation(animation_id)</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.animationcontrol.AnimationControl.__init__","title":"<code>__init__(prev_id, last_id, display_method)</code>","text":"<p>AnimationControl constructor.</p> <p>Parameters:</p> Name Type Description Default <code>prev_id</code> <code>str</code> <p>Id of the previous animation promise.</p> required <code>last_id</code> <code>str</code> <p>Id of the animation to be controlled.</p> required <code>display_method</code> <code>Callable</code> <p>Displaying function.</p> required Source code in <code>src/ipyvizzu/animationcontrol.py</code> <pre><code>def __init__(self, prev_id: str, last_id: str, display_method: Callable):\n    \"\"\"\n    AnimationControl constructor.\n\n    Args:\n        prev_id: Id of the previous animation promise.\n        last_id: Id of the animation to be controlled.\n        display_method: Displaying function.\n    \"\"\"\n\n    self._ids = \", \".join([f\"'{prev_id}'\", f\"'{last_id}'\"])\n    self._display = display_method</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.animationcontrol.AnimationControl.cancel","title":"<code>cancel()</code>","text":"<p>Cancels the animation, will reject the animation promise.</p> Source code in <code>src/ipyvizzu/animationcontrol.py</code> <pre><code>def cancel(self) -&gt; None:\n    \"\"\"Cancels the animation, will reject the animation promise.\"\"\"\n\n    self._display(\n        DisplayTemplate.CONTROL.format(\n            method=\"cancel\",\n            params=self._ids,\n        )\n    )</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.animationcontrol.AnimationControl.pause","title":"<code>pause()</code>","text":"<p>Pauses the controlled animation.</p> Source code in <code>src/ipyvizzu/animationcontrol.py</code> <pre><code>def pause(self) -&gt; None:\n    \"\"\"Pauses the controlled animation.\"\"\"\n\n    self._display(\n        DisplayTemplate.CONTROL.format(\n            method=\"pause\",\n            params=self._ids,\n        )\n    )</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.animationcontrol.AnimationControl.play","title":"<code>play()</code>","text":"<p>Plays/resumes playing of the controlled animation.</p> Source code in <code>src/ipyvizzu/animationcontrol.py</code> <pre><code>def play(self) -&gt; None:\n    \"\"\"Plays/resumes playing of the controlled animation.\"\"\"\n\n    self._display(\n        DisplayTemplate.CONTROL.format(\n            method=\"play\",\n            params=self._ids,\n        )\n    )</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.animationcontrol.AnimationControl.reverse","title":"<code>reverse()</code>","text":"<p>Changes the direction of the controlled animation.</p> Source code in <code>src/ipyvizzu/animationcontrol.py</code> <pre><code>def reverse(self) -&gt; None:\n    \"\"\"Changes the direction of the controlled animation.\"\"\"\n\n    self._display(\n        DisplayTemplate.CONTROL.format(\n            method=\"reverse\",\n            params=self._ids,\n        )\n    )</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.animationcontrol.AnimationControl.seek","title":"<code>seek(value)</code>","text":"<p>Seeks the animation to the position specified by time or progress percentage.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Union[int, str]</code> <p>The position specified by time or progress percentage.</p> required Source code in <code>src/ipyvizzu/animationcontrol.py</code> <pre><code>def seek(self, value: Union[int, str]) -&gt; None:\n    \"\"\"\n    Seeks the animation to the position specified by time or progress percentage.\n\n    Args:\n        value: The position specified by time or progress percentage.\n    \"\"\"\n\n    params = \", \".join([self._ids, f\"'{value}'\"])\n    self._display(\n        DisplayTemplate.CONTROL.format(\n            method=\"seek\",\n            params=params,\n        )\n    )</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.animationcontrol.AnimationControl.stop","title":"<code>stop()</code>","text":"<p>Stops the current animation seeking it back to its start position.</p> Source code in <code>src/ipyvizzu/animationcontrol.py</code> <pre><code>def stop(self) -&gt; None:\n    \"\"\"Stops the current animation seeking it back to its start position.\"\"\"\n\n    self._display(\n        DisplayTemplate.CONTROL.format(\n            method=\"stop\",\n            params=self._ids,\n        )\n    )</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.animationcontrol.AnimationControl.store","title":"<code>store()</code>","text":"<p>A method for saving and storing the actual state of the animation.</p> <p>Returns:</p> Type Description <code>Animation</code> <p>An <code>Animation</code> object wich stores the actual state of the animation.</p> Source code in <code>src/ipyvizzu/animationcontrol.py</code> <pre><code>def store(self) -&gt; Animation:\n    \"\"\"\n    A method for saving and storing the actual state of the animation.\n\n    Returns:\n        An `Animation` object wich stores the actual state of the animation.\n    \"\"\"\n\n    animation_id = uuid.uuid4().hex[:7]\n    params = \", \".join([self._ids, f\"'{animation_id}'\"])\n    self._display(\n        DisplayTemplate.CONTROL.format(\n            method=\"store\",\n            params=params,\n        )\n    )\n    return Animation(animation_id)</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.Method","title":"<code>ipyvizzu.Method</code>","text":"<p>A class for storing and dumping any kind of data.</p> Source code in <code>src/ipyvizzu/method.py</code> <pre><code>class Method:\n    \"\"\"A class for storing and dumping any kind of data.\"\"\"\n\n    # pylint: disable=too-few-public-methods\n\n    _data: dict\n\n    def dump(self) -&gt; dict:\n        \"\"\"\n        A method for returning the stored data.\n\n        Returns:\n            The stored data.\n        \"\"\"\n\n        return self._data</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.method.Method.dump","title":"<code>dump()</code>","text":"<p>A method for returning the stored data.</p> <p>Returns:</p> Type Description <code>dict</code> <p>The stored data.</p> Source code in <code>src/ipyvizzu/method.py</code> <pre><code>def dump(self) -&gt; dict:\n    \"\"\"\n    A method for returning the stored data.\n\n    Returns:\n        The stored data.\n    \"\"\"\n\n    return self._data</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.EventHandler","title":"<code>ipyvizzu.EventHandler</code>","text":"<p>A class for representing an event handler.</p> Source code in <code>src/ipyvizzu/event.py</code> <pre><code>class EventHandler:\n    \"\"\"A class for representing an event handler.\"\"\"\n\n    def __init__(self, event: str, handler: str):\n        \"\"\"\n        EventHandler constructor.\n\n        It generates a uuid for the event handler,\n        stores the event type and the body of the handler function.\n\n        Args:\n            event: The type of the event.\n            handler: The body of the handler function.\n        \"\"\"\n\n        self._id = uuid.uuid4().hex[:7]\n        self._event = event\n        self._handler = \" \".join(handler.split())\n\n    @property\n    def id(self) -&gt; str:  # pylint: disable=invalid-name\n        \"\"\"\n        A property for storing an id.\n\n        Returns:\n            The uuid of the event handler.\n        \"\"\"\n\n        return self._id\n\n    @property\n    def event(self) -&gt; str:\n        \"\"\"\n        A property for storing an event type.\n\n        Returns:\n            The type of the event.\n        \"\"\"\n\n        return self._event\n\n    @property\n    def handler(self) -&gt; str:\n        \"\"\"\n        A property for storing an event handler function.\n\n        Returns:\n            The body of the handler function.\n        \"\"\"\n\n        return self._handler</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.event.EventHandler.id","title":"<code>id: str</code>  <code>property</code>","text":"<p>A property for storing an id.</p> <p>Returns:</p> Type Description <code>str</code> <p>The uuid of the event handler.</p>"},{"location":"reference/ipyvizzu/#ipyvizzu.event.EventHandler.event","title":"<code>event: str</code>  <code>property</code>","text":"<p>A property for storing an event type.</p> <p>Returns:</p> Type Description <code>str</code> <p>The type of the event.</p>"},{"location":"reference/ipyvizzu/#ipyvizzu.event.EventHandler.handler","title":"<code>handler: str</code>  <code>property</code>","text":"<p>A property for storing an event handler function.</p> <p>Returns:</p> Type Description <code>str</code> <p>The body of the handler function.</p>"},{"location":"reference/ipyvizzu/#ipyvizzu.event.EventHandler.__init__","title":"<code>__init__(event, handler)</code>","text":"<p>EventHandler constructor.</p> <p>It generates a uuid for the event handler, stores the event type and the body of the handler function.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>str</code> <p>The type of the event.</p> required <code>handler</code> <code>str</code> <p>The body of the handler function.</p> required Source code in <code>src/ipyvizzu/event.py</code> <pre><code>def __init__(self, event: str, handler: str):\n    \"\"\"\n    EventHandler constructor.\n\n    It generates a uuid for the event handler,\n    stores the event type and the body of the handler function.\n\n    Args:\n        event: The type of the event.\n        handler: The body of the handler function.\n    \"\"\"\n\n    self._id = uuid.uuid4().hex[:7]\n    self._event = event\n    self._handler = \" \".join(handler.split())</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.RawJavaScript","title":"<code>ipyvizzu.RawJavaScript</code>","text":"<p>A class for representing raw JavaScript code.</p> Source code in <code>src/ipyvizzu/json.py</code> <pre><code>class RawJavaScript:\n    \"\"\"A class for representing raw JavaScript code.\"\"\"\n\n    # pylint: disable=too-few-public-methods\n\n    def __init__(self, raw: Optional[str]):\n        \"\"\"\n        RawJavaScript constructor.\n\n        It stores raw JavaScript code as a string.\n\n        Args:\n            raw: JavaScript code as `str`.\n        \"\"\"\n\n        self._raw = raw\n\n    @property\n    def raw(self) -&gt; Optional[str]:\n        \"\"\"\n        A property for storing raw JavaScript code as a string.\n\n        Returns:\n            Raw JavaScript code as `str`.\n        \"\"\"\n\n        return self._raw</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.json.RawJavaScript.raw","title":"<code>raw: Optional[str]</code>  <code>property</code>","text":"<p>A property for storing raw JavaScript code as a string.</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Raw JavaScript code as <code>str</code>.</p>"},{"location":"reference/ipyvizzu/#ipyvizzu.json.RawJavaScript.__init__","title":"<code>__init__(raw)</code>","text":"<p>RawJavaScript constructor.</p> <p>It stores raw JavaScript code as a string.</p> <p>Parameters:</p> Name Type Description Default <code>raw</code> <code>Optional[str]</code> <p>JavaScript code as <code>str</code>.</p> required Source code in <code>src/ipyvizzu/json.py</code> <pre><code>def __init__(self, raw: Optional[str]):\n    \"\"\"\n    RawJavaScript constructor.\n\n    It stores raw JavaScript code as a string.\n\n    Args:\n        raw: JavaScript code as `str`.\n    \"\"\"\n\n    self._raw = raw</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.RawJavaScriptEncoder","title":"<code>ipyvizzu.RawJavaScriptEncoder</code>","text":"<p>         Bases: <code>json.JSONEncoder</code></p> <p>A class for representing a custom json encoder, it can encode objects that contain RawJavaScript values.</p> Source code in <code>src/ipyvizzu/json.py</code> <pre><code>class RawJavaScriptEncoder(json.JSONEncoder):\n    \"\"\"\n    A class for representing a custom json encoder,\n    it can encode objects that contain\n    [RawJavaScript][ipyvizzu.json.RawJavaScript] values.\n    \"\"\"\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"\n        RawJavaScriptEncoder constructor.\n\n        It extends [JSONEncoder][json.JSONEncoder] with\n        an instance variable (`_raw_replacements`).\n        The `_raw_replacements` dictionary stores the `uuids` and\n        JavaScript codes of the [RawJavaScript][ipyvizzu.json.RawJavaScript] objects.\n        \"\"\"\n\n        json.JSONEncoder.__init__(self, *args, **kwargs)\n        self._raw_replacements = {}\n\n    def default(self, o):\n        \"\"\"\n        Overrides [JSONEncoder.default][json.JSONEncoder.default] method.\n        It replaces [RawJavaScript][ipyvizzu.json.RawJavaScript] object with `uuid` and\n        it stores raw JavaScript code with `uuid` key in the `_raw_replacements` dictionary.\n        \"\"\"\n\n        if isinstance(o, RawJavaScript):\n            key = uuid.uuid4().hex\n            self._raw_replacements[key] = o.raw\n            return key\n        return json.JSONEncoder.default(self, o)\n\n    def encode(self, o):\n        \"\"\"\n        Overrides [JSONEncoder.encode][json.JSONEncoder.encode] method.\n        It replaces `uuids` with raw JavaScript code without apostrophes.\n        \"\"\"\n\n        result = json.JSONEncoder.encode(self, o)\n        for key, val in self._raw_replacements.items():\n            result = result.replace(f'\"{key}\"', val)\n        return result</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.json.RawJavaScriptEncoder.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>RawJavaScriptEncoder constructor.</p> <p>It extends JSONEncoder with an instance variable (<code>_raw_replacements</code>). The <code>_raw_replacements</code> dictionary stores the <code>uuids</code> and JavaScript codes of the RawJavaScript objects.</p> Source code in <code>src/ipyvizzu/json.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    \"\"\"\n    RawJavaScriptEncoder constructor.\n\n    It extends [JSONEncoder][json.JSONEncoder] with\n    an instance variable (`_raw_replacements`).\n    The `_raw_replacements` dictionary stores the `uuids` and\n    JavaScript codes of the [RawJavaScript][ipyvizzu.json.RawJavaScript] objects.\n    \"\"\"\n\n    json.JSONEncoder.__init__(self, *args, **kwargs)\n    self._raw_replacements = {}</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.json.RawJavaScriptEncoder.default","title":"<code>default(o)</code>","text":"<p>Overrides JSONEncoder.default method. It replaces RawJavaScript object with <code>uuid</code> and it stores raw JavaScript code with <code>uuid</code> key in the <code>_raw_replacements</code> dictionary.</p> Source code in <code>src/ipyvizzu/json.py</code> <pre><code>def default(self, o):\n    \"\"\"\n    Overrides [JSONEncoder.default][json.JSONEncoder.default] method.\n    It replaces [RawJavaScript][ipyvizzu.json.RawJavaScript] object with `uuid` and\n    it stores raw JavaScript code with `uuid` key in the `_raw_replacements` dictionary.\n    \"\"\"\n\n    if isinstance(o, RawJavaScript):\n        key = uuid.uuid4().hex\n        self._raw_replacements[key] = o.raw\n        return key\n    return json.JSONEncoder.default(self, o)</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.json.RawJavaScriptEncoder.encode","title":"<code>encode(o)</code>","text":"<p>Overrides JSONEncoder.encode method. It replaces <code>uuids</code> with raw JavaScript code without apostrophes.</p> Source code in <code>src/ipyvizzu/json.py</code> <pre><code>def encode(self, o):\n    \"\"\"\n    Overrides [JSONEncoder.encode][json.JSONEncoder.encode] method.\n    It replaces `uuids` with raw JavaScript code without apostrophes.\n    \"\"\"\n\n    result = json.JSONEncoder.encode(self, o)\n    for key, val in self._raw_replacements.items():\n        result = result.replace(f'\"{key}\"', val)\n    return result</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.ChartProperty","title":"<code>ipyvizzu.ChartProperty</code>","text":"<p>         Bases: <code>Enum</code></p> <p>An enum class for storing chart properties.</p> Source code in <code>src/ipyvizzu/template.py</code> <pre><code>class ChartProperty(Enum):\n    \"\"\"An enum class for storing chart properties.\"\"\"\n\n    CONFIG = \"config\"\n    \"\"\"An enum key-value for storing config chart property.\"\"\"\n\n    STYLE = \"style\"\n    \"\"\"An enum key-value for storing style chart property.\"\"\"</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.template.ChartProperty.CONFIG","title":"<code>CONFIG = 'config'</code>  <code>class-attribute</code>","text":"<p>An enum key-value for storing config chart property.</p>"},{"location":"reference/ipyvizzu/#ipyvizzu.template.ChartProperty.STYLE","title":"<code>STYLE = 'style'</code>  <code>class-attribute</code>","text":"<p>An enum key-value for storing style chart property.</p>"},{"location":"reference/ipyvizzu/#ipyvizzu.DisplayTarget","title":"<code>ipyvizzu.DisplayTarget</code>","text":"<p>         Bases: <code>Enum</code></p> <p>An enum class for storing chart display options.</p> Source code in <code>src/ipyvizzu/template.py</code> <pre><code>class DisplayTarget(Enum):\n    \"\"\"An enum class for storing chart display options.\"\"\"\n\n    BEGIN = \"begin\"\n    \"\"\"Display all animation steps after the constructor's cell.\"\"\"\n\n    END = \"end\"\n    \"\"\"Display all animation steps after the last running cell.\"\"\"\n\n    ACTUAL = \"actual\"\n    \"\"\"Display the actual animation step after the currently running cell.\"\"\"\n\n    MANUAL = \"manual\"\n    \"\"\"Display all animation steps after calling a show method.\"\"\"</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTarget.BEGIN","title":"<code>BEGIN = 'begin'</code>  <code>class-attribute</code>","text":"<p>Display all animation steps after the constructor's cell.</p>"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTarget.END","title":"<code>END = 'end'</code>  <code>class-attribute</code>","text":"<p>Display all animation steps after the last running cell.</p>"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTarget.ACTUAL","title":"<code>ACTUAL = 'actual'</code>  <code>class-attribute</code>","text":"<p>Display the actual animation step after the currently running cell.</p>"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTarget.MANUAL","title":"<code>MANUAL = 'manual'</code>  <code>class-attribute</code>","text":"<p>Display all animation steps after calling a show method.</p>"},{"location":"reference/ipyvizzu/#ipyvizzu.DisplayTemplate","title":"<code>ipyvizzu.DisplayTemplate</code>","text":"<p>A class for storing JavaScript snippet templates.</p> Source code in <code>src/ipyvizzu/template.py</code> <pre><code>class DisplayTemplate:\n    \"\"\"A class for storing JavaScript snippet templates.\"\"\"\n\n    # pylint: disable=too-few-public-methods\n\n    IPYVIZZUJS: str = \"{ipyvizzujs}\"\n    \"\"\"ipyvizzu JavaScript class.\"\"\"\n\n    INIT: str = (\n        \"window.ipyvizzu.createChart(element, \"\n        + \"'{chart_id}', '{vizzu}', '{div_width}', '{div_height}');\"\n    )\n    \"\"\"Call createChart JavaScript method.\"\"\"\n\n    ANIMATE: str = (\n        \"window.ipyvizzu.animate(element, \"\n        + \"'{chart_id}', '{anim_id}', '{display_target}', {scroll}, \"\n        + \"lib =&gt; {{ return {chart_target} }}, {chart_anim_opts});\"\n    )\n    \"\"\"Call animate JavaScript method.\"\"\"\n\n    FEATURE: str = (\n        \"window.ipyvizzu.feature(element, '{chart_id}', '{name}', {enabled});\"\n    )\n    \"\"\"Call feature JavaScript method.\"\"\"\n\n    STORE: str = \"window.ipyvizzu.store(element, '{chart_id}', '{id}');\"\n    \"\"\"Call store JavaScript method.\"\"\"\n\n    SET_EVENT: str = (\n        \"window.ipyvizzu.setEvent(element, \"\n        + \"'{chart_id}', '{id}', '{event}', event =&gt; {{ {handler} }});\"\n    )\n    \"\"\"Call setEvent JavaScript method.\"\"\"\n\n    CLEAR_EVENT: str = (\n        \"window.ipyvizzu.clearEvent(element, '{chart_id}', '{id}', '{event}');\"\n    )\n    \"\"\"Call clearEvent JavaScript method.\"\"\"\n\n    LOG: str = \"window.ipyvizzu.log(element, '{chart_id}', '{chart_property}');\"\n    \"\"\"Call log JavaScript method.\"\"\"\n\n    CONTROL: str = \"window.ipyvizzu.control(element, '{method}', {params});\"\n    \"\"\"Call animation control JavaScript methods.\"\"\"\n\n    CLEAR_INHIBITSCROLL: str = (\n        \"if (window.IpyVizzu) { window.IpyVizzu.clearInhibitScroll(element); }\"\n    )\n    \"\"\"Call clearInhibitScroll JavaScript method if ipyvizzu JavaScript class exists.\"\"\"</code></pre>"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTemplate.IPYVIZZUJS","title":"<code>IPYVIZZUJS: str = '{ipyvizzujs}'</code>  <code>class-attribute</code>","text":"<p>ipyvizzu JavaScript class.</p>"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTemplate.INIT","title":"<code>INIT: str = 'window.ipyvizzu.createChart(element, ' + \"'{chart_id}', '{vizzu}', '{div_width}', '{div_height}');\"</code>  <code>class-attribute</code>","text":"<p>Call createChart JavaScript method.</p>"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTemplate.ANIMATE","title":"<code>ANIMATE: str = 'window.ipyvizzu.animate(element, ' + \"'{chart_id}', '{anim_id}', '{display_target}', {scroll}, \" + 'lib =&gt; {{ return {chart_target} }}, {chart_anim_opts});'</code>  <code>class-attribute</code>","text":"<p>Call animate JavaScript method.</p>"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTemplate.FEATURE","title":"<code>FEATURE: str = \"window.ipyvizzu.feature(element, '{chart_id}', '{name}', {enabled});\"</code>  <code>class-attribute</code>","text":"<p>Call feature JavaScript method.</p>"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTemplate.STORE","title":"<code>STORE: str = \"window.ipyvizzu.store(element, '{chart_id}', '{id}');\"</code>  <code>class-attribute</code>","text":"<p>Call store JavaScript method.</p>"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTemplate.SET_EVENT","title":"<code>SET_EVENT: str = 'window.ipyvizzu.setEvent(element, ' + \"'{chart_id}', '{id}', '{event}', event =&gt; {{ {handler} }});\"</code>  <code>class-attribute</code>","text":"<p>Call setEvent JavaScript method.</p>"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTemplate.CLEAR_EVENT","title":"<code>CLEAR_EVENT: str = \"window.ipyvizzu.clearEvent(element, '{chart_id}', '{id}', '{event}');\"</code>  <code>class-attribute</code>","text":"<p>Call clearEvent JavaScript method.</p>"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTemplate.LOG","title":"<code>LOG: str = \"window.ipyvizzu.log(element, '{chart_id}', '{chart_property}');\"</code>  <code>class-attribute</code>","text":"<p>Call log JavaScript method.</p>"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTemplate.CONTROL","title":"<code>CONTROL: str = \"window.ipyvizzu.control(element, '{method}', {params});\"</code>  <code>class-attribute</code>","text":"<p>Call animation control JavaScript methods.</p>"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTemplate.CLEAR_INHIBITSCROLL","title":"<code>CLEAR_INHIBITSCROLL: str = 'if (window.IpyVizzu) { window.IpyVizzu.clearInhibitScroll(element); }'</code>  <code>class-attribute</code>","text":"<p>Call clearInhibitScroll JavaScript method if ipyvizzu JavaScript class exists.</p>"},{"location":"reference/ipyvizzu/animation/","title":"Animation","text":""},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation","title":"<code>ipyvizzu.animation</code>","text":"<p>A module for working with chart animations.</p>"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.AbstractAnimation","title":"<code>ipyvizzu.animation.AbstractAnimation</code>","text":"<p>An abstract class for representing animation objects that have <code>dump</code> and <code>build</code> methods.</p> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>class AbstractAnimation:\n    \"\"\"\n    An abstract class for representing animation objects\n    that have `dump` and `build` methods.\n    \"\"\"\n\n    def dump(self) -&gt; str:\n        \"\"\"\n        A method for converting the built dictionary into string.\n\n        Returns:\n            An str that has been json dumped with\n                [RawJavaScriptEncoder][ipyvizzu.json.RawJavaScriptEncoder] from a dictionary.\n        \"\"\"\n\n        return json.dumps(self.build(), cls=RawJavaScriptEncoder)\n\n    @abc.abstractmethod\n    def build(self) -&gt; dict:\n        \"\"\"\n        An abstract method for returning a dictionary with values\n        that can be converted into json string.\n\n        Returns:\n            A dictionary that stored in the animation object.\n        \"\"\"</code></pre>"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.AbstractAnimation.dump","title":"<code>dump()</code>","text":"<p>A method for converting the built dictionary into string.</p> <p>Returns:</p> Type Description <code>str</code> <p>An str that has been json dumped with RawJavaScriptEncoder from a dictionary.</p> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>def dump(self) -&gt; str:\n    \"\"\"\n    A method for converting the built dictionary into string.\n\n    Returns:\n        An str that has been json dumped with\n            [RawJavaScriptEncoder][ipyvizzu.json.RawJavaScriptEncoder] from a dictionary.\n    \"\"\"\n\n    return json.dumps(self.build(), cls=RawJavaScriptEncoder)</code></pre>"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.AbstractAnimation.build","title":"<code>build()</code>  <code>abstractmethod</code>","text":"<p>An abstract method for returning a dictionary with values that can be converted into json string.</p> <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary that stored in the animation object.</p> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>@abc.abstractmethod\ndef build(self) -&gt; dict:\n    \"\"\"\n    An abstract method for returning a dictionary with values\n    that can be converted into json string.\n\n    Returns:\n        A dictionary that stored in the animation object.\n    \"\"\"</code></pre>"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.PlainAnimation","title":"<code>ipyvizzu.animation.PlainAnimation</code>","text":"<p>         Bases: <code>dict</code>, <code>AbstractAnimation</code></p> <p>A class for representing plain animation. It can build any dictionary.</p> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>class PlainAnimation(dict, AbstractAnimation):\n    \"\"\"\n    A class for representing plain animation.\n    It can build any dictionary.\n    \"\"\"\n\n    def build(self) -&gt; dict:\n        \"\"\"\n        A method for returning the plain animation dictionary.\n\n        Returns:\n            A dictionary that stored in the plain animation object.\n        \"\"\"\n\n        return self</code></pre>"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.PlainAnimation.build","title":"<code>build()</code>","text":"<p>A method for returning the plain animation dictionary.</p> <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary that stored in the plain animation object.</p> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>def build(self) -&gt; dict:\n    \"\"\"\n    A method for returning the plain animation dictionary.\n\n    Returns:\n        A dictionary that stored in the plain animation object.\n    \"\"\"\n\n    return self</code></pre>"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.InferType","title":"<code>ipyvizzu.animation.InferType</code>","text":"<p>         Bases: <code>Enum</code></p> <p>An enum class for storing data infer types.</p> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>class InferType(Enum):\n    \"\"\"An enum class for storing data infer types.\"\"\"\n\n    DIMENSION = \"dimension\"\n    \"\"\"An enum key-value for storing dimension infer type.\"\"\"\n\n    MEASURE = \"measure\"\n    \"\"\"An enum key-value for storing measure infer type.\"\"\"</code></pre>"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.InferType.DIMENSION","title":"<code>DIMENSION = 'dimension'</code>  <code>class-attribute</code>","text":"<p>An enum key-value for storing dimension infer type.</p>"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.InferType.MEASURE","title":"<code>MEASURE = 'measure'</code>  <code>class-attribute</code>","text":"<p>An enum key-value for storing measure infer type.</p>"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Data","title":"<code>ipyvizzu.animation.Data</code>","text":"<p>         Bases: <code>dict</code>, <code>AbstractAnimation</code></p> <p>A class for representing data animation. It can build data option of the chart.</p> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>class Data(dict, AbstractAnimation):\n    \"\"\"\n    A class for representing data animation.\n    It can build data option of the chart.\n    \"\"\"\n\n    @classmethod\n    def filter(cls, filter_expr: Optional[str] = None):  # -&gt; Data:\n        \"\"\"\n        A class method for creating a [Data][ipyvizzu.animation.Data]\n        class instance with a data filter.\n\n        Args:\n            filter_expr: The JavaScript data filter expression.\n\n        Returns:\n            (Data): A data animation instance that contains a data filter.\n\n        Example:\n            Create a [Data][ipyvizzu.animation.Data] class with a data filter:\n\n                filter = Data.filter(\"record['Genres'] == 'Pop'\")\n        \"\"\"\n\n        data = cls()\n        data.set_filter(filter_expr)\n        return data\n\n    def set_filter(self, filter_expr: Optional[str] = None) -&gt; None:\n        \"\"\"\n        A method for adding a filter to an existing\n        [Data][ipyvizzu.animation.Data] class instance.\n\n        Args:\n            filter_expr: The JavaScript data filter expression.\n\n        Example:\n            Add a data filter to a [Data][ipyvizzu.animation.Data] class instance:\n\n                data = Data()\n                data.set_filter(\"record['Genres'] == 'Pop'\")\n        \"\"\"\n\n        filter_expr_raw_js = (\n            RawJavaScript(f\"record =&gt; {{ return ({' '.join(filter_expr.split())}) }}\")\n            if filter_expr is not None\n            else filter_expr\n        )\n        self.update({\"filter\": filter_expr_raw_js})\n\n    @classmethod\n    def from_json(cls, filename: Union[str, bytes, PathLike]):  # -&gt; Data:\n        \"\"\"\n        A method for returning a [Data][ipyvizzu.animation.Data]\n        class instance which has been created from a json file.\n\n        Args:\n            filename: The path of the data source json file.\n\n        Returns:\n            (Data): A data animation instance that has been created from a json file.\n        \"\"\"\n\n        with open(filename, \"r\", encoding=\"utf8\") as file_desc:\n            return cls(json.load(file_desc))\n\n    def add_record(self, record: list) -&gt; None:\n        \"\"\"\n        A method for adding a record to an existing\n        [Data][ipyvizzu.animation.Data] class instance.\n\n        Args:\n            record: A list that contains data values.\n\n        Example:\n            Adding a record to a [Data][ipyvizzu.animation.Data] class instance:\n\n                data = Data()\n                record = [\"Pop\", \"Hard\", 114]\n                data.add_record(record)\n        \"\"\"\n\n        self._add_value(\"records\", record)\n\n    def add_records(self, records: List[list]) -&gt; None:\n        \"\"\"\n        A method for adding records to an existing\n        [Data][ipyvizzu.animation.Data] class instance.\n\n        Args:\n            records: A list that contains data records.\n\n        Example:\n            Adding records to a [Data][ipyvizzu.animation.Data] class instance:\n\n                data = Data()\n                records = [\n                    [\"Pop\", \"Hard\", 114],\n                    [\"Rock\", \"Hard\", 96],\n                    [\"Pop\", \"Experimental\", 127],\n                    [\"Rock\", \"Experimental\", 83],\n                ]\n                data.add_records(records)\n        \"\"\"\n\n        list(map(self.add_record, records))\n\n    def add_series(self, name: str, values: Optional[list] = None, **kwargs) -&gt; None:\n        \"\"\"\n        A method for adding a series to an existing\n        [Data][ipyvizzu.animation.Data] class instance.\n\n        Args:\n            name: The name of the series.\n            values: The data values of the series.\n            **kwargs (Optional):\n                Arbitrary keyword arguments.\n\n                For example infer type can be set with the `type` keywod argument.\n\n        Example:\n            Adding a series without values to a [Data][ipyvizzu.animation.Data] class instance:\n\n                data = Data()\n                data.add_series(\"Genres\")\n\n            Adding a series without values and with infer type to\n            a [Data][ipyvizzu.animation.Data] class instance:\n\n                data = Data()\n                data.add_series(\"Kinds\", type=\"dimension\")\n\n            Adding a series with values to a [Data][ipyvizzu.animation.Data] class instance:\n\n                data = Data()\n                data.add_series(\n                    \"Popularity\", [114, 96, 127, 83]\n                )\n        \"\"\"\n\n        self._add_named_value(\"series\", name, values, **kwargs)\n\n    def add_dimension(self, name: str, values: Optional[list] = None, **kwargs) -&gt; None:\n        \"\"\"\n        A method for adding a dimension to an existing\n        [Data][ipyvizzu.animation.Data] class instance.\n\n        Args:\n            name: The name of the dimension.\n            values: The data values of the dimension.\n            **kwargs (Optional): Arbitrary keyword arguments.\n\n        Example:\n            Adding a dimension with values to a [Data][ipyvizzu.animation.Data] class instance:\n\n                data = Data()\n                data.add_dimension(\"Genres\", [\"Pop\", \"Rock\"])\n        \"\"\"\n\n        self._add_named_value(\"dimensions\", name, values, **kwargs)\n\n    def add_measure(self, name: str, values: Optional[list] = None, **kwargs) -&gt; None:\n        \"\"\"\n        A method for adding a measure to an existing\n        [Data][ipyvizzu.animation.Data] class instance.\n\n        Args:\n            name: The name of the measure.\n            values: The data values of the measure.\n            **kwargs (Optional): Arbitrary keyword arguments.\n\n        Example:\n            Adding a measure with values to a [Data][ipyvizzu.animation.Data] class instance:\n\n                data = Data()\n                data.add_measure(\n                    \"Popularity\",\n                    [\n                        [114, 96],\n                        [127, 83],\n                    ],\n                )\n        \"\"\"\n\n        self._add_named_value(\"measures\", name, values, **kwargs)\n\n    def add_data_frame(\n        self,\n        data_frame: Union[pd.DataFrame, pd.Series],\n        default_measure_value: Optional[Any] = 0,\n        default_dimension_value: Optional[Any] = \"\",\n    ) -&gt; None:\n        \"\"\"\n        A method for adding data frame to an existing\n        [Data][ipyvizzu.animation.Data] class instance.\n\n        Args:\n            data_frame: The pandas data frame object.\n            default_measure_value: The default measure value to fill the empty values.\n            default_dimension_value: The default dimension value to fill the empty values.\n\n        Raises:\n            TypeError: If `data_frame` is not instance of [pd.DataFrame][pandas.DataFrame]\n                or [pd.Series][pandas.Series].\n\n        Example:\n            Adding a data frame to a [Data][ipyvizzu.animation.Data] class instance:\n\n                data_frame = pd.DataFrame(\n                    {\n                        \"Genres\": [\"Pop\", \"Rock\", \"Pop\", \"Rock\"],\n                        \"Kinds\": [\"Hard\", \"Hard\", \"Experimental\", \"Experimental\"],\n                        \"Popularity\": [114, 96, 127, 83],\n                    }\n                )\n                data = Data()\n                data.add_data_frame(data_frame)\n        \"\"\"\n\n        if not isinstance(data_frame, type(None)):\n            if isinstance(data_frame, pd.Series):\n                data_frame = pd.DataFrame(data_frame)\n            if not isinstance(data_frame, pd.DataFrame):\n                raise TypeError(\n                    \"data_frame must be instance of pandas.DataFrame or pandas.Series\"\n                )\n            for name in data_frame.columns:\n                values = []\n                if is_numeric_dtype(data_frame[name].dtype):\n                    infer_type = InferType.MEASURE\n                    values = (\n                        data_frame[name]\n                        .fillna(default_measure_value)\n                        .astype(float)\n                        .values.tolist()\n                    )\n                else:\n                    infer_type = InferType.DIMENSION\n                    values = (\n                        data_frame[name]\n                        .fillna(default_dimension_value)\n                        .astype(str)\n                        .values.tolist()\n                    )\n                self.add_series(\n                    name,\n                    values,\n                    type=infer_type.value,\n                )\n\n    def add_data_frame_index(\n        self,\n        data_frame: Union[pd.DataFrame, pd.Series],\n        name: Optional[str],\n    ) -&gt; None:\n        \"\"\"\n        A method for adding data frame's index to an existing\n        [Data][ipyvizzu.animation.Data] class instance.\n\n        Args:\n            data_frame: The pandas data frame object.\n            name: The name of the index series.\n\n        Raises:\n            TypeError: If `data_frame` is not instance of [pd.DataFrame][pandas.DataFrame]\n                or [pd.Series][pandas.Series].\n\n        Example:\n            Adding a data frame's index to a [Data][ipyvizzu.animation.Data] class instance:\n\n                data_frame = pd.DataFrame(\n                    {\"Popularity\": [114, 96]},\n                    index=[\"x\", \"y\"]\n                )\n                data = Data()\n                data.add_data_frame_index(data_frame, \"DataFrameIndex\")\n                data.add_data_frame(data_frame)\n        \"\"\"\n\n        if data_frame is not None:\n            if isinstance(data_frame, pd.Series):\n                data_frame = pd.DataFrame(data_frame)\n            if not isinstance(data_frame, pd.DataFrame):\n                raise TypeError(\n                    \"data_frame must be instance of pandas.DataFrame or pandas.Series\"\n                )\n            self.add_series(\n                str(name),\n                [str(i) for i in data_frame.index],\n                type=InferType.DIMENSION.value,\n            )\n\n    def _add_named_value(\n        self, dest: str, name: str, values: Optional[list] = None, **kwargs\n    ) -&gt; None:\n        value = {\"name\": name, **kwargs}\n\n        if values is not None:\n            value[\"values\"] = values  # type: ignore\n\n        self._add_value(dest, value)\n\n    def _add_value(self, dest: str, value: Union[dict, list]) -&gt; None:\n        self.setdefault(dest, []).append(value)\n\n    def build(self) -&gt; dict:\n        \"\"\"\n        A method for validating and returning the data animation dictionary.\n\n        Returns:\n            A dictionary that stored in the data animation object.\n                It contains a `data` key whose value is the stored animation.\n        \"\"\"\n\n        jsonschema.validate(self, DATA_SCHEMA)\n        return {\"data\": self}</code></pre>"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Data.filter","title":"<code>filter(filter_expr=None)</code>  <code>classmethod</code>","text":"<p>A class method for creating a Data class instance with a data filter.</p> <p>Parameters:</p> Name Type Description Default <code>filter_expr</code> <code>Optional[str]</code> <p>The JavaScript data filter expression.</p> <code>None</code> <p>Returns:</p> Type Description <code>Data</code> <p>A data animation instance that contains a data filter.</p> Example <p>Create a Data class with a data filter:</p> <pre><code>filter = Data.filter(\"record['Genres'] == 'Pop'\")</code></pre> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>@classmethod\ndef filter(cls, filter_expr: Optional[str] = None):  # -&gt; Data:\n    \"\"\"\n    A class method for creating a [Data][ipyvizzu.animation.Data]\n    class instance with a data filter.\n\n    Args:\n        filter_expr: The JavaScript data filter expression.\n\n    Returns:\n        (Data): A data animation instance that contains a data filter.\n\n    Example:\n        Create a [Data][ipyvizzu.animation.Data] class with a data filter:\n\n            filter = Data.filter(\"record['Genres'] == 'Pop'\")\n    \"\"\"\n\n    data = cls()\n    data.set_filter(filter_expr)\n    return data</code></pre>"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Data.set_filter","title":"<code>set_filter(filter_expr=None)</code>","text":"<p>A method for adding a filter to an existing Data class instance.</p> <p>Parameters:</p> Name Type Description Default <code>filter_expr</code> <code>Optional[str]</code> <p>The JavaScript data filter expression.</p> <code>None</code> Example <p>Add a data filter to a Data class instance:</p> <pre><code>data = Data()\ndata.set_filter(\"record['Genres'] == 'Pop'\")</code></pre> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>def set_filter(self, filter_expr: Optional[str] = None) -&gt; None:\n    \"\"\"\n    A method for adding a filter to an existing\n    [Data][ipyvizzu.animation.Data] class instance.\n\n    Args:\n        filter_expr: The JavaScript data filter expression.\n\n    Example:\n        Add a data filter to a [Data][ipyvizzu.animation.Data] class instance:\n\n            data = Data()\n            data.set_filter(\"record['Genres'] == 'Pop'\")\n    \"\"\"\n\n    filter_expr_raw_js = (\n        RawJavaScript(f\"record =&gt; {{ return ({' '.join(filter_expr.split())}) }}\")\n        if filter_expr is not None\n        else filter_expr\n    )\n    self.update({\"filter\": filter_expr_raw_js})</code></pre>"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Data.from_json","title":"<code>from_json(filename)</code>  <code>classmethod</code>","text":"<p>A method for returning a Data class instance which has been created from a json file.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>Union[str, bytes, PathLike]</code> <p>The path of the data source json file.</p> required <p>Returns:</p> Type Description <code>Data</code> <p>A data animation instance that has been created from a json file.</p> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>@classmethod\ndef from_json(cls, filename: Union[str, bytes, PathLike]):  # -&gt; Data:\n    \"\"\"\n    A method for returning a [Data][ipyvizzu.animation.Data]\n    class instance which has been created from a json file.\n\n    Args:\n        filename: The path of the data source json file.\n\n    Returns:\n        (Data): A data animation instance that has been created from a json file.\n    \"\"\"\n\n    with open(filename, \"r\", encoding=\"utf8\") as file_desc:\n        return cls(json.load(file_desc))</code></pre>"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Data.add_record","title":"<code>add_record(record)</code>","text":"<p>A method for adding a record to an existing Data class instance.</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>list</code> <p>A list that contains data values.</p> required Example <p>Adding a record to a Data class instance:</p> <pre><code>data = Data()\nrecord = [\"Pop\", \"Hard\", 114]\ndata.add_record(record)</code></pre> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>def add_record(self, record: list) -&gt; None:\n    \"\"\"\n    A method for adding a record to an existing\n    [Data][ipyvizzu.animation.Data] class instance.\n\n    Args:\n        record: A list that contains data values.\n\n    Example:\n        Adding a record to a [Data][ipyvizzu.animation.Data] class instance:\n\n            data = Data()\n            record = [\"Pop\", \"Hard\", 114]\n            data.add_record(record)\n    \"\"\"\n\n    self._add_value(\"records\", record)</code></pre>"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Data.add_records","title":"<code>add_records(records)</code>","text":"<p>A method for adding records to an existing Data class instance.</p> <p>Parameters:</p> Name Type Description Default <code>records</code> <code>List[list]</code> <p>A list that contains data records.</p> required Example <p>Adding records to a Data class instance:</p> <pre><code>data = Data()\nrecords = [\n    [\"Pop\", \"Hard\", 114],\n    [\"Rock\", \"Hard\", 96],\n    [\"Pop\", \"Experimental\", 127],\n    [\"Rock\", \"Experimental\", 83],\n]\ndata.add_records(records)</code></pre> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>def add_records(self, records: List[list]) -&gt; None:\n    \"\"\"\n    A method for adding records to an existing\n    [Data][ipyvizzu.animation.Data] class instance.\n\n    Args:\n        records: A list that contains data records.\n\n    Example:\n        Adding records to a [Data][ipyvizzu.animation.Data] class instance:\n\n            data = Data()\n            records = [\n                [\"Pop\", \"Hard\", 114],\n                [\"Rock\", \"Hard\", 96],\n                [\"Pop\", \"Experimental\", 127],\n                [\"Rock\", \"Experimental\", 83],\n            ]\n            data.add_records(records)\n    \"\"\"\n\n    list(map(self.add_record, records))</code></pre>"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Data.add_series","title":"<code>add_series(name, values=None, **kwargs)</code>","text":"<p>A method for adding a series to an existing Data class instance.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the series.</p> required <code>values</code> <code>Optional[list]</code> <p>The data values of the series.</p> <code>None</code> <code>**kwargs</code> <code>Optional</code> <p>Arbitrary keyword arguments.</p> <p>For example infer type can be set with the <code>type</code> keywod argument.</p> <code>{}</code> Example <p>Adding a series without values to a Data class instance:</p> <pre><code>data = Data()\ndata.add_series(\"Genres\")</code></pre> <p>Adding a series without values and with infer type to a Data class instance:</p> <pre><code>data = Data()\ndata.add_series(\"Kinds\", type=\"dimension\")</code></pre> <p>Adding a series with values to a Data class instance:</p> <pre><code>data = Data()\ndata.add_series(\n    \"Popularity\", [114, 96, 127, 83]\n)</code></pre> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>def add_series(self, name: str, values: Optional[list] = None, **kwargs) -&gt; None:\n    \"\"\"\n    A method for adding a series to an existing\n    [Data][ipyvizzu.animation.Data] class instance.\n\n    Args:\n        name: The name of the series.\n        values: The data values of the series.\n        **kwargs (Optional):\n            Arbitrary keyword arguments.\n\n            For example infer type can be set with the `type` keywod argument.\n\n    Example:\n        Adding a series without values to a [Data][ipyvizzu.animation.Data] class instance:\n\n            data = Data()\n            data.add_series(\"Genres\")\n\n        Adding a series without values and with infer type to\n        a [Data][ipyvizzu.animation.Data] class instance:\n\n            data = Data()\n            data.add_series(\"Kinds\", type=\"dimension\")\n\n        Adding a series with values to a [Data][ipyvizzu.animation.Data] class instance:\n\n            data = Data()\n            data.add_series(\n                \"Popularity\", [114, 96, 127, 83]\n            )\n    \"\"\"\n\n    self._add_named_value(\"series\", name, values, **kwargs)</code></pre>"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Data.add_dimension","title":"<code>add_dimension(name, values=None, **kwargs)</code>","text":"<p>A method for adding a dimension to an existing Data class instance.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the dimension.</p> required <code>values</code> <code>Optional[list]</code> <p>The data values of the dimension.</p> <code>None</code> <code>**kwargs</code> <code>Optional</code> <p>Arbitrary keyword arguments.</p> <code>{}</code> Example <p>Adding a dimension with values to a Data class instance:</p> <pre><code>data = Data()\ndata.add_dimension(\"Genres\", [\"Pop\", \"Rock\"])</code></pre> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>def add_dimension(self, name: str, values: Optional[list] = None, **kwargs) -&gt; None:\n    \"\"\"\n    A method for adding a dimension to an existing\n    [Data][ipyvizzu.animation.Data] class instance.\n\n    Args:\n        name: The name of the dimension.\n        values: The data values of the dimension.\n        **kwargs (Optional): Arbitrary keyword arguments.\n\n    Example:\n        Adding a dimension with values to a [Data][ipyvizzu.animation.Data] class instance:\n\n            data = Data()\n            data.add_dimension(\"Genres\", [\"Pop\", \"Rock\"])\n    \"\"\"\n\n    self._add_named_value(\"dimensions\", name, values, **kwargs)</code></pre>"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Data.add_measure","title":"<code>add_measure(name, values=None, **kwargs)</code>","text":"<p>A method for adding a measure to an existing Data class instance.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the measure.</p> required <code>values</code> <code>Optional[list]</code> <p>The data values of the measure.</p> <code>None</code> <code>**kwargs</code> <code>Optional</code> <p>Arbitrary keyword arguments.</p> <code>{}</code> Example <p>Adding a measure with values to a Data class instance:</p> <pre><code>data = Data()\ndata.add_measure(\n    \"Popularity\",\n    [\n        [114, 96],\n        [127, 83],\n    ],\n)</code></pre> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>def add_measure(self, name: str, values: Optional[list] = None, **kwargs) -&gt; None:\n    \"\"\"\n    A method for adding a measure to an existing\n    [Data][ipyvizzu.animation.Data] class instance.\n\n    Args:\n        name: The name of the measure.\n        values: The data values of the measure.\n        **kwargs (Optional): Arbitrary keyword arguments.\n\n    Example:\n        Adding a measure with values to a [Data][ipyvizzu.animation.Data] class instance:\n\n            data = Data()\n            data.add_measure(\n                \"Popularity\",\n                [\n                    [114, 96],\n                    [127, 83],\n                ],\n            )\n    \"\"\"\n\n    self._add_named_value(\"measures\", name, values, **kwargs)</code></pre>"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Data.add_data_frame","title":"<code>add_data_frame(data_frame, default_measure_value=0, default_dimension_value='')</code>","text":"<p>A method for adding data frame to an existing Data class instance.</p> <p>Parameters:</p> Name Type Description Default <code>data_frame</code> <code>Union[pd.DataFrame, pd.Series]</code> <p>The pandas data frame object.</p> required <code>default_measure_value</code> <code>Optional[Any]</code> <p>The default measure value to fill the empty values.</p> <code>0</code> <code>default_dimension_value</code> <code>Optional[Any]</code> <p>The default dimension value to fill the empty values.</p> <code>''</code> <p>Raises:</p> Type Description <code>TypeError</code> <p>If <code>data_frame</code> is not instance of pd.DataFrame or pd.Series.</p> Example <p>Adding a data frame to a Data class instance:</p> <pre><code>data_frame = pd.DataFrame(\n    {\n        \"Genres\": [\"Pop\", \"Rock\", \"Pop\", \"Rock\"],\n        \"Kinds\": [\"Hard\", \"Hard\", \"Experimental\", \"Experimental\"],\n        \"Popularity\": [114, 96, 127, 83],\n    }\n)\ndata = Data()\ndata.add_data_frame(data_frame)</code></pre> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>def add_data_frame(\n    self,\n    data_frame: Union[pd.DataFrame, pd.Series],\n    default_measure_value: Optional[Any] = 0,\n    default_dimension_value: Optional[Any] = \"\",\n) -&gt; None:\n    \"\"\"\n    A method for adding data frame to an existing\n    [Data][ipyvizzu.animation.Data] class instance.\n\n    Args:\n        data_frame: The pandas data frame object.\n        default_measure_value: The default measure value to fill the empty values.\n        default_dimension_value: The default dimension value to fill the empty values.\n\n    Raises:\n        TypeError: If `data_frame` is not instance of [pd.DataFrame][pandas.DataFrame]\n            or [pd.Series][pandas.Series].\n\n    Example:\n        Adding a data frame to a [Data][ipyvizzu.animation.Data] class instance:\n\n            data_frame = pd.DataFrame(\n                {\n                    \"Genres\": [\"Pop\", \"Rock\", \"Pop\", \"Rock\"],\n                    \"Kinds\": [\"Hard\", \"Hard\", \"Experimental\", \"Experimental\"],\n                    \"Popularity\": [114, 96, 127, 83],\n                }\n            )\n            data = Data()\n            data.add_data_frame(data_frame)\n    \"\"\"\n\n    if not isinstance(data_frame, type(None)):\n        if isinstance(data_frame, pd.Series):\n            data_frame = pd.DataFrame(data_frame)\n        if not isinstance(data_frame, pd.DataFrame):\n            raise TypeError(\n                \"data_frame must be instance of pandas.DataFrame or pandas.Series\"\n            )\n        for name in data_frame.columns:\n            values = []\n            if is_numeric_dtype(data_frame[name].dtype):\n                infer_type = InferType.MEASURE\n                values = (\n                    data_frame[name]\n                    .fillna(default_measure_value)\n                    .astype(float)\n                    .values.tolist()\n                )\n            else:\n                infer_type = InferType.DIMENSION\n                values = (\n                    data_frame[name]\n                    .fillna(default_dimension_value)\n                    .astype(str)\n                    .values.tolist()\n                )\n            self.add_series(\n                name,\n                values,\n                type=infer_type.value,\n            )</code></pre>"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Data.add_data_frame_index","title":"<code>add_data_frame_index(data_frame, name)</code>","text":"<p>A method for adding data frame's index to an existing Data class instance.</p> <p>Parameters:</p> Name Type Description Default <code>data_frame</code> <code>Union[pd.DataFrame, pd.Series]</code> <p>The pandas data frame object.</p> required <code>name</code> <code>Optional[str]</code> <p>The name of the index series.</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>If <code>data_frame</code> is not instance of pd.DataFrame or pd.Series.</p> Example <p>Adding a data frame's index to a Data class instance:</p> <pre><code>data_frame = pd.DataFrame(\n    {\"Popularity\": [114, 96]},\n    index=[\"x\", \"y\"]\n)\ndata = Data()\ndata.add_data_frame_index(data_frame, \"DataFrameIndex\")\ndata.add_data_frame(data_frame)</code></pre> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>def add_data_frame_index(\n    self,\n    data_frame: Union[pd.DataFrame, pd.Series],\n    name: Optional[str],\n) -&gt; None:\n    \"\"\"\n    A method for adding data frame's index to an existing\n    [Data][ipyvizzu.animation.Data] class instance.\n\n    Args:\n        data_frame: The pandas data frame object.\n        name: The name of the index series.\n\n    Raises:\n        TypeError: If `data_frame` is not instance of [pd.DataFrame][pandas.DataFrame]\n            or [pd.Series][pandas.Series].\n\n    Example:\n        Adding a data frame's index to a [Data][ipyvizzu.animation.Data] class instance:\n\n            data_frame = pd.DataFrame(\n                {\"Popularity\": [114, 96]},\n                index=[\"x\", \"y\"]\n            )\n            data = Data()\n            data.add_data_frame_index(data_frame, \"DataFrameIndex\")\n            data.add_data_frame(data_frame)\n    \"\"\"\n\n    if data_frame is not None:\n        if isinstance(data_frame, pd.Series):\n            data_frame = pd.DataFrame(data_frame)\n        if not isinstance(data_frame, pd.DataFrame):\n            raise TypeError(\n                \"data_frame must be instance of pandas.DataFrame or pandas.Series\"\n            )\n        self.add_series(\n            str(name),\n            [str(i) for i in data_frame.index],\n            type=InferType.DIMENSION.value,\n        )</code></pre>"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Data.build","title":"<code>build()</code>","text":"<p>A method for validating and returning the data animation dictionary.</p> <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary that stored in the data animation object. It contains a <code>data</code> key whose value is the stored animation.</p> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>def build(self) -&gt; dict:\n    \"\"\"\n    A method for validating and returning the data animation dictionary.\n\n    Returns:\n        A dictionary that stored in the data animation object.\n            It contains a `data` key whose value is the stored animation.\n    \"\"\"\n\n    jsonschema.validate(self, DATA_SCHEMA)\n    return {\"data\": self}</code></pre>"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.ConfigAttr","title":"<code>ipyvizzu.animation.ConfigAttr</code>","text":"<p>         Bases: <code>type</code></p> <p>A metaclass class for the Config class. Returns a Config class with a chart preset if the <code>__getattr__</code> method called.</p> <p>For information on all available chart presets see the Vizzu Code reference.</p> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>class ConfigAttr(type):\n    \"\"\"\n    A metaclass class for the [Config][ipyvizzu.animation.Config] class.\n    Returns a [Config][ipyvizzu.animation.Config] class with a chart preset\n    if the `__getattr__` method called.\n\n    For information on all available chart presets see the\n    [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/modules/presets/#interfaces).\n    \"\"\"\n\n    @classmethod\n    def __getattr__(mcs, name):\n        config_attr = mcs(\"ConfigAttr\", (object,), {\"name\": name})\n        return config_attr._get_preset  # pylint: disable=no-member\n\n    def _get_preset(cls, preset):\n        config = Config(RawJavaScript(f\"lib.presets.{cls.name}({preset})\"))\n        return config</code></pre>"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Config","title":"<code>ipyvizzu.animation.Config</code>","text":"<p>         Bases: <code>AbstractAnimation</code></p> <p>A class for representing config animation. It can build config option of the chart.</p> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>class Config(AbstractAnimation, metaclass=ConfigAttr):\n    \"\"\"\n    A class for representing config animation.\n    It can build config option of the chart.\n    \"\"\"\n\n    def __init__(self, data: Optional[dict]):\n        \"\"\"\n        Config constructor.\n\n        Args:\n            data:\n                A config animation dictionary.\n                For information on all available config parameters see the\n                [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/interfaces/vizzu.Config.Chart/#properties).\n        \"\"\"  # pylint: disable=line-too-long\n\n        self._data = data\n\n    def build(self) -&gt; dict:\n        \"\"\"\n        A method for returning the config animation dictionary.\n\n        Returns:\n            A dictionary that stored in the config animation object.\n                It contains a `config` key whose value is the stored animation.\n        \"\"\"\n\n        return {\"config\": self._data}</code></pre>"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Config.__init__","title":"<code>__init__(data)</code>","text":"<p>Config constructor.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Optional[dict]</code> <p>A config animation dictionary. For information on all available config parameters see the Vizzu Code reference.</p> required Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>def __init__(self, data: Optional[dict]):\n    \"\"\"\n    Config constructor.\n\n    Args:\n        data:\n            A config animation dictionary.\n            For information on all available config parameters see the\n            [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/interfaces/vizzu.Config.Chart/#properties).\n    \"\"\"  # pylint: disable=line-too-long\n\n    self._data = data</code></pre>"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Config.build","title":"<code>build()</code>","text":"<p>A method for returning the config animation dictionary.</p> <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary that stored in the config animation object. It contains a <code>config</code> key whose value is the stored animation.</p> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>def build(self) -&gt; dict:\n    \"\"\"\n    A method for returning the config animation dictionary.\n\n    Returns:\n        A dictionary that stored in the config animation object.\n            It contains a `config` key whose value is the stored animation.\n    \"\"\"\n\n    return {\"config\": self._data}</code></pre>"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Style","title":"<code>ipyvizzu.animation.Style</code>","text":"<p>         Bases: <code>AbstractAnimation</code></p> <p>A class for representing style animation. It can build style option of the chart.</p> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>class Style(AbstractAnimation):\n    \"\"\"\n    A class for representing style animation.\n    It can build style option of the chart.\n    \"\"\"\n\n    def __init__(self, data: Optional[dict]):\n        \"\"\"\n        Style constructor.\n\n        Args:\n            data:\n                A style animation dictionary.\n                For information on all available style parameters see the [Style][styling-properties]\n                chapter or the\n                [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/interfaces/vizzu.Styles.Chart/#properties).\n        \"\"\"  # pylint: disable=line-too-long\n\n        self._data = data\n\n    def build(self) -&gt; dict:\n        \"\"\"\n        A method for returning the style animation dictionary.\n\n        Returns:\n            A dictionary that stored in the style animation object.\n                It contains a `style` key whose value is the stored animation.\n        \"\"\"\n\n        return {\"style\": self._data}</code></pre>"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Style.__init__","title":"<code>__init__(data)</code>","text":"<p>Style constructor.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Optional[dict]</code> <p>A style animation dictionary. For information on all available style parameters see the Style chapter or the Vizzu Code reference.</p> required Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>def __init__(self, data: Optional[dict]):\n    \"\"\"\n    Style constructor.\n\n    Args:\n        data:\n            A style animation dictionary.\n            For information on all available style parameters see the [Style][styling-properties]\n            chapter or the\n            [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/interfaces/vizzu.Styles.Chart/#properties).\n    \"\"\"  # pylint: disable=line-too-long\n\n    self._data = data</code></pre>"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Style.build","title":"<code>build()</code>","text":"<p>A method for returning the style animation dictionary.</p> <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary that stored in the style animation object. It contains a <code>style</code> key whose value is the stored animation.</p> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>def build(self) -&gt; dict:\n    \"\"\"\n    A method for returning the style animation dictionary.\n\n    Returns:\n        A dictionary that stored in the style animation object.\n            It contains a `style` key whose value is the stored animation.\n    \"\"\"\n\n    return {\"style\": self._data}</code></pre>"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Keyframe","title":"<code>ipyvizzu.animation.Keyframe</code>","text":"<p>         Bases: <code>AbstractAnimation</code></p> <p>A class for representing keyframe animation. It can build keyframe of the chart.</p> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>class Keyframe(AbstractAnimation):\n    \"\"\"\n    A class for representing keyframe animation.\n    It can build keyframe of the chart.\n    \"\"\"\n\n    def __init__(\n        self,\n        *animations: AbstractAnimation,\n        **options: Optional[Union[str, int, float, dict]],\n    ):\n        \"\"\"\n        Keyframe constructor.\n\n        Args:\n            *animations:\n                List of AbstractAnimation inherited objects such as [Data][ipyvizzu.animation.Data],\n                [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style].\n            **options: Dictionary of animation options for example `duration=1`.\n                For information on all available animation options see the\n                [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/interfaces/vizzu.Anim.Options/#properties).\n\n        Raises:\n            ValueError: If `animations` is not set.\n            ValueError: If initialized with a `Keyframe`.\n        \"\"\"  # pylint: disable=line-too-long\n\n        if not animations:\n            raise ValueError(\"No animation was set.\")\n        if [animation for animation in animations if isinstance(animation, Keyframe)]:\n            raise ValueError(\"A Keyframe cannot contain a Keyframe.\")\n\n        self._keyframe = {}\n        self._keyframe[\"target\"] = AnimationMerger.merge_animations(animations).build()\n        if options:\n            self._keyframe[\"options\"] = options\n\n    def build(self) -&gt; dict:\n        \"\"\"\n        A method for returning the keyframe animation dictionary.\n\n        Returns:\n            A dictionary that stored in the keyframe animation object.\n                It contains a `target` key whose value is the stored animation\n                and an optional `options` key whose value is the stored animation options.\n        \"\"\"\n\n        return self._keyframe</code></pre>"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Keyframe.__init__","title":"<code>__init__(*animations, **options)</code>","text":"<p>Keyframe constructor.</p> <p>Parameters:</p> Name Type Description Default <code>*animations</code> <code>AbstractAnimation</code> <p>List of AbstractAnimation inherited objects such as Data, Config and Style.</p> <code>()</code> <code>**options</code> <code>Optional[Union[str, int, float, dict]]</code> <p>Dictionary of animation options for example <code>duration=1</code>. For information on all available animation options see the Vizzu Code reference.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If <code>animations</code> is not set.</p> <code>ValueError</code> <p>If initialized with a <code>Keyframe</code>.</p> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>def __init__(\n    self,\n    *animations: AbstractAnimation,\n    **options: Optional[Union[str, int, float, dict]],\n):\n    \"\"\"\n    Keyframe constructor.\n\n    Args:\n        *animations:\n            List of AbstractAnimation inherited objects such as [Data][ipyvizzu.animation.Data],\n            [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style].\n        **options: Dictionary of animation options for example `duration=1`.\n            For information on all available animation options see the\n            [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/interfaces/vizzu.Anim.Options/#properties).\n\n    Raises:\n        ValueError: If `animations` is not set.\n        ValueError: If initialized with a `Keyframe`.\n    \"\"\"  # pylint: disable=line-too-long\n\n    if not animations:\n        raise ValueError(\"No animation was set.\")\n    if [animation for animation in animations if isinstance(animation, Keyframe)]:\n        raise ValueError(\"A Keyframe cannot contain a Keyframe.\")\n\n    self._keyframe = {}\n    self._keyframe[\"target\"] = AnimationMerger.merge_animations(animations).build()\n    if options:\n        self._keyframe[\"options\"] = options</code></pre>"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Keyframe.build","title":"<code>build()</code>","text":"<p>A method for returning the keyframe animation dictionary.</p> <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary that stored in the keyframe animation object. It contains a <code>target</code> key whose value is the stored animation and an optional <code>options</code> key whose value is the stored animation options.</p> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>def build(self) -&gt; dict:\n    \"\"\"\n    A method for returning the keyframe animation dictionary.\n\n    Returns:\n        A dictionary that stored in the keyframe animation object.\n            It contains a `target` key whose value is the stored animation\n            and an optional `options` key whose value is the stored animation options.\n    \"\"\"\n\n    return self._keyframe</code></pre>"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Snapshot","title":"<code>ipyvizzu.animation.Snapshot</code>","text":"<p>         Bases: <code>AbstractAnimation</code></p> <p>A class for representing a stored chart state. It can build the snapshot id of the chart.</p> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>class Snapshot(AbstractAnimation):\n    \"\"\"\n    A class for representing a stored chart state.\n    It can build the snapshot id of the chart.\n    \"\"\"\n\n    def __init__(self, snapshot_id: str):\n        \"\"\"\n        Snapshot constructor.\n\n        Args:\n            snapshot_id: A snapshot id.\n        \"\"\"\n\n        self._snapshot_id = snapshot_id\n\n    def build(self) -&gt; str:  # type: ignore\n        \"\"\"\n        A method for returning the snapshot id str.\n\n        Returns:\n            An str snapshot id that stored in the snapshot animation object.\n        \"\"\"\n\n        return self._snapshot_id</code></pre>"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Snapshot.__init__","title":"<code>__init__(snapshot_id)</code>","text":"<p>Snapshot constructor.</p> <p>Parameters:</p> Name Type Description Default <code>snapshot_id</code> <code>str</code> <p>A snapshot id.</p> required Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>def __init__(self, snapshot_id: str):\n    \"\"\"\n    Snapshot constructor.\n\n    Args:\n        snapshot_id: A snapshot id.\n    \"\"\"\n\n    self._snapshot_id = snapshot_id</code></pre>"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Snapshot.build","title":"<code>build()</code>","text":"<p>A method for returning the snapshot id str.</p> <p>Returns:</p> Type Description <code>str</code> <p>An str snapshot id that stored in the snapshot animation object.</p> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>def build(self) -&gt; str:  # type: ignore\n    \"\"\"\n    A method for returning the snapshot id str.\n\n    Returns:\n        An str snapshot id that stored in the snapshot animation object.\n    \"\"\"\n\n    return self._snapshot_id</code></pre>"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Animation","title":"<code>ipyvizzu.animation.Animation</code>","text":"<p>         Bases: <code>Snapshot</code></p> <p>A class for representing a stored animation. It can build the snapshot id of the animation.</p> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>class Animation(Snapshot):\n    \"\"\"\n    A class for representing a stored animation.\n    It can build the snapshot id of the animation.\n    \"\"\"</code></pre>"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.AnimationMerger","title":"<code>ipyvizzu.animation.AnimationMerger</code>","text":"<p>         Bases: <code>AbstractAnimation</code></p> <p>A class for merging different types of animations.</p> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>class AnimationMerger(AbstractAnimation):\n    \"\"\"A class for merging different types of animations.\"\"\"\n\n    def __init__(self):\n        \"\"\"AnimationMerger constructor.\"\"\"\n\n        self._dict = {}\n        self._list = []\n\n    @classmethod\n    def merge_animations(\n        cls, animations: Tuple[AbstractAnimation, ...]\n    ) -&gt; AbstractAnimation:\n        \"\"\"\n        A class method for merging animations.\n\n        Args:\n            animations: List of `AbstractAnimation` inherited objects.\n\n        Returns:\n            An `AnimationMerger` class with the merged animations.\n        \"\"\"\n\n        if len(animations) == 1 and not isinstance(animations[0], Keyframe):\n            return animations[0]\n\n        merger = cls()\n        for animation in animations:\n            merger.merge(animation)\n\n        return merger\n\n    def merge(self, animation: AbstractAnimation) -&gt; None:\n        \"\"\"\n        A method for merging an animation with the previously merged animations.\n\n        Args:\n            animation: An animation to be merged with with previously merged animations.\n\n        Raises:\n            ValueError: If the type of an animation is already merged.\n            ValueError: If `Keyframe` is merged with different type of animation.\n        \"\"\"\n\n        if isinstance(animation, Keyframe):\n            if self._dict:\n                raise ValueError(\"Keyframe cannot be merged with other animations.\")\n            data = animation.build()\n            self._list.append(data)\n        else:\n            if self._list:\n                raise ValueError(\"Keyframe cannot be merged with other animations.\")\n            data = self._validate(animation)\n            self._dict.update(data)\n\n    def _validate(self, animation: AbstractAnimation) -&gt; dict:\n        if isinstance(animation, Snapshot):\n            raise ValueError(\"Snapshot cannot be merged with other animations.\")\n        data = animation.build()\n        common_keys = set(data).intersection(self._dict)\n\n        if common_keys:\n            raise ValueError(f\"{common_keys} is already merged.\")\n\n        return data\n\n    def build(self) -&gt; Union[dict, list]:  # type: ignore\n        \"\"\"\n        A method for returning a merged list of `Keyframes`\n        or a merged dictionary from different types of animations.\n\n        Returns:\n            A merged list of [Keyframes][ipyvizzu.animation.Keyframe] or\n                a merged dictionary from\n                [Data][ipyvizzu.animation.Data],\n                [Config][ipyvizzu.animation.Config] and\n                [Style][ipyvizzu.animation.Style] animations.\n        \"\"\"\n\n        if self._dict:\n            return self._dict\n        return self._list</code></pre>"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.AnimationMerger.__init__","title":"<code>__init__()</code>","text":"<p>AnimationMerger constructor.</p> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>def __init__(self):\n    \"\"\"AnimationMerger constructor.\"\"\"\n\n    self._dict = {}\n    self._list = []</code></pre>"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.AnimationMerger.merge_animations","title":"<code>merge_animations(animations)</code>  <code>classmethod</code>","text":"<p>A class method for merging animations.</p> <p>Parameters:</p> Name Type Description Default <code>animations</code> <code>Tuple[AbstractAnimation, ...]</code> <p>List of <code>AbstractAnimation</code> inherited objects.</p> required <p>Returns:</p> Type Description <code>AbstractAnimation</code> <p>An <code>AnimationMerger</code> class with the merged animations.</p> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>@classmethod\ndef merge_animations(\n    cls, animations: Tuple[AbstractAnimation, ...]\n) -&gt; AbstractAnimation:\n    \"\"\"\n    A class method for merging animations.\n\n    Args:\n        animations: List of `AbstractAnimation` inherited objects.\n\n    Returns:\n        An `AnimationMerger` class with the merged animations.\n    \"\"\"\n\n    if len(animations) == 1 and not isinstance(animations[0], Keyframe):\n        return animations[0]\n\n    merger = cls()\n    for animation in animations:\n        merger.merge(animation)\n\n    return merger</code></pre>"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.AnimationMerger.merge","title":"<code>merge(animation)</code>","text":"<p>A method for merging an animation with the previously merged animations.</p> <p>Parameters:</p> Name Type Description Default <code>animation</code> <code>AbstractAnimation</code> <p>An animation to be merged with with previously merged animations.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the type of an animation is already merged.</p> <code>ValueError</code> <p>If <code>Keyframe</code> is merged with different type of animation.</p> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>def merge(self, animation: AbstractAnimation) -&gt; None:\n    \"\"\"\n    A method for merging an animation with the previously merged animations.\n\n    Args:\n        animation: An animation to be merged with with previously merged animations.\n\n    Raises:\n        ValueError: If the type of an animation is already merged.\n        ValueError: If `Keyframe` is merged with different type of animation.\n    \"\"\"\n\n    if isinstance(animation, Keyframe):\n        if self._dict:\n            raise ValueError(\"Keyframe cannot be merged with other animations.\")\n        data = animation.build()\n        self._list.append(data)\n    else:\n        if self._list:\n            raise ValueError(\"Keyframe cannot be merged with other animations.\")\n        data = self._validate(animation)\n        self._dict.update(data)</code></pre>"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.AnimationMerger.build","title":"<code>build()</code>","text":"<p>A method for returning a merged list of <code>Keyframes</code> or a merged dictionary from different types of animations.</p> <p>Returns:</p> Type Description <code>Union[dict, list]</code> <p>A merged list of Keyframes or a merged dictionary from Data, Config and Style animations.</p> Source code in <code>src/ipyvizzu/animation.py</code> <pre><code>def build(self) -&gt; Union[dict, list]:  # type: ignore\n    \"\"\"\n    A method for returning a merged list of `Keyframes`\n    or a merged dictionary from different types of animations.\n\n    Returns:\n        A merged list of [Keyframes][ipyvizzu.animation.Keyframe] or\n            a merged dictionary from\n            [Data][ipyvizzu.animation.Data],\n            [Config][ipyvizzu.animation.Config] and\n            [Style][ipyvizzu.animation.Style] animations.\n    \"\"\"\n\n    if self._dict:\n        return self._dict\n    return self._list</code></pre>"},{"location":"reference/ipyvizzu/animationcontrol/","title":"Animationcontrol","text":""},{"location":"reference/ipyvizzu/animationcontrol/#ipyvizzu.animationcontrol","title":"<code>ipyvizzu.animationcontrol</code>","text":"<p>A module for working with animation control.</p>"},{"location":"reference/ipyvizzu/animationcontrol/#ipyvizzu.animationcontrol.AnimationControl","title":"<code>ipyvizzu.animationcontrol.AnimationControl</code>","text":"<p>A class for controlling animations.</p> Source code in <code>src/ipyvizzu/animationcontrol.py</code> <pre><code>class AnimationControl:\n    \"\"\"\n    A class for controlling animations.\n    \"\"\"\n\n    def __init__(self, prev_id: str, last_id: str, display_method: Callable):\n        \"\"\"\n        AnimationControl constructor.\n\n        Args:\n            prev_id: Id of the previous animation promise.\n            last_id: Id of the animation to be controlled.\n            display_method: Displaying function.\n        \"\"\"\n\n        self._ids = \", \".join([f\"'{prev_id}'\", f\"'{last_id}'\"])\n        self._display = display_method\n\n    def cancel(self) -&gt; None:\n        \"\"\"Cancels the animation, will reject the animation promise.\"\"\"\n\n        self._display(\n            DisplayTemplate.CONTROL.format(\n                method=\"cancel\",\n                params=self._ids,\n            )\n        )\n\n    def pause(self) -&gt; None:\n        \"\"\"Pauses the controlled animation.\"\"\"\n\n        self._display(\n            DisplayTemplate.CONTROL.format(\n                method=\"pause\",\n                params=self._ids,\n            )\n        )\n\n    def play(self) -&gt; None:\n        \"\"\"Plays/resumes playing of the controlled animation.\"\"\"\n\n        self._display(\n            DisplayTemplate.CONTROL.format(\n                method=\"play\",\n                params=self._ids,\n            )\n        )\n\n    def reverse(self) -&gt; None:\n        \"\"\"Changes the direction of the controlled animation.\"\"\"\n\n        self._display(\n            DisplayTemplate.CONTROL.format(\n                method=\"reverse\",\n                params=self._ids,\n            )\n        )\n\n    def seek(self, value: Union[int, str]) -&gt; None:\n        \"\"\"\n        Seeks the animation to the position specified by time or progress percentage.\n\n        Args:\n            value: The position specified by time or progress percentage.\n        \"\"\"\n\n        params = \", \".join([self._ids, f\"'{value}'\"])\n        self._display(\n            DisplayTemplate.CONTROL.format(\n                method=\"seek\",\n                params=params,\n            )\n        )\n\n    def stop(self) -&gt; None:\n        \"\"\"Stops the current animation seeking it back to its start position.\"\"\"\n\n        self._display(\n            DisplayTemplate.CONTROL.format(\n                method=\"stop\",\n                params=self._ids,\n            )\n        )\n\n    def store(self) -&gt; Animation:\n        \"\"\"\n        A method for saving and storing the actual state of the animation.\n\n        Returns:\n            An `Animation` object wich stores the actual state of the animation.\n        \"\"\"\n\n        animation_id = uuid.uuid4().hex[:7]\n        params = \", \".join([self._ids, f\"'{animation_id}'\"])\n        self._display(\n            DisplayTemplate.CONTROL.format(\n                method=\"store\",\n                params=params,\n            )\n        )\n        return Animation(animation_id)</code></pre>"},{"location":"reference/ipyvizzu/animationcontrol/#ipyvizzu.animationcontrol.AnimationControl.__init__","title":"<code>__init__(prev_id, last_id, display_method)</code>","text":"<p>AnimationControl constructor.</p> <p>Parameters:</p> Name Type Description Default <code>prev_id</code> <code>str</code> <p>Id of the previous animation promise.</p> required <code>last_id</code> <code>str</code> <p>Id of the animation to be controlled.</p> required <code>display_method</code> <code>Callable</code> <p>Displaying function.</p> required Source code in <code>src/ipyvizzu/animationcontrol.py</code> <pre><code>def __init__(self, prev_id: str, last_id: str, display_method: Callable):\n    \"\"\"\n    AnimationControl constructor.\n\n    Args:\n        prev_id: Id of the previous animation promise.\n        last_id: Id of the animation to be controlled.\n        display_method: Displaying function.\n    \"\"\"\n\n    self._ids = \", \".join([f\"'{prev_id}'\", f\"'{last_id}'\"])\n    self._display = display_method</code></pre>"},{"location":"reference/ipyvizzu/animationcontrol/#ipyvizzu.animationcontrol.AnimationControl.cancel","title":"<code>cancel()</code>","text":"<p>Cancels the animation, will reject the animation promise.</p> Source code in <code>src/ipyvizzu/animationcontrol.py</code> <pre><code>def cancel(self) -&gt; None:\n    \"\"\"Cancels the animation, will reject the animation promise.\"\"\"\n\n    self._display(\n        DisplayTemplate.CONTROL.format(\n            method=\"cancel\",\n            params=self._ids,\n        )\n    )</code></pre>"},{"location":"reference/ipyvizzu/animationcontrol/#ipyvizzu.animationcontrol.AnimationControl.pause","title":"<code>pause()</code>","text":"<p>Pauses the controlled animation.</p> Source code in <code>src/ipyvizzu/animationcontrol.py</code> <pre><code>def pause(self) -&gt; None:\n    \"\"\"Pauses the controlled animation.\"\"\"\n\n    self._display(\n        DisplayTemplate.CONTROL.format(\n            method=\"pause\",\n            params=self._ids,\n        )\n    )</code></pre>"},{"location":"reference/ipyvizzu/animationcontrol/#ipyvizzu.animationcontrol.AnimationControl.play","title":"<code>play()</code>","text":"<p>Plays/resumes playing of the controlled animation.</p> Source code in <code>src/ipyvizzu/animationcontrol.py</code> <pre><code>def play(self) -&gt; None:\n    \"\"\"Plays/resumes playing of the controlled animation.\"\"\"\n\n    self._display(\n        DisplayTemplate.CONTROL.format(\n            method=\"play\",\n            params=self._ids,\n        )\n    )</code></pre>"},{"location":"reference/ipyvizzu/animationcontrol/#ipyvizzu.animationcontrol.AnimationControl.reverse","title":"<code>reverse()</code>","text":"<p>Changes the direction of the controlled animation.</p> Source code in <code>src/ipyvizzu/animationcontrol.py</code> <pre><code>def reverse(self) -&gt; None:\n    \"\"\"Changes the direction of the controlled animation.\"\"\"\n\n    self._display(\n        DisplayTemplate.CONTROL.format(\n            method=\"reverse\",\n            params=self._ids,\n        )\n    )</code></pre>"},{"location":"reference/ipyvizzu/animationcontrol/#ipyvizzu.animationcontrol.AnimationControl.seek","title":"<code>seek(value)</code>","text":"<p>Seeks the animation to the position specified by time or progress percentage.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Union[int, str]</code> <p>The position specified by time or progress percentage.</p> required Source code in <code>src/ipyvizzu/animationcontrol.py</code> <pre><code>def seek(self, value: Union[int, str]) -&gt; None:\n    \"\"\"\n    Seeks the animation to the position specified by time or progress percentage.\n\n    Args:\n        value: The position specified by time or progress percentage.\n    \"\"\"\n\n    params = \", \".join([self._ids, f\"'{value}'\"])\n    self._display(\n        DisplayTemplate.CONTROL.format(\n            method=\"seek\",\n            params=params,\n        )\n    )</code></pre>"},{"location":"reference/ipyvizzu/animationcontrol/#ipyvizzu.animationcontrol.AnimationControl.stop","title":"<code>stop()</code>","text":"<p>Stops the current animation seeking it back to its start position.</p> Source code in <code>src/ipyvizzu/animationcontrol.py</code> <pre><code>def stop(self) -&gt; None:\n    \"\"\"Stops the current animation seeking it back to its start position.\"\"\"\n\n    self._display(\n        DisplayTemplate.CONTROL.format(\n            method=\"stop\",\n            params=self._ids,\n        )\n    )</code></pre>"},{"location":"reference/ipyvizzu/animationcontrol/#ipyvizzu.animationcontrol.AnimationControl.store","title":"<code>store()</code>","text":"<p>A method for saving and storing the actual state of the animation.</p> <p>Returns:</p> Type Description <code>Animation</code> <p>An <code>Animation</code> object wich stores the actual state of the animation.</p> Source code in <code>src/ipyvizzu/animationcontrol.py</code> <pre><code>def store(self) -&gt; Animation:\n    \"\"\"\n    A method for saving and storing the actual state of the animation.\n\n    Returns:\n        An `Animation` object wich stores the actual state of the animation.\n    \"\"\"\n\n    animation_id = uuid.uuid4().hex[:7]\n    params = \", \".join([self._ids, f\"'{animation_id}'\"])\n    self._display(\n        DisplayTemplate.CONTROL.format(\n            method=\"store\",\n            params=params,\n        )\n    )\n    return Animation(animation_id)</code></pre>"},{"location":"reference/ipyvizzu/chart/","title":"Chart","text":""},{"location":"reference/ipyvizzu/chart/#ipyvizzu.chart","title":"<code>ipyvizzu.chart</code>","text":"<p>A module for working with Vizzu charts.</p>"},{"location":"reference/ipyvizzu/chart/#ipyvizzu.chart.Chart","title":"<code>ipyvizzu.chart.Chart</code>","text":"<p>A class for representing a wrapper over Vizzu chart.</p> Source code in <code>src/ipyvizzu/chart.py</code> <pre><code>class Chart:\n    \"\"\"A class for representing a wrapper over Vizzu chart.\"\"\"\n\n    # pylint: disable=too-many-instance-attributes\n\n    VIZZU: str = \"https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js\"\n    \"\"\"A variable for storing the default url of vizzu package.\"\"\"\n\n    def __init__(\n        self,\n        vizzu: str = VIZZU,\n        width: str = \"800px\",\n        height: str = \"480px\",\n        display: Union[DisplayTarget, str] = DisplayTarget.ACTUAL,\n    ):\n        \"\"\"\n        Chart constructor.\n\n        Args:\n            vizzu: The url of Vizzu JavaScript package.\n            width: The width of the chart.\n            height: The height of the chart.\n            display: The display behaviour of the chart.\n        \"\"\"\n\n        self._chart_id: str = uuid.uuid4().hex[:7]\n\n        self._vizzu: str = vizzu\n        self._width: str = width\n        self._height: str = height\n\n        self._display_target: DisplayTarget = DisplayTarget(display)\n        self._calls: List[str] = []\n        self._last_anim: Optional[str] = None\n        self._showed: bool = False\n\n        self._initialized: bool = False\n        self._scroll_into_view: bool = False\n\n    @staticmethod\n    def _register_events() -&gt; None:\n        ipy = get_ipython()\n        if ipy is not None:\n            ipy.events.register(\"pre_run_cell\", Chart._register_pre_run_cell)\n\n    @staticmethod\n    def _register_pre_run_cell() -&gt; None:\n        display_javascript(DisplayTemplate.CLEAR_INHIBITSCROLL, raw=True)\n\n    @property\n    def scroll_into_view(self) -&gt; bool:\n        \"\"\"\n        A property for turning on/off the scroll into view feature.\n\n        Returns:\n            The value of the property (default `False`).\n        \"\"\"\n\n        return self._scroll_into_view\n\n    @scroll_into_view.setter\n    def scroll_into_view(self, scroll_into_view: Optional[bool]):\n        self._scroll_into_view = bool(scroll_into_view)\n\n    @property\n    def control(self) -&gt; AnimationControl:\n        \"\"\"\n        A property for returning a control object of the last animation.\n\n        Raises:\n            AssertionError: If called before any animation plays.\n\n        Returns:\n            The control object of the last animation.\n        \"\"\"\n        assert self._last_anim, \"must be used after an animation.\"\n        return AnimationControl(self._chart_id, self._last_anim, self._display)\n\n    def initializing(self) -&gt; None:\n        \"\"\"A method for initializing the chart.\"\"\"\n\n        if not self._initialized:\n            self._initialized = True\n            ipyvizzurawjs = pkgutil.get_data(__name__, \"templates/ipyvizzu.js\")\n            ipyvizzujs = ipyvizzurawjs.decode(\"utf-8\")  # type: ignore\n            self._display(DisplayTemplate.IPYVIZZUJS.format(ipyvizzujs=ipyvizzujs))\n\n            if self._display_target != DisplayTarget.MANUAL:\n                Chart._register_events()\n\n            self._display(\n                DisplayTemplate.INIT.format(\n                    chart_id=self._chart_id,\n                    vizzu=self._vizzu,\n                    div_width=self._width,\n                    div_height=self._height,\n                )\n            )\n\n    def animate(\n        self,\n        *animations: AbstractAnimation,\n        **options: Optional[Union[str, int, float, dict]],\n    ) -&gt; None:\n        \"\"\"\n        A method for changing the state of the chart.\n\n        Args:\n            *animations:\n                List of AbstractAnimation inherited objects such as [Data][ipyvizzu.animation.Data],\n                [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style].\n            **options: Dictionary of animation options for example `duration=1`.\n                For information on all available animation options see the\n                [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/interfaces/vizzu.Anim.Options/#properties).\n\n        Raises:\n            ValueError: If `animations` is not set.\n\n        Example:\n            Reset the chart styles:\n\n                chart.animate(Style(None))\n        \"\"\"  # pylint: disable=line-too-long\n\n        if not animations:\n            raise ValueError(\"No animation was set.\")\n\n        animation = AnimationMerger.merge_animations(animations)\n        animate = Animate(animation, options)\n\n        self._last_anim = uuid.uuid4().hex[:7]\n        self._display(\n            DisplayTemplate.ANIMATE.format(\n                display_target=self._display_target.value,\n                chart_id=self._chart_id,\n                anim_id=self._last_anim,\n                scroll=str(self._scroll_into_view).lower(),\n                **animate.dump(),\n            )\n        )\n\n    def feature(self, name: str, enabled: bool) -&gt; None:\n        \"\"\"\n        A method for turning on/off features of the chart.\n\n        Args:\n            name:\n                The name of the chart feature.\n                For information on all available features see the\n                [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/modules/vizzu/#feature).\n            enabled: The new state of the chart feature.\n\n        Example:\n            Turn on `tooltip` of the chart:\n\n                chart.feature(\"tooltip\", True)\n        \"\"\"  # pylint: disable=line-too-long\n\n        self._display(\n            DisplayTemplate.FEATURE.format(\n                chart_id=self._chart_id,\n                **Feature(name, enabled).dump(),\n            )\n        )\n\n    def store(self) -&gt; Snapshot:\n        \"\"\"\n        A method for saving and storing the actual state of the chart.\n\n        Returns:\n            A Snapshot object wich stores the actual state of the chart.\n\n        Example:\n            Save and restore the actual state of the chart:\n\n                snapshot = chart.store()\n                ...\n                chart.animate(snapshot)\n        \"\"\"\n\n        snapshot_id = uuid.uuid4().hex[:7]\n        self._display(\n            DisplayTemplate.STORE.format(\n                chart_id=self._chart_id, **Store(snapshot_id).dump()\n            )\n        )\n        return Snapshot(snapshot_id)\n\n    def on(  # pylint: disable=invalid-name\n        self, event: str, handler: str\n    ) -&gt; EventHandler:\n        \"\"\"\n        A method for creating and turning on an event handler.\n\n        Args:\n            event:\n                The type of the event.\n                For information on all available events see the\n                [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/modules/vizzu.Event/#type).\n            handler: The JavaScript method of the event.\n\n        Returns:\n            The turned on event handler object.\n\n        Example:\n            Turn on an event handler which prints an alert message\n            when someone clicks on the chart:\n\n                handler = chart.on(\"click\", \"alert(JSON.stringify(event.data));\")\n        \"\"\"  # pylint: disable=line-too-long\n\n        event_handler = EventHandler(event, handler)\n        self._display(\n            DisplayTemplate.SET_EVENT.format(\n                chart_id=self._chart_id,\n                **EventOn(event_handler).dump(),\n            )\n        )\n        return event_handler\n\n    def off(self, event_handler: EventHandler) -&gt; None:\n        \"\"\"\n        A method for turning off an event handler.\n\n        Args:\n            event_handler: A previously created event handler object.\n\n        Example:\n            Turn off a previously created event handler:\n\n                chart.off(handler)\n        \"\"\"\n\n        self._display(\n            DisplayTemplate.CLEAR_EVENT.format(\n                chart_id=self._chart_id,\n                **EventOff(event_handler).dump(),\n            )\n        )\n\n    def log(self, chart_property: ChartProperty) -&gt; None:\n        \"\"\"\n        A method for printing chart properties to the browser console.\n\n        Args:\n            chart_property:\n                A chart property such as\n                [CONFIG][ipyvizzu.template.ChartProperty] and\n                [STYLE][ipyvizzu.template.ChartProperty].\n\n        Example:\n            Log the actual style of the chart to the browser console:\n\n                chart.log(ChartProperty.STYLE)\n        \"\"\"\n\n        self._display(\n            DisplayTemplate.LOG.format(\n                chart_id=self._chart_id, **Log(chart_property).dump()\n            )\n        )\n\n    def _repr_html_(self) -&gt; str:\n        assert (\n            self._display_target == DisplayTarget.MANUAL\n        ), \"chart._repr_html_() can be used with display=DisplayTarget.MANUAL only\"\n        assert not self._showed, \"cannot be used after chart displayed.\"\n        self._showed = True\n        if not self._initialized:\n            return \"\"\n        html_id = uuid.uuid4().hex[:7]\n        script = (\n            self._calls[0]\n            + \"\\n\"\n            + \"\\n\".join(self._calls[1:]).replace(\n                \"element\", f'document.getElementById(\"{html_id}\")'\n            )\n        )\n        return f'&lt;div id=\"{html_id}\"&gt;&lt;script&gt;{script}&lt;/script&gt;&lt;/div&gt;'\n\n    def show(self) -&gt; None:\n        \"\"\"\n        A method for displaying the assembled JavaScript code.\n\n        Raises:\n            AssertionError: If [display][ipyvizzu.Chart.__init__]\n                is not [DisplayTarget.MANUAL][ipyvizzu.template.DisplayTarget].\n            AssertionError: If chart already has been displayed.\n        \"\"\"\n\n        assert (\n            self._display_target == DisplayTarget.MANUAL\n        ), \"chart.show() can be used with display=DisplayTarget.MANUAL only\"\n        assert not self._showed, \"cannot be used after chart displayed\"\n        display_javascript(\n            \"\\n\".join(self._calls),\n            raw=True,\n        )\n        self._showed = True\n\n    def _display(self, javascript: str) -&gt; None:\n        if not self._initialized:\n            self.initializing()\n        if self._display_target != DisplayTarget.MANUAL:\n            display_javascript(\n                javascript,\n                raw=True,\n            )\n        else:\n            assert not self._showed, \"cannot be used after chart displayed\"\n            self._calls.append(javascript)</code></pre>"},{"location":"reference/ipyvizzu/chart/#ipyvizzu.chart.Chart.VIZZU","title":"<code>VIZZU: str = 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js'</code>  <code>class-attribute</code>","text":"<p>A variable for storing the default url of vizzu package.</p>"},{"location":"reference/ipyvizzu/chart/#ipyvizzu.chart.Chart.scroll_into_view","title":"<code>scroll_into_view: bool</code>  <code>property</code> <code>writable</code>","text":"<p>A property for turning on/off the scroll into view feature.</p> <p>Returns:</p> Type Description <code>bool</code> <p>The value of the property (default <code>False</code>).</p>"},{"location":"reference/ipyvizzu/chart/#ipyvizzu.chart.Chart.control","title":"<code>control: AnimationControl</code>  <code>property</code>","text":"<p>A property for returning a control object of the last animation.</p> <p>Raises:</p> Type Description <code>AssertionError</code> <p>If called before any animation plays.</p> <p>Returns:</p> Type Description <code>AnimationControl</code> <p>The control object of the last animation.</p>"},{"location":"reference/ipyvizzu/chart/#ipyvizzu.chart.Chart.__init__","title":"<code>__init__(vizzu=VIZZU, width='800px', height='480px', display=DisplayTarget.ACTUAL)</code>","text":"<p>Chart constructor.</p> <p>Parameters:</p> Name Type Description Default <code>vizzu</code> <code>str</code> <p>The url of Vizzu JavaScript package.</p> <code>VIZZU</code> <code>width</code> <code>str</code> <p>The width of the chart.</p> <code>'800px'</code> <code>height</code> <code>str</code> <p>The height of the chart.</p> <code>'480px'</code> <code>display</code> <code>Union[DisplayTarget, str]</code> <p>The display behaviour of the chart.</p> <code>DisplayTarget.ACTUAL</code> Source code in <code>src/ipyvizzu/chart.py</code> <pre><code>def __init__(\n    self,\n    vizzu: str = VIZZU,\n    width: str = \"800px\",\n    height: str = \"480px\",\n    display: Union[DisplayTarget, str] = DisplayTarget.ACTUAL,\n):\n    \"\"\"\n    Chart constructor.\n\n    Args:\n        vizzu: The url of Vizzu JavaScript package.\n        width: The width of the chart.\n        height: The height of the chart.\n        display: The display behaviour of the chart.\n    \"\"\"\n\n    self._chart_id: str = uuid.uuid4().hex[:7]\n\n    self._vizzu: str = vizzu\n    self._width: str = width\n    self._height: str = height\n\n    self._display_target: DisplayTarget = DisplayTarget(display)\n    self._calls: List[str] = []\n    self._last_anim: Optional[str] = None\n    self._showed: bool = False\n\n    self._initialized: bool = False\n    self._scroll_into_view: bool = False</code></pre>"},{"location":"reference/ipyvizzu/chart/#ipyvizzu.chart.Chart.initializing","title":"<code>initializing()</code>","text":"<p>A method for initializing the chart.</p> Source code in <code>src/ipyvizzu/chart.py</code> <pre><code>def initializing(self) -&gt; None:\n    \"\"\"A method for initializing the chart.\"\"\"\n\n    if not self._initialized:\n        self._initialized = True\n        ipyvizzurawjs = pkgutil.get_data(__name__, \"templates/ipyvizzu.js\")\n        ipyvizzujs = ipyvizzurawjs.decode(\"utf-8\")  # type: ignore\n        self._display(DisplayTemplate.IPYVIZZUJS.format(ipyvizzujs=ipyvizzujs))\n\n        if self._display_target != DisplayTarget.MANUAL:\n            Chart._register_events()\n\n        self._display(\n            DisplayTemplate.INIT.format(\n                chart_id=self._chart_id,\n                vizzu=self._vizzu,\n                div_width=self._width,\n                div_height=self._height,\n            )\n        )</code></pre>"},{"location":"reference/ipyvizzu/chart/#ipyvizzu.chart.Chart.animate","title":"<code>animate(*animations, **options)</code>","text":"<p>A method for changing the state of the chart.</p> <p>Parameters:</p> Name Type Description Default <code>*animations</code> <code>AbstractAnimation</code> <p>List of AbstractAnimation inherited objects such as Data, Config and Style.</p> <code>()</code> <code>**options</code> <code>Optional[Union[str, int, float, dict]]</code> <p>Dictionary of animation options for example <code>duration=1</code>. For information on all available animation options see the Vizzu Code reference.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If <code>animations</code> is not set.</p> Example <p>Reset the chart styles:</p> <pre><code>chart.animate(Style(None))</code></pre> Source code in <code>src/ipyvizzu/chart.py</code> <pre><code>def animate(\n    self,\n    *animations: AbstractAnimation,\n    **options: Optional[Union[str, int, float, dict]],\n) -&gt; None:\n    \"\"\"\n    A method for changing the state of the chart.\n\n    Args:\n        *animations:\n            List of AbstractAnimation inherited objects such as [Data][ipyvizzu.animation.Data],\n            [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style].\n        **options: Dictionary of animation options for example `duration=1`.\n            For information on all available animation options see the\n            [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/interfaces/vizzu.Anim.Options/#properties).\n\n    Raises:\n        ValueError: If `animations` is not set.\n\n    Example:\n        Reset the chart styles:\n\n            chart.animate(Style(None))\n    \"\"\"  # pylint: disable=line-too-long\n\n    if not animations:\n        raise ValueError(\"No animation was set.\")\n\n    animation = AnimationMerger.merge_animations(animations)\n    animate = Animate(animation, options)\n\n    self._last_anim = uuid.uuid4().hex[:7]\n    self._display(\n        DisplayTemplate.ANIMATE.format(\n            display_target=self._display_target.value,\n            chart_id=self._chart_id,\n            anim_id=self._last_anim,\n            scroll=str(self._scroll_into_view).lower(),\n            **animate.dump(),\n        )\n    )</code></pre>"},{"location":"reference/ipyvizzu/chart/#ipyvizzu.chart.Chart.feature","title":"<code>feature(name, enabled)</code>","text":"<p>A method for turning on/off features of the chart.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the chart feature. For information on all available features see the Vizzu Code reference.</p> required <code>enabled</code> <code>bool</code> <p>The new state of the chart feature.</p> required Example <p>Turn on <code>tooltip</code> of the chart:</p> <pre><code>chart.feature(\"tooltip\", True)</code></pre> Source code in <code>src/ipyvizzu/chart.py</code> <pre><code>def feature(self, name: str, enabled: bool) -&gt; None:\n    \"\"\"\n    A method for turning on/off features of the chart.\n\n    Args:\n        name:\n            The name of the chart feature.\n            For information on all available features see the\n            [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/modules/vizzu/#feature).\n        enabled: The new state of the chart feature.\n\n    Example:\n        Turn on `tooltip` of the chart:\n\n            chart.feature(\"tooltip\", True)\n    \"\"\"  # pylint: disable=line-too-long\n\n    self._display(\n        DisplayTemplate.FEATURE.format(\n            chart_id=self._chart_id,\n            **Feature(name, enabled).dump(),\n        )\n    )</code></pre>"},{"location":"reference/ipyvizzu/chart/#ipyvizzu.chart.Chart.store","title":"<code>store()</code>","text":"<p>A method for saving and storing the actual state of the chart.</p> <p>Returns:</p> Type Description <code>Snapshot</code> <p>A Snapshot object wich stores the actual state of the chart.</p> Example <p>Save and restore the actual state of the chart:</p> <pre><code>snapshot = chart.store()\n...\nchart.animate(snapshot)</code></pre> Source code in <code>src/ipyvizzu/chart.py</code> <pre><code>def store(self) -&gt; Snapshot:\n    \"\"\"\n    A method for saving and storing the actual state of the chart.\n\n    Returns:\n        A Snapshot object wich stores the actual state of the chart.\n\n    Example:\n        Save and restore the actual state of the chart:\n\n            snapshot = chart.store()\n            ...\n            chart.animate(snapshot)\n    \"\"\"\n\n    snapshot_id = uuid.uuid4().hex[:7]\n    self._display(\n        DisplayTemplate.STORE.format(\n            chart_id=self._chart_id, **Store(snapshot_id).dump()\n        )\n    )\n    return Snapshot(snapshot_id)</code></pre>"},{"location":"reference/ipyvizzu/chart/#ipyvizzu.chart.Chart.on","title":"<code>on(event, handler)</code>","text":"<p>A method for creating and turning on an event handler.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>str</code> <p>The type of the event. For information on all available events see the Vizzu Code reference.</p> required <code>handler</code> <code>str</code> <p>The JavaScript method of the event.</p> required <p>Returns:</p> Type Description <code>EventHandler</code> <p>The turned on event handler object.</p> Example <p>Turn on an event handler which prints an alert message when someone clicks on the chart:</p> <pre><code>handler = chart.on(\"click\", \"alert(JSON.stringify(event.data));\")</code></pre> Source code in <code>src/ipyvizzu/chart.py</code> <pre><code>def on(  # pylint: disable=invalid-name\n    self, event: str, handler: str\n) -&gt; EventHandler:\n    \"\"\"\n    A method for creating and turning on an event handler.\n\n    Args:\n        event:\n            The type of the event.\n            For information on all available events see the\n            [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/modules/vizzu.Event/#type).\n        handler: The JavaScript method of the event.\n\n    Returns:\n        The turned on event handler object.\n\n    Example:\n        Turn on an event handler which prints an alert message\n        when someone clicks on the chart:\n\n            handler = chart.on(\"click\", \"alert(JSON.stringify(event.data));\")\n    \"\"\"  # pylint: disable=line-too-long\n\n    event_handler = EventHandler(event, handler)\n    self._display(\n        DisplayTemplate.SET_EVENT.format(\n            chart_id=self._chart_id,\n            **EventOn(event_handler).dump(),\n        )\n    )\n    return event_handler</code></pre>"},{"location":"reference/ipyvizzu/chart/#ipyvizzu.chart.Chart.off","title":"<code>off(event_handler)</code>","text":"<p>A method for turning off an event handler.</p> <p>Parameters:</p> Name Type Description Default <code>event_handler</code> <code>EventHandler</code> <p>A previously created event handler object.</p> required Example <p>Turn off a previously created event handler:</p> <pre><code>chart.off(handler)</code></pre> Source code in <code>src/ipyvizzu/chart.py</code> <pre><code>def off(self, event_handler: EventHandler) -&gt; None:\n    \"\"\"\n    A method for turning off an event handler.\n\n    Args:\n        event_handler: A previously created event handler object.\n\n    Example:\n        Turn off a previously created event handler:\n\n            chart.off(handler)\n    \"\"\"\n\n    self._display(\n        DisplayTemplate.CLEAR_EVENT.format(\n            chart_id=self._chart_id,\n            **EventOff(event_handler).dump(),\n        )\n    )</code></pre>"},{"location":"reference/ipyvizzu/chart/#ipyvizzu.chart.Chart.log","title":"<code>log(chart_property)</code>","text":"<p>A method for printing chart properties to the browser console.</p> <p>Parameters:</p> Name Type Description Default <code>chart_property</code> <code>ChartProperty</code> <p>A chart property such as CONFIG and STYLE.</p> required Example <p>Log the actual style of the chart to the browser console:</p> <pre><code>chart.log(ChartProperty.STYLE)</code></pre> Source code in <code>src/ipyvizzu/chart.py</code> <pre><code>def log(self, chart_property: ChartProperty) -&gt; None:\n    \"\"\"\n    A method for printing chart properties to the browser console.\n\n    Args:\n        chart_property:\n            A chart property such as\n            [CONFIG][ipyvizzu.template.ChartProperty] and\n            [STYLE][ipyvizzu.template.ChartProperty].\n\n    Example:\n        Log the actual style of the chart to the browser console:\n\n            chart.log(ChartProperty.STYLE)\n    \"\"\"\n\n    self._display(\n        DisplayTemplate.LOG.format(\n            chart_id=self._chart_id, **Log(chart_property).dump()\n        )\n    )</code></pre>"},{"location":"reference/ipyvizzu/chart/#ipyvizzu.chart.Chart.show","title":"<code>show()</code>","text":"<p>A method for displaying the assembled JavaScript code.</p> <p>Raises:</p> Type Description <code>AssertionError</code> <p>If display is not DisplayTarget.MANUAL.</p> <code>AssertionError</code> <p>If chart already has been displayed.</p> Source code in <code>src/ipyvizzu/chart.py</code> <pre><code>def show(self) -&gt; None:\n    \"\"\"\n    A method for displaying the assembled JavaScript code.\n\n    Raises:\n        AssertionError: If [display][ipyvizzu.Chart.__init__]\n            is not [DisplayTarget.MANUAL][ipyvizzu.template.DisplayTarget].\n        AssertionError: If chart already has been displayed.\n    \"\"\"\n\n    assert (\n        self._display_target == DisplayTarget.MANUAL\n    ), \"chart.show() can be used with display=DisplayTarget.MANUAL only\"\n    assert not self._showed, \"cannot be used after chart displayed\"\n    display_javascript(\n        \"\\n\".join(self._calls),\n        raw=True,\n    )\n    self._showed = True</code></pre>"},{"location":"reference/ipyvizzu/event/","title":"Event","text":""},{"location":"reference/ipyvizzu/event/#ipyvizzu.event","title":"<code>ipyvizzu.event</code>","text":"<p>A module for working with JavaScript events</p>"},{"location":"reference/ipyvizzu/event/#ipyvizzu.event.EventHandler","title":"<code>ipyvizzu.event.EventHandler</code>","text":"<p>A class for representing an event handler.</p> Source code in <code>src/ipyvizzu/event.py</code> <pre><code>class EventHandler:\n    \"\"\"A class for representing an event handler.\"\"\"\n\n    def __init__(self, event: str, handler: str):\n        \"\"\"\n        EventHandler constructor.\n\n        It generates a uuid for the event handler,\n        stores the event type and the body of the handler function.\n\n        Args:\n            event: The type of the event.\n            handler: The body of the handler function.\n        \"\"\"\n\n        self._id = uuid.uuid4().hex[:7]\n        self._event = event\n        self._handler = \" \".join(handler.split())\n\n    @property\n    def id(self) -&gt; str:  # pylint: disable=invalid-name\n        \"\"\"\n        A property for storing an id.\n\n        Returns:\n            The uuid of the event handler.\n        \"\"\"\n\n        return self._id\n\n    @property\n    def event(self) -&gt; str:\n        \"\"\"\n        A property for storing an event type.\n\n        Returns:\n            The type of the event.\n        \"\"\"\n\n        return self._event\n\n    @property\n    def handler(self) -&gt; str:\n        \"\"\"\n        A property for storing an event handler function.\n\n        Returns:\n            The body of the handler function.\n        \"\"\"\n\n        return self._handler</code></pre>"},{"location":"reference/ipyvizzu/event/#ipyvizzu.event.EventHandler.id","title":"<code>id: str</code>  <code>property</code>","text":"<p>A property for storing an id.</p> <p>Returns:</p> Type Description <code>str</code> <p>The uuid of the event handler.</p>"},{"location":"reference/ipyvizzu/event/#ipyvizzu.event.EventHandler.event","title":"<code>event: str</code>  <code>property</code>","text":"<p>A property for storing an event type.</p> <p>Returns:</p> Type Description <code>str</code> <p>The type of the event.</p>"},{"location":"reference/ipyvizzu/event/#ipyvizzu.event.EventHandler.handler","title":"<code>handler: str</code>  <code>property</code>","text":"<p>A property for storing an event handler function.</p> <p>Returns:</p> Type Description <code>str</code> <p>The body of the handler function.</p>"},{"location":"reference/ipyvizzu/event/#ipyvizzu.event.EventHandler.__init__","title":"<code>__init__(event, handler)</code>","text":"<p>EventHandler constructor.</p> <p>It generates a uuid for the event handler, stores the event type and the body of the handler function.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>str</code> <p>The type of the event.</p> required <code>handler</code> <code>str</code> <p>The body of the handler function.</p> required Source code in <code>src/ipyvizzu/event.py</code> <pre><code>def __init__(self, event: str, handler: str):\n    \"\"\"\n    EventHandler constructor.\n\n    It generates a uuid for the event handler,\n    stores the event type and the body of the handler function.\n\n    Args:\n        event: The type of the event.\n        handler: The body of the handler function.\n    \"\"\"\n\n    self._id = uuid.uuid4().hex[:7]\n    self._event = event\n    self._handler = \" \".join(handler.split())</code></pre>"},{"location":"reference/ipyvizzu/json/","title":"Json","text":""},{"location":"reference/ipyvizzu/json/#ipyvizzu.json","title":"<code>ipyvizzu.json</code>","text":"<p>A module for working JavaScript code in json convertible objects.</p>"},{"location":"reference/ipyvizzu/json/#ipyvizzu.json.RawJavaScript","title":"<code>ipyvizzu.json.RawJavaScript</code>","text":"<p>A class for representing raw JavaScript code.</p> Source code in <code>src/ipyvizzu/json.py</code> <pre><code>class RawJavaScript:\n    \"\"\"A class for representing raw JavaScript code.\"\"\"\n\n    # pylint: disable=too-few-public-methods\n\n    def __init__(self, raw: Optional[str]):\n        \"\"\"\n        RawJavaScript constructor.\n\n        It stores raw JavaScript code as a string.\n\n        Args:\n            raw: JavaScript code as `str`.\n        \"\"\"\n\n        self._raw = raw\n\n    @property\n    def raw(self) -&gt; Optional[str]:\n        \"\"\"\n        A property for storing raw JavaScript code as a string.\n\n        Returns:\n            Raw JavaScript code as `str`.\n        \"\"\"\n\n        return self._raw</code></pre>"},{"location":"reference/ipyvizzu/json/#ipyvizzu.json.RawJavaScript.raw","title":"<code>raw: Optional[str]</code>  <code>property</code>","text":"<p>A property for storing raw JavaScript code as a string.</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Raw JavaScript code as <code>str</code>.</p>"},{"location":"reference/ipyvizzu/json/#ipyvizzu.json.RawJavaScript.__init__","title":"<code>__init__(raw)</code>","text":"<p>RawJavaScript constructor.</p> <p>It stores raw JavaScript code as a string.</p> <p>Parameters:</p> Name Type Description Default <code>raw</code> <code>Optional[str]</code> <p>JavaScript code as <code>str</code>.</p> required Source code in <code>src/ipyvizzu/json.py</code> <pre><code>def __init__(self, raw: Optional[str]):\n    \"\"\"\n    RawJavaScript constructor.\n\n    It stores raw JavaScript code as a string.\n\n    Args:\n        raw: JavaScript code as `str`.\n    \"\"\"\n\n    self._raw = raw</code></pre>"},{"location":"reference/ipyvizzu/json/#ipyvizzu.json.RawJavaScriptEncoder","title":"<code>ipyvizzu.json.RawJavaScriptEncoder</code>","text":"<p>         Bases: <code>json.JSONEncoder</code></p> <p>A class for representing a custom json encoder, it can encode objects that contain RawJavaScript values.</p> Source code in <code>src/ipyvizzu/json.py</code> <pre><code>class RawJavaScriptEncoder(json.JSONEncoder):\n    \"\"\"\n    A class for representing a custom json encoder,\n    it can encode objects that contain\n    [RawJavaScript][ipyvizzu.json.RawJavaScript] values.\n    \"\"\"\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"\n        RawJavaScriptEncoder constructor.\n\n        It extends [JSONEncoder][json.JSONEncoder] with\n        an instance variable (`_raw_replacements`).\n        The `_raw_replacements` dictionary stores the `uuids` and\n        JavaScript codes of the [RawJavaScript][ipyvizzu.json.RawJavaScript] objects.\n        \"\"\"\n\n        json.JSONEncoder.__init__(self, *args, **kwargs)\n        self._raw_replacements = {}\n\n    def default(self, o):\n        \"\"\"\n        Overrides [JSONEncoder.default][json.JSONEncoder.default] method.\n        It replaces [RawJavaScript][ipyvizzu.json.RawJavaScript] object with `uuid` and\n        it stores raw JavaScript code with `uuid` key in the `_raw_replacements` dictionary.\n        \"\"\"\n\n        if isinstance(o, RawJavaScript):\n            key = uuid.uuid4().hex\n            self._raw_replacements[key] = o.raw\n            return key\n        return json.JSONEncoder.default(self, o)\n\n    def encode(self, o):\n        \"\"\"\n        Overrides [JSONEncoder.encode][json.JSONEncoder.encode] method.\n        It replaces `uuids` with raw JavaScript code without apostrophes.\n        \"\"\"\n\n        result = json.JSONEncoder.encode(self, o)\n        for key, val in self._raw_replacements.items():\n            result = result.replace(f'\"{key}\"', val)\n        return result</code></pre>"},{"location":"reference/ipyvizzu/json/#ipyvizzu.json.RawJavaScriptEncoder.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>RawJavaScriptEncoder constructor.</p> <p>It extends JSONEncoder with an instance variable (<code>_raw_replacements</code>). The <code>_raw_replacements</code> dictionary stores the <code>uuids</code> and JavaScript codes of the RawJavaScript objects.</p> Source code in <code>src/ipyvizzu/json.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    \"\"\"\n    RawJavaScriptEncoder constructor.\n\n    It extends [JSONEncoder][json.JSONEncoder] with\n    an instance variable (`_raw_replacements`).\n    The `_raw_replacements` dictionary stores the `uuids` and\n    JavaScript codes of the [RawJavaScript][ipyvizzu.json.RawJavaScript] objects.\n    \"\"\"\n\n    json.JSONEncoder.__init__(self, *args, **kwargs)\n    self._raw_replacements = {}</code></pre>"},{"location":"reference/ipyvizzu/json/#ipyvizzu.json.RawJavaScriptEncoder.default","title":"<code>default(o)</code>","text":"<p>Overrides JSONEncoder.default method. It replaces RawJavaScript object with <code>uuid</code> and it stores raw JavaScript code with <code>uuid</code> key in the <code>_raw_replacements</code> dictionary.</p> Source code in <code>src/ipyvizzu/json.py</code> <pre><code>def default(self, o):\n    \"\"\"\n    Overrides [JSONEncoder.default][json.JSONEncoder.default] method.\n    It replaces [RawJavaScript][ipyvizzu.json.RawJavaScript] object with `uuid` and\n    it stores raw JavaScript code with `uuid` key in the `_raw_replacements` dictionary.\n    \"\"\"\n\n    if isinstance(o, RawJavaScript):\n        key = uuid.uuid4().hex\n        self._raw_replacements[key] = o.raw\n        return key\n    return json.JSONEncoder.default(self, o)</code></pre>"},{"location":"reference/ipyvizzu/json/#ipyvizzu.json.RawJavaScriptEncoder.encode","title":"<code>encode(o)</code>","text":"<p>Overrides JSONEncoder.encode method. It replaces <code>uuids</code> with raw JavaScript code without apostrophes.</p> Source code in <code>src/ipyvizzu/json.py</code> <pre><code>def encode(self, o):\n    \"\"\"\n    Overrides [JSONEncoder.encode][json.JSONEncoder.encode] method.\n    It replaces `uuids` with raw JavaScript code without apostrophes.\n    \"\"\"\n\n    result = json.JSONEncoder.encode(self, o)\n    for key, val in self._raw_replacements.items():\n        result = result.replace(f'\"{key}\"', val)\n    return result</code></pre>"},{"location":"reference/ipyvizzu/method/","title":"Method","text":""},{"location":"reference/ipyvizzu/method/#ipyvizzu.method","title":"<code>ipyvizzu.method</code>","text":"<p>A module for working with template methods.</p>"},{"location":"reference/ipyvizzu/method/#ipyvizzu.method.Method","title":"<code>ipyvizzu.method.Method</code>","text":"<p>A class for storing and dumping any kind of data.</p> Source code in <code>src/ipyvizzu/method.py</code> <pre><code>class Method:\n    \"\"\"A class for storing and dumping any kind of data.\"\"\"\n\n    # pylint: disable=too-few-public-methods\n\n    _data: dict\n\n    def dump(self) -&gt; dict:\n        \"\"\"\n        A method for returning the stored data.\n\n        Returns:\n            The stored data.\n        \"\"\"\n\n        return self._data</code></pre>"},{"location":"reference/ipyvizzu/method/#ipyvizzu.method.Method.dump","title":"<code>dump()</code>","text":"<p>A method for returning the stored data.</p> <p>Returns:</p> Type Description <code>dict</code> <p>The stored data.</p> Source code in <code>src/ipyvizzu/method.py</code> <pre><code>def dump(self) -&gt; dict:\n    \"\"\"\n    A method for returning the stored data.\n\n    Returns:\n        The stored data.\n    \"\"\"\n\n    return self._data</code></pre>"},{"location":"reference/ipyvizzu/method/#ipyvizzu.method.Animate","title":"<code>ipyvizzu.method.Animate</code>","text":"<p>         Bases: <code>Method</code></p> <p>A class for dumping chart independent parameters to DisplayTemplate.ANIMATE template.</p> Source code in <code>src/ipyvizzu/method.py</code> <pre><code>class Animate(Method):\n    \"\"\"\n    A class for dumping chart independent parameters to\n    [DisplayTemplate.ANIMATE][ipyvizzu.template.DisplayTemplate] template.\n    \"\"\"\n\n    # pylint: disable=too-few-public-methods\n\n    def __init__(\n        self,\n        chart_target: AbstractAnimation,\n        chart_anim_opts: Optional[dict] = None,\n    ):\n        \"\"\"\n        Animate constructor.\n\n        It stores and dumps `chart_target` and `chart_anim_opts` parameters.\n\n        Args:\n            chart_target:\n                AbstractAnimation inherited object such as\n                [Data][ipyvizzu.animation.Data]\n                [Config][ipyvizzu.animation.Config] or\n                [Style][ipyvizzu.animation.Style].\n            chart_anim_opts:\n                Animation options' dictionary. If it is not set, it dumps `undefined`.\n        \"\"\"\n\n        self._data = {\n            \"chart_target\": chart_target.dump(),\n            \"chart_anim_opts\": PlainAnimation(chart_anim_opts).dump()\n            if chart_anim_opts\n            else \"undefined\",\n        }</code></pre>"},{"location":"reference/ipyvizzu/method/#ipyvizzu.method.Animate.__init__","title":"<code>__init__(chart_target, chart_anim_opts=None)</code>","text":"<p>Animate constructor.</p> <p>It stores and dumps <code>chart_target</code> and <code>chart_anim_opts</code> parameters.</p> <p>Parameters:</p> Name Type Description Default <code>chart_target</code> <code>AbstractAnimation</code> <p>AbstractAnimation inherited object such as Data Config or Style.</p> required <code>chart_anim_opts</code> <code>Optional[dict]</code> <p>Animation options' dictionary. If it is not set, it dumps <code>undefined</code>.</p> <code>None</code> Source code in <code>src/ipyvizzu/method.py</code> <pre><code>def __init__(\n    self,\n    chart_target: AbstractAnimation,\n    chart_anim_opts: Optional[dict] = None,\n):\n    \"\"\"\n    Animate constructor.\n\n    It stores and dumps `chart_target` and `chart_anim_opts` parameters.\n\n    Args:\n        chart_target:\n            AbstractAnimation inherited object such as\n            [Data][ipyvizzu.animation.Data]\n            [Config][ipyvizzu.animation.Config] or\n            [Style][ipyvizzu.animation.Style].\n        chart_anim_opts:\n            Animation options' dictionary. If it is not set, it dumps `undefined`.\n    \"\"\"\n\n    self._data = {\n        \"chart_target\": chart_target.dump(),\n        \"chart_anim_opts\": PlainAnimation(chart_anim_opts).dump()\n        if chart_anim_opts\n        else \"undefined\",\n    }</code></pre>"},{"location":"reference/ipyvizzu/method/#ipyvizzu.method.Feature","title":"<code>ipyvizzu.method.Feature</code>","text":"<p>         Bases: <code>Method</code></p> <p>A class for dumping chart independent parameters to DisplayTemplate.FEATURE template.</p> Source code in <code>src/ipyvizzu/method.py</code> <pre><code>class Feature(Method):\n    \"\"\"\n    A class for dumping chart independent parameters to\n    [DisplayTemplate.FEATURE][ipyvizzu.template.DisplayTemplate] template.\n    \"\"\"\n\n    # pylint: disable=too-few-public-methods\n\n    def __init__(self, name: str, enabled: bool):\n        \"\"\"\n        Feature constructor.\n\n        It stores and dumps `name` and `enabled` parameters.\n\n        Args:\n            name: The name of a chart feature.\n            enabled: The new state of a chart feature.\n        \"\"\"\n\n        self._data = {\"name\": name, \"enabled\": json.dumps(enabled)}</code></pre>"},{"location":"reference/ipyvizzu/method/#ipyvizzu.method.Feature.__init__","title":"<code>__init__(name, enabled)</code>","text":"<p>Feature constructor.</p> <p>It stores and dumps <code>name</code> and <code>enabled</code> parameters.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of a chart feature.</p> required <code>enabled</code> <code>bool</code> <p>The new state of a chart feature.</p> required Source code in <code>src/ipyvizzu/method.py</code> <pre><code>def __init__(self, name: str, enabled: bool):\n    \"\"\"\n    Feature constructor.\n\n    It stores and dumps `name` and `enabled` parameters.\n\n    Args:\n        name: The name of a chart feature.\n        enabled: The new state of a chart feature.\n    \"\"\"\n\n    self._data = {\"name\": name, \"enabled\": json.dumps(enabled)}</code></pre>"},{"location":"reference/ipyvizzu/method/#ipyvizzu.method.Store","title":"<code>ipyvizzu.method.Store</code>","text":"<p>         Bases: <code>Method</code></p> <p>A class for dumping chart independent parameters to DisplayTemplate.STORE template.</p> Source code in <code>src/ipyvizzu/method.py</code> <pre><code>class Store(Method):\n    \"\"\"\n    A class for dumping chart independent parameters to\n    [DisplayTemplate.STORE][ipyvizzu.template.DisplayTemplate] template.\n    \"\"\"\n\n    # pylint: disable=too-few-public-methods\n\n    def __init__(self, snapshot_id: str):\n        \"\"\"\n        Store constructor.\n\n        It stores and dumps `snapshot_id` parameter.\n\n        Args:\n            snapshot_id: The id of snapshot object.\n        \"\"\"\n\n        self._data = {\"id\": snapshot_id}</code></pre>"},{"location":"reference/ipyvizzu/method/#ipyvizzu.method.Store.__init__","title":"<code>__init__(snapshot_id)</code>","text":"<p>Store constructor.</p> <p>It stores and dumps <code>snapshot_id</code> parameter.</p> <p>Parameters:</p> Name Type Description Default <code>snapshot_id</code> <code>str</code> <p>The id of snapshot object.</p> required Source code in <code>src/ipyvizzu/method.py</code> <pre><code>def __init__(self, snapshot_id: str):\n    \"\"\"\n    Store constructor.\n\n    It stores and dumps `snapshot_id` parameter.\n\n    Args:\n        snapshot_id: The id of snapshot object.\n    \"\"\"\n\n    self._data = {\"id\": snapshot_id}</code></pre>"},{"location":"reference/ipyvizzu/method/#ipyvizzu.method.EventOn","title":"<code>ipyvizzu.method.EventOn</code>","text":"<p>         Bases: <code>Method</code></p> <p>A class for dumping chart independent parameters to DisplayTemplate.SET_EVENT template.</p> Source code in <code>src/ipyvizzu/method.py</code> <pre><code>class EventOn(Method):\n    \"\"\"\n    A class for dumping chart independent parameters to\n    [DisplayTemplate.SET_EVENT][ipyvizzu.template.DisplayTemplate] template.\n    \"\"\"\n\n    # pylint: disable=too-few-public-methods\n\n    def __init__(self, event_handler: EventHandler):\n        \"\"\"\n        EventOn constructor.\n\n        It stores and dumps the `id`, the `event` and the `handler` of the event handler object.\n\n        Args:\n            event_handler: An event handler object.\n        \"\"\"\n\n        self._data = {\n            \"id\": event_handler.id,\n            \"event\": event_handler.event,\n            \"handler\": event_handler.handler,\n        }</code></pre>"},{"location":"reference/ipyvizzu/method/#ipyvizzu.method.EventOn.__init__","title":"<code>__init__(event_handler)</code>","text":"<p>EventOn constructor.</p> <p>It stores and dumps the <code>id</code>, the <code>event</code> and the <code>handler</code> of the event handler object.</p> <p>Parameters:</p> Name Type Description Default <code>event_handler</code> <code>EventHandler</code> <p>An event handler object.</p> required Source code in <code>src/ipyvizzu/method.py</code> <pre><code>def __init__(self, event_handler: EventHandler):\n    \"\"\"\n    EventOn constructor.\n\n    It stores and dumps the `id`, the `event` and the `handler` of the event handler object.\n\n    Args:\n        event_handler: An event handler object.\n    \"\"\"\n\n    self._data = {\n        \"id\": event_handler.id,\n        \"event\": event_handler.event,\n        \"handler\": event_handler.handler,\n    }</code></pre>"},{"location":"reference/ipyvizzu/method/#ipyvizzu.method.EventOff","title":"<code>ipyvizzu.method.EventOff</code>","text":"<p>         Bases: <code>Method</code></p> <p>A class for dumping chart independent parameters to DisplayTemplate.CLEAR_EVENT template.</p> Source code in <code>src/ipyvizzu/method.py</code> <pre><code>class EventOff(Method):\n    \"\"\"\n    A class for dumping chart independent parameters to\n    [DisplayTemplate.CLEAR_EVENT][ipyvizzu.template.DisplayTemplate] template.\n    \"\"\"\n\n    # pylint: disable=too-few-public-methods\n\n    def __init__(self, event_handler: EventHandler):\n        \"\"\"\n        EventOff constructor.\n\n        It stores and dumps the `id` and the `event` of the event handler object.\n\n        Args:\n            event_handler: An event handler object.\n        \"\"\"\n\n        self._data = {\"id\": event_handler.id, \"event\": event_handler.event}</code></pre>"},{"location":"reference/ipyvizzu/method/#ipyvizzu.method.EventOff.__init__","title":"<code>__init__(event_handler)</code>","text":"<p>EventOff constructor.</p> <p>It stores and dumps the <code>id</code> and the <code>event</code> of the event handler object.</p> <p>Parameters:</p> Name Type Description Default <code>event_handler</code> <code>EventHandler</code> <p>An event handler object.</p> required Source code in <code>src/ipyvizzu/method.py</code> <pre><code>def __init__(self, event_handler: EventHandler):\n    \"\"\"\n    EventOff constructor.\n\n    It stores and dumps the `id` and the `event` of the event handler object.\n\n    Args:\n        event_handler: An event handler object.\n    \"\"\"\n\n    self._data = {\"id\": event_handler.id, \"event\": event_handler.event}</code></pre>"},{"location":"reference/ipyvizzu/method/#ipyvizzu.method.Log","title":"<code>ipyvizzu.method.Log</code>","text":"<p>         Bases: <code>Method</code></p> <p>A class for dumping chart independent parameters to DisplayTemplate.LOG template.</p> Source code in <code>src/ipyvizzu/method.py</code> <pre><code>class Log(Method):\n    \"\"\"\n    A class for dumping chart independent parameters to\n    [DisplayTemplate.LOG][ipyvizzu.template.DisplayTemplate] template.\n    \"\"\"\n\n    # pylint: disable=too-few-public-methods\n\n    def __init__(self, chart_property: ChartProperty):\n        \"\"\"\n        Log constructor.\n\n        It stores and dumps the value of the chart property object.\n\n        Args:\n            chart_property:\n                A chart property such as\n                [CONFIG][ipyvizzu.template.ChartProperty] and\n                [STYLE][ipyvizzu.template.ChartProperty].\n        \"\"\"\n\n        self._data = {\"chart_property\": chart_property.value}</code></pre>"},{"location":"reference/ipyvizzu/method/#ipyvizzu.method.Log.__init__","title":"<code>__init__(chart_property)</code>","text":"<p>Log constructor.</p> <p>It stores and dumps the value of the chart property object.</p> <p>Parameters:</p> Name Type Description Default <code>chart_property</code> <code>ChartProperty</code> <p>A chart property such as CONFIG and STYLE.</p> required Source code in <code>src/ipyvizzu/method.py</code> <pre><code>def __init__(self, chart_property: ChartProperty):\n    \"\"\"\n    Log constructor.\n\n    It stores and dumps the value of the chart property object.\n\n    Args:\n        chart_property:\n            A chart property such as\n            [CONFIG][ipyvizzu.template.ChartProperty] and\n            [STYLE][ipyvizzu.template.ChartProperty].\n    \"\"\"\n\n    self._data = {\"chart_property\": chart_property.value}</code></pre>"},{"location":"reference/ipyvizzu/schema/","title":"Schema","text":""},{"location":"reference/ipyvizzu/schema/#ipyvizzu.schema","title":"<code>ipyvizzu.schema</code>","text":"<p>A module for storing the data schema.</p>"},{"location":"reference/ipyvizzu/schema/#ipyvizzu.schema.NAMED_SCHEMA","title":"<code>ipyvizzu.schema.NAMED_SCHEMA: dict = {'type': 'array', 'items': {'type': 'object', 'properties': {'name': {'type': 'string'}, 'values': {'type': 'array', 'optional': True}, 'type': {'type': 'string', 'optional': True}}, 'required': ['name']}}</code>  <code>module-attribute</code>","text":"<p>Store the schema of the <code>series</code>, <code>dimensions</code> and <code>measures</code> data types.</p>"},{"location":"reference/ipyvizzu/schema/#ipyvizzu.schema.RECORD_SCHEMA","title":"<code>ipyvizzu.schema.RECORD_SCHEMA: dict = {'type': 'array', 'items': {'type': 'array'}}</code>  <code>module-attribute</code>","text":"<p>Store the schema of the <code>records</code> data type.</p>"},{"location":"reference/ipyvizzu/schema/#ipyvizzu.schema.DATA_SCHEMA","title":"<code>ipyvizzu.schema.DATA_SCHEMA: dict = {'type': 'object', 'oneOf': [{'properties': {'series': NAMED_SCHEMA, 'records': RECORD_SCHEMA, 'filter': {'optional': True}}, 'additionalProperties': False}, {'properties': {'dimensions': NAMED_SCHEMA, 'measures': NAMED_SCHEMA, 'filter': {'optional': True}}, 'additionalProperties': False, 'required': ['dimensions', 'measures']}]}</code>  <code>module-attribute</code>","text":"<p>Store the schema of the data animation.</p>"},{"location":"reference/ipyvizzu/template/","title":"Template","text":""},{"location":"reference/ipyvizzu/template/#ipyvizzu.template","title":"<code>ipyvizzu.template</code>","text":"<p>A module for storing the JavaScript templates.</p>"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.ChartProperty","title":"<code>ipyvizzu.template.ChartProperty</code>","text":"<p>         Bases: <code>Enum</code></p> <p>An enum class for storing chart properties.</p> Source code in <code>src/ipyvizzu/template.py</code> <pre><code>class ChartProperty(Enum):\n    \"\"\"An enum class for storing chart properties.\"\"\"\n\n    CONFIG = \"config\"\n    \"\"\"An enum key-value for storing config chart property.\"\"\"\n\n    STYLE = \"style\"\n    \"\"\"An enum key-value for storing style chart property.\"\"\"</code></pre>"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.ChartProperty.CONFIG","title":"<code>CONFIG = 'config'</code>  <code>class-attribute</code>","text":"<p>An enum key-value for storing config chart property.</p>"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.ChartProperty.STYLE","title":"<code>STYLE = 'style'</code>  <code>class-attribute</code>","text":"<p>An enum key-value for storing style chart property.</p>"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.DisplayTarget","title":"<code>ipyvizzu.template.DisplayTarget</code>","text":"<p>         Bases: <code>Enum</code></p> <p>An enum class for storing chart display options.</p> Source code in <code>src/ipyvizzu/template.py</code> <pre><code>class DisplayTarget(Enum):\n    \"\"\"An enum class for storing chart display options.\"\"\"\n\n    BEGIN = \"begin\"\n    \"\"\"Display all animation steps after the constructor's cell.\"\"\"\n\n    END = \"end\"\n    \"\"\"Display all animation steps after the last running cell.\"\"\"\n\n    ACTUAL = \"actual\"\n    \"\"\"Display the actual animation step after the currently running cell.\"\"\"\n\n    MANUAL = \"manual\"\n    \"\"\"Display all animation steps after calling a show method.\"\"\"</code></pre>"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.DisplayTarget.BEGIN","title":"<code>BEGIN = 'begin'</code>  <code>class-attribute</code>","text":"<p>Display all animation steps after the constructor's cell.</p>"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.DisplayTarget.END","title":"<code>END = 'end'</code>  <code>class-attribute</code>","text":"<p>Display all animation steps after the last running cell.</p>"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.DisplayTarget.ACTUAL","title":"<code>ACTUAL = 'actual'</code>  <code>class-attribute</code>","text":"<p>Display the actual animation step after the currently running cell.</p>"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.DisplayTarget.MANUAL","title":"<code>MANUAL = 'manual'</code>  <code>class-attribute</code>","text":"<p>Display all animation steps after calling a show method.</p>"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.DisplayTemplate","title":"<code>ipyvizzu.template.DisplayTemplate</code>","text":"<p>A class for storing JavaScript snippet templates.</p> Source code in <code>src/ipyvizzu/template.py</code> <pre><code>class DisplayTemplate:\n    \"\"\"A class for storing JavaScript snippet templates.\"\"\"\n\n    # pylint: disable=too-few-public-methods\n\n    IPYVIZZUJS: str = \"{ipyvizzujs}\"\n    \"\"\"ipyvizzu JavaScript class.\"\"\"\n\n    INIT: str = (\n        \"window.ipyvizzu.createChart(element, \"\n        + \"'{chart_id}', '{vizzu}', '{div_width}', '{div_height}');\"\n    )\n    \"\"\"Call createChart JavaScript method.\"\"\"\n\n    ANIMATE: str = (\n        \"window.ipyvizzu.animate(element, \"\n        + \"'{chart_id}', '{anim_id}', '{display_target}', {scroll}, \"\n        + \"lib =&gt; {{ return {chart_target} }}, {chart_anim_opts});\"\n    )\n    \"\"\"Call animate JavaScript method.\"\"\"\n\n    FEATURE: str = (\n        \"window.ipyvizzu.feature(element, '{chart_id}', '{name}', {enabled});\"\n    )\n    \"\"\"Call feature JavaScript method.\"\"\"\n\n    STORE: str = \"window.ipyvizzu.store(element, '{chart_id}', '{id}');\"\n    \"\"\"Call store JavaScript method.\"\"\"\n\n    SET_EVENT: str = (\n        \"window.ipyvizzu.setEvent(element, \"\n        + \"'{chart_id}', '{id}', '{event}', event =&gt; {{ {handler} }});\"\n    )\n    \"\"\"Call setEvent JavaScript method.\"\"\"\n\n    CLEAR_EVENT: str = (\n        \"window.ipyvizzu.clearEvent(element, '{chart_id}', '{id}', '{event}');\"\n    )\n    \"\"\"Call clearEvent JavaScript method.\"\"\"\n\n    LOG: str = \"window.ipyvizzu.log(element, '{chart_id}', '{chart_property}');\"\n    \"\"\"Call log JavaScript method.\"\"\"\n\n    CONTROL: str = \"window.ipyvizzu.control(element, '{method}', {params});\"\n    \"\"\"Call animation control JavaScript methods.\"\"\"\n\n    CLEAR_INHIBITSCROLL: str = (\n        \"if (window.IpyVizzu) { window.IpyVizzu.clearInhibitScroll(element); }\"\n    )\n    \"\"\"Call clearInhibitScroll JavaScript method if ipyvizzu JavaScript class exists.\"\"\"</code></pre>"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.DisplayTemplate.IPYVIZZUJS","title":"<code>IPYVIZZUJS: str = '{ipyvizzujs}'</code>  <code>class-attribute</code>","text":"<p>ipyvizzu JavaScript class.</p>"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.DisplayTemplate.INIT","title":"<code>INIT: str = 'window.ipyvizzu.createChart(element, ' + \"'{chart_id}', '{vizzu}', '{div_width}', '{div_height}');\"</code>  <code>class-attribute</code>","text":"<p>Call createChart JavaScript method.</p>"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.DisplayTemplate.ANIMATE","title":"<code>ANIMATE: str = 'window.ipyvizzu.animate(element, ' + \"'{chart_id}', '{anim_id}', '{display_target}', {scroll}, \" + 'lib =&gt; {{ return {chart_target} }}, {chart_anim_opts});'</code>  <code>class-attribute</code>","text":"<p>Call animate JavaScript method.</p>"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.DisplayTemplate.FEATURE","title":"<code>FEATURE: str = \"window.ipyvizzu.feature(element, '{chart_id}', '{name}', {enabled});\"</code>  <code>class-attribute</code>","text":"<p>Call feature JavaScript method.</p>"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.DisplayTemplate.STORE","title":"<code>STORE: str = \"window.ipyvizzu.store(element, '{chart_id}', '{id}');\"</code>  <code>class-attribute</code>","text":"<p>Call store JavaScript method.</p>"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.DisplayTemplate.SET_EVENT","title":"<code>SET_EVENT: str = 'window.ipyvizzu.setEvent(element, ' + \"'{chart_id}', '{id}', '{event}', event =&gt; {{ {handler} }});\"</code>  <code>class-attribute</code>","text":"<p>Call setEvent JavaScript method.</p>"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.DisplayTemplate.CLEAR_EVENT","title":"<code>CLEAR_EVENT: str = \"window.ipyvizzu.clearEvent(element, '{chart_id}', '{id}', '{event}');\"</code>  <code>class-attribute</code>","text":"<p>Call clearEvent JavaScript method.</p>"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.DisplayTemplate.LOG","title":"<code>LOG: str = \"window.ipyvizzu.log(element, '{chart_id}', '{chart_property}');\"</code>  <code>class-attribute</code>","text":"<p>Call log JavaScript method.</p>"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.DisplayTemplate.CONTROL","title":"<code>CONTROL: str = \"window.ipyvizzu.control(element, '{method}', {params});\"</code>  <code>class-attribute</code>","text":"<p>Call animation control JavaScript methods.</p>"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.DisplayTemplate.CLEAR_INHIBITSCROLL","title":"<code>CLEAR_INHIBITSCROLL: str = 'if (window.IpyVizzu) { window.IpyVizzu.clearInhibitScroll(element); }'</code>  <code>class-attribute</code>","text":"<p>Call clearInhibitScroll JavaScript method if ipyvizzu JavaScript class exists.</p>"},{"location":"reference/ipyvizzu/integrations/","title":"Integrations","text":""},{"location":"reference/ipyvizzu/integrations/#ipyvizzu.integrations","title":"<code>ipyvizzu.integrations</code>","text":"<p>A module for integrations.</p>"},{"location":"reference/ipyvizzu/integrations/#ipyvizzu.integrations.fugue","title":"<code>ipyvizzu.integrations.fugue</code>","text":"<p>A module for Fugue integration.</p> Example <p>Users should not instantiate this module directly. As long as you installed fugue and ipyvizzu, the extension is auto-registered.</p> <pre><code>from fugue import fsql\n\nfsql('''\nSELECT a, SUM(b) AS b FROM spark.table\nGROUP BY a ORDER BY b\n\nOUTPUT USING vizzu:bar(x=\"a\", y=\"b\", title=\"title\")\n''').run(spark_session)</code></pre>"},{"location":"reference/ipyvizzu/integrations/fugue/","title":"Fugue","text":""},{"location":"reference/ipyvizzu/integrations/fugue/#ipyvizzu.integrations.fugue","title":"<code>ipyvizzu.integrations.fugue</code>","text":"<p>A module for Fugue integration.</p> Example <p>Users should not instantiate this module directly. As long as you installed fugue and ipyvizzu, the extension is auto-registered.</p> <pre><code>from fugue import fsql\n\nfsql('''\nSELECT a, SUM(b) AS b FROM spark.table\nGROUP BY a ORDER BY b\n\nOUTPUT USING vizzu:bar(x=\"a\", y=\"b\", title=\"title\")\n''').run(spark_session)</code></pre>"},{"location":"showcases/","title":"Showcases","text":"<p> src='https://lib.vizzuhq.com/0.7/showcases/music.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/showcases/musicformats.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/showcases/nadal.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/showcases/sales.mp4' type='video/mp4'&gt;  src='https://lib.vizzuhq.com/0.7/showcases/titanic.mp4' type='video/mp4'&gt;</p>"},{"location":"showcases/music/","title":"Music formats","text":"<pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/showcases/music/music.csv\",\n    dtype={\"Year\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\n\nchart.animate(data)\n\nchart.animate(\n    Config(\n        {\n            \"x\": \"Year\",\n            \"y\": [\"Format\", \"Revenue [m$]\"],\n            \"color\": \"Format\",\n            \"geometry\": \"area\",\n            \"align\": \"center\",\n            \"title\": \"Music Revenue by Format 1973-2020\",\n        }\n    ),\n    Style(\n        {\n            \"plot\": {\n                \"xAxis\": {\"label\": {\"fontSize\": 9, \"angle\": 2.0}},\n                \"marker\": {\n                    \"colorPalette\": \"#b74c20FF #c47f58FF #1c9761FF\"\n                    + \" #ea4549FF #875792FF #3562b6FF\"\n                    + \" #ee7c34FF #efae3aFF\"\n                },\n            }\n        }\n    ),\n)\n\nchart.animate(\n    Config(\n        {\n            \"align\": \"stretch\",\n            \"title\": \"Music Revenue by Format 1973-2020(%)\",\n        }\n    ),\n    delay=1,\n)\n\nchart.animate(\n    Config(\n        {\n            \"align\": \"center\",\n            \"title\": \"Music Revenue by Format 1973-2020\",\n        }\n    ),\n    delay=1,\n)\n\nchart.animate(Config({\"split\": True}), delay=1)\n\nchart.animate(\n    Data.filter(\n        \"record.Format == 'Vinyl' ||record.Format == 'Streaming'\"\n    ),\n    Config({\"title\": \"Revenue of Vinyl &amp; Streaming 1973-2020\"}),\n    delay=1,\n)\n\nchart.animate(\n    Data.filter(None),\n    Config(\n        {\"title\": \"Music Revenue by Format 1973-2020\", \"split\": False}\n    ),\n    delay=1,\n)\n\nchart.animate(\n    Config(\n        {\n            \"x\": \"Year\",\n            \"y\": \"Revenue [m$]\",\n            \"noop\": \"Format\",\n            \"align\": \"none\",\n            \"geometry\": \"line\",\n        }\n    ),\n    delay=1,\n)</code></pre>"},{"location":"showcases/musicformats/","title":"Music formats (Year by Year)","text":"<pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style, DisplayTarget\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/showcases/musicformats/musicformats.csv\",\n    dtype={\"Year\": str},\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nconfig = {\n    \"channels\": {\n        \"y\": {\n            \"set\": [\"Format\"],\n        },\n        \"x\": {\"set\": [\"Revenue [m$]\"]},\n        \"label\": {\"set\": [\"Revenue [m$]\"]},\n        \"color\": {\"set\": [\"Format\"]},\n    },\n    \"sort\": \"byValue\",\n}\n\nstyle = Style(\n    {\n        \"plot\": {\n            \"paddingLeft\": 100,\n            \"paddingTop\": 25,\n            \"yAxis\": {\n                \"color\": \"#ffffff00\",\n                \"label\": {\"paddingRight\": 10},\n            },\n            \"xAxis\": {\n                \"title\": {\"color\": \"#ffffff00\"},\n                \"label\": {\n                    \"color\": \"#ffffff00\",\n                    \"numberFormat\": \"grouped\",\n                },\n            },\n            \"marker\": {\n                \"colorPalette\": \"#b74c20FF #c47f58FF #1c9761FF\"\n                + \" #ea4549FF #875792FF #3562b6FF\"\n                + \" #ee7c34FF #efae3aFF\"\n            },\n        },\n    }\n)\n\nchart = Chart(display=DisplayTarget.END)\n\nchart.animate(data, style)\n\nfor year in range(1973, 2021):\n    config[\"title\"] = f\"Music Revenue by Format - Year by Year {year}\"\n    chart.animate(\n        Data.filter(f\"parseInt(record.Year) == {year}\"),\n        Config(config),\n        duration=0.2,\n        x={\"easing\": \"linear\", \"delay\": 0},\n        y={\"delay\": 0},\n        show={\"delay\": 0},\n        hide={\"delay\": 0},\n        title={\"duration\": 0, \"delay\": 0},\n    )\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": {\"attach\": [\"Year\"]},\n                \"label\": {\"set\": None},\n            }\n        }\n    ),\n    duration=0.3,\n)\n\nchart.animate(\n    Data.filter(\"record.Year == '2020' || record.Year == '1972'\"),\n    Config({\"title\": \"Lets see the total of the last 47 years\"}),\n    duration=2,\n)\n\nchart.animate(Config({\"sort\": \"none\"}), delay=0, duration=2)\n\nfor year in reversed(range(1973, 2020)):\n    chart.animate(\n        Data.filter(\n            f\"parseInt(record.Year) &gt;= {year} || record.Year == '1972'\"\n        ),\n        Config({\"split\": True}),\n        Style({\"plot.xAxis.interlacing.color\": \"#ffffff\"}),\n        duration=0.005,\n    )\n\nchart.animate(\n    Data.filter(\"record.Year != '1972'\"),\n    Config({\"split\": False}),\n    duration=1.5,\n)\n\nchart.animate(\n    Config({\"channels\": {\"x\": {\"detach\": [\"Year\"]}}}), duration=0\n)\n\nchart.animate(\n    Config({\"channels\": {\"label\": {\"set\": [\"Revenue [m$]\"]}}}),\n    duration=0.1,\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": {\"attach\": [\"Year\"]},\n                \"label\": {\"detach\": [\"Revenue [m$]\"]},\n            }\n        }\n    ),\n    duration=1,\n)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": {\"set\": [\"Year\"]},\n                \"y\": {\n                    \"set\": [\"Revenue [m$]\", \"Format\"],\n                    \"range\": {\"min\": None, \"max\": None},\n                },\n                \"color\": {\"set\": [\"Format\"]},\n            },\n            \"title\": \"Music Revenue by Format in the USA 1973 - 2020\",\n            \"split\": True,\n        }\n    ),\n    Style(\n        {\n            \"plot\": {\n                \"paddingLeft\": 7.5,\n                \"paddingTop\": 25,\n                \"xAxis\": {\n                    \"label\": {\n                        \"fontSize\": 9,\n                        \"angle\": 2.0,\n                        \"color\": \"#8e8e8e\",\n                    }\n                },\n                \"yAxis\": {\n                    \"interlacing\": {\"color\": \"#ffffff00\"},\n                    \"title\": {\"color\": \"#ffffff00\"},\n                    \"label\": {\"color\": \"#ffffff00\"},\n                },\n            }\n        }\n    ),\n    duration=2,\n)\n\nchart.animate(Config({\"geometry\": \"area\"}), duration=1)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": {\"set\": [\"Year\"]},\n                \"y\": {\"range\": {\"max\": \"110%\"}},\n            },\n            \"align\": \"center\",\n            \"split\": False,\n        }\n    ),\n    Style({\"plot.marker.borderWidth\": 1}),\n    duration=1,\n)</code></pre>"},{"location":"showcases/nadal/","title":"Rafael Nadal's matches","text":"<pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style, DisplayTarget\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/showcases/nadal/nadal.csv\",\n    dtype={\n        \"Year\": str,\n        \"Round\": str,\n        \"Round2\": str,\n        \"Order_GS\": str,\n        \"Order_all\": str,\n        \"Total_GS\": str,\n        \"Top\": str,\n    },\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart(display=DisplayTarget.END)\nchart.animate(data)\n\nchart.animate(\n    data.filter('record.Year != \"Total\"'),\n    Config(\n        {\n            \"x\": \"Year\",\n            \"y\": \"Round2\",\n            \"color\": {\n                \"set\": \"Result_Num\",\n                \"range\": {\"min\": -1, \"max\": 1},\n            },\n            \"size\": None,\n            \"orientation\": \"horizontal\",\n            \"geometry\": \"rectangle\",\n            \"title\": \"Rafael Nadal's matches at the Roland Garros\",\n            \"legend\": \"size\",\n        }\n    ),\n    Style(\n        {\n            \"title\": {\n                \"paddingTop\": 50,\n                \"paddingBottom\": 0,\n            },\n            \"plot\": {\n                \"marker\": {\n                    \"borderWidth\": 3,\n                    \"borderOpacity\": 0,\n                    \"colorPalette\": \"#1EB55FFF #AD0000FF #AEAEAEFF\",\n                    \"colorGradient\": \"#AEAEAEFF 0.000000, #AD0000FF 0.500000, #1EB55FFF 1.000000\",\n                },\n                \"paddingLeft\": 20,\n                \"paddingBottom\": \"3.5em\",\n                \"paddingTop\": \"2.5em\",\n                \"xAxis\": {\"interlacing\": {\"color\": \"#ffffff00\"}},\n                \"yAxis\": {\"label\": {\"fontSize\": \"120%\"}},\n            },\n            \"logo\": {\"width\": 100},\n        }\n    ),\n)\n\nchart.animate(\n    Config(\n        {\"lightness\": \"Won\", \"title\": \"Won 112 out of 116 (96.5%)\"}\n    ),\n    Style(\n        {\"plot\": {\"marker\": {\"maxLightness\": 0, \"minLightness\": 0.8}}}\n    ),\n    delay=4,\n)\n\nchart.animate(\n    Config(\n        {\"lightness\": \"Lost\", \"title\": \"Lost 3 times, retired once\"}\n    ),\n    delay=4,\n)\n\nchart.animate(\n    Config({\"lightness\": None, \"title\": \"\"}),\n    Style(\n        {\n            \"plot\": {\n                \"marker\": {\"maxLightness\": None, \"minLightness\": None}\n            }\n        }\n    ),\n    delay=4,\n)\n\nchart.animate(\n    Config(\n        {\n            \"lightness\": \"3SetWin\",\n            \"title\": \"90 wins (80%) in straight sets\",\n        }\n    ),\n    Style(\n        {\"plot\": {\"marker\": {\"maxLightness\": 0, \"minLightness\": 0.8}}}\n    ),\n)\n\nchart.animate(\n    Config(\n        {\n            \"lightness\": \"Straightwin\",\n            \"title\": \"Won 4 titles without dropping a set\",\n        }\n    ),\n    delay=3,\n)\n\nchart.animate(\n    Config({\"lightness\": None, \"title\": \"\"}),\n    Style(\n        {\n            \"plot\": {\n                \"marker\": {\"maxLightness\": None, \"minLightness\": None}\n            }\n        }\n    ),\n    delay=4,\n)\n\nchart.animate(\n    Config(\n        {\n            \"lightness\": \"Novak\",\n            \"title\": \"Played the most times against Djokovic - 10 matches\",\n        }\n    ),\n    Style(\n        {\"plot\": {\"marker\": {\"maxLightness\": 0, \"minLightness\": 0.8}}}\n    ),\n)\n\nchart.animate(\n    Config(\n        {\n            \"lightness\": \"Roger\",\n            \"title\": \"Second on this list is Federer - with 6 encounters\",\n        }\n    ),\n    delay=4,\n)\n\nchart.animate(\n    Config(\n        {\n            \"lightness\": \"Final\",\n            \"title\": \"Rafa won all of his 14 finals\",\n        }\n    ),\n    delay=4,\n)\n\nchart.animate(\n    data.filter('record.Year != \"Total\" &amp;&amp; record.Round == \"F\"'),\n    Config(\n        {\n            \"y\": {\"set\": \"Round2\", \"range\": {\"max\": 1, \"min\": -5}},\n            \"x\": \"Count\",\n            \"lightness\": None,\n            \"noop\": \"Year\",\n            \"label\": None,\n            \"title\": \"\",\n        }\n    ),\n    Style(\n        {\n            \"plot\": {\n                \"marker\": {\n                    \"borderWidth\": 0,\n                    \"colorPalette\": \"#C6652A #CDA02E #47B0FF #329564 #5C88F2 #91A9B5 #DBC4B1\",\n                    \"maxLightness\": None,\n                    \"minLightness\": None,\n                    \"label\": {\n                        \"position\": \"center\",\n                        \"format\": \"dimensionsFirst\",\n                    },\n                },\n                \"xAxis\": {\n                    \"title\": {\"color\": \"#ffffff00\"},\n                    \"label\": {\"color\": \"#ffffff00\"},\n                    \"interlacing\": {\"color\": \"#ffffff00\"},\n                },\n                \"yAxis\": {\n                    \"title\": {\"color\": \"#ffffff00\"},\n                    \"label\": {\"color\": \"#ffffff00\", \"fontSize\": None},\n                },\n            }\n        }\n    ),\n    delay=3,\n)\n\nchart.animate(\n    data.filter(\n        \"\"\"\n        record.Year == \"Total\" &amp;&amp;\n        record.Tournament == \"Roland Garros\" &amp;&amp;\n        record.Player == \"Nadal\"\n        \"\"\"\n    ),\n    Config(\n        {\n            \"noop\": [\"Level\", \"Round2\"],\n            \"label\": [\"Player\", \"Tournament\", \"Count\"],\n            \"y\": {\"set\": [\"Player\", \"Tournament\"]},\n        }\n    ),\n    duration=0,\n)\n\nchart.animate(Config({\"noop\": \"Level\"}), duration=0)\n\nchart.animate(\n    data.filter(\n        'record.Year == \"Total\" &amp;&amp; record.Round == \"GS\" &amp;&amp; record.Top == \"1\"'\n    ),\n    Config(\n        {\n            \"y\": {\n                \"set\": [\"Player\", \"Tournament\", \"Level\"],\n                \"range\": {\"max\": None, \"min\": None},\n            },\n            \"title\": \"Rafa won the same Grand Slam title the most times\",\n            \"color\": \"Level\",\n            \"legend\": \"color\",\n            \"noop\": None,\n            \"sort\": \"byValue\",\n        }\n    ),\n)\n\nchart.animate(\n    data.filter('record.Year == \"Total\" &amp;&amp; record.Top == \"1\"'),\n    Config(\n        {\n            \"y\": {\n                \"set\": [\"Player\", \"Tournament\", \"Level\"],\n                \"range\": {\"max\": 19, \"min\": 7},\n            },\n            \"x\": [\"Count\"],\n            \"title\": \"Winning the same ATP title - Rafa is 1st, 2nd, 3rd &amp; 4th!\",\n        }\n    ),\n    delay=5,\n)\n\nchart.animate(\n    data.filter(\n        'record.Year == \"Total\" &amp;&amp; record.Round == \"GS\" &amp;&amp; record.Top == \"1\"'\n    ),\n    Config(\n        {\n            \"y\": {\n                \"set\": [\"Player\", \"Tournament\", \"Level\"],\n                \"range\": {\"max\": None, \"min\": None},\n            },\n            \"x\": [\"Count\"],\n            \"title\": \"\",\n            \"color\": \"Level\",\n        }\n    ),\n    delay=5,\n)\n\nchart.animate(Config({\"x\": [\"Count\", \"Total_GS\"], \"label\": \"Player\"}))\n\nchart.animate(\n    data.filter('record.Year == \"Total\" &amp;&amp; record.Round == \"GS\"'),\n    Config(\n        {\n            \"y\": {\n                \"set\": [\"Player\"],\n                \"range\": {\"max\": None, \"min\": None},\n            },\n            \"x\": [\"Count\", \"Tournament\", \"Level\", \"Total_GS\"],\n            \"title\": \"Rafa also leads in the number of total Grand Slams won\",\n        }\n    ),\n)\n\nchart.animate(\n    Config({\"label\": [\"Total_GS\"]}),\n    Style(\n        {\n            \"plot\": {\n                \"marker\": {\n                    \"label\": {\n                        \"position\": \"right\",\n                        \"filter\": \"color(#666666FF)\",\n                    }\n                }\n            }\n        }\n    ),\n)</code></pre>"},{"location":"showcases/sales/","title":"Sales","text":"<pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/showcases/sales/sales.csv\"\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\n\nchart.animate(data)\n\nchart.animate(\n    Data.filter(\"record['Product'] == 'Shoes'\"),\n    Config(\n        {\n            \"x\": \"Region\",\n            \"y\": [\"Sales\", \"Product\"],\n            \"label\": \"Sales\",\n            \"color\": \"Product\",\n            \"title\": \"Sales of Shoes\",\n        }\n    ),\n)\n\nchart.animate(\n    Data.filter(\n        \"record['Product'] == 'Shoes' || record['Product'] == 'Handbags'\"\n    ),\n    Config({\"title\": \"Sales of Shoes &amp; Handbags\"}),\n    delay=1,\n)\n\nchart.animate(\n    Data.filter(\"record['Product'] != 'Accessories'\"),\n    Config({\"title\": \"Sales of Shoes, Handbags &amp; Gloves\"}),\n    delay=1,\n)\n\nchart.animate(\n    Data.filter(None),\n    Config({\"title\": \"Sales of All Products\"}),\n    delay=1,\n)\n\nchart.animate(\n    Config(\n        {\n            \"y\": [\"Revenue [$]\", \"Product\"],\n            \"label\": \"Revenue [$]\",\n            \"title\": \"Revenue of All Products\",\n        }\n    ),\n    delay=1,\n)\n\nchart.animate(\n    Config({\"x\": [\"Region\", \"Revenue [$]\"], \"y\": \"Product\"}), delay=2\n)\n\nchart.animate(Config({\"x\": \"Revenue [$]\", \"y\": \"Product\"}))\n\nchart.animate(\n    Config({\"coordSystem\": \"polar\", \"sort\": \"byValue\"}), delay=1\n)</code></pre>"},{"location":"showcases/titanic/","title":"Passengers of the Titanic","text":"<pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/showcases/titanic/titanic.csv\"\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\n\nchart.animate(data)\n\nchart.animate(\n    Config(\n        {\n            \"x\": \"Count\",\n            \"y\": \"Sex\",\n            \"label\": \"Count\",\n            \"title\": \"Passengers of the Titanic\",\n        }\n    )\n)\nchart.animate(\n    Config(\n        {\n            \"x\": [\"Count\", \"Survived\"],\n            \"label\": [\"Count\", \"Survived\"],\n            \"color\": \"Survived\",\n        }\n    )\n)\nchart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]}))\n\nchart.animate(\n    Config(\n        {\n            \"x\": [\"Count\", \"Sex\", \"Survived\"],\n            \"y\": None,\n            \"coordSystem\": \"polar\",\n        }\n    )\n)</code></pre>"},{"location":"tutorial/","title":"Tutorial","text":"<p>This is the tutorial of <code>ipyvizzu</code> - the <code>Python</code> integration of the free, open-source <code>JavaScript</code>/<code>C++</code> library <code>Vizzu</code>. You can create animated charts, data stories, interactive reports and dashboards with it in Jupyter and similar notebooks and app building platforms.</p> <p>This is an excellent starting point to get acquainted with <code>ipyvizzu</code>, as it walks you through the installation of the library, introduces the logic it employs and the different settings to control how your animated charts look and behave.</p> <p>The tutorial is organized into chapters that introduce the concept and the details of <code>ipyvizzu</code> step-by-step. You can find the list of chapters at the end of this page and in the menu.</p>"},{"location":"tutorial/#basic-logic-of-ipyvizzu","title":"Basic logic of ipyvizzu","text":"<p>The foundation of an <code>ipyvizzu</code> chart is the animation. The animation contains states describing the chart's configuration, such as the data series on the chart, the coordinate system, labels, titles, etc. A static chart is the result of a single animation state. When there are more states, <code>ipyvizzu</code> automatically transitions between these. The animate method initiates the animation into a new state by describing the new chart and how <code>ipyvizzu</code> should transition to it.</p> <p></p> <p>The animate method has non-keyword and keyword arguments. The non-keyword arguments sets the chart, and the (optional) keyword arguments determines how <code>ipyvizzu</code> should animate to that state.</p> <p>There are three types of non-keyword arguments:</p> <ul> <li><code>data</code>: this is where you add the data that you want to visualize</li> <li><code>config</code>: this is where you can add or remove series to the chart and set   general settings like the chart title, the geometry, the alignment etc.</li> <li><code>style</code>: this is where you can set how your chart looks</li> </ul>"},{"location":"tutorial/#installation","title":"Installation","text":"<pre><code>pip install ipyvizzu</code></pre> <p>Visit Installation chapter for more options and details.</p>"},{"location":"tutorial/#usage","title":"Usage","text":"<p>Note</p> <p><code>ipyvizzu</code> generates <code>JavaScript</code> code, then the <code>vizzu</code> calls are evaluated by the browser. Therefore if a blank space appears where the chart should be, check the console log of your browser. <code>vizzu</code> reports its errors there. If you get a <code>vizzu</code> error in your browser console that is not straightforward to understand, please clean your browser cache first, because it might be caused by an older version being stored in your browser.</p> <ul> <li>Chart settings</li> <li>Data</li> <li>Axes, title, tooltip</li> <li>Geometry</li> <li>Channels &amp; legend</li> <li>Group/stack</li> <li>Sorting</li> <li>Align &amp; range</li> <li>Changing dimensions</li> <li>Orientation, split &amp; polar</li> <li>Filtering &amp; adding new records</li> <li>Without coordinates &amp; noop channel</li> <li>Color palette &amp; fonts</li> <li>Chart layout</li> <li>Animation options</li> <li>Animation control &amp; keyframes</li> <li>Events</li> <li>Shorthands &amp; Store</li> <li>Chart presets</li> <li>Style</li> </ul>"},{"location":"tutorial/align_range/","title":"Align &amp; range","text":"<p><code>ipyvizzu</code> offers different options to align your chart elements and to set the range of values shown on the axes. Alignment can be used to create charts like a stream chart where the elements are vertically centered. A good example for using range is when you fix the y-axis so that it would not adapt to the data being shown.</p> <p>Centered alignment. The effect of this parameter depends on the orientation of the chart. For example, on a column chart, elements will be vertically centered, whereas on a bar chart, horizontally.</p> <p>Info</p> <p>In the first example, the y-axis labels are hidden because they don't properly represent the values shown on the column chart anymore, as the chart elements float off the x-axis.</p> Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/music_data.csv\"\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\n\nchart.animate(data)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"y\": {\"set\": [\"Popularity\", \"Kinds\"]},\n                \"x\": {\"set\": [\"Genres\"]},\n                \"label\": {\"attach\": [\"Popularity\"]},\n            },\n            \"color\": {\"attach\": [\"Kinds\"]},\n        }\n    )\n)</code></pre> <p>Change align and configures the y axis labels to disappear during the animation.</p> <pre><code>chart.animate(\n    Config({\"align\": \"center\", \"channels\": {\"y\": {\"labels\": False}}})\n)</code></pre> <p>Stretched alignment. This way the elements will proportionally fill the entire plot area, effectively showing proportions in stacked charts. This is why the scale will also switch from values to percentages when used.</p> <pre><code>chart.animate(Config({\"align\": \"stretch\"}))</code></pre> <p>Getting back to the default alignment.</p> <pre><code>chart.animate(\n    Config({\"align\": \"none\", \"channels\": {\"y\": {\"labels\": True}}})\n)</code></pre> <p>You can set the range of an axis by setting the minimum and maximum values of it. Both parameters are optional so that you can set only one of those, and you either set specific values or a relative value by adding the <code>%</code> sign. In this example, we set the range of the y-axis in a way that the max value is <code>150%</code> of the biggest element\u2019s value.</p> <pre><code>chart.animate(Config({\"channels\": {\"y\": {\"range\": {\"max\": \"150%\"}}}}))</code></pre> <p>You can also set the range for an axis with a dimension on it. You can even use this feature to filter certain elements, just like in the following example.</p> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": {\n                    \"range\": {\n                        \"min\": -2,\n                        \"max\": 3,\n                    }\n                }\n            }\n        }\n    )\n)</code></pre> <p>Ranges have certain defaults depending on the chart's configuration, based on common data viz guidelines because we wanted to make it easy for you to create sleek charts. For example, in the cartesian coordinate system, the range will be automatically set to the <code>max:110%</code> for an axis with a measure on it. Polar coordinates work differently, as you can see for yourself in the Orientation, split &amp; polar chapter.</p> <p>Whenever you want to set your ranges back to the default value, just set them to <code>'auto'</code>.</p> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"y\": {\n                    \"range\": {\"max\": \"auto\"},\n                },\n                \"x\": {\n                    \"range\": {\n                        \"min\": \"auto\",\n                        \"max\": \"auto\",\n                    }\n                },\n            }\n        }\n    )\n)</code></pre>"},{"location":"tutorial/animation_control_keyframes/","title":"Animation control &amp; keyframes","text":"<p>Using the <code>control</code> property provided by the chart you can play, pause, stop, seek or reverse the animations.</p> <p>In this step, we seek forward to <code>50%</code> of progress after the animation starts.</p> Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Keyframe\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/music_data.csv\"\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\n\nchart.animate(data)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"y\": {\"set\": [\"Popularity\", \"Kinds\"]},\n                \"x\": {\"set\": [\"Genres\"]},\n                \"label\": {\"attach\": [\"Popularity\"]},\n            },\n            \"color\": {\"attach\": [\"Kinds\"]},\n        }\n    )\n)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": {\"attach\": [\"Kinds\"]},\n                \"y\": {\"detach\": [\"Kinds\"]},\n            },\n        }\n    )\n)\nchart.control.seek(\"50%\")</code></pre> <p>You can also control the initial position and play state of the animation through the keyword arguments of the animate method.</p> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": {\"detach\": [\"Kinds\"]},\n                \"y\": {\"attach\": [\"Kinds\"]},\n            },\n        }\n    ),\n    playState=\"paused\",\n    position=0.5,\n)\nchart.control.play()</code></pre> <p>You may want to control multiple animations as a single one.</p> <p>You can do this by boundling them together and passing them to a single <code>animate</code> call. To do this, you need to create a <code>Keyframe</code> object from the arguments of every single <code>animate</code> call and then passing them into a single <code>animate</code> call.</p> <pre><code>chart.animate(\n    Keyframe(\n        Config(\n            {\n                \"channels\": {\n                    \"x\": {\"attach\": [\"Kinds\"]},\n                    \"y\": {\"detach\": [\"Kinds\"]},\n                },\n            }\n        ),\n        duration=0.5,\n    ),\n    Keyframe(\n        Config(\n            {\n                \"channels\": {\n                    \"x\": {\"detach\": [\"Kinds\"]},\n                    \"y\": {\"attach\": [\"Kinds\"]},\n                }\n            }\n        ),\n        duration=1,\n    ),\n)</code></pre>"},{"location":"tutorial/animation_options/","title":"Animation options","text":"<p>In <code>ipyvizzu</code> you can set the timing and duration of the animation. You can do this either for the whole animation, or for animation groups such as the elements moving along the x-axis or the y-axis, appearing or disappearing or when the coordinate system is changed.</p> <p>Let\u2019s see first a simple example when a stacked column chart is grouped using the default animation options.</p> Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/music_data.csv\"\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\n\nchart.animate(data)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"y\": {\"set\": [\"Popularity\", \"Kinds\"]},\n                \"x\": {\"set\": [\"Genres\"]},\n            },\n            \"label\": {\"attach\": [\"Popularity\"]},\n            \"color\": {\"set\": [\"Kinds\"]},\n        }\n    )\n)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"y\": {\"detach\": [\"Kinds\"]},\n                \"x\": {\"attach\": [\"Kinds\"]},\n            }\n        }\n    )\n)</code></pre> <p>We stack the columns, still with the default options.</p> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": {\"detach\": [\"Kinds\"]},\n                \"y\": {\"attach\": [\"Kinds\"]},\n            }\n        }\n    )\n)</code></pre> <p>Now we change the animation settings for the elements moving along the y-axis and also the change in styles, more specifically when the labels on the markers move from the center of the chart elements to the top of them.</p> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"y\": {\"detach\": [\"Kinds\"]},\n                \"x\": {\"attach\": [\"Kinds\"]},\n            }\n        }\n    ),\n    y={\"duration\": 2, \"delay\": 2},\n    style={\"duration\": 2, \"delay\": 4},\n)</code></pre> <p>This is an example of changing the settings for the whole animation at once.</p> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": {\"detach\": [\"Kinds\"]},\n                \"y\": {\"attach\": [\"Kinds\"]},\n            }\n        }\n    ),\n    duration=1,\n    easing=\"linear\",\n)</code></pre> <p>When the two settings are combined, <code>ipyvizzu</code> will use the general animation options and spread the unique settings for specific groups proportionally. This is why you can see the same animation as two steps before but happening much quicker since the duration of the whole animation is set to 1 second.</p> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"y\": {\"detach\": [\"Kinds\"]},\n                \"x\": {\"attach\": [\"Kinds\"]},\n            }\n        }\n    ),\n    duration=1,\n    easing=\"linear\",\n    y={\"duration\": 2, \"delay\": 2},\n    style={\"duration\": 2, \"delay\": 4},\n)</code></pre> <p>The default unit for animation is seconds, but you can set other units.</p> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": {\"detach\": [\"Kinds\"]},\n                \"y\": {\"attach\": [\"Kinds\"]},\n            }\n        }\n    ),\n    duration=\"500ms\",\n)</code></pre>"},{"location":"tutorial/axes_title_tooltip/","title":"Axes, title, tooltip","text":"<p>To build a chart with <code>ipyvizzu</code>, you have to add data series to the channels. Channels will be explained more in-depth later, but for now, think of channels as different elements of the chart we can bind data to. The simplest and most often used channels are the x and y-axes.</p> <p>The first step is to create a simple column chart, adding one of the dimensions from the data set we added in the previous chapter (<code>Genres</code>) to the x-axis and the measure (<code>Popularity</code>) to the y-axis using the set property.</p> Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, ChartProperty, Data, Config\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/music_data.csv\"\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\n\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"y\": {\"set\": [\"Popularity\"]},\n                \"x\": {\"set\": [\"Genres\"]},\n            }\n        }\n    )\n)</code></pre> <p>In the next step, the chart is rearranged by putting both series on the y-axis using once again the set property, resulting in a single column chart. <code>ipyvizzu</code> automatically animates between the initial state and this one.</p> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"y\": {\"set\": [\"Popularity\", \"Genres\"]},\n                \"x\": {\"set\": None},\n            }\n        }\n    )\n)</code></pre> <p>Instead of set, you can use attach and detach to add or remove series to/from the channels.</p> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"y\": {\"detach\": [\"Popularity\"]},\n                \"x\": {\"attach\": [\"Popularity\"]},\n            }\n        }\n    )\n)</code></pre> <p>Using attach &amp; detach makes it easier to build your animated charts step-by-step, however you either have to keep in mind what you had on which channel in the previous step or add the following code to access the actual configuration of the chart.</p> <p>Add the following code to log the actual configuration of the chart in the browser console.</p> <pre><code>chart.log(ChartProperty.CONFIG)</code></pre> <p>Setting the chart title with the title command.</p> <pre><code>chart.animate(Config({\"title\": \"My first chart\"}))</code></pre> <p>Switching on the tooltips that appear on the chart elements when the user hovers over them with their mouse by adding the (<code>\"tooltip\"</code>, <code>True</code>) parameters to the <code>chart.feature</code> method.</p> <pre><code>chart.feature(\"tooltip\", True)</code></pre>"},{"location":"tutorial/changing_dimensions/","title":"Changing dimensions","text":"<p>The simplest of dimension-changing operations are aggregate and drill-down. These features basically mean that you either add or remove an additional dimension to/from an axis or another channel.</p> <p>Let\u2019s aggregate together the elements by getting the <code>Genres</code> dimension off the x-axis. By taking it off the chart, only one chart element remains for every color, and <code>ipyvizzu</code> automatically calculates and shows the aggregate value of the elements.</p> Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/music_data.csv\"\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\n\nchart.animate(data)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"y\": {\"set\": [\"Popularity\", \"Kinds\"]},\n                \"x\": {\"set\": [\"Genres\"]},\n                \"label\": {\"attach\": [\"Popularity\"]},\n            },\n            \"color\": {\"attach\": [\"Kinds\"]},\n        }\n    )\n)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": {\"set\": None},\n            }\n        }\n    )\n)</code></pre> <p>When you simultaneously add and remove dimensions, the partitioning of the underlying data to markers on the chart changes. There are multiple ways to transition through these kinds of operations using.</p> <p>By default, the markers are aggregated to the common base of the two states, then drilled down to the target state, as shown below.</p> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"y\": {\n                    \"detach\": [\"Kinds\"],\n                },\n                \"x\": {\n                    \"set\": [\"Genres\"],\n                },\n                \"color\": {\n                    \"set\": None,\n                },\n            }\n        }\n    )\n)</code></pre> <p>You can change this setting and drill down to the union of the two states instead, and then aggregate to the target state:</p> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": {\n                    \"detach\": [\"Genres\"],\n                    \"attach\": [\"Kinds\"],\n                },\n            }\n        }\n    ),\n    regroupStrategy=\"drilldown\",\n)</code></pre> <p>There is also the option to fade the chart between the states:</p> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": {\n                    \"detach\": [\"Kinds\"],\n                    \"attach\": [\"Genres\"],\n                },\n            }\n        }\n    ),\n    regroupStrategy=\"fade\",\n)</code></pre> <p>To simply drill down, the same dimension is put back on the y-axis.</p> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"y\": {\n                    \"attach\": [\"Kinds\"],\n                },\n                \"color\": {\n                    \"set\": [\"Kinds\"],\n                },\n            }\n        }\n    )\n)</code></pre>"},{"location":"tutorial/channels_legend/","title":"Channels &amp; legend","text":"<p>Besides the x-axis and the y-axis, there are five more channels in <code>ipyvizzu</code> you can use to visualize your data. Similarly to the axes you can put any number of dimensions and/or one measure to a channel. In the following example the four most commonly used channels are shown. The fifth, <code>noop</code> channel is introduced later in the Without coordinates &amp; noop channel chapter.</p> <p>Data on the label channel will be written on the markers on the chart. <code>ipyvizzu</code> automatically determines the best way to position these labels, but you can set them differently with the <code>Style</code> object introduced in the Color palette &amp; fonts chapter.</p> Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/music_data.csv\"\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\n\nchart.animate(data)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"y\": {\"set\": [\"Popularity\"]},\n                \"x\": {\"set\": [\"Genres\"]},\n            },\n        }\n    )\n)</code></pre> <pre><code>chart.animate(\n    Config({\"channels\": {\"label\": {\"attach\": [\"Popularity\"]}}})\n)</code></pre> <p>The <code>lightness</code> channel sets the lightness of the markers. In this case the same measure (<code>Popularity</code>) is added to it that is on the y-axis, meaning that columns\u2019 height and lightness represent the same values. The legend for the <code>lightness</code> channel is turned on using the <code>legend</code> property.</p> <p>Info</p> <p>This is an example when we explicitly instruct <code>ipyvizzu</code> to show the legend. By default <code>ipyvizzu</code> automatically shows/hides the legend when it's necessary. You can also turn it off with the <code>legend</code>: <code>None</code> command or set back to automatic mode with <code>legend</code>: <code>'auto'</code>.</p> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\"lightness\": {\"attach\": [\"Popularity\"]}},\n            \"legend\": \"lightness\",\n        }\n    )\n)</code></pre> <p>The <code>color</code> channel sets the color of the markers. The same dimension (<code>Genres</code>) is put on it that is on the x-axis resulting in each bar having a different color. If a measure is put on the <code>color</code> channel, a color range will be used.</p> <p>Info</p> <p>The value on the <code>lightness</code> channel is removed in this step as it doesn\u2019t make sense to use it together with the <code>color</code> channel in this case.</p> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\"color\": {\"attach\": [\"Genres\"]}},\n            \"legend\": \"color\",\n        }\n    )\n)</code></pre> <p>The <code>size</code> channel sets the size of the markers if the geometry is circle - where size sets the radius of the circles - or line - where size determines line width. It is ignored when using rectangle or area geometry. This is why we change the geometry to circle in the example.</p> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\"size\": {\"set\": [\"Popularity\"]}},\n            \"geometry\": \"circle\",\n        }\n    )\n)</code></pre>"},{"location":"tutorial/chart_layout/","title":"Chart layout","text":"<p><code>ipyvizzu</code> has three separate parts of the chart layout: the plot area that contains the chart, the title containing the chart title on the top, and the legend on the left. <code>ipyvizzu</code> automatically hides the legend when it\u2019s unnecessary to show it. When the title is not in use, <code>ipyvizzu</code> hides that part automatically as well. Each of these parts have their own paddings on all four sides that adjust to the chart size by default, but can also be set with the appropriate settings in the <code>Style</code> object. All size parameters can be set in pixel, percentage and em.</p> <p>We add different background colors to the parts of the layout to show how they are aligned.</p> Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/music_data.csv\"\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\n\nchart.animate(data)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"y\": {\"set\": [\"Popularity\", \"Kinds\"]},\n                \"x\": {\"set\": [\"Genres\"]},\n            },\n            \"label\": {\"attach\": [\"Popularity\"]},\n            \"color\": {\"set\": [\"Kinds\"]},\n        }\n    )\n)</code></pre> <pre><code>chart.animate(\n    Style(\n        {\n            \"title\": {\"backgroundColor\": \"#A0A0A0\"},\n            \"plot\": {\"backgroundColor\": \"#D2D2D2\"},\n            \"legend\": {\"backgroundColor\": \"#808080\"},\n        }\n    )\n)</code></pre> <p>Setting the width of the legend.</p> <pre><code>chart.animate(Style({\"legend\": {\"width\": 50}}))</code></pre> <p>Setting the legend width back to its default value.</p> <pre><code>chart.animate(Style({\"legend\": {\"width\": None}}))</code></pre> <p>Changing the title paddings. By default, the title is horizontally centered above the chart. In this example, we set the title\u2019s left padding, resulting in the text moving to the right.</p> <pre><code>chart.animate(\n    Style(\n        {\n            \"title\": {\n                \"paddingTop\": 20,\n                \"paddingBottom\": 20,\n                \"paddingLeft\": 200,\n            }\n        }\n    )\n)</code></pre> <p>Setting the title paddings back to their default values.</p> <pre><code>chart.animate(\n    Style(\n        {\n            \"title\": {\n                \"paddingTop\": None,\n                \"paddingBottom\": None,\n                \"paddingLeft\": None,\n            }\n        }\n    )\n)</code></pre> <p>Changing the paddings of the plot area to position the plot. The texts on the axes are drawn on the padding of the plot and not the plot itself.</p> <pre><code>chart.animate(\n    Style({\"plot\": {\"paddingLeft\": 100, \"paddingRight\": 100}})\n)</code></pre> <p>Setting the plot paddings back to their default values.</p> <pre><code>chart.animate(\n    Style({\"plot\": {\"paddingLeft\": None, \"paddingRight\": None}})\n)</code></pre>"},{"location":"tutorial/chart_presets/","title":"Chart presets","text":"<p>Throughout this tutorial, we have shown you how to create charts with <code>ipyvizzu</code> using a chart type-agnostic, uniform way without being limited to a predefined set of available charts. But sometimes, when you know the chart type you want to use, it is easier to start with that and skip configuring it from scratch. For this reason, <code>ipyvizzu</code> provides preset chart configurations for many known chart types. See the preset gallery for all available presets.</p> <p>Use the preset methods of the <code>Config</code> class to build a chart based on a preset. These methods return chart configuration objects that can be passed to the <code>animate</code> method. For example, this is how to create a stacked bubble chart using its preset.</p> Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/music_data.csv\"\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\n\nchart.animate(data)</code></pre> <pre><code>chart.animate(\n    Config.stackedBubble(\n        {\n            \"size\": \"Popularity\",\n            \"color\": \"Kinds\",\n            \"stackedBy\": \"Genres\",\n        }\n    )\n)</code></pre> <p>Presets will override all channels, removing all previously set series from the chart. Using a preset will also explicitly set most chart configuration parameters. Exceptions to this are the <code>legend</code>, <code>title</code>, <code>reverse</code>, and <code>sort</code> properties that can be set while using a preset. Here's an example of a preset where chart elements are sorted by value.</p> <pre><code>chart.animate(\n    Config.radialStackedBar(\n        {\n            \"angle\": \"Popularity\",\n            \"radius\": \"Genres\",\n            \"stackedBy\": \"Kinds\",\n            \"sort\": \"byValue\",\n        }\n    )\n)</code></pre> <p>As you will see, the preset doesn't override the previously configured sorting and wouldn't affect the rest of the chart config parameters mentioned above either.</p> <p>Presets will affect chart configuration, but you might also want to set the style or the underlying data.</p> <pre><code>chart.animate(\n    Config.radialBar(\n        {\n            \"angle\": \"Popularity\",\n            \"radius\": \"Genres\",\n        }\n    ),\n    Style({\"plot.xAxis.interlacing.color\": \"#ffffff00\"}),\n)</code></pre>"},{"location":"tutorial/chart_settings/","title":"Chart settings","text":"<p>You can change the behaviour of the chart with the constructor arguments and the chart properties detailed below.</p>"},{"location":"tutorial/chart_settings/#constructor-arguments","title":"Constructor arguments","text":""},{"location":"tutorial/chart_settings/#chart-size","title":"Chart size","text":"<p>The size of the chart can be changed with <code>width</code> and <code>height</code> constructor arguments.</p> <p>Info</p> <p><code>width</code> and <code>height</code> constructor arguments are optional, the default values are <code>800px</code> and <code>480px</code>. You can set them to any valid cssText value.</p> <pre><code>from ipyvizzu import Chart\n\n\nchart = Chart(width=\"100%\", height=\"500px\")</code></pre>"},{"location":"tutorial/chart_settings/#display-behavior","title":"Display behavior","text":"<p>There are multiple options for the logic of where and how the chart is displayed within the notebook and this behavior can be changed with the <code>display</code> constructor argument.</p> <p>Info</p> <p><code>display</code> constructor argument is optional, the default value is DisplayTarget.ACTUAL.</p> <p>Note</p> <p>Not all options work in all environments, check the Environments chapter for more details.</p>"},{"location":"tutorial/chart_settings/#actual","title":"Actual","text":"<p>Chart is relocated and displayed after each cell that has been run. This is set by default or if <code>display</code> is set to <code>DisplayTarget.ACTUAL</code>.</p> <pre><code>from ipyvizzu import Chart, DisplayTarget\n\n\nchart = Chart(display=DisplayTarget.ACTUAL)</code></pre>"},{"location":"tutorial/chart_settings/#begin","title":"Begin","text":"<p>Chart is displayed after the cell with the chart constructor if <code>display</code> is set to <code>DisplayTarget.BEGIN</code>.</p> <pre><code>from ipyvizzu import Chart, DisplayTarget\n\n\nchart = Chart(display=DisplayTarget.BEGIN)</code></pre>"},{"location":"tutorial/chart_settings/#end","title":"End","text":"<p>If <code>display</code> is set to <code>DisplayTarget.END</code>, then in case one cell is excuted, the chart will be displayed after the cell. If multiple cells are run at once, the chart appears after the last cell set to run.</p> <pre><code>from ipyvizzu import Chart, DisplayTarget\n\n\nchart = Chart(display=DisplayTarget.END)</code></pre> <p>Tip</p> <p>By combining the above display options with the store function you can replay the original animation when you replay a cell. Another way to replay animations is to use our new extension ipyvizzu-story that enables you to build, present and share animated data stories in data science notebooks with a very similar syntax to <code>ipyvizzu</code>'s.</p> <p>Info</p> <p><code>DisplayTarget.ACTUAL</code>, <code>DisplayTarget.BEGIN</code> and <code>DisplayTarget.END</code> use <code>IPython.display.display_javascript</code> function.</p>"},{"location":"tutorial/chart_settings/#manual","title":"Manual","text":"<p>Chart is displayed only when a display function is called if <code>display</code> is set to <code>DisplayTarget.MANUAL</code>.</p> <p>Note</p> <p>Even though it runs in more environments, the disadvantage of using <code>MANUAL</code> DisplayTarget is that the chart cannot be modified after calling a display function, without all the cells modifying the chart being rerun.</p> <p>One of the display functions is the <code>_repr_html_</code> method which is supported in most environments.</p> <pre><code>from ipyvizzu import Chart, DisplayTarget\n\nchart = Chart(display=DisplayTarget.MANUAL)\n\n# ...\n\nchart</code></pre> <p>The other display function is the <code>show</code> method.</p> <pre><code>from ipyvizzu import Chart, DisplayTarget\n\n\nchart = Chart(display=DisplayTarget.MANUAL)\n\n# ...\n\nchart.show()</code></pre> <p>Info</p> <p><code>DisplayTarget.MANUAL</code> with the <code>show</code> method uses <code>IPython.display.display_javascript</code> function.</p>"},{"location":"tutorial/chart_settings/#vizzu-library","title":"Vizzu library","text":"<p><code>ipyvizzu</code> requires and automatically downloads the Vizzu JavaScript/C++ library from jsDelivr CDN, but you can also use a self-hosted version.</p> <p>Info</p> <p><code>vizzu</code> constructor argument is optional, the default value is Chart.VIZZU</p> <p>Install <code>Vizzu</code> via npm:</p> <pre><code>npm install vizzu</code></pre> <p>After it is hosted on a server, you can use that url.</p> <pre><code>from ipyvizzu import Chart\n\n\nchart = Chart(vizzu=\"&lt;url&gt;/vizzu.min.js\")</code></pre>"},{"location":"tutorial/chart_settings/#properties","title":"Properties","text":""},{"location":"tutorial/chart_settings/#scroll-into-view","title":"Scroll into view","text":"<p>When the scroll into view feature is turned on, <code>ipyvizzu</code> is able to automatically scroll to the chart being animated to view in the browser.</p> <p>If manual scrolling is detected while auto-scrolling, <code>ipyvizzu</code> will stop auto-scroll until the notebook is replayed again.</p> <p>Info</p> <p>Scroll into view feature is optional, the default value is <code>False</code> .</p> <p>Note</p> <p>Scroll into view feature does not work in all environments, check the Environments chapter for more details.</p> <p>To enable scroll into view feature, set scroll_into_view property to <code>True</code>.</p> <pre><code>from ipyvizzu import Chart\n\n\nchart = Chart()\nchart.scroll_into_view = True</code></pre>"},{"location":"tutorial/color_palette_fonts/","title":"Color palette &amp; fonts","text":"<p>This and the next chapter provide a quick intro to the styling of the charts. You can either use the <code>Style</code> object like in the following examples or use <code>CSS</code>. By using <code>CSS</code>, it's easier to set the same style for multiple charts on one page or re-use style settings.</p> <p>If you use <code>CSS</code>, don't change the set parameters later on via the <code>Style</code> object.</p> <p>The font sizes automatically adjust to the chart size to help readability, and can also be set separately or for specific groups.</p> <p>The color palette is changed to the colors we add here. The order of the dimension\u2019s items in the data set determine which color belongs to which item as the colors are added one-by-one. If you want to use the same setting via <code>CSS</code>, you should add <code>--vizzu-plot-marker-colorPalette: #9355e8FF #123456FF #BDAF10FF;</code>.</p> Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style, ChartProperty\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/music_data.csv\"\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\n\nchart.animate(data)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"y\": {\"set\": [\"Popularity\", \"Kinds\"]},\n                \"x\": {\"set\": [\"Genres\"]},\n            },\n            \"label\": {\"attach\": [\"Popularity\"]},\n            \"color\": {\"set\": [\"Kinds\"]},\n        }\n    )\n)</code></pre> <pre><code>chart.animate(\n    Style(\n        {\n            \"plot\": {\n                \"marker\": {\n                    \"colorPalette\": \"#9355e8FF #123456FF #BDAF10FF\"\n                }\n            }\n        }\n    )\n)</code></pre> <p>The actual style settings of the chart can be logged in the browser console via the <code>STYLE</code> property.</p> <pre><code>chart.log(ChartProperty.STYLE)</code></pre> <p>Changing the title font size will only affect the title; all other font sizes remain the same. <code>CSS</code> version: <code>--vizzu-title-fontSize: 50;</code>.</p> <pre><code>chart.animate(Style({\"title\": {\"fontSize\": 50}}))</code></pre> <p>This is how to set the font size back to its default value.</p> <pre><code>chart.animate(Style({\"title\": {\"fontSize\": None}}))</code></pre> <p>In case you change the font size of the whole chart with the top-level <code>fontSize</code> parameter then every font on the chart will grow/shrink proportionally. The size refers to the font size of the axis labels by default.</p> <pre><code>chart.animate(Style({\"fontSize\": 20}))</code></pre> <p>You can reset styles to default on any levels by setting them to <code>None</code>.</p> <pre><code>chart.animate(Style(None))</code></pre> <p>For information on all available style parameters see the Style chapter or the Vizzu Code reference.</p>"},{"location":"tutorial/data/","title":"Data","text":""},{"location":"tutorial/data/#data-types","title":"Data types","text":"<p><code>ipyvizzu</code> currently supports two types of data series: dimensions and measures. Dimensions slice the data cube <code>ipyvizzu</code> uses, whereas measures are values within the cube.</p> <p>Dimensions are categorical series that can contain strings and numbers, but both will be treated as strings. Temporal data such as dates or timestamps should also be added as dimensions. By default, <code>ipyvizzu</code> will draw the elements on the chart in the order they are provided in the data set. Thus we suggest adding temporal data in a sorted format from oldest to newest.</p> <p>Measures at the moment can only be numerical.</p>"},{"location":"tutorial/data/#adding-data","title":"Adding data","text":"<p>There are multiple ways you can add data to <code>ipyvizzu</code>.</p> <ul> <li>Using pandas DataFrame</li> <li>Specify data by series - column after column if you think of a spreadsheet</li> <li>Specify data by records - row after row</li> <li>Using data cube form</li> <li>Using JSON</li> </ul> Tip <p>You should set the data in the first animate call.</p> <pre><code>chart.animate(data)</code></pre> Genres Kinds Popularity Pop Hard 114 Rock Hard 96 Jazz Hard 78 Metal Hard 52 Pop Smooth 56 Rock Smooth 36 Jazz Smooth 174 Metal Smooth 121 Pop Experimental 127 Rock Experimental 83 Jazz Experimental 94 Metal Experimental 58"},{"location":"tutorial/data/#using-pandas-dataframe","title":"Using <code>pandas</code> DataFrame","text":"<p>Use <code>add_data_frame</code> method for adding data frame to <code>Data</code>.</p> <pre><code>import pandas as pd\nfrom ipyvizzu import Data\n\n\ndata = {\n    \"Genres\": [\n        \"Pop\",\n        \"Rock\",\n        \"Jazz\",\n        \"Metal\",\n        \"Pop\",\n        \"Rock\",\n        \"Jazz\",\n        \"Metal\",\n        \"Pop\",\n        \"Rock\",\n        \"Jazz\",\n        \"Metal\",\n    ],\n    \"Kinds\": [\n        \"Hard\",\n        \"Hard\",\n        \"Hard\",\n        \"Hard\",\n        \"Smooth\",\n        \"Smooth\",\n        \"Smooth\",\n        \"Smooth\",\n        \"Experimental\",\n        \"Experimental\",\n        \"Experimental\",\n        \"Experimental\",\n    ],\n    \"Popularity\": [\n        114,\n        96,\n        78,\n        52,\n        56,\n        36,\n        174,\n        121,\n        127,\n        83,\n        94,\n        58,\n    ],\n}\ndf = pd.DataFrame(data)\n\ndata = Data()\ndata.add_data_frame(df)</code></pre> <p>Info</p> <p><code>ipyvizzu</code> makes a difference between two types of data, numeric (measure) and not numeric (dimension). A column's <code>dtype</code> specifies that the column is handled as a measure or as a dimension.</p> <p>It is also possible to add data frame index to <code>Data</code> with the <code>add_data_frame_index</code> method.</p> <pre><code>import pandas as pd\nfrom ipyvizzu import Data\n\n\ndf = pd.DataFrame(\n    {\"Popularity\": [114, 96, 78]}, index=[\"x\", \"y\", \"z\"]\n)\n\ndata = Data()\ndata.add_data_frame(df)\ndata.add_data_frame_index(df, \"DataFrameIndex\")</code></pre>"},{"location":"tutorial/data/#using-csv","title":"Using csv","text":"<p>Download <code>music_data.csv</code> here.</p> <pre><code>import pandas as pd\nfrom ipyvizzu import Data\n\n\ndf = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/music_data.csv\"\n)\n\ndata = Data()\ndata.add_data_frame(df)</code></pre>"},{"location":"tutorial/data/#using-excel-spreadsheet","title":"Using Excel spreadsheet","text":"<p>Download <code>music_data.xlsx</code> here.</p> <pre><code>import pandas as pd\nfrom ipyvizzu import Data\n\n\ndf = pd.read_excel(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/music_data.xlsx\"\n)\n\ndata = Data()\ndata.add_data_frame(df)</code></pre>"},{"location":"tutorial/data/#using-google-sheets","title":"Using Google Sheets","text":"<pre><code>import pandas as pd\nfrom ipyvizzu import Data\n\n\ngoogle_sheet_id = \"&lt;Google Sheet id&gt;\"\nworksheet_name = \"&lt;Worksheet name&gt;\"\n\ndf = pd.read_csv(\n    f\"https://docs.google.com/spreadsheets/d/{google_sheet_id}/gviz/tq?tqx=out:csv&amp;sheet={worksheet_name}\"\n)\n\ndata = Data()\ndata.add_data_frame(df)</code></pre> <p>For example if the url is <code>https://docs.google.com/spreadsheets/d/abcd1234/edit#gid=0</code> then <code>google_sheet_id</code> here is <code>abcd1234</code>.</p>"},{"location":"tutorial/data/#using-sqlite","title":"Using SQLite","text":"<pre><code>import pandas as pd\nimport sqlite3\nfrom ipyvizzu import Data\n\n\n# establish a connection to the SQLite database\nconn = sqlite3.connect(\"mydatabase.db\")\n# read data from a SQLite table into a pandas DataFrame\ndf = pd.read_sql(\"SELECT * FROM mytable\", conn)\n# close the connection\nconn.close()\n\ndata = Data()\ndata.add_data_frame(df)</code></pre> <p>Note</p> <p>You'll need to adjust the SQL query and the database connection parameters to match your specific use case.</p>"},{"location":"tutorial/data/#using-mysql","title":"Using MySQL","text":"<pre><code>import pandas as pd\nimport mysql.connector\nfrom ipyvizzu import Data\n\n\n# establish a connection to the MySQL database\nconn = mysql.connector.connect(\n    user=\"myusername\",\n    password=\"mypassword\",\n    host=\"myhost\",\n    database=\"mydatabase\",\n)\n# read data from a MySQL table into a pandas DataFrame\ndf = pd.read_sql(\"SELECT * FROM mytable\", con=conn)\n# close the connection\nconn.close()\n\ndata = Data()\ndata.add_data_frame(df)</code></pre> <p>Note</p> <p>You'll need to adjust the SQL query and the database connection parameters to match your specific use case.</p>"},{"location":"tutorial/data/#using-postgresql","title":"Using PostgreSQL","text":"<pre><code>import pandas as pd\nimport psycopg2\nfrom ipyvizzu import Data\n\n\n# establish a connection to the PostgreSQL database\nconn = psycopg2.connect(\n    user=\"myusername\",\n    password=\"mypassword\",\n    host=\"myhost\",\n    port=\"5432\",\n    database=\"mydatabase\",\n)\n# read data from a PostgreSQL table into a pandas DataFrame\ndf = pd.read_sql(\"SELECT * FROM mytable\", con=conn)\n# close the connection\nconn.close()\n\ndata = Data()\ndata.add_data_frame(df)</code></pre> <p>Note</p> <p>You'll need to adjust the SQL query and the database connection parameters to match your specific use case.</p>"},{"location":"tutorial/data/#using-microsoft-sql-server","title":"Using Microsoft SQL Server","text":"<pre><code>import pandas as pd\nimport pyodbc\nfrom ipyvizzu import Data\n\n\n# establish a connection to the Microsoft SQL Server database\nconn = pyodbc.connect(\n    \"Driver={SQL Server};\"\n    \"Server=myserver;\"\n    \"Database=mydatabase;\"\n    \"UID=myusername;\"\n    \"PWD=mypassword\"\n)\n# read data from a SQL Server table into a pandas DataFrame\ndf = pd.read_sql(\"SELECT * FROM mytable\", con=conn)\n# close the connection\nconn.close()\n\ndata = Data()\ndata.add_data_frame(df)</code></pre> <p>Note</p> <p>You'll need to adjust the SQL query and the database connection parameters to match your specific use case.</p>"},{"location":"tutorial/data/#specify-data-by-series","title":"Specify data by series","text":"<p>When you specify the data by series or by records, it has to be in first normal form. Here is an example of that:</p> <pre><code>from ipyvizzu import Data\n\n\ndata = Data()\ndata.add_series(\n    \"Genres\",\n    [\n        \"Pop\",\n        \"Rock\",\n        \"Jazz\",\n        \"Metal\",\n        \"Pop\",\n        \"Rock\",\n        \"Jazz\",\n        \"Metal\",\n        \"Pop\",\n        \"Rock\",\n        \"Jazz\",\n        \"Metal\",\n    ],\n    type=\"dimension\",\n)\ndata.add_series(\n    \"Kinds\",\n    [\n        \"Hard\",\n        \"Hard\",\n        \"Hard\",\n        \"Hard\",\n        \"Smooth\",\n        \"Smooth\",\n        \"Smooth\",\n        \"Smooth\",\n        \"Experimental\",\n        \"Experimental\",\n        \"Experimental\",\n        \"Experimental\",\n    ],\n    type=\"dimension\",\n)\ndata.add_series(\n    \"Popularity\",\n    [114, 96, 78, 52, 56, 36, 174, 121, 127, 83, 94, 58],\n    type=\"measure\",\n)</code></pre>"},{"location":"tutorial/data/#specify-data-by-records","title":"Specify data by records","text":"<pre><code>from ipyvizzu import Data\n\n\ndata = Data()\n\ndata.add_series(\"Genres\", type=\"dimension\")\ndata.add_series(\"Kinds\", type=\"dimension\")\ndata.add_series(\"Popularity\", type=\"measure\")\n\nrecord = [\"Pop\", \"Hard\", 114]\n\ndata.add_record(record)\n\nrecords = [\n    [\"Rock\", \"Hard\", 96],\n    [\"Jazz\", \"Hard\", 78],\n    [\"Metal\", \"Hard\", 52],\n    [\"Pop\", \"Smooth\", 56],\n    [\"Rock\", \"Smooth\", 36],\n    [\"Jazz\", \"Smooth\", 174],\n    [\"Metal\", \"Smooth\", 121],\n    [\"Pop\", \"Experimental\", 127],\n    [\"Rock\", \"Experimental\", 83],\n    [\"Jazz\", \"Experimental\", 94],\n    [\"Metal\", \"Experimental\", 58],\n]\n\ndata.add_records(records)</code></pre>"},{"location":"tutorial/data/#using-data-cube-form","title":"Using data cube form","text":"Genres PopRockJazzMetal Kinds Hard 114967852 Smooth 563674121 Experimental 127839458 Popularity <pre><code>from ipyvizzu import Data\n\n\ndata = Data()\n\ndata.add_dimension(\"Genres\", [\"Pop\", \"Rock\", \"Jazz\", \"Metal\"])\ndata.add_dimension(\"Kinds\", [\"Hard\", \"Smooth\", \"Experimental\"])\n\ndata.add_measure(\n    \"Popularity\",\n    [\n        [114, 96, 78, 52],\n        [56, 36, 174, 121],\n        [127, 83, 94, 58],\n    ],\n)</code></pre>"},{"location":"tutorial/data/#using-json","title":"Using JSON","text":"<p>Download <code>music_data.json</code> here (in this example the data stored in the data cube form).</p> <pre><code>from ipyvizzu import Data\n\n\ndata = Data.from_json(\"../assets/data/music_data.json\")</code></pre>"},{"location":"tutorial/events/","title":"Events","text":"<p>You can register handlers for various events. There are mouse events (<code>click</code>, <code>mouseon</code>), animation events (<code>begin</code>, <code>update</code>, <code>complete</code>), and rendering events that are called before rendering the chart elements. Handlers can be registered/unregistered with the <code>on</code>, <code>off</code> method pair.</p> <p>Note</p> <p>Currently <code>on</code> method only accept handler's <code>JavaScript</code> expression as string. The event can be accessed via the <code>event</code> object, see the examples below.</p> <p>We are registering a handler for the <code>click</code> event which will show an alert block with information about the clicked marker.</p> Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/music_data.csv\"\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\n\nchart.animate(data)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"y\": {\"set\": [\"Popularity\", \"Kinds\"]},\n                \"x\": {\"set\": [\"Genres\"]},\n            },\n            \"label\": {\"attach\": [\"Popularity\"]},\n            \"color\": {\"set\": [\"Kinds\"]},\n        }\n    )\n)</code></pre> <pre><code>click_handler = \"alert(JSON.stringify(event.data));\"\n\nclick = chart.on(\"click\", click_handler)</code></pre> <p>Unregistering the previously registered handler.</p> <pre><code>chart.off(click)</code></pre> <p>Here we override the axis label color for <code>Jazz</code> to red and all others to gray.</p> <pre><code>label_draw_handler = (\n    \"event.renderingContext.fillStyle =\"\n    + \" (event.data.text === 'Jazz') ? 'red' : 'gray';\"\n)\n\nlabel_draw = chart.on(\"plot-axis-label-draw\", label_draw_handler)</code></pre> <p>Unregistering the previously registered handler.</p> <pre><code>chart.off(label_draw)</code></pre> <p>The default behaviour of all events can be blocked by calling the event's <code>preventDefault</code> method. Here we block the drawing of the <code>Vizzu</code> logo in the bottom right corner of the chart.</p> <pre><code>logo_draw_handler = \"event.preventDefault();\"\n\nlogo_draw = logo_chart.on(\"logo-draw\", logo_draw_handler)</code></pre> <p>Unregistering the previously registered handler.</p> <pre><code>chart.off(logo_draw)</code></pre>"},{"location":"tutorial/filter_add_new_records/","title":"Filtering &amp; adding new records","text":"<p>Filtering enables you to zoom in or out within a chart, allowing the viewer to focus on certain selected elements, or get more context. You can also add new records to the data on the chart which makes it easy to work with real-time sources.</p> <p>Note</p> <p>Currently <code>filter</code> and <code>set_filter</code> methods only accept JavaScript expression as string. The data fields can be accessed via the <code>record</code> object, see the examples below.</p> <p>We add two items from the <code>Genres</code> dimension - using the <code>||</code> operator - to the filter, so the chart elements that belong to the other two items will vanish from the chart.</p> Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/music_data.csv\"\n)\ndata1 = Data()\ndata1.add_data_frame(data_frame)\n\nchart = Chart()\n\nchart.animate(data1)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"y\": {\"set\": [\"Popularity\", \"Kinds\"]},\n                \"x\": {\"set\": [\"Genres\"]},\n                \"label\": {\"attach\": [\"Popularity\"]},\n            },\n            \"color\": {\"attach\": [\"Kinds\"]},\n        }\n    )\n)</code></pre> <pre><code>filter1 = Data.filter(\n    \"record['Genres'] == 'Pop' || record['Genres'] == 'Metal'\"\n)\n\nchart.animate(filter1)</code></pre> <p>Now we add a cross-filter that includes items from both the <code>Genres</code> and the <code>Kinds</code> dimensions. This way we override the filter from the previous state. If we weren't update the filter, <code>ipyvizzu</code> would use it in subsequent states.</p> <pre><code>filter2 = Data.filter(\n    \"(record['Genres'] == 'Pop' || record['Genres'] == 'Metal')\"\n    + \" &amp;&amp; record['Kinds'] == 'Smooth'\"\n)\n\nchart.animate(filter2)</code></pre> <p>Switching the filter off to get back to the original view.</p> <pre><code>chart.animate(Data.filter(None))</code></pre> <p>Here we add another record to the data set and update the chart accordingly.</p> <pre><code>records = [\n    [\"Soul\", \"Hard\", 91],\n    [\"Soul\", \"Smooth\", 57],\n    [\"Soul\", \"Experimental\", 115],\n]\n\ndata2 = Data()\ndata2.add_records(records)\n\nchart.animate(data2)</code></pre> <p>Info</p> <p>Combining this option with the store function makes it easy to update previously configured states with fresh data since this function saves the config and style parameters of the chart into a variable but not the data.</p>"},{"location":"tutorial/geometry/","title":"Geometry","text":"<p>In <code>ipyvizzu</code> you can set the geometric elements used to represent your data by the geometry property within the config object. This is where the library shines - beautifully animating between the geometries!</p> <p>Switching the geometry to area.</p> Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/music_data.csv\"\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\n\nchart.animate(data)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"y\": {\"set\": [\"Popularity\"]},\n                \"x\": {\"set\": [\"Genres\"]},\n            },\n        }\n    )\n)</code></pre> <pre><code>chart.animate(Config({\"geometry\": \"area\"}))</code></pre> <p>Drawing a line chart.</p> <pre><code>chart.animate(Config({\"geometry\": \"line\"}))</code></pre> <p>Switching the geometry to circle. This setting is the most useful when used together with the size channel, as shown in the next chapter of the tutorial.</p> <pre><code>chart.animate(Config({\"geometry\": \"circle\"}))</code></pre> <p>Rectangle geometry is the default setting in <code>ipyvizzu</code>, used for most common charts like bar and column charts.</p> <pre><code>chart.animate(\n    Config(\n        {\n            \"geometry\": \"rectangle \",\n        }\n    )\n)</code></pre>"},{"location":"tutorial/group_stack/","title":"Group/stack","text":"<p>The following example shows how to group and stack elements of a bar chart.</p> <p>To get a stacked chart, you need to add a new dimension to the same channel where the measure is: the y-axis. However, since doing only this would result in multiple column chart elements with the same color stacked on top of each other, we also add the same dimension to the color channel.</p> Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/music_data.csv\"\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\n\nchart.animate(data)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"y\": {\"set\": [\"Popularity\"]},\n                \"x\": {\"set\": [\"Genres\"]},\n            },\n        }\n    )\n)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"y\": {\"attach\": [\"Kinds\"]},\n                \"color\": {\"attach\": [\"Kinds\"]},\n            }\n        }\n    )\n)</code></pre> <p>By detaching this newly added dimension from the y-axis and attaching it to the x-axis, you get a grouped bar chart in a way that is easy to follow for the viewer.</p> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"y\": {\"detach\": [\"Kinds\"]},\n                \"x\": {\"attach\": [\"Kinds\"]},\n            },\n        }\n    )\n)</code></pre> <p>In order to change the category via which the elements are grouped, just change the order of the dimension with another one on the same axis.</p> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": {\"set\": [\"Kinds\", \"Genres\"]},\n            },\n        }\n    )\n)</code></pre> <p>To stack a grouped chart, you just have to do the same thing the other way around: detach the dimension from the x-axis and attach it to the y-axis.</p> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"y\": {\"attach\": \"Kinds\"},\n                \"x\": {\"detach\": \"Kinds\"},\n            },\n        }\n    )\n)</code></pre>"},{"location":"tutorial/orientation_split_polar/","title":"Orientation, split &amp; polar","text":"<p>Now that you are familiar with the basic logic and operation of <code>ipyvizzu</code>, let's dive in with some more advanced features that you can use to create animated data stories and show the data from different perspectives.</p> <p>Switching orientation means that you put a measure from one axis to the other to see the data from a different perspective. This is once again a state you should only use temporarily.</p> Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/music_data.csv\"\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\n\nchart.animate(data)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"y\": {\"set\": [\"Popularity\", \"Kinds\"]},\n                \"x\": {\"set\": [\"Genres\"]},\n                \"label\": {\"attach\": [\"Popularity\"]},\n            },\n            \"color\": {\"attach\": [\"Kinds\"]},\n        }\n    )\n)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"y\": {\n                    \"detach\": [\"Popularity\"],\n                },\n                \"x\": {\n                    \"attach\": [\"Popularity\"],\n                },\n            }\n        }\n    )\n)</code></pre> <p>By turning the split parameter on, you can see stacked elements side-by-side, which enables the comparison of the components.</p> <pre><code>chart.animate(Config({\"split\": True}))</code></pre> <p>Merging the components by turning the split parameter off.</p> <pre><code>chart.animate(Config({\"split\": False}))</code></pre> <p>We aggregate the data by removing the <code>Genres</code> dimension from the x-axis.</p> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": {\n                    \"detach\": [\"Genres\"],\n                }\n            }\n        }\n    )\n)</code></pre> <p>Switching from cartesian coordinates to polar. When doing so, it is worth setting the axis range on the axis with the dimension so that the viewers can easily compare the values shown. If you want to return to the default cartesian coordinates, just set the <code>coordSystem</code> parameter to <code>'cartesian'</code>.</p> <p>Info</p> <p>The range of the x-axis is automatically set to <code>max:133%</code> as this is the standard way to show radial charts.</p> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"y\": {\n                    \"range\": {\n                        \"min\": \"-30%\",\n                    },\n                },\n            },\n            \"coordSystem\": \"polar\",\n        }\n    )\n)</code></pre>"},{"location":"tutorial/shorthands_store/","title":"Shorthands &amp; Store","text":"<p>To assist you with the development we added various shorthands that will make your code more compact.</p> <p>We also added store functions, which enable you to save either a chart state or a whole animation into a variable that you can reuse later instead of setting up that state or animation once again.</p> Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config, Style\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/music_data.csv\"\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\n\nchart.animate(data)\n\nchart.animate(\n    Config(\n        {\n            \"title\": \"Store function\",\n            \"channels\": {\n                \"y\": {\"set\": [\"Popularity\", \"Kinds\"]},\n                \"x\": {\"set\": [\"Genres\"]},\n            },\n            \"label\": {\"attach\": [\"Popularity\"]},\n            \"color\": {\"set\": [\"Kinds\"]},\n        }\n    )\n)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"align\": \"stretch\",\n        }\n    )\n)</code></pre> <p>Let's save this state by calling the <code>store</code> function.</p> <pre><code>snapshot = chart.store()</code></pre> <p>If you set/attach/detach just one series on a channel, you don't have to put that series into an array. Also, let's save this animation by calling the <code>store</code> method of the <code>control</code> chart object.</p> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                # \"x\": { \"attach\": [ \"Kinds\" ] },\n                \"x\": {\"attach\": \"Kinds\"},\n                # \"y\": { \"detach\": [ \"Kinds\" ] },\n                \"y\": {\"detach\": \"Kinds\"},\n            },\n            \"align\": \"none\",\n        }\n    )\n)\n\nanimation = chart.control.store()</code></pre> <p>If you use set on a channel and no other options like range, you don't have to express that channel as an object. If you only set one series on a channel you can simply write the series' name after the channel name.</p> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                # \"y\": { \"set\": [ \"Kinds\", \"Popularity\" ] },\n                \"y\": [\"Kinds\", \"Popularity\"],\n                # \"x\": { \"set\": [ \"Genres\" ] },\n                \"x\": \"Genres\",\n            }\n        }\n    )\n)</code></pre> <p>In any case, you can simply omit the <code>channel</code> object, <code>ipyvizzu</code> will automatically recognize the channels by their names.</p> <pre><code>chart.animate(\n    Config(\n        {\n            # \"channels\": {\n            \"y\": \"Kinds\",\n            \"x\": [\"Genres\", \"Popularity\"]\n            # }\n        }\n    )\n)</code></pre> <p>Instead of creating nested objects, you can set the styles like this.</p> <pre><code>chart.animate(\n    Style(\n        {\n            # \"plot\": { \"xAxis\": { \"label\": { \"fontSize\": \"150%\" } } },\n            \"plot.xAxis.label.fontSize\": \"150%\",\n            \"title.backgroundColor\": \"#A0A0A0\",\n        }\n    )\n)</code></pre> <p>This is how you can reuse a previously stored animation.</p> <pre><code>chart.animate(animation)</code></pre> <p>You can also get back to a state that you previously stored.</p> <pre><code>chart.animate(snapshot)</code></pre>"},{"location":"tutorial/sorting/","title":"Sorting","text":"<p><code>ipyvizzu</code> provides multiple options to sort data. By default, the data is sorted by the order it is added to <code>ipyvizzu</code>. This is why we suggest to add temporal data such as dates in chronological order - from oldest to newest.</p> <p>You can also sort the elements by value, which will provide you with an ascending order.</p> Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/music_data.csv\"\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\n\nchart.animate(data)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"y\": {\"set\": [\"Popularity\", \"Kinds\"]},\n                \"x\": {\"set\": [\"Genres\"]},\n                \"label\": {\"attach\": [\"Popularity\"]},\n            },\n            \"color\": {\"attach\": [\"Kinds\"]},\n        }\n    )\n)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"sort\": \"byValue\",\n        }\n    )\n)</code></pre> <p>If you want descending order instead, you have to set the <code>reverse</code> parameter to <code>True</code>. When used without setting the sorting to <code>byValue</code>, the elements will be in the opposite order than they are in the data set added to <code>ipyvizzu</code>.</p> <pre><code>chart.animate(\n    Config(\n        {\n            \"reverse\": True,\n        }\n    )\n)</code></pre> <p>This is how to switch back to the default sorting.</p> <pre><code>chart.animate(\n    Config(\n        {\n            \"sort\": \"none\",\n            \"reverse\": False,\n        }\n    )\n)</code></pre> <p>When you have more than one dimension on a channel, their order determines how the elements are grouped. For example, below - each set of bars is first organized by <code>Genres</code>, and then we have one bar for each of <code>Kinds</code>.</p> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"y\": {\"detach\": [\"Kinds\"]},\n                \"x\": {\"set\": [\"Genres\", \"Kinds\"]},\n            }\n        }\n    )\n)</code></pre> <p>When switching the order of dimensions on the x-axis <code>ipyvizzu</code> will rearrange the elements according to this new logic.</p> <p>Note</p> <p>The legend is automatically removed during the animation.</p> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"x\": {\"set\": [\"Kinds\", \"Genres\"]},\n            }\n        }\n    )\n)</code></pre>"},{"location":"tutorial/style/","title":"Style","text":"<p><code>ipyizzu</code> offers a wide variety of styling options when you want to personalize the look and feel of your animated charts. The styling properties are organized into a hierarchical structure. Font styles, when set on a higher level of this hierarchy, will be inherited on all lower levels. You can use absolute sizing (<code>px</code>, <code>pt</code>) and relative (<code>%</code>, <code>em</code>, <code>vw</code>).</p> <p>Similarly to all other parameters of the animate method, <code>ipyizzu</code> will animate the changes in the styling of the charts. This provides an excellent opportunity to check and control the effect of these changes.</p>"},{"location":"tutorial/style/#styling-properties","title":"Styling properties","text":"<p>You can find below the complete list of the available styling properties and their default values.</p> <p>+\u00a0expand all</p> <p>backgroundColor: <code>#FFFFFFFF</code></p> <p>borderColor: <code>#FFFFFFFF</code></p> <p>borderWidth: <code>0.000000</code></p> <p>fontFamily: <code>Roboto, sans-serif</code></p> <p>fontSize: <code>1.000000em</code></p> <p>fontStyle: <code>normal</code></p> <p>fontWeight: <code>normal</code></p> <p>+\u00a0legend</p> <p>\u2003backgroundColor: <code>#00000000</code></p><p>\u2003borderColor: <code>#00000000</code></p><p>\u2003borderWidth: <code>0.000000</code></p><p>\u2003+\u00a0label</p><p>\u2003\u2003backgroundColor: <code>#00000000</code></p><p>\u2003\u2003color: <code>#999999FF</code></p><p>\u2003\u2003fontFamily: <code></code></p><p>\u2003\u2003fontSize: <code>1.000000em</code></p><p>\u2003\u2003fontStyle: <code>normal</code></p><p>\u2003\u2003fontWeight: <code>normal</code></p><p>\u2003\u2003maxFractionDigits: <code>3.000000</code></p><p>\u2003\u2003numberFormat: <code>prefixed</code></p><p>\u2003\u2003numberScale: <code>k,M,G,T,P,E,Z,Y</code></p><p>\u2003\u2003paddingBottom: <code>0.416667em</code></p><p>\u2003\u2003paddingLeft: <code>0.416667em</code></p><p>\u2003\u2003paddingRight: <code>0.416667em</code></p><p>\u2003\u2003paddingTop: <code>0.416667em</code></p><p>\u2003\u2003textAlign: <code>left</code></p><p>\u2003+\u00a0marker</p><p>\u2003\u2003size: <code>1.285714em</code></p><p>\u2003\u2003type: <code>circle</code></p><p>\u2003maxWidth: <code>30.000000%</code></p><p>\u2003paddingBottom: <code>5.000000em</code></p><p>\u2003paddingLeft: <code>1.666667em</code></p><p>\u2003paddingRight: <code>0.416667em</code></p><p>\u2003paddingTop: <code>0.833333em</code></p><p>\u2003+\u00a0title</p><p>\u2003\u2003backgroundColor: <code>#00000000</code></p><p>\u2003\u2003color: <code>#999999FF</code></p><p>\u2003\u2003fontFamily: <code></code></p><p>\u2003\u2003fontSize: <code>1.166667em</code></p><p>\u2003\u2003fontStyle: <code>normal</code></p><p>\u2003\u2003fontWeight: <code>normal</code></p><p>\u2003\u2003maxFractionDigits: <code>3.000000</code></p><p>\u2003\u2003numberFormat: <code>prefixed</code></p><p>\u2003\u2003numberScale: <code>k,M,G,T,P,E,Z,Y</code></p><p>\u2003\u2003paddingBottom: <code>0.357143em</code></p><p>\u2003\u2003paddingLeft: <code>0.357143em</code></p><p>\u2003\u2003paddingRight: <code>0.357143em</code></p><p>\u2003\u2003paddingTop: <code>0.857143em</code></p><p>\u2003\u2003textAlign: <code>left</code></p><p>\u2003width: <code>8.333333em</code></p> <p>+\u00a0logo</p> <p>\u2003filter: <code>color(#D8D8D8FF)</code></p><p>\u2003paddingBottom: <code>47.500000%</code></p><p>\u2003paddingLeft: <code>40.000000%</code></p><p>\u2003paddingRight: <code>40.000000%</code></p><p>\u2003paddingTop: <code>47.500000%</code></p><p>\u2003width: <code>3.186307em</code></p> <p>paddingBottom: <code>0.833333em</code></p> <p>paddingLeft: <code>0.416667em</code></p> <p>paddingRight: <code>0.416667em</code></p> <p>paddingTop: <code>0.416667em</code></p> <p>+\u00a0plot</p> <p>\u2003backgroundColor: <code>#00000000</code></p><p>\u2003borderColor: <code>#00000000</code></p><p>\u2003borderWidth: <code>0.000000</code></p><p>\u2003+\u00a0marker</p><p>\u2003\u2003borderOpacity: <code>1.000000</code></p><p>\u2003\u2003borderOpacityMode: <code>premultiplied</code></p><p>\u2003\u2003borderWidth: <code>1.000000</code></p><p>\u2003\u2003circleMaxRadius: <code>0.050000</code></p><p>\u2003\u2003circleMinRadius: <code>0.005000</code></p><p>\u2003\u2003colorGradient: <code>#4171CDFF 0.000000, #8536C7FF 0.250000, #C33E7FFF 0.500000, #E9974EFF 0.750000, #F3F239FF 1.000000</code></p><p>\u2003\u2003colorPalette: <code>#4171CDFF #03AE71FF #F4941BFF #F4C204FF #D49664FF #F25456FF #9E67ABFF #BCA604FF #846E1CFF #FC763CFF #B462ACFF #F492FCFF #BC4A94FF #9C7EF4FF #9C52B4FF #6CA2FCFF #5C6EBCFF #7C868CFF #AC968CFF #4C7450FF #AC7A4CFF #7CAE54FF #4C7450FF #9C1A6CFF #AC3E94FF #B41204FF</code></p><p>\u2003\u2003fillOpacity: <code>1.000000</code></p><p>\u2003\u2003+\u00a0guides</p><p>\u2003\u2003\u2003color: <code>#E8E8E8FF</code></p><p>\u2003\u2003\u2003lineWidth: <code>0.500000</code></p><p>\u2003\u2003+\u00a0label</p><p>\u2003\u2003\u2003angle: <code>0.000000rad</code></p><p>\u2003\u2003\u2003backgroundColor: <code>#00000000</code></p><p>\u2003\u2003\u2003color: <code>#00000000</code></p><p>\u2003\u2003\u2003filter: <code>lightness(0.000000)</code></p><p>\u2003\u2003\u2003fontFamily: <code></code></p><p>\u2003\u2003\u2003fontSize: <code>0.916667em</code></p><p>\u2003\u2003\u2003fontStyle: <code>normal</code></p><p>\u2003\u2003\u2003fontWeight: <code>bold</code></p><p>\u2003\u2003\u2003format: <code>measureFirst</code></p><p>\u2003\u2003\u2003maxFractionDigits: <code>3.000000</code></p><p>\u2003\u2003\u2003numberFormat: <code>grouped</code></p><p>\u2003\u2003\u2003numberScale: <code>k,M,G,T,P,E,Z,Y</code></p><p>\u2003\u2003\u2003orientation: <code>horizontal</code></p><p>\u2003\u2003\u2003paddingBottom: <code>0.454545em</code></p><p>\u2003\u2003\u2003paddingLeft: <code>0.454545em</code></p><p>\u2003\u2003\u2003paddingRight: <code>0.454545em</code></p><p>\u2003\u2003\u2003paddingTop: <code>0.454545em</code></p><p>\u2003\u2003\u2003position: <code>center</code></p><p>\u2003\u2003\u2003textAlign: <code>center</code></p><p>\u2003\u2003lineMaxWidth: <code>0.010000</code></p><p>\u2003\u2003lineMinWidth: <code>0.001000</code></p><p>\u2003\u2003maxLightness: <code>0.400000</code></p><p>\u2003\u2003minLightness: <code>-0.400000</code></p><p>\u2003\u2003rectangleSpacing: <code>null</code></p><p>\u2003overflow: <code>hidden</code></p><p>\u2003paddingBottom: <code>5.000000em</code></p><p>\u2003paddingLeft: <code>6.666667em</code></p><p>\u2003paddingRight: <code>3.750000em</code></p><p>\u2003paddingTop: <code>4.166667em</code></p><p>\u2003+\u00a0xAxis</p><p>\u2003\u2003color: <code>#CCCCCCFF</code></p><p>\u2003\u2003+\u00a0guides</p><p>\u2003\u2003\u2003color: <code>#EDEDEDFF</code></p><p>\u2003\u2003\u2003lineWidth: <code>1.000000</code></p><p>\u2003\u2003+\u00a0interlacing</p><p>\u2003\u2003\u2003color: <code>#F7F7F7FF</code></p><p>\u2003\u2003+\u00a0label</p><p>\u2003\u2003\u2003angle: <code>0.000000rad</code></p><p>\u2003\u2003\u2003backgroundColor: <code>#00000000</code></p><p>\u2003\u2003\u2003color: <code>#999999FF</code></p><p>\u2003\u2003\u2003fontFamily: <code></code></p><p>\u2003\u2003\u2003fontSize: <code>1.000000em</code></p><p>\u2003\u2003\u2003fontStyle: <code>normal</code></p><p>\u2003\u2003\u2003fontWeight: <code>normal</code></p><p>\u2003\u2003\u2003maxFractionDigits: <code>3.000000</code></p><p>\u2003\u2003\u2003numberFormat: <code>prefixed</code></p><p>\u2003\u2003\u2003numberScale: <code>k,M,G,T,P,E,Z,Y</code></p><p>\u2003\u2003\u2003orientation: <code>horizontal</code></p><p>\u2003\u2003\u2003paddingBottom: <code>0.666667em</code></p><p>\u2003\u2003\u2003paddingLeft: <code>0.666667em</code></p><p>\u2003\u2003\u2003paddingRight: <code>0.666667em</code></p><p>\u2003\u2003\u2003paddingTop: <code>0.666667em</code></p><p>\u2003\u2003\u2003position: <code>min-edge</code></p><p>\u2003\u2003\u2003side: <code>negative</code></p><p>\u2003\u2003\u2003textAlign: <code>left</code></p><p>\u2003\u2003+\u00a0ticks</p><p>\u2003\u2003\u2003color: <code>#CCCCCCFF</code></p><p>\u2003\u2003\u2003length: <code>0.416667em</code></p><p>\u2003\u2003\u2003lineWidth: <code>1.000000</code></p><p>\u2003\u2003\u2003position: <code>outside</code></p><p>\u2003\u2003+\u00a0title</p><p>\u2003\u2003\u2003backgroundColor: <code>#00000000</code></p><p>\u2003\u2003\u2003color: <code>#999999FF</code></p><p>\u2003\u2003\u2003fontFamily: <code></code></p><p>\u2003\u2003\u2003fontSize: <code>1.166667em</code></p><p>\u2003\u2003\u2003fontStyle: <code>normal</code></p><p>\u2003\u2003\u2003fontWeight: <code>normal</code></p><p>\u2003\u2003\u2003maxFractionDigits: <code>3.000000</code></p><p>\u2003\u2003\u2003numberFormat: <code>prefixed</code></p><p>\u2003\u2003\u2003numberScale: <code>k,M,G,T,P,E,Z,Y</code></p><p>\u2003\u2003\u2003orientation: <code>horizontal</code></p><p>\u2003\u2003\u2003paddingBottom: <code>0.357143em</code></p><p>\u2003\u2003\u2003paddingLeft: <code>0.357143em</code></p><p>\u2003\u2003\u2003paddingRight: <code>0.357143em</code></p><p>\u2003\u2003\u2003paddingTop: <code>1.714286em</code></p><p>\u2003\u2003\u2003position: <code>min-edge</code></p><p>\u2003\u2003\u2003side: <code>negative</code></p><p>\u2003\u2003\u2003textAlign: <code>left</code></p><p>\u2003\u2003\u2003vposition: <code>middle</code></p><p>\u2003\u2003\u2003vside: <code>upon</code></p><p>\u2003+\u00a0yAxis</p><p>\u2003\u2003color: <code>#CCCCCCFF</code></p><p>\u2003\u2003+\u00a0guides</p><p>\u2003\u2003\u2003color: <code>#EDEDEDFF</code></p><p>\u2003\u2003\u2003lineWidth: <code>1.000000</code></p><p>\u2003\u2003+\u00a0interlacing</p><p>\u2003\u2003\u2003color: <code>#F7F7F7FF</code></p><p>\u2003\u2003+\u00a0label</p><p>\u2003\u2003\u2003angle: <code>0.000000rad</code></p><p>\u2003\u2003\u2003backgroundColor: <code>#00000000</code></p><p>\u2003\u2003\u2003color: <code>#999999FF</code></p><p>\u2003\u2003\u2003fontFamily: <code></code></p><p>\u2003\u2003\u2003fontSize: <code>1.000000em</code></p><p>\u2003\u2003\u2003fontStyle: <code>normal</code></p><p>\u2003\u2003\u2003fontWeight: <code>normal</code></p><p>\u2003\u2003\u2003maxFractionDigits: <code>3.000000</code></p><p>\u2003\u2003\u2003numberFormat: <code>prefixed</code></p><p>\u2003\u2003\u2003numberScale: <code>k,M,G,T,P,E,Z,Y</code></p><p>\u2003\u2003\u2003orientation: <code>horizontal</code></p><p>\u2003\u2003\u2003paddingBottom: <code>0.666667em</code></p><p>\u2003\u2003\u2003paddingLeft: <code>0.666667em</code></p><p>\u2003\u2003\u2003paddingRight: <code>0.666667em</code></p><p>\u2003\u2003\u2003paddingTop: <code>0.666667em</code></p><p>\u2003\u2003\u2003position: <code>min-edge</code></p><p>\u2003\u2003\u2003side: <code>negative</code></p><p>\u2003\u2003\u2003textAlign: <code>left</code></p><p>\u2003\u2003+\u00a0ticks</p><p>\u2003\u2003\u2003color: <code>#CCCCCCFF</code></p><p>\u2003\u2003\u2003length: <code>0.416667em</code></p><p>\u2003\u2003\u2003lineWidth: <code>1.000000</code></p><p>\u2003\u2003\u2003position: <code>outside</code></p><p>\u2003\u2003+\u00a0title</p><p>\u2003\u2003\u2003backgroundColor: <code>#00000000</code></p><p>\u2003\u2003\u2003color: <code>#999999FF</code></p><p>\u2003\u2003\u2003fontFamily: <code></code></p><p>\u2003\u2003\u2003fontSize: <code>1.166667em</code></p><p>\u2003\u2003\u2003fontStyle: <code>normal</code></p><p>\u2003\u2003\u2003fontWeight: <code>normal</code></p><p>\u2003\u2003\u2003maxFractionDigits: <code>3.000000</code></p><p>\u2003\u2003\u2003numberFormat: <code>prefixed</code></p><p>\u2003\u2003\u2003numberScale: <code>k,M,G,T,P,E,Z,Y</code></p><p>\u2003\u2003\u2003orientation: <code>horizontal</code></p><p>\u2003\u2003\u2003paddingBottom: <code>1.071429em</code></p><p>\u2003\u2003\u2003paddingLeft: <code>0.357143em</code></p><p>\u2003\u2003\u2003paddingRight: <code>0.357143em</code></p><p>\u2003\u2003\u2003paddingTop: <code>0.357143em</code></p><p>\u2003\u2003\u2003position: <code>min-edge</code></p><p>\u2003\u2003\u2003side: <code>upon</code></p><p>\u2003\u2003\u2003textAlign: <code>left</code></p><p>\u2003\u2003\u2003vposition: <code>end</code></p><p>\u2003\u2003\u2003vside: <code>positive</code></p> <p>+\u00a0title</p> <p>\u2003backgroundColor: <code>#00000000</code></p><p>\u2003color: <code>#494949FF</code></p><p>\u2003fontFamily: <code></code></p><p>\u2003fontSize: <code>2.166667em</code></p><p>\u2003fontStyle: <code>normal</code></p><p>\u2003fontWeight: <code>normal</code></p><p>\u2003maxFractionDigits: <code>3.000000</code></p><p>\u2003numberFormat: <code>prefixed</code></p><p>\u2003numberScale: <code>k,M,G,T,P,E,Z,Y</code></p><p>\u2003paddingBottom: <code>0.000000px</code></p><p>\u2003paddingLeft: <code>0.384615em</code></p><p>\u2003paddingRight: <code>0.384615em</code></p><p>\u2003paddingTop: <code>0.576923em</code></p><p>\u2003textAlign: <code>center</code></p> <p>+\u00a0tooltip</p> <p>\u2003arrowSize: <code>8.000000</code></p><p>\u2003backgroundColor: <code>#FFFFFFFF</code></p><p>\u2003borderColor: <code>#D8D8D8FF</code></p><p>\u2003borderRadius: <code>3.000000</code></p><p>\u2003borderWidth: <code>1.000000</code></p><p>\u2003color: <code>#191919FF</code></p><p>\u2003distance: <code>2.000000</code></p><p>\u2003dropShadow: <code>3.000000</code></p><p>\u2003fontFamily: <code>Roboto, sans-serif</code></p><p>\u2003fontSize: <code>12.000000px</code></p><p>\u2003fontStyle: <code>normal</code></p><p>\u2003fontWeight: <code>normal</code></p><p>\u2003layout: <code>multiLine</code></p><p>\u2003seriesName: <code></code></p><p>\u2003shadowColor: <code>#0000000A</code></p>"},{"location":"tutorial/without_coordinates_noop_channel/","title":"Without coordinates &amp; noop channel","text":"<p>Certain chart types have neither measures nor dimensions on the axes such as treemaps and bubble charts. This is a case when the <code>noop</code> channel comes in handy for grouping and stacking elements in these kinds of charts.</p> <p>To get to a treemap, we have to detach all dimensions and the measure from the axes and put two of them on the <code>size</code> channel, whereas the other dimension is still on the <code>color</code> channel.</p> Info - How to setup Chart <pre><code>import pandas as pd\nfrom ipyvizzu import Chart, Data, Config\n\ndata_frame = pd.read_csv(\n    \"https://ipyvizzu.vizzuhq.com/0.15/assets/data/music_data.csv\"\n)\ndata = Data()\ndata.add_data_frame(data_frame)\n\nchart = Chart()\n\nchart.animate(data)\n\nchart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"y\": {\"set\": [\"Kinds\", \"Popularity\"]},\n                \"x\": {\"set\": [\"Genres\"]},\n                \"label\": {\"attach\": [\"Popularity\"]},\n            },\n            \"color\": {\"set\": [\"Kinds\"]},\n        }\n    )\n)</code></pre> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"y\": {\n                    \"set\": None,\n                },\n                \"x\": {\n                    \"set\": None,\n                },\n                \"size\": {\n                    \"attach\": [\"Genres\", \"Popularity\"],\n                },\n            }\n        }\n    )\n)</code></pre> <p>Getting from a treemap to a bubble chart is simply by changing the geometry to circle. This bubble chart is stacked by the <code>Kinds</code> dimension that is on the <code>size</code> channel - this is why the bubbles are in separate, small groups.</p> <pre><code>chart.animate(\n    Config(\n        {\n            \"geometry\": \"circle\",\n        }\n    )\n)</code></pre> <p>In order to show all bubbles as one group, we use the <code>noop</code> (no operations) channel for the <code>Genres</code> dimension. The <code>noop</code> channel enables us to have a dimension on the chart, that doesn\u2019t affect any parameter of the elements, only their count.</p> <pre><code>chart.animate(\n    Config(\n        {\n            \"channels\": {\n                \"size\": {\"detach\": \"Genres\"},\n                \"noop\": {\"set\": \"Genres\"},\n            }\n        }\n    )\n)</code></pre>"},{"location":"coverage/","title":"Coverage report","text":""}]}