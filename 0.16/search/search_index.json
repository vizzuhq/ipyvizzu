{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ipyvizzu - Build animated charts in Jupyter Notebook and similar environments with a simple Python syntax Documentation \u00b7 Examples \u00b7 Code reference \u00b7 Repository ipyvizzu About The Project ipyvizzu is an animated charting tool for Jupyter , Google Colab , Databricks , Kaggle and Deepnote notebooks among other platforms. ipyvizzu enables data scientists and analysts to utilize animation for storytelling with data using Python . It's built on the open-source JavaScript / C++ charting library Vizzu . There is a new extension of ipyvizzu , ipyvizzu-story with which the animated charts can be presented right from the notebooks. Since ipyvizzu-story 's syntax is a bit different to ipyvizzu 's, we suggest you to start from the ipyvizzu-story repo if you're interested in using animated charts to present your findings live or to share your presentation as an HTML file. Similarly to Vizzu , ipyvizzu utilizes a generic dataviz engine that generates many types of charts and seamlessly animates between them. It is designed for building animated data stories as it enables showing different perspectives of the data that the viewers can easily follow. Main features: Designed with animation in focus; Defaults based on data visualization guidelines; Works with Pandas dataframe, while also JSON and inline data input is available; Auto scrolling feature to keep the actual chart in position while executing multiple cells. Installation pip install ipyvizzu Visit Installation chapter for more options and details. Usage You can create the animation below with the following code snippet. import pandas as pd from ipyvizzu import Chart, Data, Config df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/showcases/titanic/titanic.csv\" ) data = Data() data.add_df(df) chart = Chart(width=\"640px\", height=\"360px\") chart.animate(data) chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) Documentation Visit our Documentation site for more details and a step-by-step tutorial into ipyvizzu or check out our Example gallery . Environments ipyvizzu can be used in a wide variety of environments, visit Environments chapter for more details. Notebooks Jupyter Notebook Colab Databricks DataCamp Deepnote JupyterLab JupyterLite Kaggle Noteable App platforms Streamlit Flask Panel Mercury Voil\u00e0 BI tools Mode IDEs PyCharm VSCode Python Extensions ipyvizzu-story adds presentation controls to present data stories live or to share them as an interactive HTML file. Contributing We welcome contributions to the project, visit our contributing guide for further info. Contact Join our Slack if you have any questions or comments: vizzu-community.slack.com Drop us a line at hello@vizzuhq.com Follow us on Twitter: VizzuHQ Usage Statistics ipyvizzu collects aggregate usage statistics by default to follow the progress and overall trends of our library. This feature is optional, and users can choose to opt-out. However, we do not track, collect, or store any personal data or personally identifiable information. Please note that even when this feature is enabled, publishing anything made with ipyvizzu remains GDPR compatible. For more details, please visit Analytics chapter . License Copyright \u00a9 2022-2023 Vizzu Inc. Released under the Apache 2.0 License .","title":"Home"},{"location":"#ipyvizzu","text":"","title":"ipyvizzu"},{"location":"#about-the-project","text":"ipyvizzu is an animated charting tool for Jupyter , Google Colab , Databricks , Kaggle and Deepnote notebooks among other platforms. ipyvizzu enables data scientists and analysts to utilize animation for storytelling with data using Python . It's built on the open-source JavaScript / C++ charting library Vizzu . There is a new extension of ipyvizzu , ipyvizzu-story with which the animated charts can be presented right from the notebooks. Since ipyvizzu-story 's syntax is a bit different to ipyvizzu 's, we suggest you to start from the ipyvizzu-story repo if you're interested in using animated charts to present your findings live or to share your presentation as an HTML file. Similarly to Vizzu , ipyvizzu utilizes a generic dataviz engine that generates many types of charts and seamlessly animates between them. It is designed for building animated data stories as it enables showing different perspectives of the data that the viewers can easily follow. Main features: Designed with animation in focus; Defaults based on data visualization guidelines; Works with Pandas dataframe, while also JSON and inline data input is available; Auto scrolling feature to keep the actual chart in position while executing multiple cells.","title":"About The Project"},{"location":"#installation","text":"pip install ipyvizzu Visit Installation chapter for more options and details.","title":"Installation"},{"location":"#usage","text":"You can create the animation below with the following code snippet. import pandas as pd from ipyvizzu import Chart, Data, Config df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/showcases/titanic/titanic.csv\" ) data = Data() data.add_df(df) chart = Chart(width=\"640px\", height=\"360px\") chart.animate(data) chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]}))","title":"Usage"},{"location":"#documentation","text":"Visit our Documentation site for more details and a step-by-step tutorial into ipyvizzu or check out our Example gallery .","title":"Documentation"},{"location":"#environments","text":"ipyvizzu can be used in a wide variety of environments, visit Environments chapter for more details. Notebooks Jupyter Notebook Colab Databricks DataCamp Deepnote JupyterLab JupyterLite Kaggle Noteable App platforms Streamlit Flask Panel Mercury Voil\u00e0 BI tools Mode IDEs PyCharm VSCode Python","title":"Environments"},{"location":"#extensions","text":"ipyvizzu-story adds presentation controls to present data stories live or to share them as an interactive HTML file.","title":"Extensions"},{"location":"#contributing","text":"We welcome contributions to the project, visit our contributing guide for further info.","title":"Contributing"},{"location":"#contact","text":"Join our Slack if you have any questions or comments: vizzu-community.slack.com Drop us a line at hello@vizzuhq.com Follow us on Twitter: VizzuHQ","title":"Contact"},{"location":"#usage-statistics","text":"ipyvizzu collects aggregate usage statistics by default to follow the progress and overall trends of our library. This feature is optional, and users can choose to opt-out. However, we do not track, collect, or store any personal data or personally identifiable information. Please note that even when this feature is enabled, publishing anything made with ipyvizzu remains GDPR compatible. For more details, please visit Analytics chapter .","title":"Usage Statistics"},{"location":"#license","text":"Copyright \u00a9 2022-2023 Vizzu Inc. Released under the Apache 2.0 License .","title":"License"},{"location":"CODE_OF_CONDUCT/","text":"Code of Conduct See Code of Conduct of the Vizzu community.","title":"Code of Conduct"},{"location":"CODE_OF_CONDUCT/#code-of-conduct","text":"See Code of Conduct of the Vizzu community.","title":"Code of Conduct"},{"location":"CONTRIBUTING/","text":"Contributing Issues You can find our open issues in the project's issue tracker . Please let us know if you find any issues or have any feature requests there. Contributing If you want to contribute to the project, your help is very welcome. Just fork the project, make your changes and send us a pull request. You can find the detailed description of how to do this in Github's guide to contributing to projects . CI-CD Development environment For contributing to the project, it is recommended to use Python 3.10 as the primary programming language for most parts of the source code. However, a specific portion of the codebase is written in JavaScript . If you plan to contribute to this JavaScript part or the documentation, you will need Node.js , preferably version 18 . The following steps demonstrate how to set up the development environment on an Ubuntu 22.04 operating system. However, the process can be adapted for other operating systems as well. To start using the ipyvizzu development environment, you need to create a virtual environment and install pdm within it. python3.10 -m venv \".venv\" source .venv/bin/activate pip install pdm==2.8.0 Once set up, you can utilize the pre-defined pdm scripts. For example, you can initialize the entire development environment using the command pdm run init , or specific parts like init_src_py , init_src , init_docs , or init_tools . pdm run init Note: For all available pdm scripts, run pdm run --list . The development requirements are installed based on the pdm.lock and package-lock.json files. To update the development requirements, you can use the command pdm run lock . For better development practices, you can set up pre-commit and pre-push hooks in your local Git repository. The pre-commit hook will format the code automatically, and the pre-push hook will run the CI steps before pushing your changes. pre-commit install --hook-type pre-commit --hook-type pre-push -c ./tools/ci/.pre-commit-ubuntu.yaml Note: The provided .pre-commit-ubuntu.yaml configuration file is tailored for Ubuntu 22.04 . If you intend to use another operating system, you may need to create a custom configuration file suitable for that environment. CI The CI pipeline includes code formatting checks, code analysis, typing validation, and unit tests for the ipyvizzu project. To run the entire CI pipeline, execute the following pdm script: pdm run ci However, if you want to run the CI steps on specific parts of the project, you can use the following scripts: ci_src_py , ci_src , ci_docs , or ci_tools . Formatting You can check the code's formatting using the format script: pdm run format If you need to fix any formatting issues, you can use the fix_format script: pdm run fix_format If you wish to format specific parts of the project, you can use the following scripts: format_src_py , format_src , format_docs , format_tools , or fix_format_src_py , fix_format_src , fix_format_docs , fix_format_tools . Code analyses To perform code analyses, you can use the lint script: pdm run lint If you need to run code analyses for specific parts of the project, you can utilize the following scripts: lint_src_py , lint_src , lint_docs , or lint_tools . Typing For type checking, you can use the type script: pdm run type If you want to check specific parts of the project, you can use the following scripts: type_src or type_tools . Testing The project is tested using the unittest testing framework and tox . To run the tests, you can use the test script: pdm run test Documentation Note: The preset, static, animated, and analytical operation examples are generated from the vizzu-lib repository. If you wish to build them as well, run the following command before building the site. git clone --depth 1 https://github.com/vizzuhq/vizzu-lib.git To build the documentation, you can use the docs_build script: pdm run docs_build You can read the online version at ipyvizzu.com . Release ipyvizzu is distributed on pypi . Note: You need to be an administrator to release the project. To release ipyvizzu , follow the steps below: Increase the version number in __version__.py . The version bump should be in a separate commit. Generate the release notes and publish the new release on Releases . Note: Publishing a new release will automatically trigger the release workflow, which builds, checks, and uploads the ipyvizzu package to pypi . Before making a release, you can build and check the package using the pkg_release script: pdm run pkg_release","title":"Contributing"},{"location":"CONTRIBUTING/#contributing","text":"","title":"Contributing"},{"location":"CONTRIBUTING/#issues","text":"You can find our open issues in the project's issue tracker . Please let us know if you find any issues or have any feature requests there.","title":"Issues"},{"location":"CONTRIBUTING/#contributing_1","text":"If you want to contribute to the project, your help is very welcome. Just fork the project, make your changes and send us a pull request. You can find the detailed description of how to do this in Github's guide to contributing to projects .","title":"Contributing"},{"location":"CONTRIBUTING/#ci-cd","text":"","title":"CI-CD"},{"location":"CONTRIBUTING/#development-environment","text":"For contributing to the project, it is recommended to use Python 3.10 as the primary programming language for most parts of the source code. However, a specific portion of the codebase is written in JavaScript . If you plan to contribute to this JavaScript part or the documentation, you will need Node.js , preferably version 18 . The following steps demonstrate how to set up the development environment on an Ubuntu 22.04 operating system. However, the process can be adapted for other operating systems as well. To start using the ipyvizzu development environment, you need to create a virtual environment and install pdm within it. python3.10 -m venv \".venv\" source .venv/bin/activate pip install pdm==2.8.0 Once set up, you can utilize the pre-defined pdm scripts. For example, you can initialize the entire development environment using the command pdm run init , or specific parts like init_src_py , init_src , init_docs , or init_tools . pdm run init Note: For all available pdm scripts, run pdm run --list . The development requirements are installed based on the pdm.lock and package-lock.json files. To update the development requirements, you can use the command pdm run lock . For better development practices, you can set up pre-commit and pre-push hooks in your local Git repository. The pre-commit hook will format the code automatically, and the pre-push hook will run the CI steps before pushing your changes. pre-commit install --hook-type pre-commit --hook-type pre-push -c ./tools/ci/.pre-commit-ubuntu.yaml Note: The provided .pre-commit-ubuntu.yaml configuration file is tailored for Ubuntu 22.04 . If you intend to use another operating system, you may need to create a custom configuration file suitable for that environment.","title":"Development environment"},{"location":"CONTRIBUTING/#ci","text":"The CI pipeline includes code formatting checks, code analysis, typing validation, and unit tests for the ipyvizzu project. To run the entire CI pipeline, execute the following pdm script: pdm run ci However, if you want to run the CI steps on specific parts of the project, you can use the following scripts: ci_src_py , ci_src , ci_docs , or ci_tools .","title":"CI"},{"location":"CONTRIBUTING/#formatting","text":"You can check the code's formatting using the format script: pdm run format If you need to fix any formatting issues, you can use the fix_format script: pdm run fix_format If you wish to format specific parts of the project, you can use the following scripts: format_src_py , format_src , format_docs , format_tools , or fix_format_src_py , fix_format_src , fix_format_docs , fix_format_tools .","title":"Formatting"},{"location":"CONTRIBUTING/#code-analyses","text":"To perform code analyses, you can use the lint script: pdm run lint If you need to run code analyses for specific parts of the project, you can utilize the following scripts: lint_src_py , lint_src , lint_docs , or lint_tools .","title":"Code analyses"},{"location":"CONTRIBUTING/#typing","text":"For type checking, you can use the type script: pdm run type If you want to check specific parts of the project, you can use the following scripts: type_src or type_tools .","title":"Typing"},{"location":"CONTRIBUTING/#testing","text":"The project is tested using the unittest testing framework and tox . To run the tests, you can use the test script: pdm run test","title":"Testing"},{"location":"CONTRIBUTING/#documentation","text":"Note: The preset, static, animated, and analytical operation examples are generated from the vizzu-lib repository. If you wish to build them as well, run the following command before building the site. git clone --depth 1 https://github.com/vizzuhq/vizzu-lib.git To build the documentation, you can use the docs_build script: pdm run docs_build You can read the online version at ipyvizzu.com .","title":"Documentation"},{"location":"CONTRIBUTING/#release","text":"ipyvizzu is distributed on pypi . Note: You need to be an administrator to release the project. To release ipyvizzu , follow the steps below: Increase the version number in __version__.py . The version bump should be in a separate commit. Generate the release notes and publish the new release on Releases . Note: Publishing a new release will automatically trigger the release workflow, which builds, checks, and uploads the ipyvizzu package to pypi . Before making a release, you can build and check the package using the pkg_release script: pdm run pkg_release","title":"Release"},{"location":"LICENSE/","text":"Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright [yyyy] [name of copyright owner] Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"installation/","text":"Installation ipyvizzu requires the IPython and jsonschema packages. Info ipyvizzu requires and downloads the Vizzu JavaScript / C++ library from jsDelivr CDN , but you can also use a different or self-hosted version of it. Check Chart settings chapter for more details. pypi Run the following command to install ipyvizzu from pypi pip install ipyvizzu and this is how to upgrade it. pip install -U ipyvizzu Note ipyvizzu can be used with some extra dependencies such as pandas , pyspark , numpy and fugue . For example if you would like to work with pandas DataFrame and ipyvizzu , you should install pandas as an extra: pip install ipyvizzu[pandas] You can use ipyvizzu in Jupyter/IPython , Streamlit or Panel (see Environments chapter for more details). Jupyter/IPython You can install ipyvizzu in your notebook without using the command line by entering the following code into a cell. !pip install ipyvizzu conda / mamba Installing ipyvizzu from conda-forge can be achieved by adding conda-forge to your channels with: conda config --add channels conda-forge conda config --set channel_priority strict Once the conda-forge channel has been enabled, run the following command to install ipyvizzu from conda conda install ipyvizzu # or with mamba: mamba install ipyvizzu and this is how to upgrade it. conda update ipyvizzu # or with mamba: mamba update ipyvizzu","title":"Installation"},{"location":"installation/#installation","text":"ipyvizzu requires the IPython and jsonschema packages. Info ipyvizzu requires and downloads the Vizzu JavaScript / C++ library from jsDelivr CDN , but you can also use a different or self-hosted version of it. Check Chart settings chapter for more details.","title":"Installation"},{"location":"installation/#pypi","text":"Run the following command to install ipyvizzu from pypi pip install ipyvizzu and this is how to upgrade it. pip install -U ipyvizzu Note ipyvizzu can be used with some extra dependencies such as pandas , pyspark , numpy and fugue . For example if you would like to work with pandas DataFrame and ipyvizzu , you should install pandas as an extra: pip install ipyvizzu[pandas] You can use ipyvizzu in Jupyter/IPython , Streamlit or Panel (see Environments chapter for more details).","title":"pypi"},{"location":"installation/#jupyteripython","text":"You can install ipyvizzu in your notebook without using the command line by entering the following code into a cell. !pip install ipyvizzu","title":"Jupyter/IPython"},{"location":"installation/#conda-mamba","text":"Installing ipyvizzu from conda-forge can be achieved by adding conda-forge to your channels with: conda config --add channels conda-forge conda config --set channel_priority strict Once the conda-forge channel has been enabled, run the following command to install ipyvizzu from conda conda install ipyvizzu # or with mamba: mamba install ipyvizzu and this is how to upgrade it. conda update ipyvizzu # or with mamba: mamba update ipyvizzu","title":"conda / mamba"},{"location":"dev/","text":"Development We have compiled some information on the development of ipyvizzu here. If you're interested in contributing to our open-source tool (which we highly encourage), please refer to the Contributing chapter. Our community upholds a strict Code of Conduct that we expect all members to follow. Plus, we've got you covered with info on our code's test coverage. Contributing Code of Conduct Coverage report","title":"Development"},{"location":"dev/#development","text":"We have compiled some information on the development of ipyvizzu here. If you're interested in contributing to our open-source tool (which we highly encourage), please refer to the Contributing chapter. Our community upholds a strict Code of Conduct that we expect all members to follow. Plus, we've got you covered with info on our code's test coverage. Contributing Code of Conduct Coverage report","title":"Development"},{"location":"environments/","text":"Environments ipyvizzu can be used in a lot of different environments. We grouped these into several categories. We would love to add more environments and examples, so if you miss anything from our list, please open an issue in our Github repo . Notebooks App platforms BI tools IDEs","title":"Environments"},{"location":"environments/#environments","text":"ipyvizzu can be used in a lot of different environments. We grouped these into several categories. We would love to add more environments and examples, so if you miss anything from our list, please open an issue in our Github repo . Notebooks App platforms BI tools IDEs","title":"Environments"},{"location":"environments/bi/","text":"BI tools ipyvizzu is available in the following BI tools. We would love to add more environments and examples, so if you miss anything from our list, please open an issue in our Github repo . Mode","title":"BI tools"},{"location":"environments/bi/#bi-tools","text":"ipyvizzu is available in the following BI tools. We would love to add more environments and examples, so if you miss anything from our list, please open an issue in our Github repo . Mode","title":"BI tools"},{"location":"environments/bi/mode/","text":"Mode Features The features of ipyvizzu that are available in Mode are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Display features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details. Installation Place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). !pip install ipyvizzu pandas -t \"/tmp\" > /dev/null 2>&1 Sample Try ipyvizzu in Mode with the following sample. # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL ) # add data to Chart data = Data() df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/showcases/titanic/titanic.csv\" ) data.add_df(df) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with _repr_html_ method (display=DisplayTarget.MANUAL) chart Check the Tutorial for more info.","title":"Mode"},{"location":"environments/bi/mode/#mode","text":"","title":"Mode"},{"location":"environments/bi/mode/#features","text":"The features of ipyvizzu that are available in Mode are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Display features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details.","title":"Features"},{"location":"environments/bi/mode/#installation","text":"Place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). !pip install ipyvizzu pandas -t \"/tmp\" > /dev/null 2>&1","title":"Installation"},{"location":"environments/bi/mode/#sample","text":"Try ipyvizzu in Mode with the following sample. # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL ) # add data to Chart data = Data() df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/showcases/titanic/titanic.csv\" ) data.add_df(df) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with _repr_html_ method (display=DisplayTarget.MANUAL) chart Check the Tutorial for more info.","title":"Sample"},{"location":"environments/ide/","text":"IDEs ipyvizzu is available in the following IDEs. We would love to add more environments and examples, so if you miss anything from our list, please open an issue in our Github repo . PyCharm VSCode Python","title":"IDEs"},{"location":"environments/ide/#ides","text":"ipyvizzu is available in the following IDEs. We would love to add more environments and examples, so if you miss anything from our list, please open an issue in our Github repo . PyCharm VSCode Python","title":"IDEs"},{"location":"environments/ide/pycharm/","text":"PyCharm Features The features of ipyvizzu that are available in PyCharm Professional are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Display features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details. Installation Run the following command in your command line pip install ipyvizzu pandas or place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). !pip install ipyvizzu pandas Sample Try ipyvizzu in PyCharm Professional with the following sample. # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL ) # add data to Chart data = Data() df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/showcases/titanic/titanic.csv\" ) data.add_df(df) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with _repr_html_() method (display=DisplayTarget.MANUAL) chart Check the Tutorial for more info.","title":"PyCharm"},{"location":"environments/ide/pycharm/#pycharm","text":"","title":"PyCharm"},{"location":"environments/ide/pycharm/#features","text":"The features of ipyvizzu that are available in PyCharm Professional are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Display features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details.","title":"Features"},{"location":"environments/ide/pycharm/#installation","text":"Run the following command in your command line pip install ipyvizzu pandas or place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). !pip install ipyvizzu pandas","title":"Installation"},{"location":"environments/ide/pycharm/#sample","text":"Try ipyvizzu in PyCharm Professional with the following sample. # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL ) # add data to Chart data = Data() df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/showcases/titanic/titanic.csv\" ) data.add_df(df) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with _repr_html_() method (display=DisplayTarget.MANUAL) chart Check the Tutorial for more info.","title":"Sample"},{"location":"environments/ide/vscode/","text":"VSCode Python Features The features of ipyvizzu that are available in VSCode Python are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Display features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details. Installation Run the following command in your command line pip install ipyvizzu pandas or place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). !pip install ipyvizzu pandas Sample Try ipyvizzu in VSCode Python with the following sample. # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL ) # add data to Chart data = Data() df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/showcases/titanic/titanic.csv\" ) data.add_df(df) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with _repr_html_() method (display=DisplayTarget.MANUAL) chart Check the Tutorial for more info.","title":"VSCode Python"},{"location":"environments/ide/vscode/#vscode-python","text":"","title":"VSCode Python"},{"location":"environments/ide/vscode/#features","text":"The features of ipyvizzu that are available in VSCode Python are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Display features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details.","title":"Features"},{"location":"environments/ide/vscode/#installation","text":"Run the following command in your command line pip install ipyvizzu pandas or place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). !pip install ipyvizzu pandas","title":"Installation"},{"location":"environments/ide/vscode/#sample","text":"Try ipyvizzu in VSCode Python with the following sample. # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL ) # add data to Chart data = Data() df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/showcases/titanic/titanic.csv\" ) data.add_df(df) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with _repr_html_() method (display=DisplayTarget.MANUAL) chart Check the Tutorial for more info.","title":"Sample"},{"location":"environments/notebook/","text":"Notebooks ipyvizzu is available in the following Notebooks. We would love to add more environments and examples, so if you miss anything from our list, please open an issue in our Github repo . Jupyter Notebook Colab Databricks DataCamp Deepnote JupyterLab JupyterLite Kaggle Noteable","title":"Notebooks"},{"location":"environments/notebook/#notebooks","text":"ipyvizzu is available in the following Notebooks. We would love to add more environments and examples, so if you miss anything from our list, please open an issue in our Github repo . Jupyter Notebook Colab Databricks DataCamp Deepnote JupyterLab JupyterLite Kaggle Noteable","title":"Notebooks"},{"location":"environments/notebook/colab/","text":"Colab Features The features of ipyvizzu that are available in Colab are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Display features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details. Live example Installation Place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). !pip install ipyvizzu pandas Sample Try ipyvizzu in Colab with the following sample. # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL ) # add data to Chart data = Data() df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/showcases/titanic/titanic.csv\" ) data.add_df(df) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with show or _repr_html_ method (display=DisplayTarget.MANUAL) chart.show() # chart Check the Tutorial for more info.","title":"Colab"},{"location":"environments/notebook/colab/#colab","text":"","title":"Colab"},{"location":"environments/notebook/colab/#features","text":"The features of ipyvizzu that are available in Colab are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Display features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details.","title":"Features"},{"location":"environments/notebook/colab/#live-example","text":"","title":"Live example"},{"location":"environments/notebook/colab/#installation","text":"Place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). !pip install ipyvizzu pandas","title":"Installation"},{"location":"environments/notebook/colab/#sample","text":"Try ipyvizzu in Colab with the following sample. # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL ) # add data to Chart data = Data() df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/showcases/titanic/titanic.csv\" ) data.add_df(df) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with show or _repr_html_ method (display=DisplayTarget.MANUAL) chart.show() # chart Check the Tutorial for more info.","title":"Sample"},{"location":"environments/notebook/databricks/","text":"Databricks Features The features of ipyvizzu that are available in Databricks are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Display features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details. Live example Open in Databricks Installation Place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). !pip install ipyvizzu pandas Sample Try ipyvizzu in Databricks with the following sample. # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL ) # add data to Chart data = Data() df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/showcases/titanic/titanic.csv\" ) data.add_df(df) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with _repr_html_ method (display=DisplayTarget.MANUAL) chart Check the Tutorial for more info.","title":"Databricks"},{"location":"environments/notebook/databricks/#databricks","text":"","title":"Databricks"},{"location":"environments/notebook/databricks/#features","text":"The features of ipyvizzu that are available in Databricks are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Display features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details.","title":"Features"},{"location":"environments/notebook/databricks/#live-example","text":"Open in Databricks","title":"Live example"},{"location":"environments/notebook/databricks/#installation","text":"Place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). !pip install ipyvizzu pandas","title":"Installation"},{"location":"environments/notebook/databricks/#sample","text":"Try ipyvizzu in Databricks with the following sample. # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL ) # add data to Chart data = Data() df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/showcases/titanic/titanic.csv\" ) data.add_df(df) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with _repr_html_ method (display=DisplayTarget.MANUAL) chart Check the Tutorial for more info.","title":"Sample"},{"location":"environments/notebook/datacamp/","text":"DataCamp Features The features of ipyvizzu that are available in DataCamp are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Display features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) * Display all animations after show method called ( display = DisplayTarget.MANUAL ) * Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) * Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) * Automatically display all animations after the last running cell ( display = DisplayTarget.END ) * Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) * ipyvizzu does not work in the default editor, switch to the JupyterLab -style editor Check Chart settings chapter for more details. Installation Place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). !pip install ipyvizzu pandas Sample Try ipyvizzu in DataCamp with the following sample. # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\" ) # or Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.ACTUAL) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.BEGIN) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.END) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL) # add data to Chart data = Data() df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/showcases/titanic/titanic.csv\" ) data.add_df(df) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with show or _repr_html_ method (display=DisplayTarget.MANUAL) # chart.show() # chart Check the Tutorial for more info.","title":"DataCamp"},{"location":"environments/notebook/datacamp/#datacamp","text":"","title":"DataCamp"},{"location":"environments/notebook/datacamp/#features","text":"The features of ipyvizzu that are available in DataCamp are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Display features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) * Display all animations after show method called ( display = DisplayTarget.MANUAL ) * Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) * Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) * Automatically display all animations after the last running cell ( display = DisplayTarget.END ) * Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) * ipyvizzu does not work in the default editor, switch to the JupyterLab -style editor Check Chart settings chapter for more details.","title":"Features"},{"location":"environments/notebook/datacamp/#installation","text":"Place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). !pip install ipyvizzu pandas","title":"Installation"},{"location":"environments/notebook/datacamp/#sample","text":"Try ipyvizzu in DataCamp with the following sample. # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\" ) # or Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.ACTUAL) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.BEGIN) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.END) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL) # add data to Chart data = Data() df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/showcases/titanic/titanic.csv\" ) data.add_df(df) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with show or _repr_html_ method (display=DisplayTarget.MANUAL) # chart.show() # chart Check the Tutorial for more info.","title":"Sample"},{"location":"environments/notebook/deepnote/","text":"Deepnote Features The features of ipyvizzu that are available in Deepnote are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Display features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details. Live example Installation Place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). !pip install ipyvizzu pandas Sample Try ipyvizzu in Deepnote with the following sample. # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL ) # add data to Chart data = Data() df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/showcases/titanic/titanic.csv\" ) data.add_df(df) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with show or _repr_html_ method (display=DisplayTarget.MANUAL) chart.show() # chart Check the Tutorial for more info.","title":"Deepnote"},{"location":"environments/notebook/deepnote/#deepnote","text":"","title":"Deepnote"},{"location":"environments/notebook/deepnote/#features","text":"The features of ipyvizzu that are available in Deepnote are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Display features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details.","title":"Features"},{"location":"environments/notebook/deepnote/#live-example","text":"","title":"Live example"},{"location":"environments/notebook/deepnote/#installation","text":"Place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). !pip install ipyvizzu pandas","title":"Installation"},{"location":"environments/notebook/deepnote/#sample","text":"Try ipyvizzu in Deepnote with the following sample. # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL ) # add data to Chart data = Data() df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/showcases/titanic/titanic.csv\" ) data.add_df(df) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with show or _repr_html_ method (display=DisplayTarget.MANUAL) chart.show() # chart Check the Tutorial for more info.","title":"Sample"},{"location":"environments/notebook/jupyterlab/","text":"JupyterLab Features The features of ipyvizzu that are available in JupyterLab are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Display features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details. Installation Run the following command in your command line pip install ipyvizzu pandas or place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). !pip install ipyvizzu pandas Sample Try ipyvizzu in JupyterLab with the following sample. # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\" ) # or Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.ACTUAL) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.BEGIN) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.END) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL) # add data to Chart data = Data() df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/showcases/titanic/titanic.csv\" ) data.add_df(df) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with show or _repr_html_ method (display=DisplayTarget.MANUAL) # chart.show() # chart Check the Tutorial for more info.","title":"JupyterLab"},{"location":"environments/notebook/jupyterlab/#jupyterlab","text":"","title":"JupyterLab"},{"location":"environments/notebook/jupyterlab/#features","text":"The features of ipyvizzu that are available in JupyterLab are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Display features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details.","title":"Features"},{"location":"environments/notebook/jupyterlab/#installation","text":"Run the following command in your command line pip install ipyvizzu pandas or place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). !pip install ipyvizzu pandas","title":"Installation"},{"location":"environments/notebook/jupyterlab/#sample","text":"Try ipyvizzu in JupyterLab with the following sample. # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\" ) # or Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.ACTUAL) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.BEGIN) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.END) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL) # add data to Chart data = Data() df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/showcases/titanic/titanic.csv\" ) data.add_df(df) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with show or _repr_html_ method (display=DisplayTarget.MANUAL) # chart.show() # chart Check the Tutorial for more info.","title":"Sample"},{"location":"environments/notebook/jupyterlite/","text":"JupyterLite Features The features of ipyvizzu that are available in JupyterLite are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Display features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details. Installation Place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). import micropip await micropip.install(\"ipyvizzu\") Sample Try ipyvizzu in JupyterLite with the following sample. # import pandas, js, asyncio, StringIO and ipyvizzu import pandas as pd import js, asyncio from io import StringIO from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\" ) # or Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.ACTUAL) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.BEGIN) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.END) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL) # add data to Chart # download data from # \"https://ipyvizzu.vizzuhq.com/0.16/showcases/titanic/titanic.csv\" # and place it in your JupyterLite workspace DB_NAME = \"JupyterLite Storage\" async def get_contents(path): \"\"\"use the IndexedDB API to acess JupyterLite's in-browser storage for documentation purposes, the full names of the JS API objects are used. see https://developer.mozilla.org/en-US/docs/Web/API/IDBRequest \"\"\" queue = asyncio.Queue(1) IDBOpenDBRequest = js.self.indexedDB.open(DB_NAME) IDBOpenDBRequest.onsuccess = ( IDBOpenDBRequest.onerror ) = queue.put_nowait await queue.get() if IDBOpenDBRequest.result is None: return None IDBTransaction = IDBOpenDBRequest.result.transaction( \"files\", \"readonly\" ) IDBObjectStore = IDBTransaction.objectStore(\"files\") IDBRequest = IDBObjectStore.get(path, \"key\") IDBRequest.onsuccess = IDBRequest.onerror = queue.put_nowait await queue.get() return IDBRequest.result.to_py() if IDBRequest.result else None data = Data() data_csv = await get_contents(\"titanic.csv\") df = pd.read_csv(StringIO(data_csv[\"content\"])) data.add_df(df) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with show or _repr_html_ method (display=DisplayTarget.MANUAL) # chart.show() # chart Check the Tutorial for more info.","title":"JupyterLite"},{"location":"environments/notebook/jupyterlite/#jupyterlite","text":"","title":"JupyterLite"},{"location":"environments/notebook/jupyterlite/#features","text":"The features of ipyvizzu that are available in JupyterLite are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Display features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details.","title":"Features"},{"location":"environments/notebook/jupyterlite/#installation","text":"Place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). import micropip await micropip.install(\"ipyvizzu\")","title":"Installation"},{"location":"environments/notebook/jupyterlite/#sample","text":"Try ipyvizzu in JupyterLite with the following sample. # import pandas, js, asyncio, StringIO and ipyvizzu import pandas as pd import js, asyncio from io import StringIO from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\" ) # or Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.ACTUAL) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.BEGIN) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.END) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL) # add data to Chart # download data from # \"https://ipyvizzu.vizzuhq.com/0.16/showcases/titanic/titanic.csv\" # and place it in your JupyterLite workspace DB_NAME = \"JupyterLite Storage\" async def get_contents(path): \"\"\"use the IndexedDB API to acess JupyterLite's in-browser storage for documentation purposes, the full names of the JS API objects are used. see https://developer.mozilla.org/en-US/docs/Web/API/IDBRequest \"\"\" queue = asyncio.Queue(1) IDBOpenDBRequest = js.self.indexedDB.open(DB_NAME) IDBOpenDBRequest.onsuccess = ( IDBOpenDBRequest.onerror ) = queue.put_nowait await queue.get() if IDBOpenDBRequest.result is None: return None IDBTransaction = IDBOpenDBRequest.result.transaction( \"files\", \"readonly\" ) IDBObjectStore = IDBTransaction.objectStore(\"files\") IDBRequest = IDBObjectStore.get(path, \"key\") IDBRequest.onsuccess = IDBRequest.onerror = queue.put_nowait await queue.get() return IDBRequest.result.to_py() if IDBRequest.result else None data = Data() data_csv = await get_contents(\"titanic.csv\") df = pd.read_csv(StringIO(data_csv[\"content\"])) data.add_df(df) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with show or _repr_html_ method (display=DisplayTarget.MANUAL) # chart.show() # chart Check the Tutorial for more info.","title":"Sample"},{"location":"environments/notebook/jupyternotebook/","text":"Jupyter Notebook Features The features of ipyvizzu that are available in Jupyter Notebook are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Display features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details. Installation Run the following command in your command line pip install ipyvizzu pandas or place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). !pip install ipyvizzu pandas Sample Try ipyvizzu in Jupyter Notebook with the following sample. # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\" ) # or Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.ACTUAL) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.BEGIN) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.END) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL) # add data to Chart data = Data() df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/showcases/titanic/titanic.csv\" ) data.add_df(df) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with show or _repr_html_ method (display=DisplayTarget.MANUAL) # chart.show() # chart Check the Tutorial for more info.","title":"Jupyter Notebook"},{"location":"environments/notebook/jupyternotebook/#jupyter-notebook","text":"","title":"Jupyter Notebook"},{"location":"environments/notebook/jupyternotebook/#features","text":"The features of ipyvizzu that are available in Jupyter Notebook are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Display features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details.","title":"Features"},{"location":"environments/notebook/jupyternotebook/#installation","text":"Run the following command in your command line pip install ipyvizzu pandas or place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). !pip install ipyvizzu pandas","title":"Installation"},{"location":"environments/notebook/jupyternotebook/#sample","text":"Try ipyvizzu in Jupyter Notebook with the following sample. # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\" ) # or Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.ACTUAL) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.BEGIN) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.END) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL) # add data to Chart data = Data() df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/showcases/titanic/titanic.csv\" ) data.add_df(df) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with show or _repr_html_ method (display=DisplayTarget.MANUAL) # chart.show() # chart Check the Tutorial for more info.","title":"Sample"},{"location":"environments/notebook/kaggle/","text":"Kaggle Features The features of ipyvizzu that are available in Kaggle are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Display features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details. Live example Installation Place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). !pip install ipyvizzu pandas Sample Try ipyvizzu in Kaggle with the following sample. # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\" ) # or Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.ACTUAL) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.BEGIN) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.END) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL) # add data to Chart data = Data() df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/showcases/titanic/titanic.csv\" ) data.add_df(df) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with show or _repr_html_ method (display=DisplayTarget.MANUAL) # chart.show() # chart Check the Tutorial for more info.","title":"Kaggle"},{"location":"environments/notebook/kaggle/#kaggle","text":"","title":"Kaggle"},{"location":"environments/notebook/kaggle/#features","text":"The features of ipyvizzu that are available in Kaggle are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Display features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details.","title":"Features"},{"location":"environments/notebook/kaggle/#live-example","text":"","title":"Live example"},{"location":"environments/notebook/kaggle/#installation","text":"Place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). !pip install ipyvizzu pandas","title":"Installation"},{"location":"environments/notebook/kaggle/#sample","text":"Try ipyvizzu in Kaggle with the following sample. # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\" ) # or Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.ACTUAL) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.BEGIN) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.END) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL) # add data to Chart data = Data() df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/showcases/titanic/titanic.csv\" ) data.add_df(df) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with show or _repr_html_ method (display=DisplayTarget.MANUAL) # chart.show() # chart Check the Tutorial for more info.","title":"Sample"},{"location":"environments/notebook/noteable/","text":"Noteable Features The features of ipyvizzu that are available in Noteable are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Display features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details. Installation Place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). !pip install ipyvizzu pandas Sample Try ipyvizzu in Noteable with the following sample. # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\" ) # or Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.ACTUAL) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.BEGIN) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.END) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL) # add data to Chart data = Data() df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/showcases/titanic/titanic.csv\" ) data.add_df(df) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with show or _repr_html_ method (display=DisplayTarget.MANUAL) # chart.show() # chart Check the Tutorial for more info.","title":"Noteable"},{"location":"environments/notebook/noteable/#noteable","text":"","title":"Noteable"},{"location":"environments/notebook/noteable/#features","text":"The features of ipyvizzu that are available in Noteable are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Display features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details.","title":"Features"},{"location":"environments/notebook/noteable/#installation","text":"Place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). !pip install ipyvizzu pandas","title":"Installation"},{"location":"environments/notebook/noteable/#sample","text":"Try ipyvizzu in Noteable with the following sample. # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\" ) # or Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.ACTUAL) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.BEGIN) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.END) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL) # add data to Chart data = Data() df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/showcases/titanic/titanic.csv\" ) data.add_df(df) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with show or _repr_html_ method (display=DisplayTarget.MANUAL) # chart.show() # chart Check the Tutorial for more info.","title":"Sample"},{"location":"environments/platform/","text":"App platforms ipyvizzu is available in the following App platforms. We would love to add more environments and examples, so if you miss anything from our list, please open an issue in our Github repo . Streamlit Flask Panel Mercury Voil\u00e0","title":"App platforms"},{"location":"environments/platform/#app-platforms","text":"ipyvizzu is available in the following App platforms. We would love to add more environments and examples, so if you miss anything from our list, please open an issue in our Github repo . Streamlit Flask Panel Mercury Voil\u00e0","title":"App platforms"},{"location":"environments/platform/flask/","text":"Flask Features The features of ipyvizzu that are available in Flask are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Display features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) * Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details. *you can display the Chart in other ways, see the sample below Installation Run the following command in your command line in order to install ipyvizzu (visit Installation chapter for more options and details). pip install ipyvizzu pandas flask Sample Try ipyvizzu in Flask with the following sample. # import flask, pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget from flask import Flask, render_template # initialize Chart chart = Chart( width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL ) # add data to Chart data = Data() df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/showcases/titanic/titanic.csv\" ) data.add_df(df) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart app = Flask(__name__) html = chart._repr_html_() @app.route(\"/\") def vizzu(): return render_template(\"vizzu.html\", mychart=html) Place the above code blocks into a python file (for example called application.py ), create the html template ( templates/vizzu.html ) with the following content <!DOCTYPE html> <html> <body> <div class=\"container\"> <iframe frameborder=\"0\" height=\"480px\" scrolling=\"no\" src=\"data:text/html, {{ mychart }}\" width=\"800px\"> </iframe> </div> </body> </html> and run the following command in your command line in order to try it. flask --app application run Check the Tutorial for more info.","title":"Flask"},{"location":"environments/platform/flask/#flask","text":"","title":"Flask"},{"location":"environments/platform/flask/#features","text":"The features of ipyvizzu that are available in Flask are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Display features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) * Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details. *you can display the Chart in other ways, see the sample below","title":"Features"},{"location":"environments/platform/flask/#installation","text":"Run the following command in your command line in order to install ipyvizzu (visit Installation chapter for more options and details). pip install ipyvizzu pandas flask","title":"Installation"},{"location":"environments/platform/flask/#sample","text":"Try ipyvizzu in Flask with the following sample. # import flask, pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget from flask import Flask, render_template # initialize Chart chart = Chart( width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL ) # add data to Chart data = Data() df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/showcases/titanic/titanic.csv\" ) data.add_df(df) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart app = Flask(__name__) html = chart._repr_html_() @app.route(\"/\") def vizzu(): return render_template(\"vizzu.html\", mychart=html) Place the above code blocks into a python file (for example called application.py ), create the html template ( templates/vizzu.html ) with the following content <!DOCTYPE html> <html> <body> <div class=\"container\"> <iframe frameborder=\"0\" height=\"480px\" scrolling=\"no\" src=\"data:text/html, {{ mychart }}\" width=\"800px\"> </iframe> </div> </body> </html> and run the following command in your command line in order to try it. flask --app application run Check the Tutorial for more info.","title":"Sample"},{"location":"environments/platform/mercury/","text":"Mercury The Mercury framework convert Jupyter Notebooks to interactive Web Apps. It integrates great with ipyvizzu . Features The features of ipyvizzu that are available in Mercury are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) DisplayUse scroll into view ( scroll_into_view = True ) Display features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details. Live example Installation Add ipyvizzu to requirements.txt . python-dotenv pandas mercury ipyvizzu Sample Try ipyvizzu in Mercury with the following sample. # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget import mercury as mr # setup Mercury App app = mr.App( title=\"ipyvizzu demo\", description=\"ipyvizzu demo with mercury\" ) # add widget gender = mr.Select( label=\"Select sex\", value=\"female\", choices=[\"female\", \"male\"] ) # initialize Chart chart = Chart( width=\"640px\", height=\"360px\" ) # or Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.ACTUAL) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.BEGIN) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.END) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL) # add data to Chart data = Data() df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/showcases/titanic/titanic.csv\" ) data.add_df(df) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # filter data by the selected gender to Chart data_filter = Data.filter(f\"record['Sex'] == '{gender.value}'\") chart.animate(data_filter) # display Chart with show method (display=DisplayTarget.MANUAL) # chart.show() Check the Tutorial for more info.","title":"Mercury"},{"location":"environments/platform/mercury/#mercury","text":"The Mercury framework convert Jupyter Notebooks to interactive Web Apps. It integrates great with ipyvizzu .","title":"Mercury"},{"location":"environments/platform/mercury/#features","text":"The features of ipyvizzu that are available in Mercury are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) DisplayUse scroll into view ( scroll_into_view = True ) Display features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details.","title":"Features"},{"location":"environments/platform/mercury/#live-example","text":"","title":"Live example"},{"location":"environments/platform/mercury/#installation","text":"Add ipyvizzu to requirements.txt . python-dotenv pandas mercury ipyvizzu","title":"Installation"},{"location":"environments/platform/mercury/#sample","text":"Try ipyvizzu in Mercury with the following sample. # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget import mercury as mr # setup Mercury App app = mr.App( title=\"ipyvizzu demo\", description=\"ipyvizzu demo with mercury\" ) # add widget gender = mr.Select( label=\"Select sex\", value=\"female\", choices=[\"female\", \"male\"] ) # initialize Chart chart = Chart( width=\"640px\", height=\"360px\" ) # or Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.ACTUAL) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.BEGIN) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.END) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL) # add data to Chart data = Data() df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/showcases/titanic/titanic.csv\" ) data.add_df(df) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # filter data by the selected gender to Chart data_filter = Data.filter(f\"record['Sex'] == '{gender.value}'\") chart.animate(data_filter) # display Chart with show method (display=DisplayTarget.MANUAL) # chart.show() Check the Tutorial for more info.","title":"Sample"},{"location":"environments/platform/panel/","text":"Panel Features The features of ipyvizzu that are available in Panel are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Display features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details. Installation Run the following command in your command line in order to install ipyvizzu (visit Installation chapter for more options and details). pip install ipyvizzu pandas panel Sample Try ipyvizzu in Panel with the following sample. # import panel, pandas and ipyvizzu import panel as pn import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget def create_chart(): # initialize chart chart = Chart( width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL ) # create and add data to Chart data = Data() df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/showcases/titanic/titanic.csv\" ) data.add_df(df) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # return Chart return chart # create Chart CHART = create_chart() # display Chart pn.extension(sizing_mode=\"stretch_width\", template=\"fast\") pn.state.template.param.update( title=\"ipyvizzu\", ) pn.pane.Markdown( \"\"\" # Panel demo with ipyvizzu \"\"\" ).servable() pn.pane.HTML(CHART, height=370, sizing_mode=\"stretch_both\").servable() Place the above code blocks into a python file (for example called ipyvizzu_example.py ) and run the following command in your command line in order to try it. panel serve ipyvizzu_example.py --autoreload Check the Tutorial for more info.","title":"Panel"},{"location":"environments/platform/panel/#panel","text":"","title":"Panel"},{"location":"environments/platform/panel/#features","text":"The features of ipyvizzu that are available in Panel are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Display features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details.","title":"Features"},{"location":"environments/platform/panel/#installation","text":"Run the following command in your command line in order to install ipyvizzu (visit Installation chapter for more options and details). pip install ipyvizzu pandas panel","title":"Installation"},{"location":"environments/platform/panel/#sample","text":"Try ipyvizzu in Panel with the following sample. # import panel, pandas and ipyvizzu import panel as pn import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget def create_chart(): # initialize chart chart = Chart( width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL ) # create and add data to Chart data = Data() df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/showcases/titanic/titanic.csv\" ) data.add_df(df) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # return Chart return chart # create Chart CHART = create_chart() # display Chart pn.extension(sizing_mode=\"stretch_width\", template=\"fast\") pn.state.template.param.update( title=\"ipyvizzu\", ) pn.pane.Markdown( \"\"\" # Panel demo with ipyvizzu \"\"\" ).servable() pn.pane.HTML(CHART, height=370, sizing_mode=\"stretch_both\").servable() Place the above code blocks into a python file (for example called ipyvizzu_example.py ) and run the following command in your command line in order to try it. panel serve ipyvizzu_example.py --autoreload Check the Tutorial for more info.","title":"Sample"},{"location":"environments/platform/streamlit/","text":"Streamlit There is a new Streamlit component, streamlit-vizzu , that allow you to interact with an ipyvizzu chart within a Streamlit app without the chart being redrawn on every interaction. Features The features of ipyvizzu that are available in Streamlit are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Display features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details. Installation Run the following command in your command line in order to install ipyvizzu (visit Installation chapter for more options and details). pip install ipyvizzu pandas streamlit Sample Try ipyvizzu in Streamlit with the following sample. # import streamlit, pandas and ipyvizzu from streamlit.components.v1 import html import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget def create_chart(): # initialize Chart chart = Chart( width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL ) # create and add data to Chart data = Data() df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/showcases/titanic/titanic.csv\" ) data.add_df(df) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # return generated html code return chart._repr_html_() # generate Chart's html code CHART = create_chart() # display Chart html(CHART, width=650, height=370) Place the above code blocks into a python file (for example called ipyvizzu_example.py ) and run the following command in your command line in order to try it. streamlit run ipyvizzu_example.py Check the Tutorial for more info.","title":"Streamlit"},{"location":"environments/platform/streamlit/#streamlit","text":"There is a new Streamlit component, streamlit-vizzu , that allow you to interact with an ipyvizzu chart within a Streamlit app without the chart being redrawn on every interaction.","title":"Streamlit"},{"location":"environments/platform/streamlit/#features","text":"The features of ipyvizzu that are available in Streamlit are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Display features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details.","title":"Features"},{"location":"environments/platform/streamlit/#installation","text":"Run the following command in your command line in order to install ipyvizzu (visit Installation chapter for more options and details). pip install ipyvizzu pandas streamlit","title":"Installation"},{"location":"environments/platform/streamlit/#sample","text":"Try ipyvizzu in Streamlit with the following sample. # import streamlit, pandas and ipyvizzu from streamlit.components.v1 import html import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget def create_chart(): # initialize Chart chart = Chart( width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL ) # create and add data to Chart data = Data() df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/showcases/titanic/titanic.csv\" ) data.add_df(df) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # return generated html code return chart._repr_html_() # generate Chart's html code CHART = create_chart() # display Chart html(CHART, width=650, height=370) Place the above code blocks into a python file (for example called ipyvizzu_example.py ) and run the following command in your command line in order to try it. streamlit run ipyvizzu_example.py Check the Tutorial for more info.","title":"Sample"},{"location":"environments/platform/voila/","text":"Voil\u00e0 Features The features of ipyvizzu that are available in Voil\u00e0 are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Display features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details. Installation Run the following command in your command line pip install ipyvizzu pandas voila or place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). !pip install ipyvizzu pandas Sample Try ipyvizzu in Voil\u00e0 with the following sample. # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\" ) # or Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.ACTUAL) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.BEGIN) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.END) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL) # add data to Chart data = Data() df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/showcases/titanic/titanic.csv\" ) data.add_df(df) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with show or _repr_html_ method (display=DisplayTarget.MANUAL) # chart.show() # chart Place the above code blocks into notebook cells in a notebook file (for example called ipyvizzu_example.ipynb ) and run the following command in your command line in order to try it. voila ipyvizzu_example.ipynb Check the Tutorial for more info.","title":"Voil\u00e0"},{"location":"environments/platform/voila/#voila","text":"","title":"Voil\u00e0"},{"location":"environments/platform/voila/#features","text":"The features of ipyvizzu that are available in Voil\u00e0 are marked with a green check. Change the url of Vizzu ( vizzu ) Change the width of the Chart ( width ) Change the height of the Chart ( height ) Use scroll into view ( scroll_into_view = True ) Display features: Display all animations after _repr_html_ method called ( display = DisplayTarget.MANUAL ) Display all animations after show method called ( display = DisplayTarget.MANUAL ) Automatically display all animations after the first cell ( display = DisplayTarget.BEGIN ) Automatically display all animations after the currently running cell ( display = DisplayTarget.ACTUAL ) Automatically display all animations after the last running cell ( display = DisplayTarget.END ) Rerun any cell without rerun the first cell ( display != DisplayTarget.MANUAL ) Check Chart settings chapter for more details.","title":"Features"},{"location":"environments/platform/voila/#installation","text":"Run the following command in your command line pip install ipyvizzu pandas voila or place the following code into a notebook cell in order to install ipyvizzu (visit Installation chapter for more options and details). !pip install ipyvizzu pandas","title":"Installation"},{"location":"environments/platform/voila/#sample","text":"Try ipyvizzu in Voil\u00e0 with the following sample. # import pandas and ipyvizzu import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget # initialize Chart chart = Chart( width=\"640px\", height=\"360px\" ) # or Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.ACTUAL) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.BEGIN) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.END) # chart = Chart(width=\"640px\", height=\"360px\", display=DisplayTarget.MANUAL) # add data to Chart data = Data() df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/showcases/titanic/titanic.csv\" ) data.add_df(df) chart.animate(data) # add config to Chart chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) # add style to Chart chart.animate(Style({\"title\": {\"fontSize\": 35}})) # display Chart with show or _repr_html_ method (display=DisplayTarget.MANUAL) # chart.show() # chart Place the above code blocks into notebook cells in a notebook file (for example called ipyvizzu_example.ipynb ) and run the following command in your command line in order to try it. voila ipyvizzu_example.ipynb Check the Tutorial for more info.","title":"Sample"},{"location":"examples/","text":"Examples The ipyvizzu examples are grouped into four categories. Preset charts : Examples of the well-known chart types ipyvizzu offers a shorthand for, as described in the Chart presets chapter of the Tutorial. Analytical operations : A collection of examples to help you apply animated transitions that show another facet of the data under analysis. Also a great source of inspiration for finding the next chart when you're building a story. Static charts : Examples of well-known chart types configured with the original chart type-agnostic syntax of ipyvizzu .","title":"Examples"},{"location":"examples/#examples","text":"The ipyvizzu examples are grouped into four categories. Preset charts : Examples of the well-known chart types ipyvizzu offers a shorthand for, as described in the Chart presets chapter of the Tutorial. Analytical operations : A collection of examples to help you apply animated transitions that show another facet of the data under analysis. Also a great source of inspiration for finding the next chart when you're building a story. Static charts : Examples of well-known chart types configured with the original chart type-agnostic syntax of ipyvizzu .","title":"Examples"},{"location":"examples/analytical_operations/","text":"Analytical Operations src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/drilldown/area.mp4' type='video/mp4'> Drill down src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/area_100percent_stacked.mp4' type='video/mp4'> Sum src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/compare/area_100percent_stacked.mp4' type='video/mp4'> Compare src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/split/area_polar_stacked.mp4' type='video/mp4'> Split src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/stretch_to_proportion/area_stacked.mp4' type='video/mp4'> Stretch to proportion src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/distribute/existingmeasure_area_stacked.mp4' type='video/mp4'> Distribute src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/filter/area_polar_stacked.mp4' type='video/mp4'> Filter src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/change_dimension/area_polar_stacked.mp4' type='video/mp4'> Change dimension src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/misc/donut_to_coxcomb.mp4' type='video/mp4'> Miscellaneous","title":"Analytical operations"},{"location":"examples/analytical_operations/#analytical-operations","text":"src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/drilldown/area.mp4' type='video/mp4'> Drill down src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/area_100percent_stacked.mp4' type='video/mp4'> Sum src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/compare/area_100percent_stacked.mp4' type='video/mp4'> Compare src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/split/area_polar_stacked.mp4' type='video/mp4'> Split src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/stretch_to_proportion/area_stacked.mp4' type='video/mp4'> Stretch to proportion src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/distribute/existingmeasure_area_stacked.mp4' type='video/mp4'> Distribute src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/filter/area_polar_stacked.mp4' type='video/mp4'> Filter src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/change_dimension/area_polar_stacked.mp4' type='video/mp4'> Change dimension src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/misc/donut_to_coxcomb.mp4' type='video/mp4'> Miscellaneous","title":"Analytical Operations"},{"location":"examples/analytical_operations/change_dimension/","text":"Change dimension src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/change_dimension/area_polar_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/change_dimension/area_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/change_dimension/column_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/change_dimension/dotplot_1.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/change_dimension/dotplot_2.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/change_dimension/dotplot_polar.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/change_dimension/line.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/change_dimension/line_polar.mp4' type='video/mp4'>","title":"Change dimension"},{"location":"examples/analytical_operations/change_dimension/#change-dimension","text":"src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/change_dimension/area_polar_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/change_dimension/area_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/change_dimension/column_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/change_dimension/dotplot_1.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/change_dimension/dotplot_2.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/change_dimension/dotplot_polar.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/change_dimension/line.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/change_dimension/line_polar.mp4' type='video/mp4'>","title":"Change dimension"},{"location":"examples/analytical_operations/change_dimension/area_polar_stacked/","text":"Polar Stacked Area Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) replace the Dimension and the Measure on the Y-axis with new ones and the Dimension on the Color channel with a new one + here is an example how you can add a color palette to the Style chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": { \"set\": [\"Country\", \"Value 2 (+)\"], \"range\": {\"min\": \"-20%\"}, }, \"color\": \"Country\", }, \"geometry\": \"area\", \"coordSystem\": \"polar\", } ) ) chart.animate( Config( { \"channels\": { \"y\": [\"Joy factors\", \"Value 3 (+)\"], \"color\": \"Joy factors\", } } ), Style( { \"plot\": { \"marker\": { \"colorPalette\": \"#ef675aFF #6d8cccFF #e6cf99FF #9c50abFF\" } } } ), )","title":"Polar Stacked Area"},{"location":"examples/analytical_operations/change_dimension/area_polar_stacked/#polar-stacked-area","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) replace the Dimension and the Measure on the Y-axis with new ones and the Dimension on the Color channel with a new one + here is an example how you can add a color palette to the Style chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": { \"set\": [\"Country\", \"Value 2 (+)\"], \"range\": {\"min\": \"-20%\"}, }, \"color\": \"Country\", }, \"geometry\": \"area\", \"coordSystem\": \"polar\", } ) ) chart.animate( Config( { \"channels\": { \"y\": [\"Joy factors\", \"Value 3 (+)\"], \"color\": \"Joy factors\", } } ), Style( { \"plot\": { \"marker\": { \"colorPalette\": \"#ef675aFF #6d8cccFF #e6cf99FF #9c50abFF\" } } } ), )","title":"Polar Stacked Area"},{"location":"examples/analytical_operations/change_dimension/area_stacked/","text":"Stacked Area Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) replace the Dimension and the Measure on the Y-axis with new ones and the Dimension on the Color channel with a new one + here is an example how you can add a color palette to the Style chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"color\": \"Country\", }, \"geometry\": \"area\", } ) ) chart.animate( Config( { \"channels\": { \"y\": [\"Joy factors\", \"Value 3 (+)\"], \"color\": \"Joy factors\", } } ), Style( { \"plot\": { \"marker\": { \"colorPalette\": \"#ef675aFF #6d8cccFF #e6cf99FF #9c50abFF\" } } } ), )","title":"Stacked Area"},{"location":"examples/analytical_operations/change_dimension/area_stacked/#stacked-area","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) replace the Dimension and the Measure on the Y-axis with new ones and the Dimension on the Color channel with a new one + here is an example how you can add a color palette to the Style chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"color\": \"Country\", }, \"geometry\": \"area\", } ) ) chart.animate( Config( { \"channels\": { \"y\": [\"Joy factors\", \"Value 3 (+)\"], \"color\": \"Joy factors\", } } ), Style( { \"plot\": { \"marker\": { \"colorPalette\": \"#ef675aFF #6d8cccFF #e6cf99FF #9c50abFF\" } } } ), )","title":"Stacked Area"},{"location":"examples/analytical_operations/change_dimension/column_stacked/","text":"Stacked Column Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) replace the Dimension on the X-axis with a new one chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"color\": \"Country\", } } ) ) chart.animate(Config({\"channels\": {\"x\": \"Joy factors\"}}))","title":"Stacked Column"},{"location":"examples/analytical_operations/change_dimension/column_stacked/#stacked-column","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) replace the Dimension on the X-axis with a new one chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"color\": \"Country\", } } ) ) chart.animate(Config({\"channels\": {\"x\": \"Joy factors\"}}))","title":"Stacked Column"},{"location":"examples/analytical_operations/change_dimension/dotplot_1/","text":"Dot Plot 1 Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) replace the Dimension on the X-axis with a new one chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"color\": \"Country\", }, \"geometry\": \"circle\", } ) ) chart.animate(Config({\"channels\": {\"x\": \"Joy factors\"}}))","title":"Dot Plot 1"},{"location":"examples/analytical_operations/change_dimension/dotplot_1/#dot-plot-1","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) replace the Dimension on the X-axis with a new one chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"color\": \"Country\", }, \"geometry\": \"circle\", } ) ) chart.animate(Config({\"channels\": {\"x\": \"Joy factors\"}}))","title":"Dot Plot 1"},{"location":"examples/analytical_operations/change_dimension/dotplot_2/","text":"Dot Plot 2 Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) replace the Dimension on the Color channel with a new one + here is an example how you can add a color palette to the Style chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"color\": \"Country\", }, \"geometry\": \"circle\", } ) ) chart.animate( Config({\"channels\": {\"color\": \"Joy factors\"}}), Style( { \"plot\": { \"marker\": { \"colorPalette\": \"#ef675aFF #6d8cccFF #e6cf99FF #9c50abFF\" } } } ), )","title":"Dot Plot 2"},{"location":"examples/analytical_operations/change_dimension/dotplot_2/#dot-plot-2","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) replace the Dimension on the Color channel with a new one + here is an example how you can add a color palette to the Style chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"color\": \"Country\", }, \"geometry\": \"circle\", } ) ) chart.animate( Config({\"channels\": {\"color\": \"Joy factors\"}}), Style( { \"plot\": { \"marker\": { \"colorPalette\": \"#ef675aFF #6d8cccFF #e6cf99FF #9c50abFF\" } } } ), )","title":"Dot Plot 2"},{"location":"examples/analytical_operations/change_dimension/dotplot_polar/","text":"Polar Dot Plot Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) replace the Dimension on the Color channel with a new one + here is an example how you can add a color palette to the Style chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"color\": \"Country\", }, \"geometry\": \"circle\", \"coordSystem\": \"polar\", } ) ) chart.animate( Config({\"channels\": {\"color\": \"Joy factors\"}}), Style( { \"plot\": { \"marker\": { \"colorPalette\": \"#ef675aFF #6d8cccFF #e6cf99FF #9c50abFF\" } } } ), )","title":"Polar Dot Plot"},{"location":"examples/analytical_operations/change_dimension/dotplot_polar/#polar-dot-plot","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) replace the Dimension on the Color channel with a new one + here is an example how you can add a color palette to the Style chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"color\": \"Country\", }, \"geometry\": \"circle\", \"coordSystem\": \"polar\", } ) ) chart.animate( Config({\"channels\": {\"color\": \"Joy factors\"}}), Style( { \"plot\": { \"marker\": { \"colorPalette\": \"#ef675aFF #6d8cccFF #e6cf99FF #9c50abFF\" } } } ), )","title":"Polar Dot Plot"},{"location":"examples/analytical_operations/change_dimension/line/","text":"Line Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) replace the Dimension on the Color channel with a new one + here is an example how you can add a color palette to the Style chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"color\": \"Joy factors\", }, \"geometry\": \"line\", } ), Style( { \"plot\": { \"marker\": { \"colorPalette\": \"#ef675aFF #6d8cccFF #e6cf99FF #9c50abFF\" } } } ), ) chart.animate( Config({\"channels\": {\"color\": \"Country\"}}), Style({\"plot\": {\"marker\": {\"colorPalette\": None}}}), )","title":"Line"},{"location":"examples/analytical_operations/change_dimension/line/#line","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) replace the Dimension on the Color channel with a new one + here is an example how you can add a color palette to the Style chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"color\": \"Joy factors\", }, \"geometry\": \"line\", } ), Style( { \"plot\": { \"marker\": { \"colorPalette\": \"#ef675aFF #6d8cccFF #e6cf99FF #9c50abFF\" } } } ), ) chart.animate( Config({\"channels\": {\"color\": \"Country\"}}), Style({\"plot\": {\"marker\": {\"colorPalette\": None}}}), )","title":"Line"},{"location":"examples/analytical_operations/change_dimension/line_polar/","text":"Polar Line Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) replace the Dimension on the Color channel with a new one + here is an example how you can add a color palette to the Style chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"color\": \"Joy factors\", }, \"geometry\": \"line\", \"coordSystem\": \"polar\", } ), Style( { \"plot\": { \"marker\": { \"colorPalette\": \"#ef675aFF #6d8cccFF #e6cf99FF #9c50abFF\" } } } ), ) chart.animate( Config({\"channels\": {\"color\": \"Country\"}}), Style({\"plot\": {\"marker\": {\"colorPalette\": None}}}), )","title":"Polar Line"},{"location":"examples/analytical_operations/change_dimension/line_polar/#polar-line","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) replace the Dimension on the Color channel with a new one + here is an example how you can add a color palette to the Style chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"color\": \"Joy factors\", }, \"geometry\": \"line\", \"coordSystem\": \"polar\", } ), Style( { \"plot\": { \"marker\": { \"colorPalette\": \"#ef675aFF #6d8cccFF #e6cf99FF #9c50abFF\" } } } ), ) chart.animate( Config({\"channels\": {\"color\": \"Country\"}}), Style({\"plot\": {\"marker\": {\"colorPalette\": None}}}), )","title":"Polar Line"},{"location":"examples/analytical_operations/compare/","text":"Compare src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/compare/area_100percent_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/compare/area_polar_split.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/compare/area_polar_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/compare/area_split_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/compare/area_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/compare/column_100percent_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/compare/column_groupped_1.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/compare/column_groupped_2.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/compare/column_split_stacked_1.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/compare/column_split_stacked_2.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/compare/column_stacked_1.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/compare/column_stacked_2.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/compare/coxcomb_1.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/compare/coxcomb_2.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/compare/line.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/compare/line_polar.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/compare/stream_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/compare/waterfall.mp4' type='video/mp4'>","title":"Compare"},{"location":"examples/analytical_operations/compare/#compare","text":"src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/compare/area_100percent_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/compare/area_polar_split.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/compare/area_polar_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/compare/area_split_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/compare/area_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/compare/column_100percent_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/compare/column_groupped_1.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/compare/column_groupped_2.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/compare/column_split_stacked_1.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/compare/column_split_stacked_2.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/compare/column_stacked_1.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/compare/column_stacked_2.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/compare/coxcomb_1.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/compare/coxcomb_2.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/compare/line.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/compare/line_polar.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/compare/stream_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/compare/waterfall.mp4' type='video/mp4'>","title":"Compare"},{"location":"examples/analytical_operations/compare/area_100percent_stacked/","text":"100% Stacked Area Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) remove the Dimension from Y-axis set the Align parameter from 'stretch' to 'min' switch the Geometry from Area to Line chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Value 2 (+)\", \"Country\"], \"color\": \"Country\", }, \"geometry\": \"area\", \"align\": \"stretch\", } ) ) chart.animate( Config( { \"channels\": {\"y\": \"Value 2 (+)\"}, \"geometry\": \"line\", \"align\": \"min\", } ) ) chart.feature(\"tooltip\", True)","title":"100% Stacked Area"},{"location":"examples/analytical_operations/compare/area_100percent_stacked/#100-stacked-area","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) remove the Dimension from Y-axis set the Align parameter from 'stretch' to 'min' switch the Geometry from Area to Line chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Value 2 (+)\", \"Country\"], \"color\": \"Country\", }, \"geometry\": \"area\", \"align\": \"stretch\", } ) ) chart.animate( Config( { \"channels\": {\"y\": \"Value 2 (+)\"}, \"geometry\": \"line\", \"align\": \"min\", } ) ) chart.feature(\"tooltip\", True)","title":"100% Stacked Area"},{"location":"examples/analytical_operations/compare/area_polar_split/","text":"Polar Split Area Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) remove the Dimension from Y-axis a set the Split parameter from True to False switch the Geometry from Area to Line chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Value 1 (+)\", \"Country\"], \"color\": \"Country\", }, \"geometry\": \"area\", \"split\": True, \"coordSystem\": \"polar\", } ) ) chart.animate( Config( { \"channels\": {\"y\": \"Value 1 (+)\"}, \"geometry\": \"line\", \"split\": False, } ) ) chart.feature(\"tooltip\", True)","title":"Polar Split Area"},{"location":"examples/analytical_operations/compare/area_polar_split/#polar-split-area","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) remove the Dimension from Y-axis a set the Split parameter from True to False switch the Geometry from Area to Line chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Value 1 (+)\", \"Country\"], \"color\": \"Country\", }, \"geometry\": \"area\", \"split\": True, \"coordSystem\": \"polar\", } ) ) chart.animate( Config( { \"channels\": {\"y\": \"Value 1 (+)\"}, \"geometry\": \"line\", \"split\": False, } ) ) chart.feature(\"tooltip\", True)","title":"Polar Split Area"},{"location":"examples/analytical_operations/compare/area_polar_stacked/","text":"Polar Stacked Area Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) remove the Dimension from Y-axis switch the Geometry from Area to Line chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Value 2 (+)\", \"Country\"], \"color\": \"Country\", }, \"geometry\": \"area\", \"coordSystem\": \"polar\", } ) ) chart.animate( Config({\"channels\": {\"y\": \"Value 2 (+)\"}, \"geometry\": \"line\"}) ) chart.feature(\"tooltip\", True)","title":"Polar Stacked Area"},{"location":"examples/analytical_operations/compare/area_polar_stacked/#polar-stacked-area","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) remove the Dimension from Y-axis switch the Geometry from Area to Line chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Value 2 (+)\", \"Country\"], \"color\": \"Country\", }, \"geometry\": \"area\", \"coordSystem\": \"polar\", } ) ) chart.animate( Config({\"channels\": {\"y\": \"Value 2 (+)\"}, \"geometry\": \"line\"}) ) chart.feature(\"tooltip\", True)","title":"Polar Stacked Area"},{"location":"examples/analytical_operations/compare/area_split_stacked/","text":"Split Stacked Area Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) remove the Dimension from Y-axis a set the Split parameter from True to False switch the Geometry from Area to Line chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Value 2 (+)\", \"Country\"], \"color\": \"Country\", }, \"geometry\": \"area\", \"split\": True, } ) ) chart.animate( Config( { \"channels\": {\"y\": \"Value 2 (+)\"}, \"geometry\": \"line\", \"split\": False, } ) ) chart.feature(\"tooltip\", True)","title":"Split Stacked Area"},{"location":"examples/analytical_operations/compare/area_split_stacked/#split-stacked-area","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) remove the Dimension from Y-axis a set the Split parameter from True to False switch the Geometry from Area to Line chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Value 2 (+)\", \"Country\"], \"color\": \"Country\", }, \"geometry\": \"area\", \"split\": True, } ) ) chart.animate( Config( { \"channels\": {\"y\": \"Value 2 (+)\"}, \"geometry\": \"line\", \"split\": False, } ) ) chart.feature(\"tooltip\", True)","title":"Split Stacked Area"},{"location":"examples/analytical_operations/compare/area_stacked/","text":"Stacked Area Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) remove the Dimension from Y-axis switch the Geometry from Area to Line chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Value 2 (+)\", \"Country\"], \"color\": \"Country\", }, \"geometry\": \"area\", } ) ) chart.animate( Config({\"channels\": {\"y\": \"Value 2 (+)\"}, \"geometry\": \"line\"}) ) chart.feature(\"tooltip\", True)","title":"Stacked Area"},{"location":"examples/analytical_operations/compare/area_stacked/#stacked-area","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) remove the Dimension from Y-axis switch the Geometry from Area to Line chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Value 2 (+)\", \"Country\"], \"color\": \"Country\", }, \"geometry\": \"area\", } ) ) chart.animate( Config({\"channels\": {\"y\": \"Value 2 (+)\"}, \"geometry\": \"line\"}) ) chart.feature(\"tooltip\", True)","title":"Stacked Area"},{"location":"examples/analytical_operations/compare/column_100percent_stacked/","text":"100% Stacked Column Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) move the Dimension from the Y-axis to the X-axis, behind the one there (group) set the Align parameter from 'stretch' to 'min' chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"color\": \"Country\", }, \"align\": \"stretch\", } ) ) chart.animate( Config( { \"channels\": { \"x\": [\"Year\", \"Country\"], \"y\": \"Value 2 (+)\", }, \"align\": \"min\", } ) ) chart.feature(\"tooltip\", True)","title":"100% Stacked Column"},{"location":"examples/analytical_operations/compare/column_100percent_stacked/#100-stacked-column","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) move the Dimension from the Y-axis to the X-axis, behind the one there (group) set the Align parameter from 'stretch' to 'min' chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"color\": \"Country\", }, \"align\": \"stretch\", } ) ) chart.animate( Config( { \"channels\": { \"x\": [\"Year\", \"Country\"], \"y\": \"Value 2 (+)\", }, \"align\": \"min\", } ) ) chart.feature(\"tooltip\", True)","title":"100% Stacked Column"},{"location":"examples/analytical_operations/compare/column_groupped_1/","text":"Groupped Column 1 Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) move the 2nd Dimension from X-axis to the Y-axis add the Measure to the Label channel too chart.animate( Config( { \"channels\": { \"x\": [\"Year\", \"Country\"], \"y\": \"Value 2 (+)\", \"color\": \"Country\", }, \"geometry\": \"rectangle\", } ) ) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"label\": \"Value 2 (+)\", }, \"split\": True, } ), Style( { \"plot\": { \"marker\": { \"label\": {\"position\": \"top\", \"fontSize\": \"0.6em\"} } } } ), ) chart.feature(\"tooltip\", True)","title":"Groupped Column 1"},{"location":"examples/analytical_operations/compare/column_groupped_1/#groupped-column-1","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) move the 2nd Dimension from X-axis to the Y-axis add the Measure to the Label channel too chart.animate( Config( { \"channels\": { \"x\": [\"Year\", \"Country\"], \"y\": \"Value 2 (+)\", \"color\": \"Country\", }, \"geometry\": \"rectangle\", } ) ) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"label\": \"Value 2 (+)\", }, \"split\": True, } ), Style( { \"plot\": { \"marker\": { \"label\": {\"position\": \"top\", \"fontSize\": \"0.6em\"} } } } ), ) chart.feature(\"tooltip\", True)","title":"Groupped Column 1"},{"location":"examples/analytical_operations/compare/column_groupped_2/","text":"Groupped Column 2 Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) move the 2nd Dimension from X-axis to the Y-axis add the Measure to the Label channel too set the Split parameter to True chart.animate( Config( { \"channels\": { \"x\": [\"Country\", \"Year\"], \"y\": \"Value 2 (+)\", \"color\": \"Country\", } } ) ) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"label\": \"Value 2 (+)\", }, \"split\": True, } ), Style( { \"plot\": { \"marker\": { \"label\": {\"position\": \"top\", \"fontSize\": \"0.6em\"} } } } ), ) chart.feature(\"tooltip\", True)","title":"Groupped Column 2"},{"location":"examples/analytical_operations/compare/column_groupped_2/#groupped-column-2","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) move the 2nd Dimension from X-axis to the Y-axis add the Measure to the Label channel too set the Split parameter to True chart.animate( Config( { \"channels\": { \"x\": [\"Country\", \"Year\"], \"y\": \"Value 2 (+)\", \"color\": \"Country\", } } ) ) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"label\": \"Value 2 (+)\", }, \"split\": True, } ), Style( { \"plot\": { \"marker\": { \"label\": {\"position\": \"top\", \"fontSize\": \"0.6em\"} } } } ), ) chart.feature(\"tooltip\", True)","title":"Groupped Column 2"},{"location":"examples/analytical_operations/compare/column_split_stacked_1/","text":"Split Stacked Column 1 Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) move the dimension from the Y-axis to the X-axis, in front of the one there None the Label channel set the Split parameter to False chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"color\": \"Country\", \"label\": \"Value 2 (+)\", }, \"split\": True, } ), Style( { \"plot\": { \"marker\": { \"label\": {\"position\": \"top\", \"fontSize\": \"0.6em\"} } } } ), ) chart.animate( Config( { \"channels\": { \"x\": [\"Year\", \"Country\"], \"y\": \"Value 2 (+)\", \"label\": None, }, \"split\": False, } ) ) chart.feature(\"tooltip\", True)","title":"Split Stacked Column 1"},{"location":"examples/analytical_operations/compare/column_split_stacked_1/#split-stacked-column-1","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) move the dimension from the Y-axis to the X-axis, in front of the one there None the Label channel set the Split parameter to False chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"color\": \"Country\", \"label\": \"Value 2 (+)\", }, \"split\": True, } ), Style( { \"plot\": { \"marker\": { \"label\": {\"position\": \"top\", \"fontSize\": \"0.6em\"} } } } ), ) chart.animate( Config( { \"channels\": { \"x\": [\"Year\", \"Country\"], \"y\": \"Value 2 (+)\", \"label\": None, }, \"split\": False, } ) ) chart.feature(\"tooltip\", True)","title":"Split Stacked Column 1"},{"location":"examples/analytical_operations/compare/column_split_stacked_2/","text":"Split Stacked Column 2 Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) move the dimension from the Y-axis to the X-axis, behind the one there None the Label channel set the Split parameter to False chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"color\": \"Country\", \"label\": \"Value 2 (+)\", }, \"split\": True, } ), Style( { \"plot\": { \"marker\": { \"label\": {\"position\": \"top\", \"fontSize\": \"0.6em\"} } } } ), ) chart.animate( Config( { \"channels\": { \"x\": [\"Country\", \"Year\"], \"y\": \"Value 2 (+)\", \"label\": None, }, \"split\": False, } ) ) chart.feature(\"tooltip\", True)","title":"Split Stacked Column 2"},{"location":"examples/analytical_operations/compare/column_split_stacked_2/#split-stacked-column-2","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) move the dimension from the Y-axis to the X-axis, behind the one there None the Label channel set the Split parameter to False chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"color\": \"Country\", \"label\": \"Value 2 (+)\", }, \"split\": True, } ), Style( { \"plot\": { \"marker\": { \"label\": {\"position\": \"top\", \"fontSize\": \"0.6em\"} } } } ), ) chart.animate( Config( { \"channels\": { \"x\": [\"Country\", \"Year\"], \"y\": \"Value 2 (+)\", \"label\": None, }, \"split\": False, } ) ) chart.feature(\"tooltip\", True)","title":"Split Stacked Column 2"},{"location":"examples/analytical_operations/compare/column_stacked_1/","text":"Stacked Column 1 Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) move the Dimension from the Y-axis to the X-axis, behind the one there (group) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"color\": \"Country\", } } ) ) chart.animate( Config( {\"channels\": {\"x\": [\"Year\", \"Country\"], \"y\": \"Value 2 (+)\"}} ) ) chart.feature(\"tooltip\", True)","title":"Stacked Column 1"},{"location":"examples/analytical_operations/compare/column_stacked_1/#stacked-column-1","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) move the Dimension from the Y-axis to the X-axis, behind the one there (group) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"color\": \"Country\", } } ) ) chart.animate( Config( {\"channels\": {\"x\": [\"Year\", \"Country\"], \"y\": \"Value 2 (+)\"}} ) ) chart.feature(\"tooltip\", True)","title":"Stacked Column 1"},{"location":"examples/analytical_operations/compare/column_stacked_2/","text":"Stacked Column 2 Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) remove the Dimension from the Y-axis switch the Geometry from Rectangle to Line chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"color\": \"Country\", } } ) ) chart.animate( Config({\"channels\": {\"y\": \"Value 2 (+)\"}, \"geometry\": \"line\"}) ) chart.feature(\"tooltip\", True)","title":"Stacked Column 2"},{"location":"examples/analytical_operations/compare/column_stacked_2/#stacked-column-2","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) remove the Dimension from the Y-axis switch the Geometry from Rectangle to Line chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"color\": \"Country\", } } ) ) chart.animate( Config({\"channels\": {\"y\": \"Value 2 (+)\"}, \"geometry\": \"line\"}) ) chart.feature(\"tooltip\", True)","title":"Stacked Column 2"},{"location":"examples/analytical_operations/compare/coxcomb_1/","text":"Coxcomb 1 Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) move the 2nd Dimension from X-axis to the Y-axis set the Split parameter to True chart.animate( Config( { \"channels\": { \"x\": [\"Country\", \"Year\"], \"y\": {\"set\": \"Value 2 (+)\", \"range\": {\"min\": \"-20%\"}}, \"color\": \"Country\", }, \"coordSystem\": \"polar\", } ) ) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], }, \"split\": True, } ) ) chart.feature(\"tooltip\", True)","title":"Coxcomb 1"},{"location":"examples/analytical_operations/compare/coxcomb_1/#coxcomb-1","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) move the 2nd Dimension from X-axis to the Y-axis set the Split parameter to True chart.animate( Config( { \"channels\": { \"x\": [\"Country\", \"Year\"], \"y\": {\"set\": \"Value 2 (+)\", \"range\": {\"min\": \"-20%\"}}, \"color\": \"Country\", }, \"coordSystem\": \"polar\", } ) ) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], }, \"split\": True, } ) ) chart.feature(\"tooltip\", True)","title":"Coxcomb 1"},{"location":"examples/analytical_operations/compare/coxcomb_2/","text":"Coxcomb 2 Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) move the Dimension from the Y-axis to the X-axis, behind the one there (group) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"color\": \"Country\", }, \"coordSystem\": \"polar\", } ), Style({\"plot\": {\"marker\": {\"rectangleSpacing\": \"0.1em\"}}}), ) chart.animate( Config( {\"channels\": {\"x\": [\"Year\", \"Country\"], \"y\": \"Value 2 (+)\"}} ) ) chart.feature(\"tooltip\", True)","title":"Coxcomb 2"},{"location":"examples/analytical_operations/compare/coxcomb_2/#coxcomb-2","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) move the Dimension from the Y-axis to the X-axis, behind the one there (group) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"color\": \"Country\", }, \"coordSystem\": \"polar\", } ), Style({\"plot\": {\"marker\": {\"rectangleSpacing\": \"0.1em\"}}}), ) chart.animate( Config( {\"channels\": {\"x\": [\"Year\", \"Country\"], \"y\": \"Value 2 (+)\"}} ) ) chart.feature(\"tooltip\", True)","title":"Coxcomb 2"},{"location":"examples/analytical_operations/compare/line/","text":"Line Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add the Dimension which is on the Color channel to the Y-axis too switch the Geometry from Line to Area set the Split parameter to True chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"color\": \"Country\", }, \"geometry\": \"line\", } ) ) chart.animate( Config( { \"channels\": {\"y\": [\"Value 2 (+)\", \"Country\"]}, \"geometry\": \"area\", \"split\": True, } ) ) chart.feature(\"tooltip\", True)","title":"Line"},{"location":"examples/analytical_operations/compare/line/#line","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add the Dimension which is on the Color channel to the Y-axis too switch the Geometry from Line to Area set the Split parameter to True chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"color\": \"Country\", }, \"geometry\": \"line\", } ) ) chart.animate( Config( { \"channels\": {\"y\": [\"Value 2 (+)\", \"Country\"]}, \"geometry\": \"area\", \"split\": True, } ) ) chart.feature(\"tooltip\", True)","title":"Line"},{"location":"examples/analytical_operations/compare/line_polar/","text":"Polar Line Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add the Dimension which is on the Color channel to the Y-axis too switch the Geometry from Line to Area set the Split parameter to True chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"color\": \"Country\", }, \"geometry\": \"line\", \"coordSystem\": \"polar\", } ) ) chart.animate( Config( { \"channels\": { \"y\": { \"set\": [\"Country\", \"Value 2 (+)\"], \"range\": {\"min\": \"-20%\"}, } }, \"geometry\": \"area\", \"split\": True, } ) ) chart.feature(\"tooltip\", True)","title":"Polar Line"},{"location":"examples/analytical_operations/compare/line_polar/#polar-line","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add the Dimension which is on the Color channel to the Y-axis too switch the Geometry from Line to Area set the Split parameter to True chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"color\": \"Country\", }, \"geometry\": \"line\", \"coordSystem\": \"polar\", } ) ) chart.animate( Config( { \"channels\": { \"y\": { \"set\": [\"Country\", \"Value 2 (+)\"], \"range\": {\"min\": \"-20%\"}, } }, \"geometry\": \"area\", \"split\": True, } ) ) chart.feature(\"tooltip\", True)","title":"Polar Line"},{"location":"examples/analytical_operations/compare/stream_stacked/","text":"Stacked Stream Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_industry_history_1.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) This is a 2-step animation: 1st: set the Split parameter to True set the Align parameter to 'min' 2nd: move the Dimension from the Y-axis to the X-axis (before the other) set the Split parameter to False method = \"\"\" let year = parseFloat(event.data.text); if (!event.data.text.includes(\"$\") && !isNaN(year) && year % 5 != 0) event.preventDefault(); \"\"\" handler = chart.on(\"plot-axis-label-draw\", method) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Revenue [$]\", \"Format\"], \"color\": \"Format\", }, \"geometry\": \"area\", \"align\": \"center\", } ), Style( {\"plot\": {\"yAxis\": {\"label\": {\"numberScale\": \"K, M, B, T\"}}}} ), ) chart.animate(Config({\"align\": \"min\", \"split\": True})) chart.animate( Config( { \"channels\": {\"x\": [\"Format\", \"Year\"], \"y\": \"Revenue [$]\"}, \"split\": False, } ) ) chart.feature(\"tooltip\", True)","title":"Stacked Stream"},{"location":"examples/analytical_operations/compare/stream_stacked/#stacked-stream","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_industry_history_1.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) This is a 2-step animation: 1st: set the Split parameter to True set the Align parameter to 'min' 2nd: move the Dimension from the Y-axis to the X-axis (before the other) set the Split parameter to False method = \"\"\" let year = parseFloat(event.data.text); if (!event.data.text.includes(\"$\") && !isNaN(year) && year % 5 != 0) event.preventDefault(); \"\"\" handler = chart.on(\"plot-axis-label-draw\", method) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Revenue [$]\", \"Format\"], \"color\": \"Format\", }, \"geometry\": \"area\", \"align\": \"center\", } ), Style( {\"plot\": {\"yAxis\": {\"label\": {\"numberScale\": \"K, M, B, T\"}}}} ), ) chart.animate(Config({\"align\": \"min\", \"split\": True})) chart.animate( Config( { \"channels\": {\"x\": [\"Format\", \"Year\"], \"y\": \"Revenue [$]\"}, \"split\": False, } ) ) chart.feature(\"tooltip\", True)","title":"Stacked Stream"},{"location":"examples/analytical_operations/compare/waterfall/","text":"Waterfall Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) remove the Dimension from the Y-axis + here is an example of how you can set a colorGradient palette in the Style chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Year\", \"Value 5 (+/-)\"], \"color\": { \"set\": \"Value 5 (+/-)\", \"range\": {\"min\": \"-45\", \"max\": \"45\"}, }, \"label\": \"Value 5 (+/-)\", }, \"legend\": \"color\", } ), Style( { \"plot\": { \"marker\": { \"colorGradient\": \"#ac1727 0,#e36c56 0.15,#f4b096 0.35,#d5d7d9 0.5,#9fbffa 0.65,#6389ec 0.85,#3d51b8 1\", \"label\": {\"position\": \"top\"}, } } } ), ) chart.animate(Config({\"channels\": {\"y\": {\"set\": [\"Value 5 (+/-)\"]}}})) chart.feature(\"tooltip\", True)","title":"Waterfall"},{"location":"examples/analytical_operations/compare/waterfall/#waterfall","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) remove the Dimension from the Y-axis + here is an example of how you can set a colorGradient palette in the Style chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Year\", \"Value 5 (+/-)\"], \"color\": { \"set\": \"Value 5 (+/-)\", \"range\": {\"min\": \"-45\", \"max\": \"45\"}, }, \"label\": \"Value 5 (+/-)\", }, \"legend\": \"color\", } ), Style( { \"plot\": { \"marker\": { \"colorGradient\": \"#ac1727 0,#e36c56 0.15,#f4b096 0.35,#d5d7d9 0.5,#9fbffa 0.65,#6389ec 0.85,#3d51b8 1\", \"label\": {\"position\": \"top\"}, } } } ), ) chart.animate(Config({\"channels\": {\"y\": {\"set\": [\"Value 5 (+/-)\"]}}})) chart.feature(\"tooltip\", True)","title":"Waterfall"},{"location":"examples/analytical_operations/distribute/","text":"Distribute src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/distribute/existingmeasure_area_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/distribute/existingmeasure_bubble.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/distribute/existingmeasure_bubble_stacked_1.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/distribute/existingmeasure_bubble_stacked_2.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/distribute/existingmeasure_column_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/distribute/existingmeasure_coxcomb.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/distribute/existingmeasure_dotplot.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/distribute/existingmeasure_scatterplot.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/distribute/existingmeasure_scatterplot_split.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/distribute/existingmeasure_treemap_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/distribute/newmeasure_column.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/distribute/newmeasure_column_split_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/distribute/newmeasure_column_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/distribute/newmeasure_dotplot_1.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/distribute/newmeasure_dotplot_2.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/distribute/newmeasure_dotplot_3.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/distribute/newmeasure_dotplot_4.mp4' type='video/mp4'>","title":"Distribute"},{"location":"examples/analytical_operations/distribute/#distribute","text":"src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/distribute/existingmeasure_area_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/distribute/existingmeasure_bubble.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/distribute/existingmeasure_bubble_stacked_1.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/distribute/existingmeasure_bubble_stacked_2.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/distribute/existingmeasure_column_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/distribute/existingmeasure_coxcomb.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/distribute/existingmeasure_dotplot.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/distribute/existingmeasure_scatterplot.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/distribute/existingmeasure_scatterplot_split.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/distribute/existingmeasure_treemap_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/distribute/newmeasure_column.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/distribute/newmeasure_column_split_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/distribute/newmeasure_column_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/distribute/newmeasure_dotplot_1.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/distribute/newmeasure_dotplot_2.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/distribute/newmeasure_dotplot_3.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/distribute/newmeasure_dotplot_4.mp4' type='video/mp4'>","title":"Distribute"},{"location":"examples/analytical_operations/distribute/existingmeasure_area_stacked/","text":"Stacked Area Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) remove the Dimension from the Y-axis switch the Geometry from Area to Circle chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"color\": \"Country\", }, \"geometry\": \"area\", } ) ) chart.animate( Config({\"channels\": {\"y\": \"Value 2 (+)\"}, \"geometry\": \"circle\"}) ) chart.feature(\"tooltip\", True)","title":"Stacked Area"},{"location":"examples/analytical_operations/distribute/existingmeasure_area_stacked/#stacked-area","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) remove the Dimension from the Y-axis switch the Geometry from Area to Circle chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"color\": \"Country\", }, \"geometry\": \"area\", } ) ) chart.animate( Config({\"channels\": {\"y\": \"Value 2 (+)\"}, \"geometry\": \"circle\"}) ) chart.feature(\"tooltip\", True)","title":"Stacked Area"},{"location":"examples/analytical_operations/distribute/existingmeasure_bubble/","text":"Bubble Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_14.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) move the Measure from the Size channel to the Y-axis chart.animate( Config( { \"channels\": { \"noop\": [\"Year\", \"Country\"], \"size\": \"Value 2 (+)\", }, \"geometry\": \"circle\", } ) ) chart.animate( Config( { \"channels\": { \"noop\": [\"Year\", \"Country\"], \"y\": \"Value 2 (+)\", \"size\": None, } } ) )","title":"Bubble"},{"location":"examples/analytical_operations/distribute/existingmeasure_bubble/#bubble","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_14.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) move the Measure from the Size channel to the Y-axis chart.animate( Config( { \"channels\": { \"noop\": [\"Year\", \"Country\"], \"size\": \"Value 2 (+)\", }, \"geometry\": \"circle\", } ) ) chart.animate( Config( { \"channels\": { \"noop\": [\"Year\", \"Country\"], \"y\": \"Value 2 (+)\", \"size\": None, } } ) )","title":"Bubble"},{"location":"examples/analytical_operations/distribute/existingmeasure_bubble_stacked_1/","text":"Stacked Bubble 1 Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) move the Size channel's Dimension to the X-axis move the Measure to the Y-axis duplicate the Dimension in the Color channel onto the Y-axis None the Label channel switch the Geometry from Circle to Rectangle chart.animate( Config( { \"channels\": { \"color\": \"Country\", \"size\": [\"Year\", \"Value 2 (+)\"], \"label\": \"Value 2 (+)\", }, \"geometry\": \"circle\", } ) ) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": { \"set\": [\"Country\", \"Value 2 (+)\"], \"range\": {\"min\": \"-20%\"}, }, \"size\": None, \"label\": None, }, \"geometry\": \"rectangle\", \"coordSystem\": \"polar\", } ), Style({\"plot\": {\"marker\": {\"rectangleSpacing\": \"0.1em\"}}}), ) chart.feature(\"tooltip\", True)","title":"Stacked Bubble 1"},{"location":"examples/analytical_operations/distribute/existingmeasure_bubble_stacked_1/#stacked-bubble-1","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) move the Size channel's Dimension to the X-axis move the Measure to the Y-axis duplicate the Dimension in the Color channel onto the Y-axis None the Label channel switch the Geometry from Circle to Rectangle chart.animate( Config( { \"channels\": { \"color\": \"Country\", \"size\": [\"Year\", \"Value 2 (+)\"], \"label\": \"Value 2 (+)\", }, \"geometry\": \"circle\", } ) ) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": { \"set\": [\"Country\", \"Value 2 (+)\"], \"range\": {\"min\": \"-20%\"}, }, \"size\": None, \"label\": None, }, \"geometry\": \"rectangle\", \"coordSystem\": \"polar\", } ), Style({\"plot\": {\"marker\": {\"rectangleSpacing\": \"0.1em\"}}}), ) chart.feature(\"tooltip\", True)","title":"Stacked Bubble 1"},{"location":"examples/analytical_operations/distribute/existingmeasure_bubble_stacked_2/","text":"Stacked Bubble 2 Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) move the Size channel's Dimension to the X-axis move the Measure to the Y-axis duplicate the Dimension in the Color channel onto the Y-axis None the Label channel switch the Geometry from Circle to Rectangle chart.animate( Config( { \"channels\": { \"color\": \"Country\", \"size\": [\"Year\", \"Value 2 (+)\"], \"label\": \"Value 2 (+)\", }, \"geometry\": \"circle\", } ) ) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"size\": None, \"label\": None, }, \"geometry\": \"rectangle\", } ) ) chart.feature(\"tooltip\", True)","title":"Stacked Bubble 2"},{"location":"examples/analytical_operations/distribute/existingmeasure_bubble_stacked_2/#stacked-bubble-2","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) move the Size channel's Dimension to the X-axis move the Measure to the Y-axis duplicate the Dimension in the Color channel onto the Y-axis None the Label channel switch the Geometry from Circle to Rectangle chart.animate( Config( { \"channels\": { \"color\": \"Country\", \"size\": [\"Year\", \"Value 2 (+)\"], \"label\": \"Value 2 (+)\", }, \"geometry\": \"circle\", } ) ) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"size\": None, \"label\": None, }, \"geometry\": \"rectangle\", } ) ) chart.feature(\"tooltip\", True)","title":"Stacked Bubble 2"},{"location":"examples/analytical_operations/distribute/existingmeasure_column_stacked/","text":"Stacked Column Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) remove the Dimension from the Y-axis switch the Geometry from Rectangle to Circle chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"color\": \"Country\", } } ) ) chart.animate( Config({\"channels\": {\"y\": \"Value 2 (+)\"}, \"geometry\": \"circle\"}) ) chart.feature(\"tooltip\", True)","title":"Stacked Column"},{"location":"examples/analytical_operations/distribute/existingmeasure_column_stacked/#stacked-column","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) remove the Dimension from the Y-axis switch the Geometry from Rectangle to Circle chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"color\": \"Country\", } } ) ) chart.animate( Config({\"channels\": {\"y\": \"Value 2 (+)\"}, \"geometry\": \"circle\"}) ) chart.feature(\"tooltip\", True)","title":"Stacked Column"},{"location":"examples/analytical_operations/distribute/existingmeasure_coxcomb/","text":"Coxcomb Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) remove the Dimension from the Y-axis switch the Geometry from Rectangle to Circle chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": { \"set\": [\"Country\", \"Value 2 (+)\"], \"range\": {\"min\": \"-20%\"}, }, \"color\": \"Country\", }, \"coordSystem\": \"polar\", } ), Style({\"plot\": {\"marker\": {\"rectangleSpacing\": \"0.1em\"}}}), ) chart.animate( Config({\"channels\": {\"y\": \"Value 2 (+)\"}, \"geometry\": \"circle\"}) ) chart.feature(\"tooltip\", True)","title":"Coxcomb"},{"location":"examples/analytical_operations/distribute/existingmeasure_coxcomb/#coxcomb","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) remove the Dimension from the Y-axis switch the Geometry from Rectangle to Circle chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": { \"set\": [\"Country\", \"Value 2 (+)\"], \"range\": {\"min\": \"-20%\"}, }, \"color\": \"Country\", }, \"coordSystem\": \"polar\", } ), Style({\"plot\": {\"marker\": {\"rectangleSpacing\": \"0.1em\"}}}), ) chart.animate( Config({\"channels\": {\"y\": \"Value 2 (+)\"}, \"geometry\": \"circle\"}) ) chart.feature(\"tooltip\", True)","title":"Coxcomb"},{"location":"examples/analytical_operations/distribute/existingmeasure_dotplot/","text":"Dot Plot Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) replace the Dimension on the Y-axis with the Measure from the X-axis the other Dimension, which is on the no-operation (Noop) channel, is added to the X-axis also chart.animate( Config( { \"channels\": { \"x\": \"Value 3 (+)\", \"y\": \"Country\", \"noop\": \"Year\", \"color\": \"Country\", }, \"geometry\": \"circle\", } ) ) chart.animate( Config( { \"channels\": {\"x\": \"Year\", \"y\": \"Value 3 (+)\"}, \"orientation\": \"horizontal\", } ) ) chart.feature(\"tooltip\", True)","title":"Dot Plot"},{"location":"examples/analytical_operations/distribute/existingmeasure_dotplot/#dot-plot","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) replace the Dimension on the Y-axis with the Measure from the X-axis the other Dimension, which is on the no-operation (Noop) channel, is added to the X-axis also chart.animate( Config( { \"channels\": { \"x\": \"Value 3 (+)\", \"y\": \"Country\", \"noop\": \"Year\", \"color\": \"Country\", }, \"geometry\": \"circle\", } ) ) chart.animate( Config( { \"channels\": {\"x\": \"Year\", \"y\": \"Value 3 (+)\"}, \"orientation\": \"horizontal\", } ) ) chart.feature(\"tooltip\", True)","title":"Dot Plot"},{"location":"examples/analytical_operations/distribute/existingmeasure_scatterplot/","text":"Scatter Plot Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) This Vizzu animation has 4 simple steps (4 animates): 1st: replace the Measure on the X-axis to the Dimension whitch is on the Lightness channel 2nd: back 3rd: replace the Measure on the Y-axis to the Dimension whitch is on the Noop channel 4th: back chart.animate( Config( { \"channels\": { \"x\": \"Value 5 (+/-)\", \"y\": \"Value 6 (+/-)\", \"noop\": \"Joy factors\", \"lightness\": \"Year\", }, \"geometry\": \"circle\", } ) ) chart.animate( Config({\"channels\": {\"x\": \"Year\"}, \"orientation\": \"horizontal\"}) ) chart.animate(Config({\"channels\": {\"x\": \"Value 5 (+/-)\"}})) chart.animate( Config( { \"channels\": {\"y\": \"Joy factors\", \"noop\": None}, \"orientation\": \"vertical\", } ) ) chart.animate( Config( {\"channels\": {\"y\": \"Value 6 (+/-)\", \"noop\": \"Joy factors\"}} ) ) chart.feature(\"tooltip\", True)","title":"Scatter Plot"},{"location":"examples/analytical_operations/distribute/existingmeasure_scatterplot/#scatter-plot","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) This Vizzu animation has 4 simple steps (4 animates): 1st: replace the Measure on the X-axis to the Dimension whitch is on the Lightness channel 2nd: back 3rd: replace the Measure on the Y-axis to the Dimension whitch is on the Noop channel 4th: back chart.animate( Config( { \"channels\": { \"x\": \"Value 5 (+/-)\", \"y\": \"Value 6 (+/-)\", \"noop\": \"Joy factors\", \"lightness\": \"Year\", }, \"geometry\": \"circle\", } ) ) chart.animate( Config({\"channels\": {\"x\": \"Year\"}, \"orientation\": \"horizontal\"}) ) chart.animate(Config({\"channels\": {\"x\": \"Value 5 (+/-)\"}})) chart.animate( Config( { \"channels\": {\"y\": \"Joy factors\", \"noop\": None}, \"orientation\": \"vertical\", } ) ) chart.animate( Config( {\"channels\": {\"y\": \"Value 6 (+/-)\", \"noop\": \"Joy factors\"}} ) ) chart.feature(\"tooltip\", True)","title":"Scatter Plot"},{"location":"examples/analytical_operations/distribute/existingmeasure_scatterplot_split/","text":"Split Scatter Plot Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) remove the Dimension from the X-axis set the Split parameter from True to False chart.animate( Config( { \"channels\": { \"x\": [\"Value 1 (+)\", \"Country\"], \"y\": \"Value 3 (+)\", \"noop\": \"Year\", \"color\": \"Country\", }, \"geometry\": \"circle\", \"split\": True, \"orientation\": \"vertical\", } ) ) chart.animate( Config({\"channels\": {\"x\": \"Value 1 (+)\"}, \"split\": False}) ) chart.feature(\"tooltip\", True)","title":"Split Scatter Plot"},{"location":"examples/analytical_operations/distribute/existingmeasure_scatterplot_split/#split-scatter-plot","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) remove the Dimension from the X-axis set the Split parameter from True to False chart.animate( Config( { \"channels\": { \"x\": [\"Value 1 (+)\", \"Country\"], \"y\": \"Value 3 (+)\", \"noop\": \"Year\", \"color\": \"Country\", }, \"geometry\": \"circle\", \"split\": True, \"orientation\": \"vertical\", } ) ) chart.animate( Config({\"channels\": {\"x\": \"Value 1 (+)\"}, \"split\": False}) ) chart.feature(\"tooltip\", True)","title":"Split Scatter Plot"},{"location":"examples/analytical_operations/distribute/existingmeasure_treemap_stacked/","text":"Stacked Treemap Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) move the Size channel's Dimension to the X-axis move the Measure to the Y-axis duplicate the Dimension in the Color channel onto the Y-axis None the Label channel chart.animate( Config( { \"channels\": { \"color\": \"Country\", \"size\": [\"Year\", \"Value 2 (+)\"], \"label\": \"Year\", } } ) ) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"size\": None, \"label\": None, } } ), Style({\"plot\": {\"marker\": {\"colorPalette\": None}}}), ) chart.feature(\"tooltip\", True)","title":"Stacked Treemap"},{"location":"examples/analytical_operations/distribute/existingmeasure_treemap_stacked/#stacked-treemap","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) move the Size channel's Dimension to the X-axis move the Measure to the Y-axis duplicate the Dimension in the Color channel onto the Y-axis None the Label channel chart.animate( Config( { \"channels\": { \"color\": \"Country\", \"size\": [\"Year\", \"Value 2 (+)\"], \"label\": \"Year\", } } ) ) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"size\": None, \"label\": None, } } ), Style({\"plot\": {\"marker\": {\"colorPalette\": None}}}), ) chart.feature(\"tooltip\", True)","title":"Stacked Treemap"},{"location":"examples/analytical_operations/distribute/newmeasure_column/","text":"Column Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) move the Dimension from the X-axis & replace the Measure with it on the Label channel add this Dimension to the Color channel too add a new Measure to the X-axis switch the Geometry from Rectangle (default) to Circe chart.animate( Config( { \"channels\": { \"x\": \"Country\", \"y\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\", } } ) ) chart.animate( Config( { \"channels\": { \"x\": \"Value 4 (+/-)\", \"color\": \"Country\", \"label\": \"Country\", }, \"geometry\": \"circle\", } ) ) chart.feature(\"tooltip\", True)","title":"Column"},{"location":"examples/analytical_operations/distribute/newmeasure_column/#column","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) move the Dimension from the X-axis & replace the Measure with it on the Label channel add this Dimension to the Color channel too add a new Measure to the X-axis switch the Geometry from Rectangle (default) to Circe chart.animate( Config( { \"channels\": { \"x\": \"Country\", \"y\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\", } } ) ) chart.animate( Config( { \"channels\": { \"x\": \"Value 4 (+/-)\", \"color\": \"Country\", \"label\": \"Country\", }, \"geometry\": \"circle\", } ) ) chart.feature(\"tooltip\", True)","title":"Column"},{"location":"examples/analytical_operations/distribute/newmeasure_column_split_stacked/","text":"Split Stacked Column Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) move the Dimension from the X-axis & replace the Measure with it on the Label channel remove the Dimension from the Y-axis add a new Measure to the X-axis switch the Geometry from Rectangle (default) to Circe set the Split parameter from True to False chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"color\": \"Country\", \"label\": \"Value 2 (+)\", }, \"split\": True, } ), Style( { \"plot\": { \"marker\": { \"label\": {\"position\": \"top\", \"fontSize\": \"0.6em\"} } } } ), ) chart.animate( Config( { \"channels\": { \"x\": \"Value 5 (+/-)\", \"y\": \"Value 2 (+)\", \"label\": \"Year\", }, \"geometry\": \"circle\", \"split\": False, } ) ) chart.feature(\"tooltip\", True)","title":"Split Stacked Column"},{"location":"examples/analytical_operations/distribute/newmeasure_column_split_stacked/#split-stacked-column","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) move the Dimension from the X-axis & replace the Measure with it on the Label channel remove the Dimension from the Y-axis add a new Measure to the X-axis switch the Geometry from Rectangle (default) to Circe set the Split parameter from True to False chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"color\": \"Country\", \"label\": \"Value 2 (+)\", }, \"split\": True, } ), Style( { \"plot\": { \"marker\": { \"label\": {\"position\": \"top\", \"fontSize\": \"0.6em\"} } } } ), ) chart.animate( Config( { \"channels\": { \"x\": \"Value 5 (+/-)\", \"y\": \"Value 2 (+)\", \"label\": \"Year\", }, \"geometry\": \"circle\", \"split\": False, } ) ) chart.feature(\"tooltip\", True)","title":"Split Stacked Column"},{"location":"examples/analytical_operations/distribute/newmeasure_column_stacked/","text":"Stacked Column Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) move the Dimension from the X-axis & replace the Measure with it on the Label channel remove the Dimension from the Y-axis add a new Measure to the X-axis switch the Geometry from Rectangle (default) to Circe chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"color\": \"Country\", } } ) ) chart.animate( Config( { \"channels\": { \"x\": \"Value 5 (+/-)\", \"y\": \"Value 2 (+)\", \"label\": \"Year\", }, \"geometry\": \"circle\", } ) ) chart.feature(\"tooltip\", True)","title":"Stacked Column"},{"location":"examples/analytical_operations/distribute/newmeasure_column_stacked/#stacked-column","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) move the Dimension from the X-axis & replace the Measure with it on the Label channel remove the Dimension from the Y-axis add a new Measure to the X-axis switch the Geometry from Rectangle (default) to Circe chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"color\": \"Country\", } } ) ) chart.animate( Config( { \"channels\": { \"x\": \"Value 5 (+/-)\", \"y\": \"Value 2 (+)\", \"label\": \"Year\", }, \"geometry\": \"circle\", } ) ) chart.feature(\"tooltip\", True)","title":"Stacked Column"},{"location":"examples/analytical_operations/distribute/newmeasure_dotplot_1/","text":"Dot Plot 1 Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/IMDB_data_data_1974_1990.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) move the Dimension from Y-axis to the no-operation (Noop) channel add a Measure to the Y-axis set the Split parameter to True chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": {\"set\": \"Index\", \"range\": {\"max\": \"105%\"}}, }, \"geometry\": \"circle\", } ) ) chart.animate( Config( { \"channels\": { \"y\": {\"set\": \"IMDb Rating\", \"range\": {\"max\": \"105%\"}}, \"noop\": \"Index\", }, \"orientation\": \"vertical\", \"split\": True, } ) ) chart.feature(\"tooltip\", True)","title":"Dot Plot 1"},{"location":"examples/analytical_operations/distribute/newmeasure_dotplot_1/#dot-plot-1","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/IMDB_data_data_1974_1990.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) move the Dimension from Y-axis to the no-operation (Noop) channel add a Measure to the Y-axis set the Split parameter to True chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": {\"set\": \"Index\", \"range\": {\"max\": \"105%\"}}, }, \"geometry\": \"circle\", } ) ) chart.animate( Config( { \"channels\": { \"y\": {\"set\": \"IMDb Rating\", \"range\": {\"max\": \"105%\"}}, \"noop\": \"Index\", }, \"orientation\": \"vertical\", \"split\": True, } ) ) chart.feature(\"tooltip\", True)","title":"Dot Plot 1"},{"location":"examples/analytical_operations/distribute/newmeasure_dotplot_2/","text":"Dot Plot 2 Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add a new Measure to the X-axis chart.animate( Config( { \"channels\": { \"y\": \"Value 2 (+)\", \"noop\": \"Year\", \"color\": \"Country\", }, \"geometry\": \"circle\", } ) ) chart.animate(Config({\"channels\": {\"x\": \"Value 3 (+)\"}}))","title":"Dot Plot 2"},{"location":"examples/analytical_operations/distribute/newmeasure_dotplot_2/#dot-plot-2","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add a new Measure to the X-axis chart.animate( Config( { \"channels\": { \"y\": \"Value 2 (+)\", \"noop\": \"Year\", \"color\": \"Country\", }, \"geometry\": \"circle\", } ) ) chart.animate(Config({\"channels\": {\"x\": \"Value 3 (+)\"}}))","title":"Dot Plot 2"},{"location":"examples/analytical_operations/distribute/newmeasure_dotplot_3/","text":"Dot Plot 3 Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) replace the Dimension on the Y-axis to a new Measure chart.animate( Config( { \"channels\": { \"x\": \"Value 1 (+)\", \"y\": \"Country\", \"noop\": [\"Year\"], \"color\": \"Country\", }, \"geometry\": \"circle\", } ) ) chart.animate(Config({\"channels\": {\"y\": \"Value 3 (+)\"}})) chart.feature(\"tooltip\", True)","title":"Dot Plot 3"},{"location":"examples/analytical_operations/distribute/newmeasure_dotplot_3/#dot-plot-3","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) replace the Dimension on the Y-axis to a new Measure chart.animate( Config( { \"channels\": { \"x\": \"Value 1 (+)\", \"y\": \"Country\", \"noop\": [\"Year\"], \"color\": \"Country\", }, \"geometry\": \"circle\", } ) ) chart.animate(Config({\"channels\": {\"y\": \"Value 3 (+)\"}})) chart.feature(\"tooltip\", True)","title":"Dot Plot 3"},{"location":"examples/analytical_operations/distribute/newmeasure_dotplot_4/","text":"Dot Plot 4 Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add a new Measure to the X-axis move the Dimension from the no-operation (Noop) channel to the Label channel chart.animate( Config( { \"channels\": { \"x\": \"Joy factors\", \"y\": \"Value 5 (+/-)\", \"color\": \"Joy factors\", \"noop\": \"Country_code\", }, \"geometry\": \"circle\", } ), Style( { \"plot\": { \"marker\": { \"colorPalette\": \"#ef675aFF #6d8cccFF #e6cf99FF #9c50abFF\" } } } ), ) chart.animate( Config( { \"channels\": { \"x\": [\"Joy factors\", \"Value 6 (+/-)\"], \"label\": \"Country_code\", \"noop\": None, } } ) )","title":"Dot Plot 4"},{"location":"examples/analytical_operations/distribute/newmeasure_dotplot_4/#dot-plot-4","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add a new Measure to the X-axis move the Dimension from the no-operation (Noop) channel to the Label channel chart.animate( Config( { \"channels\": { \"x\": \"Joy factors\", \"y\": \"Value 5 (+/-)\", \"color\": \"Joy factors\", \"noop\": \"Country_code\", }, \"geometry\": \"circle\", } ), Style( { \"plot\": { \"marker\": { \"colorPalette\": \"#ef675aFF #6d8cccFF #e6cf99FF #9c50abFF\" } } } ), ) chart.animate( Config( { \"channels\": { \"x\": [\"Joy factors\", \"Value 6 (+/-)\"], \"label\": \"Country_code\", \"noop\": None, } } ) )","title":"Dot Plot 4"},{"location":"examples/analytical_operations/drilldown/","text":"Drill down src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/drilldown/area.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/drilldown/area_polar.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/drilldown/bubble_and_distribution.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/drilldown/column_1.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/drilldown/column_2.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/drilldown/column_3.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/drilldown/column_4.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/drilldown/column_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/drilldown/donut.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/drilldown/line_1.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/drilldown/line_2.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/drilldown/line_polar_1.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/drilldown/line_polar_2.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/drilldown/radial.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/drilldown/scatterplot.mp4' type='video/mp4'>","title":"Drill down"},{"location":"examples/analytical_operations/drilldown/#drill-down","text":"src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/drilldown/area.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/drilldown/area_polar.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/drilldown/bubble_and_distribution.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/drilldown/column_1.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/drilldown/column_2.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/drilldown/column_3.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/drilldown/column_4.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/drilldown/column_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/drilldown/donut.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/drilldown/line_1.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/drilldown/line_2.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/drilldown/line_polar_1.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/drilldown/line_polar_2.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/drilldown/radial.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/drilldown/scatterplot.mp4' type='video/mp4'>","title":"Drill down"},{"location":"examples/analytical_operations/drilldown/area/","text":"Area Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add a new Dimension to the Y-axis and the Color channel chart.animate( Config( { \"channels\": {\"x\": \"Year\", \"y\": \"Value 2 (+)\"}, \"geometry\": \"area\", } ) ) chart.animate( Config( { \"channels\": { \"y\": [\"Value 2 (+)\", \"Country\"], \"color\": \"Country\", } } ) ) chart.feature(\"tooltip\", True)","title":"Area"},{"location":"examples/analytical_operations/drilldown/area/#area","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add a new Dimension to the Y-axis and the Color channel chart.animate( Config( { \"channels\": {\"x\": \"Year\", \"y\": \"Value 2 (+)\"}, \"geometry\": \"area\", } ) ) chart.animate( Config( { \"channels\": { \"y\": [\"Value 2 (+)\", \"Country\"], \"color\": \"Country\", } } ) ) chart.feature(\"tooltip\", True)","title":"Area"},{"location":"examples/analytical_operations/drilldown/area_polar/","text":"Polar Area Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add a new Dimension to the Y-axis and the Color channel chart.animate( Config( { \"channels\": {\"x\": \"Year\", \"y\": \"Value 2 (+)\"}, \"geometry\": \"area\", \"coordSystem\": \"polar\", } ) ) chart.animate( Config( { \"channels\": { \"y\": [\"Value 2 (+)\", \"Country\"], \"color\": \"Country\", } } ) ) chart.feature(\"tooltip\", True)","title":"Polar Area"},{"location":"examples/analytical_operations/drilldown/area_polar/#polar-area","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add a new Dimension to the Y-axis and the Color channel chart.animate( Config( { \"channels\": {\"x\": \"Year\", \"y\": \"Value 2 (+)\"}, \"geometry\": \"area\", \"coordSystem\": \"polar\", } ) ) chart.animate( Config( { \"channels\": { \"y\": [\"Value 2 (+)\", \"Country\"], \"color\": \"Country\", } } ) ) chart.feature(\"tooltip\", True)","title":"Polar Area"},{"location":"examples/analytical_operations/drilldown/bubble_and_distribution/","text":"Bubble and Distribution Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) This Vizzu animation consist of 2 steps (animates): 1st: add a new Sub Dimension to the Size channel 2nd: add two new Measures to the X and Y-axes move the new Sub Dimension to the No-Operation (Noop) channel None the Label channel chart.animate( Config( { \"channels\": { \"color\": \"Country\", \"size\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\", }, \"geometry\": \"circle\", } ) ) chart.animate( Config( { \"channels\": {\"size\": [\"Year\", \"Value 2 (+)\"]}, \"geometry\": \"circle\", } ) ) chart.animate( Config( { \"channels\": { \"x\": \"Value 1 (+)\", \"y\": \"Value 3 (+)\", \"noop\": \"Year\", \"size\": \"Value 2 (+)\", \"label\": None, } } ) ) chart.feature(\"tooltip\", True)","title":"Bubble and Distribution"},{"location":"examples/analytical_operations/drilldown/bubble_and_distribution/#bubble-and-distribution","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) This Vizzu animation consist of 2 steps (animates): 1st: add a new Sub Dimension to the Size channel 2nd: add two new Measures to the X and Y-axes move the new Sub Dimension to the No-Operation (Noop) channel None the Label channel chart.animate( Config( { \"channels\": { \"color\": \"Country\", \"size\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\", }, \"geometry\": \"circle\", } ) ) chart.animate( Config( { \"channels\": {\"size\": [\"Year\", \"Value 2 (+)\"]}, \"geometry\": \"circle\", } ) ) chart.animate( Config( { \"channels\": { \"x\": \"Value 1 (+)\", \"y\": \"Value 3 (+)\", \"noop\": \"Year\", \"size\": \"Value 2 (+)\", \"label\": None, } } ) ) chart.feature(\"tooltip\", True)","title":"Bubble and Distribution"},{"location":"examples/analytical_operations/drilldown/column_1/","text":"Column 1 Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add 2 new Dimensions to the X-axis and one of them to the Color channel too chart.animate( Config({\"channels\": {\"y\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\"}}) ) chart.animate( Config( { \"channels\": { \"x\": [\"Year\", \"Country\"], \"y\": \"Value 2 (+)\", \"color\": \"Country\", \"label\": None, } } ) ) chart.feature(\"tooltip\", True)","title":"Column 1"},{"location":"examples/analytical_operations/drilldown/column_1/#column-1","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add 2 new Dimensions to the X-axis and one of them to the Color channel too chart.animate( Config({\"channels\": {\"y\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\"}}) ) chart.animate( Config( { \"channels\": { \"x\": [\"Year\", \"Country\"], \"y\": \"Value 2 (+)\", \"color\": \"Country\", \"label\": None, } } ) ) chart.feature(\"tooltip\", True)","title":"Column 1"},{"location":"examples/analytical_operations/drilldown/column_2/","text":"Column 2 Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add a new Dimension to the X-axis and another to the Y axis and the Color channel chart.animate( Config({\"channels\": {\"y\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\"}}) ) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"color\": \"Country\", \"label\": None, } } ) ) chart.feature(\"tooltip\", True)","title":"Column 2"},{"location":"examples/analytical_operations/drilldown/column_2/#column-2","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add a new Dimension to the X-axis and another to the Y axis and the Color channel chart.animate( Config({\"channels\": {\"y\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\"}}) ) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"color\": \"Country\", \"label\": None, } } ) ) chart.feature(\"tooltip\", True)","title":"Column 2"},{"location":"examples/analytical_operations/drilldown/column_3/","text":"Column 3 Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add a new Dimension to the X-axis. chart.animate( Config({\"channels\": {\"y\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\"}}) ) chart.animate(Config({\"channels\": {\"x\": \"Country\"}})) chart.feature(\"tooltip\", True)","title":"Column 3"},{"location":"examples/analytical_operations/drilldown/column_3/#column-3","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add a new Dimension to the X-axis. chart.animate( Config({\"channels\": {\"y\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\"}}) ) chart.animate(Config({\"channels\": {\"x\": \"Country\"}})) chart.feature(\"tooltip\", True)","title":"Column 3"},{"location":"examples/analytical_operations/drilldown/column_4/","text":"Column 4 Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add 2 new Dimensions to the Y-axis and the Color channel chart.animate( Config( { \"channels\": { \"x\": \"Country\", \"y\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\", } } ) ) chart.animate( Config( { \"channels\": { \"y\": [\"Value 2 (+)\", \"Joy factors\"], \"color\": \"Joy factors\", } } ), Style( { \"plot\": { \"marker\": { \"colorPalette\": \"#ef675aFF #6d8cccFF #e6cf99FF #9c50abFF\" } } } ), ) chart.feature(\"tooltip\", True)","title":"Column 4"},{"location":"examples/analytical_operations/drilldown/column_4/#column-4","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add 2 new Dimensions to the Y-axis and the Color channel chart.animate( Config( { \"channels\": { \"x\": \"Country\", \"y\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\", } } ) ) chart.animate( Config( { \"channels\": { \"y\": [\"Value 2 (+)\", \"Joy factors\"], \"color\": \"Joy factors\", } } ), Style( { \"plot\": { \"marker\": { \"colorPalette\": \"#ef675aFF #6d8cccFF #e6cf99FF #9c50abFF\" } } } ), ) chart.feature(\"tooltip\", True)","title":"Column 4"},{"location":"examples/analytical_operations/drilldown/column_stacked/","text":"Stacked Column Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add a new Dimension to the X-axis chart.animate( Config( { \"channels\": { \"y\": [\"Country\", \"Value 2 (+)\"], \"color\": \"Country\", \"label\": \"Value 2 (+)\", } } ) ) chart.animate(Config({\"channels\": {\"x\": \"Year\", \"label\": None}})) chart.feature(\"tooltip\", True)","title":"Stacked Column"},{"location":"examples/analytical_operations/drilldown/column_stacked/#stacked-column","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add a new Dimension to the X-axis chart.animate( Config( { \"channels\": { \"y\": [\"Country\", \"Value 2 (+)\"], \"color\": \"Country\", \"label\": \"Value 2 (+)\", } } ) ) chart.animate(Config({\"channels\": {\"x\": \"Year\", \"label\": None}})) chart.feature(\"tooltip\", True)","title":"Stacked Column"},{"location":"examples/analytical_operations/drilldown/donut/","text":"Donut Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) This Vizzu animation consist of 2 steps (animates): 1st: move the Dimension from X-axis to the Y-axis add a new Dimension to the X-axis remove the Measure from the label channel 2nd: move the Measure from X to Y-axis chart.animate( Config( { \"channels\": { \"x\": [\"Country\", \"Value 2 (+)\"], \"y\": {\"range\": {\"min\": \"-200%\"}}, \"color\": \"Country\", \"label\": \"Value 2 (+)\", }, \"coordSystem\": \"polar\", } ) ) chart.animate( Config( { \"channels\": { \"x\": [\"Year\", \"Value 2 (+)\"], \"y\": {\"set\": \"Country\", \"range\": {\"min\": \"-30%\"}}, \"label\": None, } } ) ) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": { \"set\": [\"Country\", \"Value 2 (+)\"], \"range\": {\"min\": \"-30%\"}, }, } } ), Style({\"plot\": {\"marker\": {\"rectangleSpacing\": \"0.1em\"}}}), ) chart.feature(\"tooltip\", True)","title":"Donut"},{"location":"examples/analytical_operations/drilldown/donut/#donut","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) This Vizzu animation consist of 2 steps (animates): 1st: move the Dimension from X-axis to the Y-axis add a new Dimension to the X-axis remove the Measure from the label channel 2nd: move the Measure from X to Y-axis chart.animate( Config( { \"channels\": { \"x\": [\"Country\", \"Value 2 (+)\"], \"y\": {\"range\": {\"min\": \"-200%\"}}, \"color\": \"Country\", \"label\": \"Value 2 (+)\", }, \"coordSystem\": \"polar\", } ) ) chart.animate( Config( { \"channels\": { \"x\": [\"Year\", \"Value 2 (+)\"], \"y\": {\"set\": \"Country\", \"range\": {\"min\": \"-30%\"}}, \"label\": None, } } ) ) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": { \"set\": [\"Country\", \"Value 2 (+)\"], \"range\": {\"min\": \"-30%\"}, }, } } ), Style({\"plot\": {\"marker\": {\"rectangleSpacing\": \"0.1em\"}}}), ) chart.feature(\"tooltip\", True)","title":"Donut"},{"location":"examples/analytical_operations/drilldown/line_1/","text":"Line 1 Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add a new Dimension to the Color channel chart.animate( Config( { \"channels\": {\"x\": \"Year\", \"y\": \"Value 2 (+)\"}, \"geometry\": \"line\", } ) ) chart.animate(Config({\"channels\": {\"color\": \"Country\"}})) chart.feature(\"tooltip\", True)","title":"Line 1"},{"location":"examples/analytical_operations/drilldown/line_1/#line-1","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add a new Dimension to the Color channel chart.animate( Config( { \"channels\": {\"x\": \"Year\", \"y\": \"Value 2 (+)\"}, \"geometry\": \"line\", } ) ) chart.animate(Config({\"channels\": {\"color\": \"Country\"}})) chart.feature(\"tooltip\", True)","title":"Line 1"},{"location":"examples/analytical_operations/drilldown/line_2/","text":"Line 2 Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add a new Dimension to the Y-axis & the Color channel switch the Geometry from Line to Area chart.animate( Config( { \"channels\": {\"x\": \"Year\", \"y\": \"Value 3 (+)\"}, \"geometry\": \"line\", } ) ) chart.animate( Config( { \"channels\": { \"y\": [\"Country\", \"Value 3 (+)\"], \"color\": \"Country\", }, \"geometry\": \"area\", } ) )","title":"Line 2"},{"location":"examples/analytical_operations/drilldown/line_2/#line-2","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add a new Dimension to the Y-axis & the Color channel switch the Geometry from Line to Area chart.animate( Config( { \"channels\": {\"x\": \"Year\", \"y\": \"Value 3 (+)\"}, \"geometry\": \"line\", } ) ) chart.animate( Config( { \"channels\": { \"y\": [\"Country\", \"Value 3 (+)\"], \"color\": \"Country\", }, \"geometry\": \"area\", } ) )","title":"Line 2"},{"location":"examples/analytical_operations/drilldown/line_polar_1/","text":"Polar Line 1 Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add a new Dimension to the Y-axis & the Color channel switch the Geometry from Line to Area chart.animate( Config( { \"channels\": {\"x\": \"Year\", \"y\": \"Value 3 (+)\"}, \"geometry\": \"line\", \"coordSystem\": \"polar\", } ) ) chart.animate( Config( { \"channels\": { \"y\": [\"Country\", \"Value 3 (+)\"], \"color\": \"Country\", }, \"geometry\": \"area\", } ) )","title":"Polar Line 1"},{"location":"examples/analytical_operations/drilldown/line_polar_1/#polar-line-1","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add a new Dimension to the Y-axis & the Color channel switch the Geometry from Line to Area chart.animate( Config( { \"channels\": {\"x\": \"Year\", \"y\": \"Value 3 (+)\"}, \"geometry\": \"line\", \"coordSystem\": \"polar\", } ) ) chart.animate( Config( { \"channels\": { \"y\": [\"Country\", \"Value 3 (+)\"], \"color\": \"Country\", }, \"geometry\": \"area\", } ) )","title":"Polar Line 1"},{"location":"examples/analytical_operations/drilldown/line_polar_2/","text":"Polar Line 2 Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add a new Dimension to the Color channel chart.animate( Config( { \"channels\": {\"x\": \"Year\", \"y\": \"Value 2 (+)\"}, \"geometry\": \"line\", \"coordSystem\": \"polar\", } ) ) chart.animate(Config({\"channels\": {\"color\": \"Country\"}})) chart.feature(\"tooltip\", True)","title":"Polar Line 2"},{"location":"examples/analytical_operations/drilldown/line_polar_2/#polar-line-2","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add a new Dimension to the Color channel chart.animate( Config( { \"channels\": {\"x\": \"Year\", \"y\": \"Value 2 (+)\"}, \"geometry\": \"line\", \"coordSystem\": \"polar\", } ) ) chart.animate(Config({\"channels\": {\"color\": \"Country\"}})) chart.feature(\"tooltip\", True)","title":"Polar Line 2"},{"location":"examples/analytical_operations/drilldown/radial/","text":"Radial Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add 2 new Dimensions to the Y-axis and the Color channel remove the Measure from the Label channel chart.animate( Config( { \"channels\": { \"x\": \"Value 2 (+)\", \"y\": {\"set\": \"Country\", \"range\": {\"min\": \"-30%\"}}, \"label\": \"Value 2 (+)\", }, \"coordSystem\": \"polar\", } ) ) chart.animate( Config( { \"channels\": { \"x\": [\"Value 2 (+)\", \"Joy factors\"], \"color\": \"Joy factors\", \"label\": None, } } ), Style( { \"plot\": { \"marker\": { \"colorPalette\": \"#ef675aFF #6d8cccFF #e6cf99FF #9c50abFF\" } } } ), ) chart.feature(\"tooltip\", True)","title":"Radial"},{"location":"examples/analytical_operations/drilldown/radial/#radial","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add 2 new Dimensions to the Y-axis and the Color channel remove the Measure from the Label channel chart.animate( Config( { \"channels\": { \"x\": \"Value 2 (+)\", \"y\": {\"set\": \"Country\", \"range\": {\"min\": \"-30%\"}}, \"label\": \"Value 2 (+)\", }, \"coordSystem\": \"polar\", } ) ) chart.animate( Config( { \"channels\": { \"x\": [\"Value 2 (+)\", \"Joy factors\"], \"color\": \"Joy factors\", \"label\": None, } } ), Style( { \"plot\": { \"marker\": { \"colorPalette\": \"#ef675aFF #6d8cccFF #e6cf99FF #9c50abFF\" } } } ), ) chart.feature(\"tooltip\", True)","title":"Radial"},{"location":"examples/analytical_operations/drilldown/scatterplot/","text":"Scatter Plot Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_14.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add a new Dimension to the no-operation (Noop) channel chart.animate( Config( { \"channels\": { \"y\": \"Value 4 (+/-)\", \"x\": \"Value 2 (+)\", \"color\": \"Country\", \"label\": \"Country\", }, \"geometry\": \"circle\", } ) ) chart.animate(Config({\"channels\": {\"noop\": \"Year\", \"label\": None}}))","title":"Scatter Plot"},{"location":"examples/analytical_operations/drilldown/scatterplot/#scatter-plot","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_14.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add a new Dimension to the no-operation (Noop) channel chart.animate( Config( { \"channels\": { \"y\": \"Value 4 (+/-)\", \"x\": \"Value 2 (+)\", \"color\": \"Country\", \"label\": \"Country\", }, \"geometry\": \"circle\", } ) ) chart.animate(Config({\"channels\": {\"noop\": \"Year\", \"label\": None}}))","title":"Scatter Plot"},{"location":"examples/analytical_operations/filter/","text":"Filter src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/filter/area_polar_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/filter/area_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/filter/line.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/filter/line_polar.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/filter/stream_1.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/filter/stream_2.mp4' type='video/mp4'>","title":"Filter"},{"location":"examples/analytical_operations/filter/#filter","text":"src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/filter/area_polar_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/filter/area_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/filter/line.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/filter/line_polar.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/filter/stream_1.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/filter/stream_2.mp4' type='video/mp4'>","title":"Filter"},{"location":"examples/analytical_operations/filter/area_polar_stacked/","text":"Polar Stacked Area Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) filter the Diemsion data series which is on the Y-axis chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Value 2 (+)\", \"Country_code\"], \"color\": \"Country_code\", }, \"geometry\": \"area\", \"coordSystem\": \"polar\", } ) ) chart.animate( data.filter( \"\"\" (record) => record[\"Country_code\"] == \"FR\" || record[\"Country_code\"] == \"CY\" \"\"\" ), Config({}), ) chart.feature(\"tooltip\", True)","title":"Polar Stacked Area"},{"location":"examples/analytical_operations/filter/area_polar_stacked/#polar-stacked-area","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) filter the Diemsion data series which is on the Y-axis chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Value 2 (+)\", \"Country_code\"], \"color\": \"Country_code\", }, \"geometry\": \"area\", \"coordSystem\": \"polar\", } ) ) chart.animate( data.filter( \"\"\" (record) => record[\"Country_code\"] == \"FR\" || record[\"Country_code\"] == \"CY\" \"\"\" ), Config({}), ) chart.feature(\"tooltip\", True)","title":"Polar Stacked Area"},{"location":"examples/analytical_operations/filter/area_stacked/","text":"Stacked Area Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) filter the Diemsion data series which is on the Y-axis chart.animate( Config( { \"channels\": { \"x\": [\"Year\"], \"y\": [\"Value 2 (+)\", \"Country_code\"], \"color\": \"Country_code\", }, \"geometry\": \"area\", } ) ) chart.animate( data.filter( \"\"\" (record) => record[\"Country_code\"] == \"FR\" || record[\"Country_code\"] == \"CY\" \"\"\" ), Config({}), ) chart.feature(\"tooltip\", True)","title":"Stacked Area"},{"location":"examples/analytical_operations/filter/area_stacked/#stacked-area","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) filter the Diemsion data series which is on the Y-axis chart.animate( Config( { \"channels\": { \"x\": [\"Year\"], \"y\": [\"Value 2 (+)\", \"Country_code\"], \"color\": \"Country_code\", }, \"geometry\": \"area\", } ) ) chart.animate( data.filter( \"\"\" (record) => record[\"Country_code\"] == \"FR\" || record[\"Country_code\"] == \"CY\" \"\"\" ), Config({}), ) chart.feature(\"tooltip\", True)","title":"Stacked Area"},{"location":"examples/analytical_operations/filter/line/","text":"Line Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) filter the Diemsion data series which is on the Color channel chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 3 (+)\", \"color\": \"Country_code\", }, \"geometry\": \"line\", } ) ) chart.animate( data.filter( \"\"\" (record) => record[\"Country_code\"] == \"CY\" || record[\"Country_code\"] == \"ES\" \"\"\" ), Config({}), ) chart.feature(\"tooltip\", True)","title":"Line"},{"location":"examples/analytical_operations/filter/line/#line","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) filter the Diemsion data series which is on the Color channel chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 3 (+)\", \"color\": \"Country_code\", }, \"geometry\": \"line\", } ) ) chart.animate( data.filter( \"\"\" (record) => record[\"Country_code\"] == \"CY\" || record[\"Country_code\"] == \"ES\" \"\"\" ), Config({}), ) chart.feature(\"tooltip\", True)","title":"Line"},{"location":"examples/analytical_operations/filter/line_polar/","text":"Polar Line Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) filter the Diemsion data series which is on the Color channel chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 3 (+)\", \"color\": \"Country_code\", }, \"geometry\": \"line\", \"coordSystem\": \"polar\", } ) ) chart.animate( data.filter( \"\"\" (record) => record[\"Country_code\"] == \"CY\" || record[\"Country_code\"] == \"ES\" \"\"\" ), Config({}), ) chart.feature(\"tooltip\", True)","title":"Polar Line"},{"location":"examples/analytical_operations/filter/line_polar/#polar-line","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) filter the Diemsion data series which is on the Color channel chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 3 (+)\", \"color\": \"Country_code\", }, \"geometry\": \"line\", \"coordSystem\": \"polar\", } ) ) chart.animate( data.filter( \"\"\" (record) => record[\"Country_code\"] == \"CY\" || record[\"Country_code\"] == \"ES\" \"\"\" ), Config({}), ) chart.feature(\"tooltip\", True)","title":"Polar Line"},{"location":"examples/analytical_operations/filter/stream_1/","text":"Stream 1 Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_industry_history_1.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) filter the Diemsion data series on the Y-axis step-by-step, combined with their dominant time period on Year data series chart.animate( Config( { \"channels\": { \"x\": [\"Year\"], \"y\": [\"Revenue [$]\", \"Format\"], \"color\": \"Format\", }, \"geometry\": \"area\", \"align\": \"center\", } ), Style( {\"plot\": {\"yAxis\": {\"label\": {\"numberScale\": \"K, M, B, T\"}}}} ), ) chart.animate( data.filter( \"\"\" (record) => (record.Format == \"Tapes\" || record.Format == \"Vinyl\") && record[\"Year\"] <= 1989 \"\"\" ), Config({}), ) method = \"\"\" let year = parseFloat(event.data.text); if (!event.data.text.includes(\"$\") && !isNaN(year) && year % 5 != 0) event.preventDefault(); \"\"\" handler = chart.on(\"plot-axis-label-draw\", method) chart.animate( data.filter( \"\"\" (record) => (record.Format == \"Tapes\" || record.Format == \"Cassette\" || record.Format == \"Vinyl\") && record[\"Year\"] <= 1999 \"\"\" ), Config({}), ) chart.animate( data.filter( \"\"\" (record) => record.Format == \"DVD\" || record.Format == \"Other\" || record.Format == \"Tapes\" || record.Format == \"Cassette\" || record.Format == \"Vinyl\" || record.Format == \"CD\" \"\"\" ), Config({}), ) chart.animate( data.filter( \"\"\" (record) => record.Format == \"DVD\" || record.Format == \"Other\" || record.Format == \"Tapes\" || record.Format == \"Download\" || record.Format == \"Cassette\" || record.Format == \"Vinyl\" || record.Format == \"CD\" \"\"\" ), Config({}), ) chart.animate( data.filter( \"\"\" (record) => record.Format == \"DVD\" || record.Format == \"Other\" || record.Format == \"Tapes\" || record.Format == \"Download\" || record.Format == \"Streaming\" || record.Format == \"Cassette\" || record.Format == \"Vinyl\" || record.Format == \"CD\" \"\"\" ), Config({}), ) chart.feature(\"tooltip\", True)","title":"Stream 1"},{"location":"examples/analytical_operations/filter/stream_1/#stream-1","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_industry_history_1.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) filter the Diemsion data series on the Y-axis step-by-step, combined with their dominant time period on Year data series chart.animate( Config( { \"channels\": { \"x\": [\"Year\"], \"y\": [\"Revenue [$]\", \"Format\"], \"color\": \"Format\", }, \"geometry\": \"area\", \"align\": \"center\", } ), Style( {\"plot\": {\"yAxis\": {\"label\": {\"numberScale\": \"K, M, B, T\"}}}} ), ) chart.animate( data.filter( \"\"\" (record) => (record.Format == \"Tapes\" || record.Format == \"Vinyl\") && record[\"Year\"] <= 1989 \"\"\" ), Config({}), ) method = \"\"\" let year = parseFloat(event.data.text); if (!event.data.text.includes(\"$\") && !isNaN(year) && year % 5 != 0) event.preventDefault(); \"\"\" handler = chart.on(\"plot-axis-label-draw\", method) chart.animate( data.filter( \"\"\" (record) => (record.Format == \"Tapes\" || record.Format == \"Cassette\" || record.Format == \"Vinyl\") && record[\"Year\"] <= 1999 \"\"\" ), Config({}), ) chart.animate( data.filter( \"\"\" (record) => record.Format == \"DVD\" || record.Format == \"Other\" || record.Format == \"Tapes\" || record.Format == \"Cassette\" || record.Format == \"Vinyl\" || record.Format == \"CD\" \"\"\" ), Config({}), ) chart.animate( data.filter( \"\"\" (record) => record.Format == \"DVD\" || record.Format == \"Other\" || record.Format == \"Tapes\" || record.Format == \"Download\" || record.Format == \"Cassette\" || record.Format == \"Vinyl\" || record.Format == \"CD\" \"\"\" ), Config({}), ) chart.animate( data.filter( \"\"\" (record) => record.Format == \"DVD\" || record.Format == \"Other\" || record.Format == \"Tapes\" || record.Format == \"Download\" || record.Format == \"Streaming\" || record.Format == \"Cassette\" || record.Format == \"Vinyl\" || record.Format == \"CD\" \"\"\" ), Config({}), ) chart.feature(\"tooltip\", True)","title":"Stream 1"},{"location":"examples/analytical_operations/filter/stream_2/","text":"Stream 2 Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_industry_history_1.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) fix the X-axis-range filter the Diemsion data series on the Y-axis step-by-step method = \"\"\" let year = parseFloat(event.data.text); if (!event.data.text.includes(\"$\") && !isNaN(year) && year % 5 != 0) event.preventDefault(); \"\"\" handler = chart.on(\"plot-axis-label-draw\", method) chart.animate( Config( { \"channels\": { \"x\": {\"set\": \"Year\", \"range\": {\"max\": \"48\"}}, \"y\": [\"Revenue [$]\", \"Format\"], \"color\": \"Format\", }, \"geometry\": \"area\", \"align\": \"center\", } ), Style( {\"plot\": {\"yAxis\": {\"label\": {\"numberScale\": \"K, M, B, T\"}}}} ), ) chart.animate( data.filter( \"\"\" (record) => record.Format == \"Tapes\" || record.Format == \"Vinyl\" \"\"\" ), Config({}), ) chart.animate( data.filter( \"\"\" (record) => record.Format == \"Tapes\" || record.Format == \"Cassette\" || record.Format == \"Vinyl\" \"\"\" ), Config({}), ) chart.animate( data.filter( \"\"\" (record) => record.Format == \"DVD\" || record.Format == \"Tapes\" || record.Format == \"Cassette\" || record.Format == \"Vinyl\" || record.Format == \"CD\" \"\"\" ), Config({}), ) chart.animate( data.filter( \"\"\" (record) => record.Format == \"DVD\" || record.Format == \"Other\" || record.Format == \"Tapes\" || record.Format == \"Cassette\" || record.Format == \"Vinyl\" || record.Format == \"CD\" \"\"\" ), Config({}), ) chart.animate( data.filter( \"\"\" (record) => record.Format == \"DVD\" || record.Format == \"Other\" || record.Format == \"Tapes\" || record.Format == \"Download\" || record.Format == \"Cassette\" || record.Format == \"Vinyl\" || record.Format == \"CD\" \"\"\" ), Config({}), ) chart.animate( data.filter( \"\"\" (record) => record.Format == \"DVD\" || record.Format == \"Other\" || record.Format == \"Tapes\" || record.Format == \"Download\" || record.Format == \"Streaming\" || record.Format == \"Cassette\" || record.Format == \"Vinyl\" || record.Format == \"CD\" \"\"\" ), Config({}), ) chart.feature(\"tooltip\", True)","title":"Stream 2"},{"location":"examples/analytical_operations/filter/stream_2/#stream-2","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_industry_history_1.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) fix the X-axis-range filter the Diemsion data series on the Y-axis step-by-step method = \"\"\" let year = parseFloat(event.data.text); if (!event.data.text.includes(\"$\") && !isNaN(year) && year % 5 != 0) event.preventDefault(); \"\"\" handler = chart.on(\"plot-axis-label-draw\", method) chart.animate( Config( { \"channels\": { \"x\": {\"set\": \"Year\", \"range\": {\"max\": \"48\"}}, \"y\": [\"Revenue [$]\", \"Format\"], \"color\": \"Format\", }, \"geometry\": \"area\", \"align\": \"center\", } ), Style( {\"plot\": {\"yAxis\": {\"label\": {\"numberScale\": \"K, M, B, T\"}}}} ), ) chart.animate( data.filter( \"\"\" (record) => record.Format == \"Tapes\" || record.Format == \"Vinyl\" \"\"\" ), Config({}), ) chart.animate( data.filter( \"\"\" (record) => record.Format == \"Tapes\" || record.Format == \"Cassette\" || record.Format == \"Vinyl\" \"\"\" ), Config({}), ) chart.animate( data.filter( \"\"\" (record) => record.Format == \"DVD\" || record.Format == \"Tapes\" || record.Format == \"Cassette\" || record.Format == \"Vinyl\" || record.Format == \"CD\" \"\"\" ), Config({}), ) chart.animate( data.filter( \"\"\" (record) => record.Format == \"DVD\" || record.Format == \"Other\" || record.Format == \"Tapes\" || record.Format == \"Cassette\" || record.Format == \"Vinyl\" || record.Format == \"CD\" \"\"\" ), Config({}), ) chart.animate( data.filter( \"\"\" (record) => record.Format == \"DVD\" || record.Format == \"Other\" || record.Format == \"Tapes\" || record.Format == \"Download\" || record.Format == \"Cassette\" || record.Format == \"Vinyl\" || record.Format == \"CD\" \"\"\" ), Config({}), ) chart.animate( data.filter( \"\"\" (record) => record.Format == \"DVD\" || record.Format == \"Other\" || record.Format == \"Tapes\" || record.Format == \"Download\" || record.Format == \"Streaming\" || record.Format == \"Cassette\" || record.Format == \"Vinyl\" || record.Format == \"CD\" \"\"\" ), Config({}), ) chart.feature(\"tooltip\", True)","title":"Stream 2"},{"location":"examples/analytical_operations/misc/","text":"Miscellaneous src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/misc/donut_to_coxcomb.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/misc/make_space_with_polar.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/misc/orientation_marimekko.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/misc/pie_to_donut.mp4' type='video/mp4'>","title":"Miscellaneous"},{"location":"examples/analytical_operations/misc/#miscellaneous","text":"src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/misc/donut_to_coxcomb.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/misc/make_space_with_polar.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/misc/orientation_marimekko.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/misc/pie_to_donut.mp4' type='video/mp4'>","title":"Miscellaneous"},{"location":"examples/analytical_operations/misc/donut_to_coxcomb/","text":"Donut to Coxcomb Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add a new Measure to the Y-axis change the range of the Y-axis to disappear empty circle from the center chart.animate( Config( { \"channels\": { \"x\": [\"Value 2 (+)\", \"Country\"], \"y\": {\"range\": {\"min\": \"-200%\"}}, \"color\": \"Country\", \"label\": \"Value 2 (+)\", }, \"coordSystem\": \"polar\", } ) ) chart.animate( Config( { \"channels\": { \"x\": [\"Value 2 (+)\", \"Country\"], \"y\": {\"set\": \"Value 3 (+)\", \"range\": {\"min\": \"0\"}}, } } ) )","title":"Donut to Coxcomb"},{"location":"examples/analytical_operations/misc/donut_to_coxcomb/#donut-to-coxcomb","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add a new Measure to the Y-axis change the range of the Y-axis to disappear empty circle from the center chart.animate( Config( { \"channels\": { \"x\": [\"Value 2 (+)\", \"Country\"], \"y\": {\"range\": {\"min\": \"-200%\"}}, \"color\": \"Country\", \"label\": \"Value 2 (+)\", }, \"coordSystem\": \"polar\", } ) ) chart.animate( Config( { \"channels\": { \"x\": [\"Value 2 (+)\", \"Country\"], \"y\": {\"set\": \"Value 3 (+)\", \"range\": {\"min\": \"0\"}}, } } ) )","title":"Donut to Coxcomb"},{"location":"examples/analytical_operations/misc/make_space_with_polar/","text":"Make Space with Polar Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) change coordinate system to 'polar' add left padding in the Style to make space near the chart for something chart.animate( Config( { \"channels\": { \"x\": \"Value 2 (+)\", \"y\": \"Country\", \"color\": \"Country\", } } ) ) chart.animate( Config( { \"channels\": { \"x\": [\"Value 2 (+)\"], \"y\": {\"set\": \"Country\", \"range\": {\"min\": \"-30%\"}}, \"size\": None, }, \"coordSystem\": \"polar\", } ), Style({\"plot\": {\"paddingLeft\": \"25em\"}}), )","title":"Make Space with Polar"},{"location":"examples/analytical_operations/misc/make_space_with_polar/#make-space-with-polar","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) change coordinate system to 'polar' add left padding in the Style to make space near the chart for something chart.animate( Config( { \"channels\": { \"x\": \"Value 2 (+)\", \"y\": \"Country\", \"color\": \"Country\", } } ) ) chart.animate( Config( { \"channels\": { \"x\": [\"Value 2 (+)\"], \"y\": {\"set\": \"Country\", \"range\": {\"min\": \"-30%\"}}, \"size\": None, }, \"coordSystem\": \"polar\", } ), Style({\"plot\": {\"paddingLeft\": \"25em\"}}), )","title":"Make Space with Polar"},{"location":"examples/analytical_operations/misc/orientation_marimekko/","text":"Marimekko Orientation Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) change the orientation from 'horizontal' to 'vertical' chart.animate( Config( { \"channels\": { \"x\": [\"Country\", \"Value 2 (+)\"], \"y\": [\"Joy factors\", \"Value 3 (+)\"], \"color\": \"Joy factors\", \"label\": \"Country\", \"lightness\": \"Country\", }, \"align\": \"stretch\", \"orientation\": \"horizontal\", } ) ) chart.animate(Config({\"orientation\": \"vertical\"}))","title":"Marimekko Orientation"},{"location":"examples/analytical_operations/misc/orientation_marimekko/#marimekko-orientation","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) change the orientation from 'horizontal' to 'vertical' chart.animate( Config( { \"channels\": { \"x\": [\"Country\", \"Value 2 (+)\"], \"y\": [\"Joy factors\", \"Value 3 (+)\"], \"color\": \"Joy factors\", \"label\": \"Country\", \"lightness\": \"Country\", }, \"align\": \"stretch\", \"orientation\": \"horizontal\", } ) ) chart.animate(Config({\"orientation\": \"vertical\"}))","title":"Marimekko Orientation"},{"location":"examples/analytical_operations/misc/pie_to_donut/","text":"Pie to Donut Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) set the range of the Y-axis to make empty circle in the center chart.animate( Config( { \"channels\": { \"x\": [\"Joy factors\", \"Value 2 (+)\"], \"color\": \"Joy factors\", \"label\": \"Value 2 (+)\", }, \"coordSystem\": \"polar\", } ) ) chart.animate( Config({\"channels\": {\"y\": {\"range\": {\"min\": \"-200%\"}}}}) )","title":"Pie to Donut"},{"location":"examples/analytical_operations/misc/pie_to_donut/#pie-to-donut","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) set the range of the Y-axis to make empty circle in the center chart.animate( Config( { \"channels\": { \"x\": [\"Joy factors\", \"Value 2 (+)\"], \"color\": \"Joy factors\", \"label\": \"Value 2 (+)\", }, \"coordSystem\": \"polar\", } ) ) chart.animate( Config({\"channels\": {\"y\": {\"range\": {\"min\": \"-200%\"}}}}) )","title":"Pie to Donut"},{"location":"examples/analytical_operations/split/","text":"Split src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/split/area_polar_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/split/area_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/split/column_100percent_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/split/column_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/split/coxcomb.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/split/radial_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/split/scatterplot_1.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/split/scatterplot_2.mp4' type='video/mp4'>","title":"Split"},{"location":"examples/analytical_operations/split/#split","text":"src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/split/area_polar_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/split/area_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/split/column_100percent_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/split/column_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/split/coxcomb.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/split/radial_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/split/scatterplot_1.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/split/scatterplot_2.mp4' type='video/mp4'>","title":"Split"},{"location":"examples/analytical_operations/split/area_polar_stacked/","text":"Polar Stacked Area Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) set the Split parameter to True chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": { \"set\": [\"Country\", \"Value 2 (+)\"], \"range\": {\"min\": \"-20%\"}, }, \"color\": \"Country\", }, \"geometry\": \"area\", \"coordSystem\": \"polar\", } ) ) chart.animate(Config({\"split\": True})) chart.feature(\"tooltip\", True)","title":"Polar Stacked Area"},{"location":"examples/analytical_operations/split/area_polar_stacked/#polar-stacked-area","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) set the Split parameter to True chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": { \"set\": [\"Country\", \"Value 2 (+)\"], \"range\": {\"min\": \"-20%\"}, }, \"color\": \"Country\", }, \"geometry\": \"area\", \"coordSystem\": \"polar\", } ) ) chart.animate(Config({\"split\": True})) chart.feature(\"tooltip\", True)","title":"Polar Stacked Area"},{"location":"examples/analytical_operations/split/area_stacked/","text":"Stacked Area Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) set the Split parameter to True chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Value 2 (+)\", \"Country\"], \"color\": \"Country\", }, \"geometry\": \"area\", } ) ) chart.animate(Config({\"split\": True})) chart.feature(\"tooltip\", True)","title":"Stacked Area"},{"location":"examples/analytical_operations/split/area_stacked/#stacked-area","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) set the Split parameter to True chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Value 2 (+)\", \"Country\"], \"color\": \"Country\", }, \"geometry\": \"area\", } ) ) chart.animate(Config({\"split\": True})) chart.feature(\"tooltip\", True)","title":"Stacked Area"},{"location":"examples/analytical_operations/split/column_100percent_stacked/","text":"100% Stacked Column Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add the Measure to the Label channel too set the Align parameter from 'stretch' to 'min' set the Split parameter to True chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"color\": \"Country\", }, \"align\": \"stretch\", } ) ) chart.animate( Config( { \"channels\": {\"label\": \"Value 2 (+)\"}, \"align\": \"min\", \"split\": True, } ), Style( { \"plot\": { \"marker\": { \"label\": {\"position\": \"top\", \"fontSize\": \"0.6em\"} } } } ), ) chart.feature(\"tooltip\", True)","title":"100% Stacked Column"},{"location":"examples/analytical_operations/split/column_100percent_stacked/#100-stacked-column","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add the Measure to the Label channel too set the Align parameter from 'stretch' to 'min' set the Split parameter to True chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"color\": \"Country\", }, \"align\": \"stretch\", } ) ) chart.animate( Config( { \"channels\": {\"label\": \"Value 2 (+)\"}, \"align\": \"min\", \"split\": True, } ), Style( { \"plot\": { \"marker\": { \"label\": {\"position\": \"top\", \"fontSize\": \"0.6em\"} } } } ), ) chart.feature(\"tooltip\", True)","title":"100% Stacked Column"},{"location":"examples/analytical_operations/split/column_stacked/","text":"Stacked Column Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add the Measure to the Label channel too set the Split parameter to True chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"color\": \"Country\", } } ) ) chart.animate( Config({\"channels\": {\"label\": \"Value 2 (+)\"}, \"split\": True}), Style( { \"plot\": { \"marker\": { \"label\": {\"position\": \"top\", \"fontSize\": \"0.6em\"} } } } ), ) chart.feature(\"tooltip\", True)","title":"Stacked Column"},{"location":"examples/analytical_operations/split/column_stacked/#stacked-column","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add the Measure to the Label channel too set the Split parameter to True chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"color\": \"Country\", } } ) ) chart.animate( Config({\"channels\": {\"label\": \"Value 2 (+)\"}, \"split\": True}), Style( { \"plot\": { \"marker\": { \"label\": {\"position\": \"top\", \"fontSize\": \"0.6em\"} } } } ), ) chart.feature(\"tooltip\", True)","title":"Stacked Column"},{"location":"examples/analytical_operations/split/coxcomb/","text":"Coxcomb Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) set the Split parameter to True chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": { \"set\": [\"Country\", \"Value 2 (+)\"], \"range\": {\"min\": \"-20%\"}, }, \"color\": \"Country\", }, \"coordSystem\": \"polar\", } ), Style({\"plot\": {\"marker\": {\"rectangleSpacing\": \"0.1em\"}}}), ) chart.animate(Config({\"split\": True})) chart.feature(\"tooltip\", True)","title":"Coxcomb"},{"location":"examples/analytical_operations/split/coxcomb/#coxcomb","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) set the Split parameter to True chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": { \"set\": [\"Country\", \"Value 2 (+)\"], \"range\": {\"min\": \"-20%\"}, }, \"color\": \"Country\", }, \"coordSystem\": \"polar\", } ), Style({\"plot\": {\"marker\": {\"rectangleSpacing\": \"0.1em\"}}}), ) chart.animate(Config({\"split\": True})) chart.feature(\"tooltip\", True)","title":"Coxcomb"},{"location":"examples/analytical_operations/split/radial_stacked/","text":"Stacked Radial Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) set the Split parameter to True chart.animate( Config( { \"channels\": { \"x\": [\"Country\", \"Value 2 (+)\"], \"y\": {\"set\": \"Year\", \"range\": {\"min\": \"-3\"}}, \"color\": \"Country\", }, \"coordSystem\": \"polar\", } ) ) chart.animate(Config({\"split\": True}))","title":"Stacked Radial"},{"location":"examples/analytical_operations/split/radial_stacked/#stacked-radial","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) set the Split parameter to True chart.animate( Config( { \"channels\": { \"x\": [\"Country\", \"Value 2 (+)\"], \"y\": {\"set\": \"Year\", \"range\": {\"min\": \"-3\"}}, \"color\": \"Country\", }, \"coordSystem\": \"polar\", } ) ) chart.animate(Config({\"split\": True}))","title":"Stacked Radial"},{"location":"examples/analytical_operations/split/scatterplot_1/","text":"Scatter Plot 1 Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add the Dimension which is on the Color channel to the X-axis too set the Orientation parameter to 'vertical' set the Split parameter to True chart.animate( Config( { \"channels\": { \"x\": \"Value 2 (+)\", \"y\": \"Value 3 (+)\", \"noop\": \"Year\", \"color\": \"Country\", }, \"geometry\": \"circle\", } ) ) chart.animate( Config( { \"channels\": {\"x\": [\"Value 2 (+)\", \"Country\"]}, \"geometry\": \"circle\", \"orientation\": \"vertical\", \"split\": True, } ) ) chart.feature(\"tooltip\", True)","title":"Scatter Plot 1"},{"location":"examples/analytical_operations/split/scatterplot_1/#scatter-plot-1","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add the Dimension which is on the Color channel to the X-axis too set the Orientation parameter to 'vertical' set the Split parameter to True chart.animate( Config( { \"channels\": { \"x\": \"Value 2 (+)\", \"y\": \"Value 3 (+)\", \"noop\": \"Year\", \"color\": \"Country\", }, \"geometry\": \"circle\", } ) ) chart.animate( Config( { \"channels\": {\"x\": [\"Value 2 (+)\", \"Country\"]}, \"geometry\": \"circle\", \"orientation\": \"vertical\", \"split\": True, } ) ) chart.feature(\"tooltip\", True)","title":"Scatter Plot 1"},{"location":"examples/analytical_operations/split/scatterplot_2/","text":"Scatter Plot 2 Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add the Dimension which is on the Color channel to the X-axis too set the Orientation parameter to 'horizontal' set the Split parameter to True chart.animate( Config( { \"channels\": { \"x\": \"Value 2 (+)\", \"y\": \"Value 3 (+)\", \"noop\": \"Year\", \"color\": \"Country\", }, \"geometry\": \"circle\", } ) ) chart.animate( Config( { \"channels\": {\"y\": [\"Value 3 (+)\", \"Country\"]}, \"geometry\": \"circle\", \"orientation\": \"horizontal\", \"split\": True, } ) ) chart.feature(\"tooltip\", True)","title":"Scatter Plot 2"},{"location":"examples/analytical_operations/split/scatterplot_2/#scatter-plot-2","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add the Dimension which is on the Color channel to the X-axis too set the Orientation parameter to 'horizontal' set the Split parameter to True chart.animate( Config( { \"channels\": { \"x\": \"Value 2 (+)\", \"y\": \"Value 3 (+)\", \"noop\": \"Year\", \"color\": \"Country\", }, \"geometry\": \"circle\", } ) ) chart.animate( Config( { \"channels\": {\"y\": [\"Value 3 (+)\", \"Country\"]}, \"geometry\": \"circle\", \"orientation\": \"horizontal\", \"split\": True, } ) ) chart.feature(\"tooltip\", True)","title":"Scatter Plot 2"},{"location":"examples/analytical_operations/stretch_to_proportion/","text":"Stretch to proportion src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/stretch_to_proportion/area_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/stretch_to_proportion/column_groupped.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/stretch_to_proportion/column_split_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/stretch_to_proportion/column_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/stretch_to_proportion/line.mp4' type='video/mp4'>","title":"Stretch to proportion"},{"location":"examples/analytical_operations/stretch_to_proportion/#stretch-to-proportion","text":"src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/stretch_to_proportion/area_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/stretch_to_proportion/column_groupped.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/stretch_to_proportion/column_split_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/stretch_to_proportion/column_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/stretch_to_proportion/line.mp4' type='video/mp4'>","title":"Stretch to proportion"},{"location":"examples/analytical_operations/stretch_to_proportion/area_stacked/","text":"Stacked Area Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) set the Align parameter to 'stretch' chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Value 2 (+)\", \"Country\"], \"color\": \"Country\", }, \"geometry\": \"area\", } ) ) chart.animate(Config({\"align\": \"stretch\"})) chart.feature(\"tooltip\", True)","title":"Stacked Area"},{"location":"examples/analytical_operations/stretch_to_proportion/area_stacked/#stacked-area","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) set the Align parameter to 'stretch' chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Value 2 (+)\", \"Country\"], \"color\": \"Country\", }, \"geometry\": \"area\", } ) ) chart.animate(Config({\"align\": \"stretch\"})) chart.feature(\"tooltip\", True)","title":"Stacked Area"},{"location":"examples/analytical_operations/stretch_to_proportion/column_groupped/","text":"Groupped Column Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) move the 2nd dimension from the X-axis to the Y-axis set the Align parameter to 'stretch' chart.animate( Config( { \"channels\": { \"x\": [\"Year\", \"Country\"], \"y\": \"Value 2 (+)\", \"color\": \"Country\", } } ) ) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], }, \"align\": \"stretch\", } ) ) chart.feature(\"tooltip\", True)","title":"Groupped Column"},{"location":"examples/analytical_operations/stretch_to_proportion/column_groupped/#groupped-column","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) move the 2nd dimension from the X-axis to the Y-axis set the Align parameter to 'stretch' chart.animate( Config( { \"channels\": { \"x\": [\"Year\", \"Country\"], \"y\": \"Value 2 (+)\", \"color\": \"Country\", } } ) ) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], }, \"align\": \"stretch\", } ) ) chart.feature(\"tooltip\", True)","title":"Groupped Column"},{"location":"examples/analytical_operations/stretch_to_proportion/column_split_stacked/","text":"Split Stacked Column Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) set the Align parameter to 'stretch' set the the Split parameter to False chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"color\": \"Country\", \"label\": \"Value 2 (+)\", }, \"split\": True, } ), Style( { \"plot\": { \"marker\": { \"label\": {\"position\": \"top\", \"fontSize\": \"0.6em\"} } } } ), ) chart.animate( Config( { \"channels\": {\"label\": None}, \"align\": \"stretch\", \"split\": False, } ) ) chart.feature(\"tooltip\", True)","title":"Split Stacked Column"},{"location":"examples/analytical_operations/stretch_to_proportion/column_split_stacked/#split-stacked-column","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) set the Align parameter to 'stretch' set the the Split parameter to False chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"color\": \"Country\", \"label\": \"Value 2 (+)\", }, \"split\": True, } ), Style( { \"plot\": { \"marker\": { \"label\": {\"position\": \"top\", \"fontSize\": \"0.6em\"} } } } ), ) chart.animate( Config( { \"channels\": {\"label\": None}, \"align\": \"stretch\", \"split\": False, } ) ) chart.feature(\"tooltip\", True)","title":"Split Stacked Column"},{"location":"examples/analytical_operations/stretch_to_proportion/column_stacked/","text":"Stacked Column Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) set the Align parameter to 'stretch' chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"color\": \"Country\", } } ) ) chart.animate(Config({\"align\": \"stretch\"})) chart.feature(\"tooltip\", True)","title":"Stacked Column"},{"location":"examples/analytical_operations/stretch_to_proportion/column_stacked/#stacked-column","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) set the Align parameter to 'stretch' chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"color\": \"Country\", } } ) ) chart.animate(Config({\"align\": \"stretch\"})) chart.feature(\"tooltip\", True)","title":"Stacked Column"},{"location":"examples/analytical_operations/stretch_to_proportion/line/","text":"Line Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add the Dimension which is on the Color channel to the Y-axis too switch the Geometry from Line to Area set the Align parameter to 'stretch' chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"color\": \"Country\", }, \"geometry\": \"line\", } ) ) chart.animate( Config( { \"channels\": {\"y\": [\"Value 2 (+)\", \"Country\"]}, \"geometry\": \"area\", \"align\": \"stretch\", } ) ) chart.feature(\"tooltip\", True)","title":"Line"},{"location":"examples/analytical_operations/stretch_to_proportion/line/#line","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add the Dimension which is on the Color channel to the Y-axis too switch the Geometry from Line to Area set the Align parameter to 'stretch' chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"color\": \"Country\", }, \"geometry\": \"line\", } ) ) chart.animate( Config( { \"channels\": {\"y\": [\"Value 2 (+)\", \"Country\"]}, \"geometry\": \"area\", \"align\": \"stretch\", } ) ) chart.feature(\"tooltip\", True)","title":"Line"},{"location":"examples/analytical_operations/sum/","text":"Sum src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/area_100percent_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/area_polar_split.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/area_polar_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/area_split.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/area_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/bubble.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/bubble_to_column.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/bubble_to_coxcomb.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/bubble_to_radial.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/bubbleplot_1.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/bubbleplot_2.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/bubbleplot_to_radial.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/column_1.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/column_100percent_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/column_2.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/column_groupped.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/column_split_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/column_stacked_1.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/column_stacked_2.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/column_to_bar.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/column_to_waterfall.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/coxcomb_1.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/coxcomb_2.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/coxcomb_split.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/dotplot.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/line_1.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/line_2.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/line_polar_1.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/line_polar_2.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/scatterplot.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/scatterplot_polar.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/stream_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/treemap.mp4' type='video/mp4'>","title":"Sum"},{"location":"examples/analytical_operations/sum/#sum","text":"src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/area_100percent_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/area_polar_split.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/area_polar_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/area_split.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/area_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/bubble.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/bubble_to_column.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/bubble_to_coxcomb.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/bubble_to_radial.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/bubbleplot_1.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/bubbleplot_2.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/bubbleplot_to_radial.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/column_1.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/column_100percent_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/column_2.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/column_groupped.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/column_split_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/column_stacked_1.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/column_stacked_2.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/column_to_bar.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/column_to_waterfall.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/coxcomb_1.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/coxcomb_2.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/coxcomb_split.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/dotplot.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/line_1.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/line_2.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/line_polar_1.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/line_polar_2.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/scatterplot.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/scatterplot_polar.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/stream_stacked.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/examples/analytical_operations/sum/treemap.mp4' type='video/mp4'>","title":"Sum"},{"location":"examples/analytical_operations/sum/area_100percent_stacked/","text":"100% Stacked Area Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) set Align parameter from 'stretch' to 'min' chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Value 2 (+)\", \"Country\"], \"color\": \"Country\", }, \"geometry\": \"area\", \"align\": \"stretch\", } ) ) chart.animate(Config({\"align\": \"min\"})) chart.feature(\"tooltip\", True)","title":"100% Stacked Area"},{"location":"examples/analytical_operations/sum/area_100percent_stacked/#100-stacked-area","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) set Align parameter from 'stretch' to 'min' chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Value 2 (+)\", \"Country\"], \"color\": \"Country\", }, \"geometry\": \"area\", \"align\": \"stretch\", } ) ) chart.animate(Config({\"align\": \"min\"})) chart.feature(\"tooltip\", True)","title":"100% Stacked Area"},{"location":"examples/analytical_operations/sum/area_polar_split/","text":"Polar Split Area Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) set Split parameter from True to False chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": { \"set\": [\"Country\", \"Value 2 (+)\"], \"range\": {\"min\": \"-20%\"}, }, \"color\": \"Country\", }, \"geometry\": \"area\", \"split\": True, \"coordSystem\": \"polar\", } ) ) chart.animate(Config({\"split\": False})) chart.feature(\"tooltip\", True)","title":"Polar Split Area"},{"location":"examples/analytical_operations/sum/area_polar_split/#polar-split-area","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) set Split parameter from True to False chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": { \"set\": [\"Country\", \"Value 2 (+)\"], \"range\": {\"min\": \"-20%\"}, }, \"color\": \"Country\", }, \"geometry\": \"area\", \"split\": True, \"coordSystem\": \"polar\", } ) ) chart.animate(Config({\"split\": False})) chart.feature(\"tooltip\", True)","title":"Polar Split Area"},{"location":"examples/analytical_operations/sum/area_polar_stacked/","text":"Polar Stacked Area Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) remove the Dimension from Y-axis and the Color channel chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Value 2 (+)\", \"Country\"], \"color\": \"Country\", }, \"geometry\": \"area\", \"coordSystem\": \"polar\", } ) ) chart.animate( Config({\"channels\": {\"y\": \"Value 2 (+)\", \"color\": None}}) ) chart.feature(\"tooltip\", True)","title":"Polar Stacked Area"},{"location":"examples/analytical_operations/sum/area_polar_stacked/#polar-stacked-area","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) remove the Dimension from Y-axis and the Color channel chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Value 2 (+)\", \"Country\"], \"color\": \"Country\", }, \"geometry\": \"area\", \"coordSystem\": \"polar\", } ) ) chart.animate( Config({\"channels\": {\"y\": \"Value 2 (+)\", \"color\": None}}) ) chart.feature(\"tooltip\", True)","title":"Polar Stacked Area"},{"location":"examples/analytical_operations/sum/area_split/","text":"Split Area Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) set Split parameter from True to False chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Value 2 (+)\", \"Country\"], \"color\": \"Country\", }, \"geometry\": \"area\", \"split\": True, } ) ) chart.animate(Config({\"split\": False})) chart.feature(\"tooltip\", True)","title":"Split Area"},{"location":"examples/analytical_operations/sum/area_split/#split-area","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) set Split parameter from True to False chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Value 2 (+)\", \"Country\"], \"color\": \"Country\", }, \"geometry\": \"area\", \"split\": True, } ) ) chart.animate(Config({\"split\": False})) chart.feature(\"tooltip\", True)","title":"Split Area"},{"location":"examples/analytical_operations/sum/area_stacked/","text":"Stacked Area Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) remove the Dimension from Y-axis and the Color channel chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Value 2 (+)\", \"Country\"], \"color\": \"Country\", }, \"geometry\": \"area\", } ) ) chart.animate( Config({\"channels\": {\"y\": \"Value 2 (+)\", \"color\": None}}) ) chart.feature(\"tooltip\", True)","title":"Stacked Area"},{"location":"examples/analytical_operations/sum/area_stacked/#stacked-area","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) remove the Dimension from Y-axis and the Color channel chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Value 2 (+)\", \"Country\"], \"color\": \"Country\", }, \"geometry\": \"area\", } ) ) chart.animate( Config({\"channels\": {\"y\": \"Value 2 (+)\", \"color\": None}}) ) chart.feature(\"tooltip\", True)","title":"Stacked Area"},{"location":"examples/analytical_operations/sum/bubble/","text":"Bubble Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add the Dimension whitch is on Label channel to the Size channel too (stack) chart.animate( Config( { \"channels\": { \"color\": \"Joy factors\", \"size\": \"Value 2 (+)\", \"label\": \"Country_code\", }, \"geometry\": \"circle\", } ) ) chart.animate( Config({\"channels\": {\"size\": [\"Country_code\", \"Value 2 (+)\"]}}) )","title":"Bubble"},{"location":"examples/analytical_operations/sum/bubble/#bubble","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add the Dimension whitch is on Label channel to the Size channel too (stack) chart.animate( Config( { \"channels\": { \"color\": \"Joy factors\", \"size\": \"Value 2 (+)\", \"label\": \"Country_code\", }, \"geometry\": \"circle\", } ) ) chart.animate( Config({\"channels\": {\"size\": [\"Country_code\", \"Value 2 (+)\"]}}) )","title":"Bubble"},{"location":"examples/analytical_operations/sum/bubble_to_column/","text":"Bubble to Column Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) This Vizzu animation consist of 2 steps (animates): 1st: move the Dimension from the Label channel to the Y-axis move the Measure from the Size channel to the Y-axis add the other Dimension to the X-axis switch the Geometry from Circle to Rectangle 2nd: remove the other Dimension from the X-axis add the Measure to the Label channel too chart.animate( Config( { \"channels\": { \"color\": \"Joy factors\", \"label\": \"Country_code\", \"size\": [\"Country_code\", \"Value 2 (+)\"], }, \"geometry\": \"circle\", } ) ) chart.animate( Config( { \"channels\": { \"x\": \"Joy factors\", \"y\": [\"Country_code\", \"Value 2 (+)\"], \"label\": None, \"size\": None, }, \"geometry\": \"rectangle\", } ) ) chart.animate( Config({\"channels\": {\"y\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\"}}) )","title":"Bubble to Column"},{"location":"examples/analytical_operations/sum/bubble_to_column/#bubble-to-column","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) This Vizzu animation consist of 2 steps (animates): 1st: move the Dimension from the Label channel to the Y-axis move the Measure from the Size channel to the Y-axis add the other Dimension to the X-axis switch the Geometry from Circle to Rectangle 2nd: remove the other Dimension from the X-axis add the Measure to the Label channel too chart.animate( Config( { \"channels\": { \"color\": \"Joy factors\", \"label\": \"Country_code\", \"size\": [\"Country_code\", \"Value 2 (+)\"], }, \"geometry\": \"circle\", } ) ) chart.animate( Config( { \"channels\": { \"x\": \"Joy factors\", \"y\": [\"Country_code\", \"Value 2 (+)\"], \"label\": None, \"size\": None, }, \"geometry\": \"rectangle\", } ) ) chart.animate( Config({\"channels\": {\"y\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\"}}) )","title":"Bubble to Column"},{"location":"examples/analytical_operations/sum/bubble_to_coxcomb/","text":"Bubble to Coxcomb Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) This Vizzu animation consist of 2 steps (animates): 1st: move the Dimension from the Label channel to the Y-axis move the Measure from the Size channel to the Y-axis add the other Dimension to the X-axis switch the Geometry from Circle to Rectangle 2nd: remove the other Dimension from the X-axis add the Measure to the Label channel too chart.animate( Config( { \"channels\": { \"color\": \"Joy factors\", \"label\": \"Country_code\", \"size\": [\"Country_code\", \"Value 2 (+)\"], }, \"geometry\": \"circle\", } ) ) chart.animate( Config( { \"channels\": { \"x\": \"Joy factors\", \"y\": [\"Country_code\", \"Value 2 (+)\"], \"label\": None, \"size\": None, }, \"geometry\": \"rectangle\", \"coordSystem\": \"polar\", } ), Style({\"plot\": {\"marker\": {\"rectangleSpacing\": \"0em\"}}}), ) chart.animate( Config({\"channels\": {\"y\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\"}}) )","title":"Bubble to Coxcomb"},{"location":"examples/analytical_operations/sum/bubble_to_coxcomb/#bubble-to-coxcomb","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) This Vizzu animation consist of 2 steps (animates): 1st: move the Dimension from the Label channel to the Y-axis move the Measure from the Size channel to the Y-axis add the other Dimension to the X-axis switch the Geometry from Circle to Rectangle 2nd: remove the other Dimension from the X-axis add the Measure to the Label channel too chart.animate( Config( { \"channels\": { \"color\": \"Joy factors\", \"label\": \"Country_code\", \"size\": [\"Country_code\", \"Value 2 (+)\"], }, \"geometry\": \"circle\", } ) ) chart.animate( Config( { \"channels\": { \"x\": \"Joy factors\", \"y\": [\"Country_code\", \"Value 2 (+)\"], \"label\": None, \"size\": None, }, \"geometry\": \"rectangle\", \"coordSystem\": \"polar\", } ), Style({\"plot\": {\"marker\": {\"rectangleSpacing\": \"0em\"}}}), ) chart.animate( Config({\"channels\": {\"y\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\"}}) )","title":"Bubble to Coxcomb"},{"location":"examples/analytical_operations/sum/bubble_to_radial/","text":"Bubble to Radial Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) This Vizzu animation consist of 2 steps (animates): 1st: move the Dimension from the Label channel to the X-axis move the Measure from the Size channel to the X-axis add the other Dimension to the Y-axis set the Y-axis range min to make empty circle in the center switch the Geometry from Circle to Rectangle 2nd: remove the other Dimension from the X-axis add the Measure to the Label channel too chart.animate( Config( { \"channels\": { \"color\": \"Joy factors\", \"label\": \"Country_code\", \"size\": [\"Country_code\", \"Value 2 (+)\"], }, \"geometry\": \"circle\", } ) ) chart.animate( Config( { \"channels\": { \"y\": {\"set\": \"Joy factors\", \"range\": {\"min\": \"-30%\"}}, \"x\": [\"Country_code\", \"Value 2 (+)\"], \"label\": None, \"size\": None, }, \"geometry\": \"rectangle\", \"coordSystem\": \"polar\", \"sort\": \"byValue\", } ) ) chart.animate( Config({\"channels\": {\"x\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\"}}) )","title":"Bubble to Radial"},{"location":"examples/analytical_operations/sum/bubble_to_radial/#bubble-to-radial","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) This Vizzu animation consist of 2 steps (animates): 1st: move the Dimension from the Label channel to the X-axis move the Measure from the Size channel to the X-axis add the other Dimension to the Y-axis set the Y-axis range min to make empty circle in the center switch the Geometry from Circle to Rectangle 2nd: remove the other Dimension from the X-axis add the Measure to the Label channel too chart.animate( Config( { \"channels\": { \"color\": \"Joy factors\", \"label\": \"Country_code\", \"size\": [\"Country_code\", \"Value 2 (+)\"], }, \"geometry\": \"circle\", } ) ) chart.animate( Config( { \"channels\": { \"y\": {\"set\": \"Joy factors\", \"range\": {\"min\": \"-30%\"}}, \"x\": [\"Country_code\", \"Value 2 (+)\"], \"label\": None, \"size\": None, }, \"geometry\": \"rectangle\", \"coordSystem\": \"polar\", \"sort\": \"byValue\", } ) ) chart.animate( Config({\"channels\": {\"x\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\"}}) )","title":"Bubble to Radial"},{"location":"examples/analytical_operations/sum/bubbleplot_1/","text":"Bubble Plot 1 Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) remove the Dimension from the Label channel and add the othere Dimension to it chart.animate( Config( { \"channels\": { \"x\": \"Value 1 (+)\", \"y\": \"Value 3 (+)\", \"size\": \"Value 2 (+)\", \"color\": \"Year\", \"label\": \"Country_code\", }, \"geometry\": \"circle\", } ) ) chart.animate(Config({\"channels\": {\"label\": \"Year\"}})) chart.feature(\"tooltip\", True)","title":"Bubble Plot 1"},{"location":"examples/analytical_operations/sum/bubbleplot_1/#bubble-plot-1","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) remove the Dimension from the Label channel and add the othere Dimension to it chart.animate( Config( { \"channels\": { \"x\": \"Value 1 (+)\", \"y\": \"Value 3 (+)\", \"size\": \"Value 2 (+)\", \"color\": \"Year\", \"label\": \"Country_code\", }, \"geometry\": \"circle\", } ) ) chart.animate(Config({\"channels\": {\"label\": \"Year\"}})) chart.feature(\"tooltip\", True)","title":"Bubble Plot 1"},{"location":"examples/analytical_operations/sum/bubbleplot_2/","text":"Bubble Plot 2 Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) This Vizzu animation consist of 2 steps (animates): 1st: remove two Measures from the axes move the Dimension from the Label channel and the third Measure from the Size channel to the X-axis switch the Geometry from Circle to Rectangle 2nd: remove the Dimension from the X-axis add the remaining Measure to the Label channel chart.animate( Config( { \"channels\": { \"x\": [\"Joy factors\", \"Value 6 (+/-)\"], \"y\": \"Value 5 (+/-)\", \"color\": \"Joy factors\", \"size\": \"Value 2 (+)\", \"label\": \"Country_code\", }, \"geometry\": \"circle\", } ) ) chart.animate( Config( { \"channels\": { \"x\": [\"Country_code\", \"Value 2 (+)\"], \"y\": \"Joy factors\", \"label\": None, }, \"geometry\": \"rectangle\", \"orientation\": \"vertical\", } ) ) chart.animate( Config({\"channels\": {\"x\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\"}}) )","title":"Bubble Plot 2"},{"location":"examples/analytical_operations/sum/bubbleplot_2/#bubble-plot-2","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) This Vizzu animation consist of 2 steps (animates): 1st: remove two Measures from the axes move the Dimension from the Label channel and the third Measure from the Size channel to the X-axis switch the Geometry from Circle to Rectangle 2nd: remove the Dimension from the X-axis add the remaining Measure to the Label channel chart.animate( Config( { \"channels\": { \"x\": [\"Joy factors\", \"Value 6 (+/-)\"], \"y\": \"Value 5 (+/-)\", \"color\": \"Joy factors\", \"size\": \"Value 2 (+)\", \"label\": \"Country_code\", }, \"geometry\": \"circle\", } ) ) chart.animate( Config( { \"channels\": { \"x\": [\"Country_code\", \"Value 2 (+)\"], \"y\": \"Joy factors\", \"label\": None, }, \"geometry\": \"rectangle\", \"orientation\": \"vertical\", } ) ) chart.animate( Config({\"channels\": {\"x\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\"}}) )","title":"Bubble Plot 2"},{"location":"examples/analytical_operations/sum/bubbleplot_to_radial/","text":"Bubble Plot to Radial Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) This Vizzu animation consist of 2 steps (animates): 1st: remove two Measures from the axes move the Dimension from the no-operation (Noop) channel and the third Measure from the Size channel to the X-axis switch the Geometry from Circle to Rectangle 2nd: remove the Dimension from the X-axis add the remaining Measure to the Label channel chart.animate( Config( { \"channels\": { \"x\": [\"Joy factors\", \"Value 6 (+/-)\"], \"y\": \"Value 5 (+/-)\", \"color\": \"Joy factors\", \"size\": \"Value 2 (+)\", \"noop\": \"Country_code\", }, \"geometry\": \"circle\", } ), Style({\"plot\": {\"marker\": {\"guides\": {\"color\": \"#ffffff00\"}}}}), ) chart.animate( Config( { \"channels\": { \"x\": [\"Country_code\", \"Value 2 (+)\"], \"y\": {\"set\": \"Joy factors\", \"range\": {\"min\": \"-30%\"}}, \"noop\": None, }, \"geometry\": \"rectangle\", \"orientation\": \"vertical\", \"coordSystem\": \"polar\", } ) ) chart.animate( Config({\"channels\": {\"x\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\"}}) )","title":"Bubble Plot to Radial"},{"location":"examples/analytical_operations/sum/bubbleplot_to_radial/#bubble-plot-to-radial","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) This Vizzu animation consist of 2 steps (animates): 1st: remove two Measures from the axes move the Dimension from the no-operation (Noop) channel and the third Measure from the Size channel to the X-axis switch the Geometry from Circle to Rectangle 2nd: remove the Dimension from the X-axis add the remaining Measure to the Label channel chart.animate( Config( { \"channels\": { \"x\": [\"Joy factors\", \"Value 6 (+/-)\"], \"y\": \"Value 5 (+/-)\", \"color\": \"Joy factors\", \"size\": \"Value 2 (+)\", \"noop\": \"Country_code\", }, \"geometry\": \"circle\", } ), Style({\"plot\": {\"marker\": {\"guides\": {\"color\": \"#ffffff00\"}}}}), ) chart.animate( Config( { \"channels\": { \"x\": [\"Country_code\", \"Value 2 (+)\"], \"y\": {\"set\": \"Joy factors\", \"range\": {\"min\": \"-30%\"}}, \"noop\": None, }, \"geometry\": \"rectangle\", \"orientation\": \"vertical\", \"coordSystem\": \"polar\", } ) ) chart.animate( Config({\"channels\": {\"x\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\"}}) )","title":"Bubble Plot to Radial"},{"location":"examples/analytical_operations/sum/column_1/","text":"Column 1 Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) move the Dimension from X-axis to the Y-axis and the Color channel chart.animate( Config( { \"channels\": { \"x\": \"Country\", \"y\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\", } } ) ) chart.animate( Config( { \"channels\": { \"x\": None, \"y\": [\"Country\", \"Value 2 (+)\"], \"color\": \"Country\", } } ) ) chart.feature(\"tooltip\", True)","title":"Column 1"},{"location":"examples/analytical_operations/sum/column_1/#column-1","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) move the Dimension from X-axis to the Y-axis and the Color channel chart.animate( Config( { \"channels\": { \"x\": \"Country\", \"y\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\", } } ) ) chart.animate( Config( { \"channels\": { \"x\": None, \"y\": [\"Country\", \"Value 2 (+)\"], \"color\": \"Country\", } } ) ) chart.feature(\"tooltip\", True)","title":"Column 1"},{"location":"examples/analytical_operations/sum/column_100percent_stacked/","text":"100% Stacked Column Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) set Align parameter from 'stretch' to 'min' chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"color\": \"Country\", }, \"align\": \"stretch\", } ) ) chart.animate(Config({\"align\": \"min\"})) chart.feature(\"tooltip\", True)","title":"100% Stacked Column"},{"location":"examples/analytical_operations/sum/column_100percent_stacked/#100-stacked-column","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) set Align parameter from 'stretch' to 'min' chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"color\": \"Country\", }, \"align\": \"stretch\", } ) ) chart.animate(Config({\"align\": \"min\"})) chart.feature(\"tooltip\", True)","title":"100% Stacked Column"},{"location":"examples/analytical_operations/sum/column_2/","text":"Column 2 Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) remove the Dimension from the X-axis chart.animate( Config( { \"channels\": { \"x\": \"Country\", \"y\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\", } } ) ) chart.animate(Config({\"channels\": {\"x\": None}})) chart.feature(\"tooltip\", True)","title":"Column 2"},{"location":"examples/analytical_operations/sum/column_2/#column-2","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) remove the Dimension from the X-axis chart.animate( Config( { \"channels\": { \"x\": \"Country\", \"y\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\", } } ) ) chart.animate(Config({\"channels\": {\"x\": None}})) chart.feature(\"tooltip\", True)","title":"Column 2"},{"location":"examples/analytical_operations/sum/column_groupped/","text":"Groupped Column Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) move one Dimension from X-axis to the Y-axis (stack) chart.animate( Config( { \"channels\": { \"x\": [\"Year\", \"Country\"], \"y\": \"Value 2 (+)\", \"color\": \"Country\", } } ) ) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"color\": \"Country\", } } ) ) chart.feature(\"tooltip\", True)","title":"Groupped Column"},{"location":"examples/analytical_operations/sum/column_groupped/#groupped-column","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) move one Dimension from X-axis to the Y-axis (stack) chart.animate( Config( { \"channels\": { \"x\": [\"Year\", \"Country\"], \"y\": \"Value 2 (+)\", \"color\": \"Country\", } } ) ) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"color\": \"Country\", } } ) ) chart.feature(\"tooltip\", True)","title":"Groupped Column"},{"location":"examples/analytical_operations/sum/column_split_stacked/","text":"Split Stacked Column Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) set Split parameter from True to False None Label channel + if you like set the marker-label fontSize in the Style chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"color\": \"Country\", \"label\": \"Value 2 (+)\", }, \"split\": True, } ), Style( { \"plot\": { \"marker\": { \"label\": {\"position\": \"top\", \"fontSize\": \"0.6em\"} } } } ), ) chart.animate(Config({\"channels\": {\"label\": None}, \"split\": False})) chart.feature(\"tooltip\", True)","title":"Split Stacked Column"},{"location":"examples/analytical_operations/sum/column_split_stacked/#split-stacked-column","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) set Split parameter from True to False None Label channel + if you like set the marker-label fontSize in the Style chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"color\": \"Country\", \"label\": \"Value 2 (+)\", }, \"split\": True, } ), Style( { \"plot\": { \"marker\": { \"label\": {\"position\": \"top\", \"fontSize\": \"0.6em\"} } } } ), ) chart.animate(Config({\"channels\": {\"label\": None}, \"split\": False})) chart.feature(\"tooltip\", True)","title":"Split Stacked Column"},{"location":"examples/analytical_operations/sum/column_stacked_1/","text":"Stacked Column 1 Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) remove the Dimension from Y-axis and the Color channel chart.animate( Config( { \"channels\": { \"x\": \"Country\", \"y\": [\"Value 2 (+)\", \"Joy factors\"], \"color\": \"Joy factors\", \"label\": \"Value 2 (+)\", } } ) ) chart.animate( Config({\"channels\": {\"y\": \"Value 2 (+)\", \"color\": None}}) ) chart.feature(\"tooltip\", True)","title":"Stacked Column 1"},{"location":"examples/analytical_operations/sum/column_stacked_1/#stacked-column-1","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) remove the Dimension from Y-axis and the Color channel chart.animate( Config( { \"channels\": { \"x\": \"Country\", \"y\": [\"Value 2 (+)\", \"Joy factors\"], \"color\": \"Joy factors\", \"label\": \"Value 2 (+)\", } } ) ) chart.animate( Config({\"channels\": {\"y\": \"Value 2 (+)\", \"color\": None}}) ) chart.feature(\"tooltip\", True)","title":"Stacked Column 1"},{"location":"examples/analytical_operations/sum/column_stacked_2/","text":"Stacked Column 2 Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) remove the Dimension from the X-axis and Color channel shift the Measure from X to the Y-axis (change orientation), and add it to the Label channel chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Joy factors\", \"Value 2 (+)\"], \"color\": \"Joy factors\", } } ), Style( { \"plot\": { \"marker\": { \"colorPalette\": \"#ef675aFF #6d8cccFF #e6cf99FF #9c50abFF\" } } } ), ) chart.animate( Config( { \"channels\": { \"x\": \"Value 2 (+)\", \"y\": [\"Joy factors\"], \"label\": \"Value 2 (+)\", } } ) )","title":"Stacked Column 2"},{"location":"examples/analytical_operations/sum/column_stacked_2/#stacked-column-2","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) remove the Dimension from the X-axis and Color channel shift the Measure from X to the Y-axis (change orientation), and add it to the Label channel chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Joy factors\", \"Value 2 (+)\"], \"color\": \"Joy factors\", } } ), Style( { \"plot\": { \"marker\": { \"colorPalette\": \"#ef675aFF #6d8cccFF #e6cf99FF #9c50abFF\" } } } ), ) chart.animate( Config( { \"channels\": { \"x\": \"Value 2 (+)\", \"y\": [\"Joy factors\"], \"label\": \"Value 2 (+)\", } } ) )","title":"Stacked Column 2"},{"location":"examples/analytical_operations/sum/column_to_bar/","text":"Column to Bar Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) remove the Dimension from the X-axis shift the Meassure from the Y-axis to the X-axis set the Orientation to vertical chart.animate( Config( { \"channels\": { \"x\": \"Country\", \"y\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\", } } ) ) chart.animate( Config( { \"channels\": {\"x\": \"Value 2 (+)\", \"y\": None}, \"orientation\": \"vertical\", } ) ) chart.feature(\"tooltip\", True)","title":"Column to Bar"},{"location":"examples/analytical_operations/sum/column_to_bar/#column-to-bar","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) remove the Dimension from the X-axis shift the Meassure from the Y-axis to the X-axis set the Orientation to vertical chart.animate( Config( { \"channels\": { \"x\": \"Country\", \"y\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\", } } ) ) chart.animate( Config( { \"channels\": {\"x\": \"Value 2 (+)\", \"y\": None}, \"orientation\": \"vertical\", } ) ) chart.feature(\"tooltip\", True)","title":"Column to Bar"},{"location":"examples/analytical_operations/sum/column_to_waterfall/","text":"Column to Waterfall Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add the existing Dimension to the Y-axis as well + here is an example of how you can set a colorGradient palette in the Style chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 5 (+/-)\", \"color\": { \"set\": \"Value 5 (+/-)\", \"range\": {\"min\": \"-45\", \"max\": \"45\"}, }, \"noop\": \"Country\", \"label\": \"Value 5 (+/-)\", }, \"legend\": \"color\", } ), Style( { \"plot\": { \"marker\": { \"colorGradient\": \"#ac1727 0,#e36c56 0.15,#f4b096 0.35,#d5d7d9 0.5,#9fbffa 0.65,#6389ec 0.85,#3d51b8 1\", \"label\": {\"position\": \"top\"}, } } } ), ) chart.animate(Config({\"channels\": {\"y\": [\"Year\", \"Value 5 (+/-)\"]}}))","title":"Column to Waterfall"},{"location":"examples/analytical_operations/sum/column_to_waterfall/#column-to-waterfall","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add the existing Dimension to the Y-axis as well + here is an example of how you can set a colorGradient palette in the Style chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 5 (+/-)\", \"color\": { \"set\": \"Value 5 (+/-)\", \"range\": {\"min\": \"-45\", \"max\": \"45\"}, }, \"noop\": \"Country\", \"label\": \"Value 5 (+/-)\", }, \"legend\": \"color\", } ), Style( { \"plot\": { \"marker\": { \"colorGradient\": \"#ac1727 0,#e36c56 0.15,#f4b096 0.35,#d5d7d9 0.5,#9fbffa 0.65,#6389ec 0.85,#3d51b8 1\", \"label\": {\"position\": \"top\"}, } } } ), ) chart.animate(Config({\"channels\": {\"y\": [\"Year\", \"Value 5 (+/-)\"]}}))","title":"Column to Waterfall"},{"location":"examples/analytical_operations/sum/coxcomb_1/","text":"Coxcomb 1 Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) remove the Dimension from Y-axis and the Color channel add the Measure to the Label channel too chart.animate( Config( { \"channels\": { \"x\": \"Country\", \"y\": [\"Value 2 (+)\", \"Joy factors\"], \"color\": \"Joy factors\", }, \"coordSystem\": \"polar\", } ), Style({\"plot\": {\"marker\": {\"rectangleSpacing\": \"0.1em\"}}}), ) chart.animate( Config( { \"channels\": { \"y\": \"Value 2 (+)\", \"color\": None, \"label\": \"Value 2 (+)\", } } ) ) chart.feature(\"tooltip\", True)","title":"Coxcomb 1"},{"location":"examples/analytical_operations/sum/coxcomb_1/#coxcomb-1","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) remove the Dimension from Y-axis and the Color channel add the Measure to the Label channel too chart.animate( Config( { \"channels\": { \"x\": \"Country\", \"y\": [\"Value 2 (+)\", \"Joy factors\"], \"color\": \"Joy factors\", }, \"coordSystem\": \"polar\", } ), Style({\"plot\": {\"marker\": {\"rectangleSpacing\": \"0.1em\"}}}), ) chart.animate( Config( { \"channels\": { \"y\": \"Value 2 (+)\", \"color\": None, \"label\": \"Value 2 (+)\", } } ) ) chart.feature(\"tooltip\", True)","title":"Coxcomb 1"},{"location":"examples/analytical_operations/sum/coxcomb_2/","text":"Coxcomb 2 Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) remove the Dimension from the X-axis and Color channel shift the Measure from X to the Y-axis (change orientation), and add it to the Label channel chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Joy factors\", \"Value 2 (+)\"], \"color\": \"Joy factors\", }, \"coordSystem\": \"polar\", } ), Style( { \"plot\": { \"marker\": { \"colorPalette\": \"#ef675aFF #6d8cccFF #e6cf99FF #9c50abFF\", \"rectangleSpacing\": \"0.1em\", } } } ), ) chart.animate( Config( { \"channels\": { \"x\": \"Value 2 (+)\", \"y\": {\"set\": \"Joy factors\", \"range\": {\"min\": \"-30%\"}}, \"label\": \"Value 2 (+)\", } } ), Style({\"plot\": {\"marker\": {\"rectangleSpacing\": None}}}), )","title":"Coxcomb 2"},{"location":"examples/analytical_operations/sum/coxcomb_2/#coxcomb-2","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) remove the Dimension from the X-axis and Color channel shift the Measure from X to the Y-axis (change orientation), and add it to the Label channel chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Joy factors\", \"Value 2 (+)\"], \"color\": \"Joy factors\", }, \"coordSystem\": \"polar\", } ), Style( { \"plot\": { \"marker\": { \"colorPalette\": \"#ef675aFF #6d8cccFF #e6cf99FF #9c50abFF\", \"rectangleSpacing\": \"0.1em\", } } } ), ) chart.animate( Config( { \"channels\": { \"x\": \"Value 2 (+)\", \"y\": {\"set\": \"Joy factors\", \"range\": {\"min\": \"-30%\"}}, \"label\": \"Value 2 (+)\", } } ), Style({\"plot\": {\"marker\": {\"rectangleSpacing\": None}}}), )","title":"Coxcomb 2"},{"location":"examples/analytical_operations/sum/coxcomb_split/","text":"Split Coxcomb Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) set Split parameter from True to False chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": { \"set\": [\"Country\", \"Value 2 (+)\"], \"range\": {\"min\": \"-20%\"}, }, \"color\": \"Country\", }, \"split\": True, \"coordSystem\": \"polar\", } ), Style({\"plot\": {\"marker\": {\"rectangleSpacing\": \"0.1em\"}}}), ) chart.animate(Config({\"split\": False})) chart.feature(\"tooltip\", True)","title":"Split Coxcomb"},{"location":"examples/analytical_operations/sum/coxcomb_split/#split-coxcomb","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) set Split parameter from True to False chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": { \"set\": [\"Country\", \"Value 2 (+)\"], \"range\": {\"min\": \"-20%\"}, }, \"color\": \"Country\", }, \"split\": True, \"coordSystem\": \"polar\", } ), Style({\"plot\": {\"marker\": {\"rectangleSpacing\": \"0.1em\"}}}), ) chart.animate(Config({\"split\": False})) chart.feature(\"tooltip\", True)","title":"Split Coxcomb"},{"location":"examples/analytical_operations/sum/dotplot/","text":"Dot Plot Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add the Dimension whitch is on the Color channel to the Y-axis too switch the Geometry from Circle to Rectangle chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"color\": \"Country\", }, \"geometry\": \"circle\", } ) ) chart.animate( Config( { \"channels\": {\"y\": [\"Country\", \"Value 2 (+)\"]}, \"geometry\": \"rectangle\", } ) ) chart.feature(\"tooltip\", True)","title":"Dot Plot"},{"location":"examples/analytical_operations/sum/dotplot/#dot-plot","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add the Dimension whitch is on the Color channel to the Y-axis too switch the Geometry from Circle to Rectangle chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"color\": \"Country\", }, \"geometry\": \"circle\", } ) ) chart.animate( Config( { \"channels\": {\"y\": [\"Country\", \"Value 2 (+)\"]}, \"geometry\": \"rectangle\", } ) ) chart.feature(\"tooltip\", True)","title":"Dot Plot"},{"location":"examples/analytical_operations/sum/line_1/","text":"Line 1 Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add the Dimension whitch is on Color channel to the Y-axis too switch the Geometry from Line to Area chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"color\": \"Country\", }, \"geometry\": \"line\", } ) ) chart.animate( Config( { \"channels\": {\"y\": [\"Country\", \"Value 2 (+)\"]}, \"geometry\": \"area\", } ) ) chart.feature(\"tooltip\", True)","title":"Line 1"},{"location":"examples/analytical_operations/sum/line_1/#line-1","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add the Dimension whitch is on Color channel to the Y-axis too switch the Geometry from Line to Area chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"color\": \"Country\", }, \"geometry\": \"line\", } ) ) chart.animate( Config( { \"channels\": {\"y\": [\"Country\", \"Value 2 (+)\"]}, \"geometry\": \"area\", } ) ) chart.feature(\"tooltip\", True)","title":"Line 1"},{"location":"examples/analytical_operations/sum/line_2/","text":"Line 2 Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) remove the Dimension from the Color channel chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"color\": \"Country\", }, \"geometry\": \"line\", } ) ) chart.animate(Config({\"channels\": {\"color\": None}})) chart.feature(\"tooltip\", True)","title":"Line 2"},{"location":"examples/analytical_operations/sum/line_2/#line-2","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) remove the Dimension from the Color channel chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"color\": \"Country\", }, \"geometry\": \"line\", } ) ) chart.animate(Config({\"channels\": {\"color\": None}})) chart.feature(\"tooltip\", True)","title":"Line 2"},{"location":"examples/analytical_operations/sum/line_polar_1/","text":"Polar Line 1 Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) remove the Dimension from the Color channel chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"color\": \"Country\", }, \"geometry\": \"line\", \"coordSystem\": \"polar\", } ) ) chart.animate(Config({\"channels\": {\"color\": None}})) chart.feature(\"tooltip\", True)","title":"Polar Line 1"},{"location":"examples/analytical_operations/sum/line_polar_1/#polar-line-1","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) remove the Dimension from the Color channel chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"color\": \"Country\", }, \"geometry\": \"line\", \"coordSystem\": \"polar\", } ) ) chart.animate(Config({\"channels\": {\"color\": None}})) chart.feature(\"tooltip\", True)","title":"Polar Line 1"},{"location":"examples/analytical_operations/sum/line_polar_2/","text":"Polar Line 2 Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add the Dimension whitch is on Color channel to the Y-axis too switch the Geometry from Line to Area chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": {\"set\": \"Value 2 (+)\", \"range\": {\"min\": \"-20%\"}}, \"color\": \"Country\", }, \"geometry\": \"line\", \"coordSystem\": \"polar\", } ) ) chart.animate( Config( { \"channels\": {\"y\": [\"Country\", \"Value 2 (+)\"]}, \"geometry\": \"area\", } ) ) chart.feature(\"tooltip\", True)","title":"Polar Line 2"},{"location":"examples/analytical_operations/sum/line_polar_2/#polar-line-2","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add the Dimension whitch is on Color channel to the Y-axis too switch the Geometry from Line to Area chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": {\"set\": \"Value 2 (+)\", \"range\": {\"min\": \"-20%\"}}, \"color\": \"Country\", }, \"geometry\": \"line\", \"coordSystem\": \"polar\", } ) ) chart.animate( Config( { \"channels\": {\"y\": [\"Country\", \"Value 2 (+)\"]}, \"geometry\": \"area\", } ) ) chart.feature(\"tooltip\", True)","title":"Polar Line 2"},{"location":"examples/analytical_operations/sum/scatterplot/","text":"Scatter Plot Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) remove the Dimension from the Label channel and add the othere Dimension to it chart.animate( Config( { \"channels\": { \"x\": \"Value 1 (+)\", \"y\": \"Value 3 (+)\", \"color\": \"Country\", \"label\": \"Year\", }, \"geometry\": \"circle\", } ) ) chart.animate(Config({\"channels\": {\"label\": \"Country\"}})) chart.feature(\"tooltip\", True)","title":"Scatter Plot"},{"location":"examples/analytical_operations/sum/scatterplot/#scatter-plot","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) remove the Dimension from the Label channel and add the othere Dimension to it chart.animate( Config( { \"channels\": { \"x\": \"Value 1 (+)\", \"y\": \"Value 3 (+)\", \"color\": \"Country\", \"label\": \"Year\", }, \"geometry\": \"circle\", } ) ) chart.animate(Config({\"channels\": {\"label\": \"Country\"}})) chart.feature(\"tooltip\", True)","title":"Scatter Plot"},{"location":"examples/analytical_operations/sum/scatterplot_polar/","text":"Polar Scatter Plot Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add the Dimension whitch is on the Color channel to the Y-axis too switch the Geometry from Circle to Rectangle chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"color\": \"Country\", }, \"geometry\": \"circle\", \"coordSystem\": \"polar\", } ), Style( { \"plot\": { \"marker\": { \"rectangleSpacing\": \"0.1em\", \"label\": {\"position\": \"top\", \"fontSize\": \"0.6em\"}, } } } ), ) chart.animate( Config( { \"channels\": {\"y\": [\"Country\", \"Value 2 (+)\"]}, \"geometry\": \"rectangle\", } ) ) chart.feature(\"tooltip\", True)","title":"Polar Scatter Plot"},{"location":"examples/analytical_operations/sum/scatterplot_polar/#polar-scatter-plot","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_8.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add the Dimension whitch is on the Color channel to the Y-axis too switch the Geometry from Circle to Rectangle chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"color\": \"Country\", }, \"geometry\": \"circle\", \"coordSystem\": \"polar\", } ), Style( { \"plot\": { \"marker\": { \"rectangleSpacing\": \"0.1em\", \"label\": {\"position\": \"top\", \"fontSize\": \"0.6em\"}, } } } ), ) chart.animate( Config( { \"channels\": {\"y\": [\"Country\", \"Value 2 (+)\"]}, \"geometry\": \"rectangle\", } ) ) chart.feature(\"tooltip\", True)","title":"Polar Scatter Plot"},{"location":"examples/analytical_operations/sum/stream_stacked/","text":"Stacked Stream Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_industry_history_1.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) This is a 2-step animation: 1st: set the Split parameter to True 2nd: move the Measure to the X-axis set the Align parameter 'center' set the Split parameter to False arrange the markers in reverse order switch the Geometry from Area to Rectangle method = \"\"\" let year = parseFloat(event.data.text); if (!event.data.text.includes(\"$\") && !isNaN(year) && year % 5 != 0) event.preventDefault(); \"\"\" handler = chart.on(\"plot-axis-label-draw\", method) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Revenue [$]\", \"Format\"], \"color\": \"Format\", }, \"geometry\": \"area\", \"align\": \"center\", } ), Style( {\"plot\": {\"yAxis\": {\"label\": {\"numberScale\": \"K, M, B, T\"}}}} ), ) chart.animate(Config({\"split\": True})) chart.animate( Config( { \"channels\": { \"y\": [\"Revenue [$]\", \"Year\"], \"x\": [\"Format\"], }, \"geometry\": \"rectangle\", \"align\": \"min\", \"split\": False, \"sort\": \"byValue\", \"reverse\": True, } ) ) chart.feature(\"tooltip\", True)","title":"Stacked Stream"},{"location":"examples/analytical_operations/sum/stream_stacked/#stacked-stream","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_industry_history_1.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) This is a 2-step animation: 1st: set the Split parameter to True 2nd: move the Measure to the X-axis set the Align parameter 'center' set the Split parameter to False arrange the markers in reverse order switch the Geometry from Area to Rectangle method = \"\"\" let year = parseFloat(event.data.text); if (!event.data.text.includes(\"$\") && !isNaN(year) && year % 5 != 0) event.preventDefault(); \"\"\" handler = chart.on(\"plot-axis-label-draw\", method) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Revenue [$]\", \"Format\"], \"color\": \"Format\", }, \"geometry\": \"area\", \"align\": \"center\", } ), Style( {\"plot\": {\"yAxis\": {\"label\": {\"numberScale\": \"K, M, B, T\"}}}} ), ) chart.animate(Config({\"split\": True})) chart.animate( Config( { \"channels\": { \"y\": [\"Revenue [$]\", \"Year\"], \"x\": [\"Format\"], }, \"geometry\": \"rectangle\", \"align\": \"min\", \"split\": False, \"sort\": \"byValue\", \"reverse\": True, } ) ) chart.feature(\"tooltip\", True)","title":"Stacked Stream"},{"location":"examples/analytical_operations/sum/treemap/","text":"Treemap Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add the Dimension whitch is on Label channel to the Size channel too (stack) chart.animate( Config( { \"channels\": { \"size\": \"Value 2 (+)\", \"noop\": \"Country_code\", \"color\": \"Joy factors\", \"label\": \"Country_code\", } } ) ) chart.animate( Config({\"channels\": {\"size\": [\"Country_code\", \"Value 2 (+)\"]}}) )","title":"Treemap"},{"location":"examples/analytical_operations/sum/treemap/#treemap","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) add the Dimension whitch is on Label channel to the Size channel too (stack) chart.animate( Config( { \"channels\": { \"size\": \"Value 2 (+)\", \"noop\": \"Country_code\", \"color\": \"Joy factors\", \"label\": \"Country_code\", } } ) ) chart.animate( Config({\"channels\": {\"size\": [\"Country_code\", \"Value 2 (+)\"]}}) )","title":"Treemap"},{"location":"examples/presets/","text":"Preset charts","title":"Preset charts"},{"location":"examples/presets/#preset-charts","text":"","title":"Preset charts"},{"location":"examples/presets/area_chart/","text":"Area Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.area( {\"x\": \"Year\", \"y\": \"Value 5 (+/-)\", \"title\": \"Area Chart\"} ) )","title":"Area Chart"},{"location":"examples/presets/area_chart/#area-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.area( {\"x\": \"Year\", \"y\": \"Value 5 (+/-)\", \"title\": \"Area Chart\"} ) )","title":"Area Chart"},{"location":"examples/presets/area_percentage_chart/","text":"Percentage Area Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.percentageArea( { \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"stackedBy\": \"Country\", \"title\": \"Percentage Area Chart\", } ) )","title":"Percentage Area Chart"},{"location":"examples/presets/area_percentage_chart/#percentage-area-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.percentageArea( { \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"stackedBy\": \"Country\", \"title\": \"Percentage Area Chart\", } ) )","title":"Percentage Area Chart"},{"location":"examples/presets/area_splitted_chart/","text":"Splitted Area Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.splittedArea( { \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"splittedBy\": \"Country\", \"title\": \"Splitted Area Chart\", } ) )","title":"Splitted Area Chart"},{"location":"examples/presets/area_splitted_chart/#splitted-area-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.splittedArea( { \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"splittedBy\": \"Country\", \"title\": \"Splitted Area Chart\", } ) )","title":"Splitted Area Chart"},{"location":"examples/presets/area_stacked_chart/","text":"Stacked Area Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.stackedArea( { \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"stackedBy\": \"Country\", \"title\": \"Stacked Area Chart\", } ) )","title":"Stacked Area Chart"},{"location":"examples/presets/area_stacked_chart/#stacked-area-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.stackedArea( { \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"stackedBy\": \"Country\", \"title\": \"Stacked Area Chart\", } ) )","title":"Stacked Area Chart"},{"location":"examples/presets/bar_chart/","text":"Bar Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.bar( {\"x\": \"Value 5 (+/-)\", \"y\": \"Country\", \"title\": \"Bar Chart\"} ) )","title":"Bar Chart"},{"location":"examples/presets/bar_chart/#bar-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.bar( {\"x\": \"Value 5 (+/-)\", \"y\": \"Country\", \"title\": \"Bar Chart\"} ) )","title":"Bar Chart"},{"location":"examples/presets/bar_grouped_chart/","text":"Grouped Bar Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.groupedBar( { \"x\": \"Value 5 (+/-)\", \"y\": \"Country\", \"groupedBy\": \"Joy factors\", \"title\": \"Grouped Bar Chart\", } ) )","title":"Grouped Bar Chart"},{"location":"examples/presets/bar_grouped_chart/#grouped-bar-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.groupedBar( { \"x\": \"Value 5 (+/-)\", \"y\": \"Country\", \"groupedBy\": \"Joy factors\", \"title\": \"Grouped Bar Chart\", } ) )","title":"Grouped Bar Chart"},{"location":"examples/presets/bar_percentage_chart/","text":"Percentage Bar Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.percentageBar( { \"x\": \"Value 2 (+)\", \"y\": \"Country\", \"stackedBy\": \"Joy factors\", \"title\": \"Percentage Bar Chart\", } ) )","title":"Percentage Bar Chart"},{"location":"examples/presets/bar_percentage_chart/#percentage-bar-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.percentageBar( { \"x\": \"Value 2 (+)\", \"y\": \"Country\", \"stackedBy\": \"Joy factors\", \"title\": \"Percentage Bar Chart\", } ) )","title":"Percentage Bar Chart"},{"location":"examples/presets/bar_radial_chart/","text":"Radial Bar Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.radialBar( { \"angle\": \"Value 1 (+)\", \"radius\": \"Country\", \"title\": \"Radial Bar Chart\", } ) )","title":"Radial Bar Chart"},{"location":"examples/presets/bar_radial_chart/#radial-bar-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.radialBar( { \"angle\": \"Value 1 (+)\", \"radius\": \"Country\", \"title\": \"Radial Bar Chart\", } ) )","title":"Radial Bar Chart"},{"location":"examples/presets/bar_radial_stacked_chart/","text":"Radial Stacked Bar Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.radialStackedBar( { \"angle\": \"Value 2 (+)\", \"radius\": \"Country\", \"stackedBy\": \"Joy factors\", \"title\": \"Radial Stacked Bar Chart\", } ) )","title":"Radial Stacked Bar Chart"},{"location":"examples/presets/bar_radial_stacked_chart/#radial-stacked-bar-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.radialStackedBar( { \"angle\": \"Value 2 (+)\", \"radius\": \"Country\", \"stackedBy\": \"Joy factors\", \"title\": \"Radial Stacked Bar Chart\", } ) )","title":"Radial Stacked Bar Chart"},{"location":"examples/presets/bar_splitted_chart/","text":"Splitted Bar Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.splittedBar( { \"x\": \"Value 2 (+)\", \"y\": \"Year\", \"splittedBy\": \"Joy factors\", \"title\": \"Splitted Bar Chart\", } ) )","title":"Splitted Bar Chart"},{"location":"examples/presets/bar_splitted_chart/#splitted-bar-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.splittedBar( { \"x\": \"Value 2 (+)\", \"y\": \"Year\", \"splittedBy\": \"Joy factors\", \"title\": \"Splitted Bar Chart\", } ) )","title":"Splitted Bar Chart"},{"location":"examples/presets/bar_stacked_chart/","text":"Stacked Bar Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.stackedBar( { \"x\": \"Value 2 (+)\", \"y\": \"Country\", \"stackedBy\": \"Joy factors\", \"title\": \"Stacked Bar Chart\", } ) )","title":"Stacked Bar Chart"},{"location":"examples/presets/bar_stacked_chart/#stacked-bar-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.stackedBar( { \"x\": \"Value 2 (+)\", \"y\": \"Country\", \"stackedBy\": \"Joy factors\", \"title\": \"Stacked Bar Chart\", } ) )","title":"Stacked Bar Chart"},{"location":"examples/presets/bubble_chart/","text":"Bubble Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.bubble( { \"size\": \"Value 5 (+/-)\", \"color\": \"Country_code\", \"title\": \"Bubble Chart\", } ) )","title":"Bubble Chart"},{"location":"examples/presets/bubble_chart/#bubble-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.bubble( { \"size\": \"Value 5 (+/-)\", \"color\": \"Country_code\", \"title\": \"Bubble Chart\", } ) )","title":"Bubble Chart"},{"location":"examples/presets/bubble_plot/","text":"Bubble Plot Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.bubbleplot( { \"x\": \"Value 4 (+/-)\", \"y\": \"Value 5 (+/-)\", \"color\": \"Joy factors\", \"dividedBy\": \"Country\", \"size\": \"Value 3 (+)\", \"title\": \"Bubble Plot\", } ) )","title":"Bubble Plot"},{"location":"examples/presets/bubble_plot/#bubble-plot","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.bubbleplot( { \"x\": \"Value 4 (+/-)\", \"y\": \"Value 5 (+/-)\", \"color\": \"Joy factors\", \"dividedBy\": \"Country\", \"size\": \"Value 3 (+)\", \"title\": \"Bubble Plot\", } ) )","title":"Bubble Plot"},{"location":"examples/presets/bubble_stacked_chart/","text":"Stacked Bubble Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.stackedBubble( { \"size\": \"Value 2 (+)\", \"color\": \"Joy factors\", \"stackedBy\": \"Country_code\", \"title\": \"Stacked Bubble Chart\", } ) )","title":"Stacked Bubble Chart"},{"location":"examples/presets/bubble_stacked_chart/#stacked-bubble-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.stackedBubble( { \"size\": \"Value 2 (+)\", \"color\": \"Joy factors\", \"stackedBy\": \"Country_code\", \"title\": \"Stacked Bubble Chart\", } ) )","title":"Stacked Bubble Chart"},{"location":"examples/presets/column_chart/","text":"Column Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.column( { \"x\": \"Joy factors\", \"y\": \"Value 2 (+)\", \"title\": \"Column Chart\", } ) )","title":"Column Chart"},{"location":"examples/presets/column_chart/#column-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.column( { \"x\": \"Joy factors\", \"y\": \"Value 2 (+)\", \"title\": \"Column Chart\", } ) )","title":"Column Chart"},{"location":"examples/presets/column_grouped_chart/","text":"Grouped Column Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.groupedColumn( { \"x\": \"Country\", \"y\": \"Value 5 (+/-)\", \"groupedBy\": \"Joy factors\", \"title\": \"Grouped Column Chart\", } ) )","title":"Grouped Column Chart"},{"location":"examples/presets/column_grouped_chart/#grouped-column-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.groupedColumn( { \"x\": \"Country\", \"y\": \"Value 5 (+/-)\", \"groupedBy\": \"Joy factors\", \"title\": \"Grouped Column Chart\", } ) )","title":"Grouped Column Chart"},{"location":"examples/presets/column_percentage_chart/","text":"Percentage Column Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.percentageColumn( { \"x\": \"Country\", \"y\": \"Value 2 (+)\", \"stackedBy\": \"Joy factors\", \"title\": \"Percentage Column Chart\", } ) )","title":"Percentage Column Chart"},{"location":"examples/presets/column_percentage_chart/#percentage-column-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.percentageColumn( { \"x\": \"Country\", \"y\": \"Value 2 (+)\", \"stackedBy\": \"Joy factors\", \"title\": \"Percentage Column Chart\", } ) )","title":"Percentage Column Chart"},{"location":"examples/presets/column_polar_chart/","text":"Polar Column Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.polarColumn( { \"angle\": \"Joy factors\", \"radius\": \"Value 2 (+)\", \"title\": \"Polar Column Chart\", } ) )","title":"Polar Column Chart"},{"location":"examples/presets/column_polar_chart/#polar-column-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.polarColumn( { \"angle\": \"Joy factors\", \"radius\": \"Value 2 (+)\", \"title\": \"Polar Column Chart\", } ) )","title":"Polar Column Chart"},{"location":"examples/presets/column_polar_stacked_chart/","text":"Polar Stacked Column Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.polarStackedColumn( { \"angle\": \"Country\", \"radius\": \"Value 2 (+)\", \"stackedBy\": \"Joy factors\", \"title\": \"Polar Stacked Column Chart\", } ) )","title":"Polar Stacked Column Chart"},{"location":"examples/presets/column_polar_stacked_chart/#polar-stacked-column-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.polarStackedColumn( { \"angle\": \"Country\", \"radius\": \"Value 2 (+)\", \"stackedBy\": \"Joy factors\", \"title\": \"Polar Stacked Column Chart\", } ) )","title":"Polar Stacked Column Chart"},{"location":"examples/presets/column_splitted_chart/","text":"Splitted Column Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.splittedColumn( { \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"splittedBy\": \"Joy factors\", \"title\": \"Splitted Column Chart\", } ) )","title":"Splitted Column Chart"},{"location":"examples/presets/column_splitted_chart/#splitted-column-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.splittedColumn( { \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"splittedBy\": \"Joy factors\", \"title\": \"Splitted Column Chart\", } ) )","title":"Splitted Column Chart"},{"location":"examples/presets/column_stacked_chart/","text":"Stacked Column Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.stackedColumn( { \"x\": \"Country\", \"y\": \"Value 2 (+)\", \"stackedBy\": \"Joy factors\", \"title\": \"Stacked Column Chart\", } ) )","title":"Stacked Column Chart"},{"location":"examples/presets/column_stacked_chart/#stacked-column-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.stackedColumn( { \"x\": \"Country\", \"y\": \"Value 2 (+)\", \"stackedBy\": \"Joy factors\", \"title\": \"Stacked Column Chart\", } ) )","title":"Stacked Column Chart"},{"location":"examples/presets/donut_chart/","text":"Donut Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.donut( { \"angle\": \"Value 2 (+)\", \"stackedBy\": \"Joy factors\", \"title\": \"Donut Chart\", } ) )","title":"Donut Chart"},{"location":"examples/presets/donut_chart/#donut-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.donut( { \"angle\": \"Value 2 (+)\", \"stackedBy\": \"Joy factors\", \"title\": \"Donut Chart\", } ) )","title":"Donut Chart"},{"location":"examples/presets/donut_nested_chart/","text":"Nested Donut Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_3.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.nestedDonut( { \"angle\": \"Value 2 (+)\", \"stackedBy\": \"Joy factors\", \"radius\": \"Country\", \"title\": \"Nested Donut Chart\", } ), Style( { \"plot\": { \"marker\": { \"rectangleSpacing\": \"0\", \"borderWidth\": 1, \"borderOpacity\": 0, } } } ), )","title":"Nested Donut Chart"},{"location":"examples/presets/donut_nested_chart/#nested-donut-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_3.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.nestedDonut( { \"angle\": \"Value 2 (+)\", \"stackedBy\": \"Joy factors\", \"radius\": \"Country\", \"title\": \"Nested Donut Chart\", } ), Style( { \"plot\": { \"marker\": { \"rectangleSpacing\": \"0\", \"borderWidth\": 1, \"borderOpacity\": 0, } } } ), )","title":"Nested Donut Chart"},{"location":"examples/presets/heatmap/","text":"Heatmap Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.heatmap( { \"x\": \"Year\", \"y\": \"Country_code\", \"lightness\": \"Value 3 (+)\", \"title\": \"Heatmap\", } ), Style({\"plot\": {\"marker\": {\"rectangleSpacing\": 0}}}), )","title":"Heatmap"},{"location":"examples/presets/heatmap/#heatmap","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.heatmap( { \"x\": \"Year\", \"y\": \"Country_code\", \"lightness\": \"Value 3 (+)\", \"title\": \"Heatmap\", } ), Style({\"plot\": {\"marker\": {\"rectangleSpacing\": 0}}}), )","title":"Heatmap"},{"location":"examples/presets/line_chart/","text":"Line Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.line( { \"x\": \"Year\", \"y\": \"Value 6 (+/-)\", \"dividedBy\": \"Country\", \"title\": \"Line Chart\", } ) )","title":"Line Chart"},{"location":"examples/presets/line_chart/#line-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.line( { \"x\": \"Year\", \"y\": \"Value 6 (+/-)\", \"dividedBy\": \"Country\", \"title\": \"Line Chart\", } ) )","title":"Line Chart"},{"location":"examples/presets/line_polar_chart/","text":"Polar Line Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.polarLine( { \"angle\": \"Year\", \"radius\": \"Value 2 (+)\", \"dividedBy\": \"Country\", \"title\": \"Polar Line Chart\", } ) )","title":"Polar Line Chart"},{"location":"examples/presets/line_polar_chart/#polar-line-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.polarLine( { \"angle\": \"Year\", \"radius\": \"Value 2 (+)\", \"dividedBy\": \"Country\", \"title\": \"Polar Line Chart\", } ) )","title":"Polar Line Chart"},{"location":"examples/presets/line_vertical_chart/","text":"Vertical Line Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.line( { \"x\": \"Value 6 (+/-)\", \"y\": \"Year\", \"dividedBy\": \"Country\", \"title\": \"Vertical Line Chart\", } ) )","title":"Vertical Line Chart"},{"location":"examples/presets/line_vertical_chart/#vertical-line-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_6.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.line( { \"x\": \"Value 6 (+/-)\", \"y\": \"Year\", \"dividedBy\": \"Country\", \"title\": \"Vertical Line Chart\", } ) )","title":"Vertical Line Chart"},{"location":"examples/presets/lollipop_chart/","text":"Lollipop Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.lollipop( {\"x\": \"Year\", \"y\": \"Value 1 (+)\", \"title\": \"Lollipop Chart\"} ) )","title":"Lollipop Chart"},{"location":"examples/presets/lollipop_chart/#lollipop-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.lollipop( {\"x\": \"Year\", \"y\": \"Value 1 (+)\", \"title\": \"Lollipop Chart\"} ) )","title":"Lollipop Chart"},{"location":"examples/presets/marimekko_chart/","text":"Marimekko Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.marimekko( { \"x\": \"Value 2 (+)\", \"y\": \"Value 3 (+)\", \"stackedBy\": \"Joy factors\", \"groupedBy\": \"Country\", \"title\": \"Marimekko Chart\", } ) )","title":"Marimekko Chart"},{"location":"examples/presets/marimekko_chart/#marimekko-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.marimekko( { \"x\": \"Value 2 (+)\", \"y\": \"Value 3 (+)\", \"stackedBy\": \"Joy factors\", \"groupedBy\": \"Country\", \"title\": \"Marimekko Chart\", } ) )","title":"Marimekko Chart"},{"location":"examples/presets/mekko_stacked_chart/","text":"Stacked Mekko Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.mekko( { \"x\": \"Value 1 (+)\", \"y\": \"Value 2 (+)\", \"stackedBy\": \"Joy factors\", \"groupedBy\": \"Country\", \"title\": \"Stacked Mekko Chart\", } ) )","title":"Stacked Mekko Chart"},{"location":"examples/presets/mekko_stacked_chart/#stacked-mekko-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.mekko( { \"x\": \"Value 1 (+)\", \"y\": \"Value 2 (+)\", \"stackedBy\": \"Joy factors\", \"groupedBy\": \"Country\", \"title\": \"Stacked Mekko Chart\", } ) )","title":"Stacked Mekko Chart"},{"location":"examples/presets/pie_chart/","text":"Pie Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.pie( { \"angle\": \"Value 2 (+)\", \"by\": \"Joy factors\", \"title\": \"Pie Chart\", } ) )","title":"Pie Chart"},{"location":"examples/presets/pie_chart/#pie-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.pie( { \"angle\": \"Value 2 (+)\", \"by\": \"Joy factors\", \"title\": \"Pie Chart\", } ) )","title":"Pie Chart"},{"location":"examples/presets/pie_variable_radius_chart/","text":"Variable Radius Pie Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.variableRadiusPie( { \"angle\": \"Value 2 (+)\", \"radius\": \"Value 1 (+)\", \"by\": \"Joy factors\", \"title\": \"Variable Radius Pie Chart\", } ) )","title":"Variable Radius Pie Chart"},{"location":"examples/presets/pie_variable_radius_chart/#variable-radius-pie-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.variableRadiusPie( { \"angle\": \"Value 2 (+)\", \"radius\": \"Value 1 (+)\", \"by\": \"Joy factors\", \"title\": \"Variable Radius Pie Chart\", } ) )","title":"Variable Radius Pie Chart"},{"location":"examples/presets/scatter_plot/","text":"Scatter Plot Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.scatter( { \"x\": \"Value 6 (+/-)\", \"y\": \"Value 5 (+/-)\", \"dividedBy\": \"Year\", \"title\": \"Scatter Plot\", } ) )","title":"Scatter Plot"},{"location":"examples/presets/scatter_plot/#scatter-plot","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.scatter( { \"x\": \"Value 6 (+/-)\", \"y\": \"Value 5 (+/-)\", \"dividedBy\": \"Year\", \"title\": \"Scatter Plot\", } ) )","title":"Scatter Plot"},{"location":"examples/presets/scatter_polar_plot/","text":"Polar Scatter Plot Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.polarScatter( { \"angle\": \"Value 3 (+)\", \"radius\": \"Value 2 (+)\", \"dividedBy\": \"Country\", \"title\": \"Polar Scatter Plot\", } ) )","title":"Polar Scatter Plot"},{"location":"examples/presets/scatter_polar_plot/#polar-scatter-plot","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.polarScatter( { \"angle\": \"Value 3 (+)\", \"radius\": \"Value 2 (+)\", \"dividedBy\": \"Country\", \"title\": \"Polar Scatter Plot\", } ) )","title":"Polar Scatter Plot"},{"location":"examples/presets/stream_graph/","text":"Stream Graph Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_industry_history_1.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.stream( { \"x\": \"Year\", \"y\": \"Revenue [$]\", \"stackedBy\": \"Format\", \"title\": \"Stream Graph\", } ), Style( { \"plot\": { \"yAxis\": {\"label\": {\"numberScale\": \"K, M, B, T\"}}, \"xAxis\": {\"label\": {\"angle\": \"-45deg\"}}, } } ), )","title":"Stream Graph"},{"location":"examples/presets/stream_graph/#stream-graph","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_industry_history_1.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.stream( { \"x\": \"Year\", \"y\": \"Revenue [$]\", \"stackedBy\": \"Format\", \"title\": \"Stream Graph\", } ), Style( { \"plot\": { \"yAxis\": {\"label\": {\"numberScale\": \"K, M, B, T\"}}, \"xAxis\": {\"label\": {\"angle\": \"-45deg\"}}, } } ), )","title":"Stream Graph"},{"location":"examples/presets/stream_vertical_graph/","text":"Vertical Stream Graph Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_industry_history_1.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.verticalStream( { \"x\": \"Revenue [$]\", \"y\": \"Year\", \"stackedBy\": \"Format\", \"title\": \"Vertical Stream Graph\", } ), Style( { \"plot\": { \"yAxis\": {\"label\": {\"numberScale\": \"K, M, B, T\"}}, \"xAxis\": {\"label\": {\"angle\": \"-45deg\"}}, } } ), )","title":"Vertical Stream Graph"},{"location":"examples/presets/stream_vertical_graph/#vertical-stream-graph","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_industry_history_1.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.verticalStream( { \"x\": \"Revenue [$]\", \"y\": \"Year\", \"stackedBy\": \"Format\", \"title\": \"Vertical Stream Graph\", } ), Style( { \"plot\": { \"yAxis\": {\"label\": {\"numberScale\": \"K, M, B, T\"}}, \"xAxis\": {\"label\": {\"angle\": \"-45deg\"}}, } } ), )","title":"Vertical Stream Graph"},{"location":"examples/presets/treemap/","text":"Treemap Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.treemap( { \"size\": \"Value 2 (+)\", \"color\": \"Country_code\", \"title\": \"Treemap\", } ) )","title":"Treemap"},{"location":"examples/presets/treemap/#treemap","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.treemap( { \"size\": \"Value 2 (+)\", \"color\": \"Country_code\", \"title\": \"Treemap\", } ) )","title":"Treemap"},{"location":"examples/presets/treemap_stacked/","text":"Stacked Treemap Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.stackedTreemap( { \"size\": \"Value 2 (+)\", \"color\": \"Joy factors\", \"title\": \"Stacked Treemap\", \"dividedBy\": \"Country_code\", } ) )","title":"Stacked Treemap"},{"location":"examples/presets/treemap_stacked/#stacked-treemap","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.stackedTreemap( { \"size\": \"Value 2 (+)\", \"color\": \"Joy factors\", \"title\": \"Stacked Treemap\", \"dividedBy\": \"Country_code\", } ) )","title":"Stacked Treemap"},{"location":"examples/presets/violin_graph/","text":"Violin Graph Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_industry_history_1.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.violin( { \"x\": \"Year\", \"y\": \"Revenue [$]\", \"splittedBy\": \"Format\", \"title\": \"Violin Graph\", } ), Style( { \"plot\": { \"yAxis\": {\"label\": {\"numberScale\": \"K, M, B, T\"}}, \"xAxis\": {\"label\": {\"angle\": \"-45deg\"}}, } } ), )","title":"Violin Graph"},{"location":"examples/presets/violin_graph/#violin-graph","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_industry_history_1.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.violin( { \"x\": \"Year\", \"y\": \"Revenue [$]\", \"splittedBy\": \"Format\", \"title\": \"Violin Graph\", } ), Style( { \"plot\": { \"yAxis\": {\"label\": {\"numberScale\": \"K, M, B, T\"}}, \"xAxis\": {\"label\": {\"angle\": \"-45deg\"}}, } } ), )","title":"Violin Graph"},{"location":"examples/presets/violin_vertical_graph/","text":"Vertical Violin Graph Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_industry_history_1.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.verticalViolin( { \"x\": \"Revenue [$]\", \"y\": \"Year\", \"splittedBy\": \"Format\", \"title\": \"Vertical Violin Graph\", } ), Style( { \"plot\": { \"xAxis\": {\"interlacing\": {\"color\": \"#ffffff00\"}}, \"yAxis\": {\"label\": {\"numberScale\": \"K, M, B, T\"}}, } } ), )","title":"Vertical Violin Graph"},{"location":"examples/presets/violin_vertical_graph/#vertical-violin-graph","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_industry_history_1.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.verticalViolin( { \"x\": \"Revenue [$]\", \"y\": \"Year\", \"splittedBy\": \"Format\", \"title\": \"Vertical Violin Graph\", } ), Style( { \"plot\": { \"xAxis\": {\"interlacing\": {\"color\": \"#ffffff00\"}}, \"yAxis\": {\"label\": {\"numberScale\": \"K, M, B, T\"}}, } } ), )","title":"Vertical Violin Graph"},{"location":"examples/presets/waterfall_chart/","text":"Waterfall Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.waterfall( { \"x\": \"Year\", \"y\": \"Value 5 (+/-)\", \"title\": \"Waterfall Chart\", } ), Style( { \"plot\": { \"marker\": { \"colorGradient\": \"#ff001b 0,#ff001b 0.5,#7e79e8 0.5,#7e79e8 1\", \"label\": {\"position\": \"top\"}, } } } ), )","title":"Waterfall Chart"},{"location":"examples/presets/waterfall_chart/#waterfall-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.waterfall( { \"x\": \"Year\", \"y\": \"Value 5 (+/-)\", \"title\": \"Waterfall Chart\", } ), Style( { \"plot\": { \"marker\": { \"colorGradient\": \"#ff001b 0,#ff001b 0.5,#7e79e8 0.5,#7e79e8 1\", \"label\": {\"position\": \"top\"}, } } } ), )","title":"Waterfall Chart"},{"location":"examples/static/","text":"Static charts","title":"Static charts"},{"location":"examples/static/#static-charts","text":"","title":"Static charts"},{"location":"examples/static/area_chart/","text":"Area Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 5 (+/-)\", \"label\": \"Value 5 (+/-)\", }, \"title\": \"Area Chart\", \"geometry\": \"area\", } ) )","title":"Area Chart"},{"location":"examples/static/area_chart/#area-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 5 (+/-)\", \"label\": \"Value 5 (+/-)\", }, \"title\": \"Area Chart\", \"geometry\": \"area\", } ) )","title":"Area Chart"},{"location":"examples/static/area_polar_chart/","text":"Polar Area Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": { \"set\": [\"Value 2 (+)\"], \"range\": {\"max\": \"130%\"}, }, \"label\": \"Value 2 (+)\", }, \"title\": \"Polar Area Chart\", \"geometry\": \"area\", \"coordSystem\": \"polar\", } ), Style( { \"plot\": { \"marker\": { \"label\": { \"orientation\": \"tangential\", \"angle\": -1.57, } } } } ), )","title":"Polar Area Chart"},{"location":"examples/static/area_polar_chart/#polar-area-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": { \"set\": [\"Value 2 (+)\"], \"range\": {\"max\": \"130%\"}, }, \"label\": \"Value 2 (+)\", }, \"title\": \"Polar Area Chart\", \"geometry\": \"area\", \"coordSystem\": \"polar\", } ), Style( { \"plot\": { \"marker\": { \"label\": { \"orientation\": \"tangential\", \"angle\": -1.57, } } } } ), )","title":"Polar Area Chart"},{"location":"examples/static/area_stacked_chart/","text":"Stacked Area Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"color\": \"Country\", }, \"title\": \"Stacked Area Chart\", \"geometry\": \"area\", } ) )","title":"Stacked Area Chart"},{"location":"examples/static/area_stacked_chart/#stacked-area-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Country\", \"Value 2 (+)\"], \"color\": \"Country\", }, \"title\": \"Stacked Area Chart\", \"geometry\": \"area\", } ) )","title":"Stacked Area Chart"},{"location":"examples/static/bar_chart/","text":"Bar Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Value 5 (+/-)\", \"y\": \"Country\", \"color\": \"Country\", \"label\": \"Value 5 (+/-)\", }, \"title\": \"Bar Chart\", } ) )","title":"Bar Chart"},{"location":"examples/static/bar_chart/#bar-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Value 5 (+/-)\", \"y\": \"Country\", \"color\": \"Country\", \"label\": \"Value 5 (+/-)\", }, \"title\": \"Bar Chart\", } ) )","title":"Bar Chart"},{"location":"examples/static/bar_radial_chart/","text":"Radial Bar Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Value 2 (+)\", \"y\": { \"set\": [\"Joy factors\"], \"range\": {\"min\": \"-30%\"}, }, \"color\": \"Joy factors\", \"label\": \"Value 2 (+)\", }, \"title\": \"Radial Bar Chart\", \"coordSystem\": \"polar\", } ) )","title":"Radial Bar Chart"},{"location":"examples/static/bar_radial_chart/#radial-bar-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Value 2 (+)\", \"y\": { \"set\": [\"Joy factors\"], \"range\": {\"min\": \"-30%\"}, }, \"color\": \"Joy factors\", \"label\": \"Value 2 (+)\", }, \"title\": \"Radial Bar Chart\", \"coordSystem\": \"polar\", } ) )","title":"Radial Bar Chart"},{"location":"examples/static/bar_stacked_radial_chart/","text":"Stacked Radial Bar Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Country\", \"Value 2 (+)\"], \"y\": {\"set\": [\"Year\"], \"range\": {\"min\": \"-20%\"}}, \"color\": \"Country\", \"lightness\": \"Year\", }, \"title\": \"Stacked Radial Bar Chart\", \"coordSystem\": \"polar\", } ) )","title":"Stacked Radial Bar Chart"},{"location":"examples/static/bar_stacked_radial_chart/#stacked-radial-bar-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Country\", \"Value 2 (+)\"], \"y\": {\"set\": [\"Year\"], \"range\": {\"min\": \"-20%\"}}, \"color\": \"Country\", \"lightness\": \"Year\", }, \"title\": \"Stacked Radial Bar Chart\", \"coordSystem\": \"polar\", } ) )","title":"Stacked Radial Bar Chart"},{"location":"examples/static/bubble_chart/","text":"Bubble Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"color\": \"Country_code\", \"label\": \"Country_code\", \"size\": \"Value 5 (+/-)\", }, \"title\": \"Bubble Chart\", \"geometry\": \"circle\", } ) )","title":"Bubble Chart"},{"location":"examples/static/bubble_chart/#bubble-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"color\": \"Country_code\", \"label\": \"Country_code\", \"size\": \"Value 5 (+/-)\", }, \"title\": \"Bubble Chart\", \"geometry\": \"circle\", } ) )","title":"Bubble Chart"},{"location":"examples/static/bubble_plot/","text":"Bubble Plot Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Value 6 (+/-)\", \"y\": \"Value 5 (+/-)\", \"color\": \"Country\", \"size\": \"Value 4 (+/-)\", \"label\": \"Value 5 (+/-)\", }, \"title\": \"Bubble Plot\", \"geometry\": \"circle\", } ) )","title":"Bubble Plot"},{"location":"examples/static/bubble_plot/#bubble-plot","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Value 6 (+/-)\", \"y\": \"Value 5 (+/-)\", \"color\": \"Country\", \"size\": \"Value 4 (+/-)\", \"label\": \"Value 5 (+/-)\", }, \"title\": \"Bubble Plot\", \"geometry\": \"circle\", } ) )","title":"Bubble Plot"},{"location":"examples/static/bubble_stacked_chart/","text":"Stacked Bubble Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"color\": \"Joy factors\", \"size\": [\"Country_code\", \"Value 2 (+)\"], \"label\": \"Country_code\", }, \"title\": \"Stacked Bubble Chart\", \"geometry\": \"circle\", } ) )","title":"Stacked Bubble Chart"},{"location":"examples/static/bubble_stacked_chart/#stacked-bubble-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"color\": \"Joy factors\", \"size\": [\"Country_code\", \"Value 2 (+)\"], \"label\": \"Country_code\", }, \"title\": \"Stacked Bubble Chart\", \"geometry\": \"circle\", } ) )","title":"Stacked Bubble Chart"},{"location":"examples/static/column_chart/","text":"Column Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Joy factors\", \"y\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\", }, \"title\": \"Column Chart\", } ) )","title":"Column Chart"},{"location":"examples/static/column_chart/#column-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Joy factors\", \"y\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\", }, \"title\": \"Column Chart\", } ) )","title":"Column Chart"},{"location":"examples/static/column_grouped_chart/","text":"Grouped Column Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Joy factors\", \"Country\"], \"y\": \"Value 5 (+/-)\", \"color\": \"Joy factors\", \"label\": \"Value 5 (+/-)\", }, \"title\": \"Grouped Column Chart\", } ), Style( { \"plot\": { \"marker\": { \"label\": { \"fontSize\": 6, \"orientation\": \"vertical\", \"angle\": -3.14, } } } } ), )","title":"Grouped Column Chart"},{"location":"examples/static/column_grouped_chart/#grouped-column-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Joy factors\", \"Country\"], \"y\": \"Value 5 (+/-)\", \"color\": \"Joy factors\", \"label\": \"Value 5 (+/-)\", }, \"title\": \"Grouped Column Chart\", } ), Style( { \"plot\": { \"marker\": { \"label\": { \"fontSize\": 6, \"orientation\": \"vertical\", \"angle\": -3.14, } } } } ), )","title":"Grouped Column Chart"},{"location":"examples/static/column_single_stacked_chart/","text":"Single Stacked Column Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": [\"Joy factors\", \"Value 2 (+)\"], \"color\": \"Joy factors\", \"label\": \"Value 2 (+)\", }, \"title\": \"Single Stacked Column Chart\", } ) )","title":"Single Stacked Column Chart"},{"location":"examples/static/column_single_stacked_chart/#single-stacked-column-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": [\"Joy factors\", \"Value 2 (+)\"], \"color\": \"Joy factors\", \"label\": \"Value 2 (+)\", }, \"title\": \"Single Stacked Column Chart\", } ) )","title":"Single Stacked Column Chart"},{"location":"examples/static/column_stacked_chart/","text":"Stacked Column Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Country\", \"y\": [\"Joy factors\", \"Value 2 (+)\"], \"color\": \"Joy factors\", \"label\": \"Value 2 (+)\", }, \"title\": \"Stacked Column Chart\", } ), Style( { \"plot\": { \"xAxis\": {\"label\": {\"angle\": 2.3}}, \"marker\": { \"label\": { \"fontSize\": 7, \"orientation\": \"vertical\", \"angle\": -3.14, } }, } } ), )","title":"Stacked Column Chart"},{"location":"examples/static/column_stacked_chart/#stacked-column-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Country\", \"y\": [\"Joy factors\", \"Value 2 (+)\"], \"color\": \"Joy factors\", \"label\": \"Value 2 (+)\", }, \"title\": \"Stacked Column Chart\", } ), Style( { \"plot\": { \"xAxis\": {\"label\": {\"angle\": 2.3}}, \"marker\": { \"label\": { \"fontSize\": 7, \"orientation\": \"vertical\", \"angle\": -3.14, } }, } } ), )","title":"Stacked Column Chart"},{"location":"examples/static/coxcomb_chart/","text":"Coxcomb Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Joy factors\", \"Value 2 (+)\"], \"color\": \"Joy factors\", }, \"title\": \"Coxcomb Chart\", \"coordSystem\": \"polar\", } ) )","title":"Coxcomb Chart"},{"location":"examples/static/coxcomb_chart/#coxcomb-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Joy factors\", \"Value 2 (+)\"], \"color\": \"Joy factors\", }, \"title\": \"Coxcomb Chart\", \"coordSystem\": \"polar\", } ) )","title":"Coxcomb Chart"},{"location":"examples/static/donut_chart/","text":"Donut Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Joy factors\", \"Value 2 (+)\"], \"y\": {\"range\": {\"min\": \"-200%\"}}, \"color\": \"Joy factors\", \"label\": \"Value 2 (+)\", }, \"title\": \"Donut Chart\", \"coordSystem\": \"polar\", } ) )","title":"Donut Chart"},{"location":"examples/static/donut_chart/#donut-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Joy factors\", \"Value 2 (+)\"], \"y\": {\"range\": {\"min\": \"-200%\"}}, \"color\": \"Joy factors\", \"label\": \"Value 2 (+)\", }, \"title\": \"Donut Chart\", \"coordSystem\": \"polar\", } ) )","title":"Donut Chart"},{"location":"examples/static/dot_plot/","text":"Dot Plot Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": {\"x\": [\"Year\", \"Value 5 (+/-)\"]}, \"title\": \"Dot Plot\", \"geometry\": \"circle\", } ) )","title":"Dot Plot"},{"location":"examples/static/dot_plot/#dot-plot","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": {\"x\": [\"Year\", \"Value 5 (+/-)\"]}, \"title\": \"Dot Plot\", \"geometry\": \"circle\", } ) )","title":"Dot Plot"},{"location":"examples/static/histogram/","text":"Histogram Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 5 (+/-)\", \"label\": \"Value 5 (+/-)\", }, \"title\": \"Histogram\", \"align\": \"none\", } ), Style({\"plot.marker.rectangleSpacing\": 0.07}), )","title":"Histogram"},{"location":"examples/static/histogram/#histogram","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 5 (+/-)\", \"label\": \"Value 5 (+/-)\", }, \"title\": \"Histogram\", \"align\": \"none\", } ), Style({\"plot.marker.rectangleSpacing\": 0.07}), )","title":"Histogram"},{"location":"examples/static/line_chart/","text":"Line Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 5 (+/-)\", \"color\": \"Country\", }, \"title\": \"Line Chart\", \"geometry\": \"line\", } ) )","title":"Line Chart"},{"location":"examples/static/line_chart/#line-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 5 (+/-)\", \"color\": \"Country\", }, \"title\": \"Line Chart\", \"geometry\": \"line\", } ) )","title":"Line Chart"},{"location":"examples/static/line_polar_chart/","text":"Polar Line Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"color\": \"Country\", }, \"title\": \"Polar Line Chart\", \"geometry\": \"line\", \"coordSystem\": \"polar\", } ) )","title":"Polar Line Chart"},{"location":"examples/static/line_polar_chart/#polar-line-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"color\": \"Country\", }, \"title\": \"Polar Line Chart\", \"geometry\": \"line\", \"coordSystem\": \"polar\", } ) )","title":"Polar Line Chart"},{"location":"examples/static/line_single_chart/","text":"Single Line Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 5 (+/-)\", \"label\": \"Value 5 (+/-)\", }, \"title\": \"Single Line Chart\", \"geometry\": \"line\", } ) )","title":"Single Line Chart"},{"location":"examples/static/line_single_chart/#single-line-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": \"Value 5 (+/-)\", \"label\": \"Value 5 (+/-)\", }, \"title\": \"Single Line Chart\", \"geometry\": \"line\", } ) )","title":"Single Line Chart"},{"location":"examples/static/line_single_polar_chart/","text":"Single Polar Line Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": { \"set\": [\"Value 2 (+)\"], \"range\": {\"max\": \"130%\"}, }, \"label\": \"Value 2 (+)\", }, \"title\": \"Single Polar Line Chart\", \"geometry\": \"line\", \"coordSystem\": \"polar\", } ), Style( { \"plot\": { \"marker\": { \"label\": { \"orientation\": \"tangential\", \"angle\": -1.57, } } } } ), )","title":"Single Polar Line Chart"},{"location":"examples/static/line_single_polar_chart/#single-polar-line-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": { \"set\": [\"Value 2 (+)\"], \"range\": {\"max\": \"130%\"}, }, \"label\": \"Value 2 (+)\", }, \"title\": \"Single Polar Line Chart\", \"geometry\": \"line\", \"coordSystem\": \"polar\", } ), Style( { \"plot\": { \"marker\": { \"label\": { \"orientation\": \"tangential\", \"angle\": -1.57, } } } } ), )","title":"Single Polar Line Chart"},{"location":"examples/static/marimekko_chart/","text":"Marimekko Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Country\", \"Value 2 (+)\"], \"y\": [\"Joy factors\", \"Value 3 (+)\"], \"color\": \"Joy factors\", \"label\": [\"Country\", \"Value 2 (+)\"], }, \"title\": \"Marimekko Chart\", \"align\": \"stretch\", \"orientation\": \"horizontal\", } ), Style( { \"plot\": { \"marker\": { \"label\": { \"format\": \"dimensionsFirst\", \"fontSize\": \"0.7em\", } } } } ), )","title":"Marimekko Chart"},{"location":"examples/static/marimekko_chart/#marimekko-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Country\", \"Value 2 (+)\"], \"y\": [\"Joy factors\", \"Value 3 (+)\"], \"color\": \"Joy factors\", \"label\": [\"Country\", \"Value 2 (+)\"], }, \"title\": \"Marimekko Chart\", \"align\": \"stretch\", \"orientation\": \"horizontal\", } ), Style( { \"plot\": { \"marker\": { \"label\": { \"format\": \"dimensionsFirst\", \"fontSize\": \"0.7em\", } } } } ), )","title":"Marimekko Chart"},{"location":"examples/static/mekko_chart/","text":"Mekko Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Country\", \"Value 2 (+)\"], \"y\": { \"set\": [\"Value 1 (+)\"], \"range\": {\"max\": \"110%\"}, }, \"color\": \"Country\", \"label\": [\"Value 2 (+)\", \"Country\"], }, \"title\": \"Mekko Chart\", } ) )","title":"Mekko Chart"},{"location":"examples/static/mekko_chart/#mekko-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Country\", \"Value 2 (+)\"], \"y\": { \"set\": [\"Value 1 (+)\"], \"range\": {\"max\": \"110%\"}, }, \"color\": \"Country\", \"label\": [\"Value 2 (+)\", \"Country\"], }, \"title\": \"Mekko Chart\", } ) )","title":"Mekko Chart"},{"location":"examples/static/mekko_stacked_chart/","text":"Stacked Mekko Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Country\", \"Value 2 (+)\"], \"y\": { \"set\": [\"Joy factors\", \"Value 3 (+)\"], \"range\": {\"max\": \"110%\"}, }, \"color\": \"Joy factors\", \"label\": [\"Value 2 (+)\", \"Country\"], }, \"title\": \"Stacked Mekko Chart\", \"orientation\": \"horizontal\", } ) )","title":"Stacked Mekko Chart"},{"location":"examples/static/mekko_stacked_chart/#stacked-mekko-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu_data_4.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Country\", \"Value 2 (+)\"], \"y\": { \"set\": [\"Joy factors\", \"Value 3 (+)\"], \"range\": {\"max\": \"110%\"}, }, \"color\": \"Joy factors\", \"label\": [\"Value 2 (+)\", \"Country\"], }, \"title\": \"Stacked Mekko Chart\", \"orientation\": \"horizontal\", } ) )","title":"Stacked Mekko Chart"},{"location":"examples/static/pie_chart/","text":"Pie Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Joy factors\", \"Value 2 (+)\"], \"color\": \"Joy factors\", \"label\": \"Value 2 (+)\", }, \"title\": \"Pie Chart\", \"coordSystem\": \"polar\", } ) )","title":"Pie Chart"},{"location":"examples/static/pie_chart/#pie-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Joy factors\", \"Value 2 (+)\"], \"color\": \"Joy factors\", \"label\": \"Value 2 (+)\", }, \"title\": \"Pie Chart\", \"coordSystem\": \"polar\", } ) )","title":"Pie Chart"},{"location":"examples/static/scatter_plot/","text":"Scatter Plot Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Value 6 (+/-)\", \"y\": \"Value 5 (+/-)\", \"noop\": \"Year\", \"label\": \"Year\", }, \"title\": \"Scatter Plot\", \"geometry\": \"circle\", } ) )","title":"Scatter Plot"},{"location":"examples/static/scatter_plot/#scatter-plot","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Value 6 (+/-)\", \"y\": \"Value 5 (+/-)\", \"noop\": \"Year\", \"label\": \"Year\", }, \"title\": \"Scatter Plot\", \"geometry\": \"circle\", } ) )","title":"Scatter Plot"},{"location":"examples/static/stream_stacked_graph/","text":"Stacked Stream Graph Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Year\", \"Joy factors\"], \"y\": [\"Value 3 (+)\", \"Country_code\"], \"color\": \"Country_code\", }, \"title\": \"Stacked Stream Graph\", \"geometry\": \"area\", \"align\": \"center\", } ) )","title":"Stacked Stream Graph"},{"location":"examples/static/stream_stacked_graph/#stacked-stream-graph","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": [\"Year\", \"Joy factors\"], \"y\": [\"Value 3 (+)\", \"Country_code\"], \"color\": \"Country_code\", }, \"title\": \"Stacked Stream Graph\", \"geometry\": \"area\", \"align\": \"center\", } ) )","title":"Stacked Stream Graph"},{"location":"examples/static/treemap/","text":"Treemap Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"label\": \"Country_code\", \"size\": \"Value 2 (+)\", }, \"title\": \"Treemap\", } ) )","title":"Treemap"},{"location":"examples/static/treemap/#treemap","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"label\": \"Country_code\", \"size\": \"Value 2 (+)\", }, \"title\": \"Treemap\", } ) )","title":"Treemap"},{"location":"examples/static/treemap_stacked/","text":"Stacked Treemap Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"color\": \"Joy factors\", \"size\": [\"Value 2 (+)\", \"Country_code\"], \"label\": \"Country_code\", \"lightness\": \"Value 2 (+)\", }, \"title\": \"Stacked Treemap\", } ) )","title":"Stacked Treemap"},{"location":"examples/static/treemap_stacked/#stacked-treemap","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"color\": \"Joy factors\", \"size\": [\"Value 2 (+)\", \"Country_code\"], \"label\": \"Country_code\", \"lightness\": \"Value 2 (+)\", }, \"title\": \"Stacked Treemap\", } ) )","title":"Stacked Treemap"},{"location":"examples/static/waterfall_chart/","text":"Waterfall Chart Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Year\", \"Value 5 (+/-)\"], \"label\": \"Value 5 (+/-)\", }, \"title\": \"Waterfall Chart\", \"legend\": None, } ), Style({\"plot\": {\"marker\": {\"label\": {\"position\": \"top\"}}}}), )","title":"Waterfall Chart"},{"location":"examples/static/waterfall_chart/#waterfall-chart","text":"Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/chart_types_eu.csv\", dtype={\"Year\": str, \"Timeseries\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"x\": \"Year\", \"y\": [\"Year\", \"Value 5 (+/-)\"], \"label\": \"Value 5 (+/-)\", }, \"title\": \"Waterfall Chart\", \"legend\": None, } ), Style({\"plot\": {\"marker\": {\"label\": {\"position\": \"top\"}}}}), )","title":"Waterfall Chart"},{"location":"reference/ipyvizzu/","text":"Build animated charts in Jupyter Notebook and similar environments with a simple Python syntax. ipyvizzu package consists of the following main modules: Chart Animation Animation Control Method Event Json Template Schema Data Integrations ipyvizzu package imports the following objects in __init__.py : Chart Data Config Style Keyframe Snapshot Animation AbstractAnimation PlainAnimation AnimationMerger AnimationControl InferType NumpyArrayConverter PandasDataFrameConverter Animate Feature Store EventOn EventOff Log Method EventHandler RawJavaScript RawJavaScriptEncoder ChartProperty DisplayTarget DisplayTemplate ipyvizzu.Chart A class for representing a wrapper over Vizzu chart. Source code in src/ipyvizzu/chart.py class Chart: \"\"\"A class for representing a wrapper over Vizzu chart.\"\"\" # pylint: disable=too-many-instance-attributes VIZZU: str = \"https://cdn.jsdelivr.net/npm/vizzu@0.8/dist/vizzu.min.js\" \"\"\"A variable for storing the default url of vizzu package.\"\"\" def __init__( self, vizzu: str = VIZZU, width: str = \"800px\", height: str = \"480px\", display: Union[DisplayTarget, str] = DisplayTarget.ACTUAL, ): \"\"\" Chart constructor. Args: vizzu: The url of Vizzu JavaScript package. width: The width of the chart. height: The height of the chart. display: The display behaviour of the chart. \"\"\" self._chart_id: str = uuid.uuid4().hex[:7] self._vizzu: str = vizzu self._width: str = width self._height: str = height self._display_target: DisplayTarget = DisplayTarget(display) self._calls: List[str] = [] self._last_anim: Optional[str] = None self._showed: bool = False self._initialized: bool = False self._analytics: bool = True self._scroll_into_view: bool = False @staticmethod def _register_events() -> None: ipy = get_ipython() if ipy is not None: ipy.events.register(\"pre_run_cell\", Chart._register_pre_run_cell) @staticmethod def _register_pre_run_cell() -> None: display_javascript(DisplayTemplate.CLEAR_INHIBITSCROLL, raw=True) @property def analytics(self) -> bool: \"\"\" A property for enabling/disabling the usage statistics feature. The usage statistics feature allows aggregate usage data collection using Plausible's algorithm. Enabling this feature helps us follow the progress and overall trends of our library, allowing us to focus our resources effectively and better serve our users. We do not track, collect, or store any personal data or personally identifiable information. All data is isolated to a single day, a single site, and a single device only. Please note that even when this feature is enabled, publishing anything made with `ipyvizzu` remains GDPR compatible. Returns: The value of the property (default `True`). \"\"\" return self._analytics @analytics.setter def analytics(self, analytics: Optional[bool]) -> None: self._analytics = bool(analytics) if self._initialized: self._display_analytics() @property def scroll_into_view(self) -> bool: \"\"\" A property for turning on/off the scroll into view feature. Returns: The value of the property (default `False`). \"\"\" return self._scroll_into_view @scroll_into_view.setter def scroll_into_view(self, scroll_into_view: Optional[bool]) -> None: self._scroll_into_view = bool(scroll_into_view) @property def control(self) -> AnimationControl: \"\"\" A property for returning a control object of the last animation. Raises: AssertionError: If called before any animation plays. Returns: The control object of the last animation. \"\"\" assert self._last_anim, \"must be used after an animation.\" return AnimationControl(self._chart_id, self._last_anim, self._display) def initializing(self) -> None: \"\"\"A method for initializing the chart.\"\"\" if not self._initialized: self._initialized = True self._display_ipyvizzujs() self._display_analytics() if self._display_target != DisplayTarget.MANUAL: Chart._register_events() self._display_chart() def _display_ipyvizzujs(self) -> None: ipyvizzurawjs = pkgutil.get_data(__name__, \"templates/ipyvizzu.js\") ipyvizzujs = ipyvizzurawjs.decode(\"utf-8\").replace( # type: ignore '\"__version__\"', f'\"{__version__}\"' ) self._display(DisplayTemplate.IPYVIZZUJS.format(ipyvizzujs=ipyvizzujs)) def _display_analytics(self) -> None: self._display( DisplayTemplate.CHANGE_ANALYTICS_TO.format( analytics=str(self._analytics).lower() ) ) def _display_chart(self) -> None: self._display( DisplayTemplate.INIT.format( chart_id=self._chart_id, vizzu=self._vizzu, div_width=self._width, div_height=self._height, ) ) def animate( self, *animations: AbstractAnimation, **options: Optional[Union[str, int, float, dict]], ) -> None: \"\"\" A method for changing the state of the chart. Args: *animations: List of AbstractAnimation inherited objects such as [Data][ipyvizzu.animation.Data], [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style]. **options: Dictionary of animation options for example `duration=1`. For information on all available animation options see the [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/interfaces/Anim.Options/#properties). Raises: ValueError: If `animations` is not set. Example: Reset the chart styles: chart.animate(Style(None)) \"\"\" # pylint: disable=line-too-long if not animations: raise ValueError(\"No animation was set.\") animation = AnimationMerger.merge_animations(animations) animate = Animate(animation, options) self._last_anim = uuid.uuid4().hex[:7] self._display( DisplayTemplate.ANIMATE.format( display_target=self._display_target.value, chart_id=self._chart_id, anim_id=self._last_anim, scroll=str(self._scroll_into_view).lower(), **animate.dump(), ) ) def feature(self, name: str, enabled: bool) -> None: \"\"\" A method for turning on/off features of the chart. Args: name: The name of the chart feature. For information on all available features see the [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/modules/#feature). enabled: The new state of the chart feature. Example: Turn on `tooltip` of the chart: chart.feature(\"tooltip\", True) \"\"\" # pylint: disable=line-too-long self._display( DisplayTemplate.FEATURE.format( chart_id=self._chart_id, **Feature(name, enabled).dump(), ) ) def store(self) -> Snapshot: \"\"\" A method for saving and storing the actual state of the chart. Returns: A Snapshot object wich stores the actual state of the chart. Example: Save and restore the actual state of the chart: snapshot = chart.store() ... chart.animate(snapshot) \"\"\" snapshot_id = uuid.uuid4().hex[:7] self._display( DisplayTemplate.STORE.format( chart_id=self._chart_id, **Store(snapshot_id).dump() ) ) return Snapshot(snapshot_id) def on( # pylint: disable=invalid-name self, event: str, handler: str ) -> EventHandler: \"\"\" A method for creating and turning on an event handler. Args: event: The type of the event. For information on all available events see the [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/modules/Event/#type). handler: The JavaScript method of the event. Returns: The turned on event handler object. Example: Turn on an event handler which prints an alert message when someone clicks on the chart: handler = chart.on(\"click\", \"alert(JSON.stringify(event.data));\") \"\"\" # pylint: disable=line-too-long event_handler = EventHandler(event, handler) self._display( DisplayTemplate.SET_EVENT.format( chart_id=self._chart_id, **EventOn(event_handler).dump(), ) ) return event_handler def off(self, event_handler: EventHandler) -> None: \"\"\" A method for turning off an event handler. Args: event_handler: A previously created event handler object. Example: Turn off a previously created event handler: chart.off(handler) \"\"\" self._display( DisplayTemplate.CLEAR_EVENT.format( chart_id=self._chart_id, **EventOff(event_handler).dump(), ) ) def log(self, chart_property: ChartProperty) -> None: \"\"\" A method for printing chart properties to the browser console. Args: chart_property: A chart property such as [CONFIG][ipyvizzu.template.ChartProperty] and [STYLE][ipyvizzu.template.ChartProperty]. Example: Log the actual style of the chart to the browser console: chart.log(ChartProperty.STYLE) \"\"\" self._display( DisplayTemplate.LOG.format( chart_id=self._chart_id, **Log(chart_property).dump() ) ) def _repr_html_(self) -> str: assert ( self._display_target == DisplayTarget.MANUAL ), \"chart._repr_html_() can be used with display=DisplayTarget.MANUAL only\" assert not self._showed, \"cannot be used after chart displayed.\" self._showed = True if not self._initialized: return \"\" html_id = uuid.uuid4().hex[:7] script = ( self._calls[0] + \"\\n\" + \"\\n\".join(self._calls[1:]).replace( \"element\", f'document.getElementById(\"{html_id}\")' ) ) return f'<div id=\"{html_id}\"><script>{script}</script></div>' def show(self) -> None: \"\"\" A method for displaying the assembled JavaScript code. Raises: AssertionError: If [display][ipyvizzu.Chart.__init__] is not [DisplayTarget.MANUAL][ipyvizzu.template.DisplayTarget]. AssertionError: If chart already has been displayed. \"\"\" assert ( self._display_target == DisplayTarget.MANUAL ), \"chart.show() can be used with display=DisplayTarget.MANUAL only\" assert not self._showed, \"cannot be used after chart displayed\" display_javascript( \"\\n\".join(self._calls), raw=True, ) self._showed = True def _display(self, javascript: str) -> None: if not self._initialized: self.initializing() if self._display_target != DisplayTarget.MANUAL: display_javascript( javascript, raw=True, ) else: assert not self._showed, \"cannot be used after chart displayed\" self._calls.append(javascript) VIZZU: str = 'https://cdn.jsdelivr.net/npm/vizzu@0.8/dist/vizzu.min.js' class-attribute instance-attribute A variable for storing the default url of vizzu package. analytics: bool property writable A property for enabling/disabling the usage statistics feature. The usage statistics feature allows aggregate usage data collection using Plausible's algorithm. Enabling this feature helps us follow the progress and overall trends of our library, allowing us to focus our resources effectively and better serve our users. We do not track, collect, or store any personal data or personally identifiable information. All data is isolated to a single day, a single site, and a single device only. Please note that even when this feature is enabled, publishing anything made with ipyvizzu remains GDPR compatible. Returns: Type Description bool The value of the property (default True ). scroll_into_view: bool property writable A property for turning on/off the scroll into view feature. Returns: Type Description bool The value of the property (default False ). control: AnimationControl property A property for returning a control object of the last animation. Raises: Type Description AssertionError If called before any animation plays. Returns: Type Description AnimationControl The control object of the last animation. __init__(vizzu=VIZZU, width='800px', height='480px', display=DisplayTarget.ACTUAL) Chart constructor. Parameters: Name Type Description Default vizzu str The url of Vizzu JavaScript package. VIZZU width str The width of the chart. '800px' height str The height of the chart. '480px' display Union [ DisplayTarget , str ] The display behaviour of the chart. DisplayTarget . ACTUAL Source code in src/ipyvizzu/chart.py def __init__( self, vizzu: str = VIZZU, width: str = \"800px\", height: str = \"480px\", display: Union[DisplayTarget, str] = DisplayTarget.ACTUAL, ): \"\"\" Chart constructor. Args: vizzu: The url of Vizzu JavaScript package. width: The width of the chart. height: The height of the chart. display: The display behaviour of the chart. \"\"\" self._chart_id: str = uuid.uuid4().hex[:7] self._vizzu: str = vizzu self._width: str = width self._height: str = height self._display_target: DisplayTarget = DisplayTarget(display) self._calls: List[str] = [] self._last_anim: Optional[str] = None self._showed: bool = False self._initialized: bool = False self._analytics: bool = True self._scroll_into_view: bool = False initializing() A method for initializing the chart. Source code in src/ipyvizzu/chart.py def initializing(self) -> None: \"\"\"A method for initializing the chart.\"\"\" if not self._initialized: self._initialized = True self._display_ipyvizzujs() self._display_analytics() if self._display_target != DisplayTarget.MANUAL: Chart._register_events() self._display_chart() animate(*animations, **options) A method for changing the state of the chart. Parameters: Name Type Description Default *animations AbstractAnimation List of AbstractAnimation inherited objects such as Data , Config and Style . () **options Optional [ Union [ str , int , float , dict ]] Dictionary of animation options for example duration=1 . For information on all available animation options see the Vizzu Code reference . {} Raises: Type Description ValueError If animations is not set. Example Reset the chart styles: chart.animate(Style(None)) Source code in src/ipyvizzu/chart.py def animate( self, *animations: AbstractAnimation, **options: Optional[Union[str, int, float, dict]], ) -> None: \"\"\" A method for changing the state of the chart. Args: *animations: List of AbstractAnimation inherited objects such as [Data][ipyvizzu.animation.Data], [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style]. **options: Dictionary of animation options for example `duration=1`. For information on all available animation options see the [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/interfaces/Anim.Options/#properties). Raises: ValueError: If `animations` is not set. Example: Reset the chart styles: chart.animate(Style(None)) \"\"\" # pylint: disable=line-too-long if not animations: raise ValueError(\"No animation was set.\") animation = AnimationMerger.merge_animations(animations) animate = Animate(animation, options) self._last_anim = uuid.uuid4().hex[:7] self._display( DisplayTemplate.ANIMATE.format( display_target=self._display_target.value, chart_id=self._chart_id, anim_id=self._last_anim, scroll=str(self._scroll_into_view).lower(), **animate.dump(), ) ) feature(name, enabled) A method for turning on/off features of the chart. Parameters: Name Type Description Default name str The name of the chart feature. For information on all available features see the Vizzu Code reference . required enabled bool The new state of the chart feature. required Example Turn on tooltip of the chart: chart.feature(\"tooltip\", True) Source code in src/ipyvizzu/chart.py def feature(self, name: str, enabled: bool) -> None: \"\"\" A method for turning on/off features of the chart. Args: name: The name of the chart feature. For information on all available features see the [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/modules/#feature). enabled: The new state of the chart feature. Example: Turn on `tooltip` of the chart: chart.feature(\"tooltip\", True) \"\"\" # pylint: disable=line-too-long self._display( DisplayTemplate.FEATURE.format( chart_id=self._chart_id, **Feature(name, enabled).dump(), ) ) store() A method for saving and storing the actual state of the chart. Returns: Type Description Snapshot A Snapshot object wich stores the actual state of the chart. Example Save and restore the actual state of the chart: snapshot = chart.store() ... chart.animate(snapshot) Source code in src/ipyvizzu/chart.py def store(self) -> Snapshot: \"\"\" A method for saving and storing the actual state of the chart. Returns: A Snapshot object wich stores the actual state of the chart. Example: Save and restore the actual state of the chart: snapshot = chart.store() ... chart.animate(snapshot) \"\"\" snapshot_id = uuid.uuid4().hex[:7] self._display( DisplayTemplate.STORE.format( chart_id=self._chart_id, **Store(snapshot_id).dump() ) ) return Snapshot(snapshot_id) on(event, handler) A method for creating and turning on an event handler. Parameters: Name Type Description Default event str The type of the event. For information on all available events see the Vizzu Code reference . required handler str The JavaScript method of the event. required Returns: Type Description EventHandler The turned on event handler object. Example Turn on an event handler which prints an alert message when someone clicks on the chart: handler = chart.on(\"click\", \"alert(JSON.stringify(event.data));\") Source code in src/ipyvizzu/chart.py def on( # pylint: disable=invalid-name self, event: str, handler: str ) -> EventHandler: \"\"\" A method for creating and turning on an event handler. Args: event: The type of the event. For information on all available events see the [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/modules/Event/#type). handler: The JavaScript method of the event. Returns: The turned on event handler object. Example: Turn on an event handler which prints an alert message when someone clicks on the chart: handler = chart.on(\"click\", \"alert(JSON.stringify(event.data));\") \"\"\" # pylint: disable=line-too-long event_handler = EventHandler(event, handler) self._display( DisplayTemplate.SET_EVENT.format( chart_id=self._chart_id, **EventOn(event_handler).dump(), ) ) return event_handler off(event_handler) A method for turning off an event handler. Parameters: Name Type Description Default event_handler EventHandler A previously created event handler object. required Example Turn off a previously created event handler: chart.off(handler) Source code in src/ipyvizzu/chart.py def off(self, event_handler: EventHandler) -> None: \"\"\" A method for turning off an event handler. Args: event_handler: A previously created event handler object. Example: Turn off a previously created event handler: chart.off(handler) \"\"\" self._display( DisplayTemplate.CLEAR_EVENT.format( chart_id=self._chart_id, **EventOff(event_handler).dump(), ) ) log(chart_property) A method for printing chart properties to the browser console. Parameters: Name Type Description Default chart_property ChartProperty A chart property such as CONFIG and STYLE . required Example Log the actual style of the chart to the browser console: chart.log(ChartProperty.STYLE) Source code in src/ipyvizzu/chart.py def log(self, chart_property: ChartProperty) -> None: \"\"\" A method for printing chart properties to the browser console. Args: chart_property: A chart property such as [CONFIG][ipyvizzu.template.ChartProperty] and [STYLE][ipyvizzu.template.ChartProperty]. Example: Log the actual style of the chart to the browser console: chart.log(ChartProperty.STYLE) \"\"\" self._display( DisplayTemplate.LOG.format( chart_id=self._chart_id, **Log(chart_property).dump() ) ) show() A method for displaying the assembled JavaScript code. Raises: Type Description AssertionError If display is not DisplayTarget.MANUAL . AssertionError If chart already has been displayed. Source code in src/ipyvizzu/chart.py def show(self) -> None: \"\"\" A method for displaying the assembled JavaScript code. Raises: AssertionError: If [display][ipyvizzu.Chart.__init__] is not [DisplayTarget.MANUAL][ipyvizzu.template.DisplayTarget]. AssertionError: If chart already has been displayed. \"\"\" assert ( self._display_target == DisplayTarget.MANUAL ), \"chart.show() can be used with display=DisplayTarget.MANUAL only\" assert not self._showed, \"cannot be used after chart displayed\" display_javascript( \"\\n\".join(self._calls), raw=True, ) self._showed = True ipyvizzu.Data Bases: dict , AbstractAnimation A class for representing data animation. It can build data option of the chart. Source code in src/ipyvizzu/animation.py class Data(dict, AbstractAnimation): \"\"\" A class for representing data animation. It can build data option of the chart. \"\"\" @classmethod def filter(cls, filter_expr: Optional[str] = None) -> \"Data\": \"\"\" A class method for creating a [Data][ipyvizzu.animation.Data] class instance with a data filter. Args: filter_expr: The JavaScript data filter expression. Returns: (Data): A data animation instance that contains a data filter. Example: Create a [Data][ipyvizzu.animation.Data] class with a data filter: filter = Data.filter(\"record['Genres'] == 'Pop'\") \"\"\" data = cls() data.set_filter(filter_expr) return data def set_filter(self, filter_expr: Optional[str] = None) -> None: \"\"\" A method for adding a filter to an existing [Data][ipyvizzu.animation.Data] class instance. Args: filter_expr: The JavaScript data filter expression. Example: Add a data filter to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.set_filter(\"record['Genres'] == 'Pop'\") \"\"\" filter_expr_raw_js = ( RawJavaScript(f\"record => {{ return ({' '.join(filter_expr.split())}) }}\") if filter_expr is not None else filter_expr ) self.update({\"filter\": filter_expr_raw_js}) @classmethod def from_json(cls, filename: Union[str, bytes, PathLike]) -> \"Data\": \"\"\" A method for returning a [Data][ipyvizzu.animation.Data] class instance which has been created from a json file. Args: filename: The path of the data source json file. Returns: (Data): A data animation instance that has been created from a json file. \"\"\" with open(filename, \"r\", encoding=\"utf8\") as file_desc: return cls(json.load(file_desc)) def add_record(self, record: Record) -> None: \"\"\" A method for adding a record to an existing [Data][ipyvizzu.animation.Data] class instance. Args: record: A list that contains data values. Example: Adding a record to a [Data][ipyvizzu.animation.Data] class instance: data = Data() record = [\"Pop\", \"Hard\", 114] data.add_record(record) \"\"\" self._add_value(\"records\", record) def add_records(self, records: List[Record]) -> None: \"\"\" A method for adding records to an existing [Data][ipyvizzu.animation.Data] class instance. Args: records: A list that contains data records. Example: Adding records to a [Data][ipyvizzu.animation.Data] class instance: data = Data() records = [ [\"Pop\", \"Hard\", 114], [\"Rock\", \"Hard\", 96], [\"Pop\", \"Experimental\", 127], [\"Rock\", \"Experimental\", 83], ] data.add_records(records) \"\"\" list(map(self.add_record, records)) def add_series( self, name: str, values: Optional[SeriesValues] = None, **kwargs ) -> None: \"\"\" A method for adding a series to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the series. values: The data values of the series. **kwargs (Optional): Arbitrary keyword arguments. For example infer type can be set with the `type` keywod argument. Example: Adding a series without values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series(\"Genres\") Adding a series without values and with infer type to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series(\"Kinds\", type=\"dimension\") Adding a series with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series( \"Popularity\", [114, 96, 127, 83] ) \"\"\" self._add_named_value(\"series\", name, values, **kwargs) def add_series_list(self, series: List[Series]) -> None: \"\"\" A method for adding list of series to an existing [Data][ipyvizzu.animation.Data] class instance. Args: series: List of series. \"\"\" if series: self.setdefault(\"series\", []).extend(series) def add_dimension( self, name: str, values: Optional[List[DimensionValue]] = None, **kwargs ) -> None: \"\"\" A method for adding a dimension to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the dimension. values: The data values of the dimension. **kwargs (Optional): Arbitrary keyword arguments. Example: Adding a dimension with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_dimension(\"Genres\", [\"Pop\", \"Rock\"]) \"\"\" self._add_named_value(\"dimensions\", name, values, **kwargs) def add_measure( self, name: str, values: Optional[NestedMeasureValues] = None, **kwargs ) -> None: \"\"\" A method for adding a measure to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the measure. values: The data values of the measure. **kwargs (Optional): Arbitrary keyword arguments. Example: Adding a measure with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_measure( \"Popularity\", [ [114, 96], [127, 83], ], ) \"\"\" self._add_named_value(\"measures\", name, values, **kwargs) def add_df( self, df: Optional[ # type: ignore Union[ \"pandas.DataFrame\", \"pandas.Series\", \"pyspark.sql.DataFrame\", ] ], default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, max_rows: int = MAX_ROWS, include_index: Optional[str] = None, ) -> None: \"\"\" Add a `pandas` `DataFrame`, `Series` or a `pyspark` `DataFrame` to an existing [Data][ipyvizzu.animation.Data] class instance. Args: df: The `pandas` `DataFrame`, `Series` or the `pyspark` `DataFrame`to add. default_measure_value: The default measure value to fill empty values. Defaults to 0. default_dimension_value: The default dimension value to fill empty values. Defaults to an empty string. max_rows: The maximum number of rows to include in the converted series list. If the `df` contains more rows, a random sample of the given number of rows (approximately) will be taken. include_index: Add the data frame's index as a column with the given name. Defaults to `None`. (Cannot be used with `pyspark` `DataFrame`.) Example: Adding a data frame to a [Data][ipyvizzu.animation.Data] class instance: df = pd.DataFrame( { \"Genres\": [\"Pop\", \"Rock\", \"Pop\", \"Rock\"], \"Kinds\": [\"Hard\", \"Hard\", \"Experimental\", \"Experimental\"], \"Popularity\": [114, 96, 127, 83], } ) data = Data() data.add_df(df) \"\"\" # pylint: disable=too-many-arguments if not isinstance(df, type(None)): arguments = { \"df\": df, \"default_measure_value\": default_measure_value, \"default_dimension_value\": default_dimension_value, \"max_rows\": max_rows, \"include_index\": include_index, } Converter: Union[ Type[PandasDataFrameConverter], Type[SparkDataFrameConverter] ] = PandasDataFrameConverter if isinstance(df, SparkDataFrame): Converter = SparkDataFrameConverter if arguments[\"include_index\"] is not None: raise ValueError( \"`include_index` cannot be used with `pyspark` `DataFrame`\" ) del arguments[\"include_index\"] converter = Converter(**arguments) # type: ignore series_list = converter.get_series_list() self.add_series_list(series_list) def add_data_frame( self, data_frame: Optional[Union[\"pandas.DataFrame\", \"pandas.Series\"]], # type: ignore default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, ) -> None: \"\"\" [Deprecated] This function is deprecated and will be removed in future versions. Use [add_df][ipyvizzu.animation.Data.add_df] function instead. Add a `pandas` `DataFrame` or `Series` to an existing [Data][ipyvizzu.animation.Data] class instance. Args: data_frame: The `pandas` `DataFrame` or `Series` to add. default_measure_value: The default measure value to fill empty values. Defaults to 0. default_dimension_value: The default dimension value to fill empty values. Defaults to an empty string. \"\"\" # pylint: disable=line-too-long reference = \"https://ipyvizzu.vizzuhq.com/0.16/reference/ipyvizzu/animation/#ipyvizzu.animation.Data.add_df\" warnings.warn( f\"'add_data_frame' is deprecated and will be removed in future versions. Use 'add_df' instead - see {reference}\", DeprecationWarning, stacklevel=2, ) self.add_df(data_frame, default_measure_value, default_dimension_value) def add_df_index( self, df: Optional[Union[\"pandas.DataFrame\", \"pandas.Series\"]], # type: ignore column_name: str = \"Index\", ) -> None: \"\"\" Add the index of a `pandas` `DataFrame` as a series to an existing [Data][ipyvizzu.animation.Data] class instance. Args: df: The `pandas` `DataFrame` or `Series` from which to extract the index. column_name: Name for the index column to add as a series. Example: Adding a data frame's index to a [Data][ipyvizzu.animation.Data] class instance: df = pd.DataFrame( {\"Popularity\": [114, 96]}, index=[\"x\", \"y\"] ) data = Data() data.add_df_index(df, \"DataFrameIndex\") data.add_df(df) \"\"\" if not isinstance(df, type(None)): converter = PandasDataFrameConverter(df, include_index=column_name) series_list = converter.get_series_from_index() self.add_series_list(series_list) def add_data_frame_index( self, data_frame: Optional[Union[\"pandas.DataFrame\", \"pandas.Series\"]], # type: ignore name: str, ) -> None: \"\"\" [Deprecated] This function is deprecated and will be removed in future versions. Use [add_df_index][ipyvizzu.animation.Data.add_df_index] function instead. Add the index of a `pandas` `DataFrame` as a series to an existing [Data][ipyvizzu.animation.Data] class instance. Args: data_frame: The `pandas` `DataFrame` or `Series` from which to extract the index. name: The name of the index series. \"\"\" # pylint: disable=line-too-long reference = \"https://ipyvizzu.vizzuhq.com/0.16/reference/ipyvizzu/animation/#ipyvizzu.animation.Data.add_df_index\" warnings.warn( f\"'add_data_frame_index' is deprecated and will be removed in future versions. Use 'add_df_index' instead - see {reference}\", DeprecationWarning, stacklevel=2, ) self.add_df_index(data_frame, name) def add_np_array( self, np_array: Optional[\"numpy.array\"], # type: ignore column_name: Optional[ColumnName] = None, column_dtype: Optional[ColumnDtype] = None, default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, ) -> None: \"\"\" Add a `numpy` `array` to an existing [Data][ipyvizzu.animation.Data] class instance. Args: np_array: The `numpy` `array` to add. column_name: The name of a column. By default, uses column indices. Can be set with an Index:Name pair or, for single-dimensional arrays, with just the Name. column_dtype: The dtype of a column. By default, uses the np_array's dtype. Can be set with an Index:DType pair or, for single-dimensional arrays, with just the DType. default_measure_value: Default value to use for missing measure values. Defaults to 0. default_dimension_value: Default value to use for missing dimension values. Defaults to an empty string. Example: Adding a data frame to a [Data][ipyvizzu.animation.Data] class instance: np_array = np.zeros((3, 4)) data = Data() data.add_np_array(np_array) \"\"\" # pylint: disable=too-many-arguments if not isinstance(np_array, type(None)): converter = NumpyArrayConverter( np_array, column_name, column_dtype, default_measure_value, default_dimension_value, ) series_list = converter.get_series_list() self.add_series_list(series_list) def _add_named_value( self, dest: str, name: str, values: Optional[ Union[ SeriesValues, NestedMeasureValues, ] ] = None, **kwargs, ) -> None: value = {\"name\": name, **kwargs} if values is not None: value[\"values\"] = values self._add_value(dest, value) def _add_value(self, dest: str, value: Union[dict, list]) -> None: self.setdefault(dest, []).append(value) def build(self) -> dict: \"\"\" A method for validating and returning the data animation dictionary. Returns: A dictionary that stored in the data animation object. It contains a `data` key whose value is the stored animation. \"\"\" jsonschema.validate(self, DATA_SCHEMA) return {\"data\": self} filter(filter_expr=None) classmethod A class method for creating a Data class instance with a data filter. Parameters: Name Type Description Default filter_expr Optional [ str ] The JavaScript data filter expression. None Returns: Type Description Data A data animation instance that contains a data filter. Example Create a Data class with a data filter: filter = Data.filter(\"record['Genres'] == 'Pop'\") Source code in src/ipyvizzu/animation.py @classmethod def filter(cls, filter_expr: Optional[str] = None) -> \"Data\": \"\"\" A class method for creating a [Data][ipyvizzu.animation.Data] class instance with a data filter. Args: filter_expr: The JavaScript data filter expression. Returns: (Data): A data animation instance that contains a data filter. Example: Create a [Data][ipyvizzu.animation.Data] class with a data filter: filter = Data.filter(\"record['Genres'] == 'Pop'\") \"\"\" data = cls() data.set_filter(filter_expr) return data set_filter(filter_expr=None) A method for adding a filter to an existing Data class instance. Parameters: Name Type Description Default filter_expr Optional [ str ] The JavaScript data filter expression. None Example Add a data filter to a Data class instance: data = Data() data.set_filter(\"record['Genres'] == 'Pop'\") Source code in src/ipyvizzu/animation.py def set_filter(self, filter_expr: Optional[str] = None) -> None: \"\"\" A method for adding a filter to an existing [Data][ipyvizzu.animation.Data] class instance. Args: filter_expr: The JavaScript data filter expression. Example: Add a data filter to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.set_filter(\"record['Genres'] == 'Pop'\") \"\"\" filter_expr_raw_js = ( RawJavaScript(f\"record => {{ return ({' '.join(filter_expr.split())}) }}\") if filter_expr is not None else filter_expr ) self.update({\"filter\": filter_expr_raw_js}) from_json(filename) classmethod A method for returning a Data class instance which has been created from a json file. Parameters: Name Type Description Default filename Union [ str , bytes , PathLike ] The path of the data source json file. required Returns: Type Description Data A data animation instance that has been created from a json file. Source code in src/ipyvizzu/animation.py @classmethod def from_json(cls, filename: Union[str, bytes, PathLike]) -> \"Data\": \"\"\" A method for returning a [Data][ipyvizzu.animation.Data] class instance which has been created from a json file. Args: filename: The path of the data source json file. Returns: (Data): A data animation instance that has been created from a json file. \"\"\" with open(filename, \"r\", encoding=\"utf8\") as file_desc: return cls(json.load(file_desc)) add_record(record) A method for adding a record to an existing Data class instance. Parameters: Name Type Description Default record Record A list that contains data values. required Example Adding a record to a Data class instance: data = Data() record = [\"Pop\", \"Hard\", 114] data.add_record(record) Source code in src/ipyvizzu/animation.py def add_record(self, record: Record) -> None: \"\"\" A method for adding a record to an existing [Data][ipyvizzu.animation.Data] class instance. Args: record: A list that contains data values. Example: Adding a record to a [Data][ipyvizzu.animation.Data] class instance: data = Data() record = [\"Pop\", \"Hard\", 114] data.add_record(record) \"\"\" self._add_value(\"records\", record) add_records(records) A method for adding records to an existing Data class instance. Parameters: Name Type Description Default records List [ Record ] A list that contains data records. required Example Adding records to a Data class instance: data = Data() records = [ [\"Pop\", \"Hard\", 114], [\"Rock\", \"Hard\", 96], [\"Pop\", \"Experimental\", 127], [\"Rock\", \"Experimental\", 83], ] data.add_records(records) Source code in src/ipyvizzu/animation.py def add_records(self, records: List[Record]) -> None: \"\"\" A method for adding records to an existing [Data][ipyvizzu.animation.Data] class instance. Args: records: A list that contains data records. Example: Adding records to a [Data][ipyvizzu.animation.Data] class instance: data = Data() records = [ [\"Pop\", \"Hard\", 114], [\"Rock\", \"Hard\", 96], [\"Pop\", \"Experimental\", 127], [\"Rock\", \"Experimental\", 83], ] data.add_records(records) \"\"\" list(map(self.add_record, records)) add_series(name, values=None, **kwargs) A method for adding a series to an existing Data class instance. Parameters: Name Type Description Default name str The name of the series. required values Optional [ SeriesValues ] The data values of the series. None **kwargs Optional Arbitrary keyword arguments. For example infer type can be set with the type keywod argument. {} Example Adding a series without values to a Data class instance: data = Data() data.add_series(\"Genres\") Adding a series without values and with infer type to a Data class instance: data = Data() data.add_series(\"Kinds\", type=\"dimension\") Adding a series with values to a Data class instance: data = Data() data.add_series( \"Popularity\", [114, 96, 127, 83] ) Source code in src/ipyvizzu/animation.py def add_series( self, name: str, values: Optional[SeriesValues] = None, **kwargs ) -> None: \"\"\" A method for adding a series to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the series. values: The data values of the series. **kwargs (Optional): Arbitrary keyword arguments. For example infer type can be set with the `type` keywod argument. Example: Adding a series without values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series(\"Genres\") Adding a series without values and with infer type to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series(\"Kinds\", type=\"dimension\") Adding a series with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series( \"Popularity\", [114, 96, 127, 83] ) \"\"\" self._add_named_value(\"series\", name, values, **kwargs) add_series_list(series) A method for adding list of series to an existing Data class instance. Parameters: Name Type Description Default series List [ Series ] List of series. required Source code in src/ipyvizzu/animation.py def add_series_list(self, series: List[Series]) -> None: \"\"\" A method for adding list of series to an existing [Data][ipyvizzu.animation.Data] class instance. Args: series: List of series. \"\"\" if series: self.setdefault(\"series\", []).extend(series) add_dimension(name, values=None, **kwargs) A method for adding a dimension to an existing Data class instance. Parameters: Name Type Description Default name str The name of the dimension. required values Optional [ List [ DimensionValue ]] The data values of the dimension. None **kwargs Optional Arbitrary keyword arguments. {} Example Adding a dimension with values to a Data class instance: data = Data() data.add_dimension(\"Genres\", [\"Pop\", \"Rock\"]) Source code in src/ipyvizzu/animation.py def add_dimension( self, name: str, values: Optional[List[DimensionValue]] = None, **kwargs ) -> None: \"\"\" A method for adding a dimension to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the dimension. values: The data values of the dimension. **kwargs (Optional): Arbitrary keyword arguments. Example: Adding a dimension with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_dimension(\"Genres\", [\"Pop\", \"Rock\"]) \"\"\" self._add_named_value(\"dimensions\", name, values, **kwargs) add_measure(name, values=None, **kwargs) A method for adding a measure to an existing Data class instance. Parameters: Name Type Description Default name str The name of the measure. required values Optional [ NestedMeasureValues ] The data values of the measure. None **kwargs Optional Arbitrary keyword arguments. {} Example Adding a measure with values to a Data class instance: data = Data() data.add_measure( \"Popularity\", [ [114, 96], [127, 83], ], ) Source code in src/ipyvizzu/animation.py def add_measure( self, name: str, values: Optional[NestedMeasureValues] = None, **kwargs ) -> None: \"\"\" A method for adding a measure to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the measure. values: The data values of the measure. **kwargs (Optional): Arbitrary keyword arguments. Example: Adding a measure with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_measure( \"Popularity\", [ [114, 96], [127, 83], ], ) \"\"\" self._add_named_value(\"measures\", name, values, **kwargs) add_df(df, default_measure_value=NAN_MEASURE, default_dimension_value=NAN_DIMENSION, max_rows=MAX_ROWS, include_index=None) Add a pandas DataFrame , Series or a pyspark DataFrame to an existing Data class instance. Parameters: Name Type Description Default df Optional [ Union [ pandas . DataFrame , pandas . Series , pyspark . sql . DataFrame ]] The pandas DataFrame , Series or the pyspark DataFrame to add. required default_measure_value MeasureValue The default measure value to fill empty values. Defaults to 0. NAN_MEASURE default_dimension_value DimensionValue The default dimension value to fill empty values. Defaults to an empty string. NAN_DIMENSION max_rows int The maximum number of rows to include in the converted series list. If the df contains more rows, a random sample of the given number of rows (approximately) will be taken. MAX_ROWS include_index Optional [ str ] Add the data frame's index as a column with the given name. Defaults to None . (Cannot be used with pyspark DataFrame .) None Example Adding a data frame to a Data class instance: df = pd.DataFrame( { \"Genres\": [\"Pop\", \"Rock\", \"Pop\", \"Rock\"], \"Kinds\": [\"Hard\", \"Hard\", \"Experimental\", \"Experimental\"], \"Popularity\": [114, 96, 127, 83], } ) data = Data() data.add_df(df) Source code in src/ipyvizzu/animation.py def add_df( self, df: Optional[ # type: ignore Union[ \"pandas.DataFrame\", \"pandas.Series\", \"pyspark.sql.DataFrame\", ] ], default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, max_rows: int = MAX_ROWS, include_index: Optional[str] = None, ) -> None: \"\"\" Add a `pandas` `DataFrame`, `Series` or a `pyspark` `DataFrame` to an existing [Data][ipyvizzu.animation.Data] class instance. Args: df: The `pandas` `DataFrame`, `Series` or the `pyspark` `DataFrame`to add. default_measure_value: The default measure value to fill empty values. Defaults to 0. default_dimension_value: The default dimension value to fill empty values. Defaults to an empty string. max_rows: The maximum number of rows to include in the converted series list. If the `df` contains more rows, a random sample of the given number of rows (approximately) will be taken. include_index: Add the data frame's index as a column with the given name. Defaults to `None`. (Cannot be used with `pyspark` `DataFrame`.) Example: Adding a data frame to a [Data][ipyvizzu.animation.Data] class instance: df = pd.DataFrame( { \"Genres\": [\"Pop\", \"Rock\", \"Pop\", \"Rock\"], \"Kinds\": [\"Hard\", \"Hard\", \"Experimental\", \"Experimental\"], \"Popularity\": [114, 96, 127, 83], } ) data = Data() data.add_df(df) \"\"\" # pylint: disable=too-many-arguments if not isinstance(df, type(None)): arguments = { \"df\": df, \"default_measure_value\": default_measure_value, \"default_dimension_value\": default_dimension_value, \"max_rows\": max_rows, \"include_index\": include_index, } Converter: Union[ Type[PandasDataFrameConverter], Type[SparkDataFrameConverter] ] = PandasDataFrameConverter if isinstance(df, SparkDataFrame): Converter = SparkDataFrameConverter if arguments[\"include_index\"] is not None: raise ValueError( \"`include_index` cannot be used with `pyspark` `DataFrame`\" ) del arguments[\"include_index\"] converter = Converter(**arguments) # type: ignore series_list = converter.get_series_list() self.add_series_list(series_list) add_data_frame(data_frame, default_measure_value=NAN_MEASURE, default_dimension_value=NAN_DIMENSION) [Deprecated] This function is deprecated and will be removed in future versions. Use add_df function instead. Add a pandas DataFrame or Series to an existing Data class instance. Parameters: Name Type Description Default data_frame Optional [ Union [ pandas . DataFrame , pandas . Series ]] The pandas DataFrame or Series to add. required default_measure_value MeasureValue The default measure value to fill empty values. Defaults to 0. NAN_MEASURE default_dimension_value DimensionValue The default dimension value to fill empty values. Defaults to an empty string. NAN_DIMENSION Source code in src/ipyvizzu/animation.py def add_data_frame( self, data_frame: Optional[Union[\"pandas.DataFrame\", \"pandas.Series\"]], # type: ignore default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, ) -> None: \"\"\" [Deprecated] This function is deprecated and will be removed in future versions. Use [add_df][ipyvizzu.animation.Data.add_df] function instead. Add a `pandas` `DataFrame` or `Series` to an existing [Data][ipyvizzu.animation.Data] class instance. Args: data_frame: The `pandas` `DataFrame` or `Series` to add. default_measure_value: The default measure value to fill empty values. Defaults to 0. default_dimension_value: The default dimension value to fill empty values. Defaults to an empty string. \"\"\" # pylint: disable=line-too-long reference = \"https://ipyvizzu.vizzuhq.com/0.16/reference/ipyvizzu/animation/#ipyvizzu.animation.Data.add_df\" warnings.warn( f\"'add_data_frame' is deprecated and will be removed in future versions. Use 'add_df' instead - see {reference}\", DeprecationWarning, stacklevel=2, ) self.add_df(data_frame, default_measure_value, default_dimension_value) add_df_index(df, column_name='Index') Add the index of a pandas DataFrame as a series to an existing Data class instance. Parameters: Name Type Description Default df Optional [ Union [ pandas . DataFrame , pandas . Series ]] The pandas DataFrame or Series from which to extract the index. required column_name str Name for the index column to add as a series. 'Index' Example Adding a data frame's index to a Data class instance: df = pd.DataFrame( {\"Popularity\": [114, 96]}, index=[\"x\", \"y\"] ) data = Data() data.add_df_index(df, \"DataFrameIndex\") data.add_df(df) Source code in src/ipyvizzu/animation.py def add_df_index( self, df: Optional[Union[\"pandas.DataFrame\", \"pandas.Series\"]], # type: ignore column_name: str = \"Index\", ) -> None: \"\"\" Add the index of a `pandas` `DataFrame` as a series to an existing [Data][ipyvizzu.animation.Data] class instance. Args: df: The `pandas` `DataFrame` or `Series` from which to extract the index. column_name: Name for the index column to add as a series. Example: Adding a data frame's index to a [Data][ipyvizzu.animation.Data] class instance: df = pd.DataFrame( {\"Popularity\": [114, 96]}, index=[\"x\", \"y\"] ) data = Data() data.add_df_index(df, \"DataFrameIndex\") data.add_df(df) \"\"\" if not isinstance(df, type(None)): converter = PandasDataFrameConverter(df, include_index=column_name) series_list = converter.get_series_from_index() self.add_series_list(series_list) add_data_frame_index(data_frame, name) [Deprecated] This function is deprecated and will be removed in future versions. Use add_df_index function instead. Add the index of a pandas DataFrame as a series to an existing Data class instance. Parameters: Name Type Description Default data_frame Optional [ Union [ pandas . DataFrame , pandas . Series ]] The pandas DataFrame or Series from which to extract the index. required name str The name of the index series. required Source code in src/ipyvizzu/animation.py def add_data_frame_index( self, data_frame: Optional[Union[\"pandas.DataFrame\", \"pandas.Series\"]], # type: ignore name: str, ) -> None: \"\"\" [Deprecated] This function is deprecated and will be removed in future versions. Use [add_df_index][ipyvizzu.animation.Data.add_df_index] function instead. Add the index of a `pandas` `DataFrame` as a series to an existing [Data][ipyvizzu.animation.Data] class instance. Args: data_frame: The `pandas` `DataFrame` or `Series` from which to extract the index. name: The name of the index series. \"\"\" # pylint: disable=line-too-long reference = \"https://ipyvizzu.vizzuhq.com/0.16/reference/ipyvizzu/animation/#ipyvizzu.animation.Data.add_df_index\" warnings.warn( f\"'add_data_frame_index' is deprecated and will be removed in future versions. Use 'add_df_index' instead - see {reference}\", DeprecationWarning, stacklevel=2, ) self.add_df_index(data_frame, name) add_np_array(np_array, column_name=None, column_dtype=None, default_measure_value=NAN_MEASURE, default_dimension_value=NAN_DIMENSION) Add a numpy array to an existing Data class instance. Parameters: Name Type Description Default np_array Optional [ numpy . array ] The numpy array to add. required column_name Optional [ ColumnName ] The name of a column. By default, uses column indices. Can be set with an Index:Name pair or, for single-dimensional arrays, with just the Name. None column_dtype Optional [ ColumnDtype ] The dtype of a column. By default, uses the np_array's dtype. Can be set with an Index:DType pair or, for single-dimensional arrays, with just the DType. None default_measure_value MeasureValue Default value to use for missing measure values. Defaults to 0. NAN_MEASURE default_dimension_value DimensionValue Default value to use for missing dimension values. Defaults to an empty string. NAN_DIMENSION Example Adding a data frame to a Data class instance: np_array = np.zeros((3, 4)) data = Data() data.add_np_array(np_array) Source code in src/ipyvizzu/animation.py def add_np_array( self, np_array: Optional[\"numpy.array\"], # type: ignore column_name: Optional[ColumnName] = None, column_dtype: Optional[ColumnDtype] = None, default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, ) -> None: \"\"\" Add a `numpy` `array` to an existing [Data][ipyvizzu.animation.Data] class instance. Args: np_array: The `numpy` `array` to add. column_name: The name of a column. By default, uses column indices. Can be set with an Index:Name pair or, for single-dimensional arrays, with just the Name. column_dtype: The dtype of a column. By default, uses the np_array's dtype. Can be set with an Index:DType pair or, for single-dimensional arrays, with just the DType. default_measure_value: Default value to use for missing measure values. Defaults to 0. default_dimension_value: Default value to use for missing dimension values. Defaults to an empty string. Example: Adding a data frame to a [Data][ipyvizzu.animation.Data] class instance: np_array = np.zeros((3, 4)) data = Data() data.add_np_array(np_array) \"\"\" # pylint: disable=too-many-arguments if not isinstance(np_array, type(None)): converter = NumpyArrayConverter( np_array, column_name, column_dtype, default_measure_value, default_dimension_value, ) series_list = converter.get_series_list() self.add_series_list(series_list) build() A method for validating and returning the data animation dictionary. Returns: Type Description dict A dictionary that stored in the data animation object. It contains a data key whose value is the stored animation. Source code in src/ipyvizzu/animation.py def build(self) -> dict: \"\"\" A method for validating and returning the data animation dictionary. Returns: A dictionary that stored in the data animation object. It contains a `data` key whose value is the stored animation. \"\"\" jsonschema.validate(self, DATA_SCHEMA) return {\"data\": self} ipyvizzu.Config Bases: AbstractAnimation A class for representing config animation. It can build config option of the chart. Source code in src/ipyvizzu/animation.py class Config(AbstractAnimation, metaclass=ConfigAttr): \"\"\" A class for representing config animation. It can build config option of the chart. \"\"\" def __init__(self, data: Optional[Union[dict, RawJavaScript]]): \"\"\" Config constructor. Args: data: A config animation dictionary. For information on all available config parameters see the [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/interfaces/Config.Chart/#properties). \"\"\" # pylint: disable=line-too-long self._data = data def build(self) -> dict: \"\"\" A method for returning the config animation dictionary. Returns: A dictionary that stored in the config animation object. It contains a `config` key whose value is the stored animation. \"\"\" return {\"config\": self._data} __init__(data) Config constructor. Parameters: Name Type Description Default data Optional [ Union [ dict , RawJavaScript ]] A config animation dictionary. For information on all available config parameters see the Vizzu Code reference . required Source code in src/ipyvizzu/animation.py def __init__(self, data: Optional[Union[dict, RawJavaScript]]): \"\"\" Config constructor. Args: data: A config animation dictionary. For information on all available config parameters see the [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/interfaces/Config.Chart/#properties). \"\"\" # pylint: disable=line-too-long self._data = data build() A method for returning the config animation dictionary. Returns: Type Description dict A dictionary that stored in the config animation object. It contains a config key whose value is the stored animation. Source code in src/ipyvizzu/animation.py def build(self) -> dict: \"\"\" A method for returning the config animation dictionary. Returns: A dictionary that stored in the config animation object. It contains a `config` key whose value is the stored animation. \"\"\" return {\"config\": self._data} ipyvizzu.Style Bases: AbstractAnimation A class for representing style animation. It can build style option of the chart. Source code in src/ipyvizzu/animation.py class Style(AbstractAnimation): \"\"\" A class for representing style animation. It can build style option of the chart. \"\"\" def __init__(self, data: Optional[dict]): \"\"\" Style constructor. Args: data: A style animation dictionary. For information on all available style parameters see the [Style][styling-properties] chapter or the [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/interfaces/Styles.Chart/#properties). \"\"\" # pylint: disable=line-too-long self._data = data def build(self) -> dict: \"\"\" A method for returning the style animation dictionary. Returns: A dictionary that stored in the style animation object. It contains a `style` key whose value is the stored animation. \"\"\" return {\"style\": self._data} __init__(data) Style constructor. Parameters: Name Type Description Default data Optional [ dict ] A style animation dictionary. For information on all available style parameters see the Style chapter or the Vizzu Code reference . required Source code in src/ipyvizzu/animation.py def __init__(self, data: Optional[dict]): \"\"\" Style constructor. Args: data: A style animation dictionary. For information on all available style parameters see the [Style][styling-properties] chapter or the [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/interfaces/Styles.Chart/#properties). \"\"\" # pylint: disable=line-too-long self._data = data build() A method for returning the style animation dictionary. Returns: Type Description dict A dictionary that stored in the style animation object. It contains a style key whose value is the stored animation. Source code in src/ipyvizzu/animation.py def build(self) -> dict: \"\"\" A method for returning the style animation dictionary. Returns: A dictionary that stored in the style animation object. It contains a `style` key whose value is the stored animation. \"\"\" return {\"style\": self._data} ipyvizzu.Keyframe Bases: AbstractAnimation A class for representing keyframe animation. It can build keyframe of the chart. Source code in src/ipyvizzu/animation.py class Keyframe(AbstractAnimation): \"\"\" A class for representing keyframe animation. It can build keyframe of the chart. \"\"\" def __init__( self, *animations: AbstractAnimation, **options: Optional[Union[str, int, float, dict]], ): \"\"\" Keyframe constructor. Args: *animations: List of AbstractAnimation inherited objects such as [Data][ipyvizzu.animation.Data], [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style]. **options: Dictionary of animation options for example `duration=1`. For information on all available animation options see the [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/interfaces/Anim.Options/#properties). Raises: ValueError: If `animations` is not set. ValueError: If initialized with a `Keyframe`. \"\"\" # pylint: disable=line-too-long if not animations: raise ValueError(\"No animation was set.\") if [animation for animation in animations if isinstance(animation, Keyframe)]: raise ValueError(\"A Keyframe cannot contain a Keyframe.\") self._keyframe = {} self._keyframe[\"target\"] = AnimationMerger.merge_animations(animations).build() if options: self._keyframe[\"options\"] = options def build(self) -> dict: \"\"\" A method for returning the keyframe animation dictionary. Returns: A dictionary that stored in the keyframe animation object. It contains a `target` key whose value is the stored animation and an optional `options` key whose value is the stored animation options. \"\"\" return self._keyframe __init__(*animations, **options) Keyframe constructor. Parameters: Name Type Description Default *animations AbstractAnimation List of AbstractAnimation inherited objects such as Data , Config and Style . () **options Optional [ Union [ str , int , float , dict ]] Dictionary of animation options for example duration=1 . For information on all available animation options see the Vizzu Code reference . {} Raises: Type Description ValueError If animations is not set. ValueError If initialized with a Keyframe . Source code in src/ipyvizzu/animation.py def __init__( self, *animations: AbstractAnimation, **options: Optional[Union[str, int, float, dict]], ): \"\"\" Keyframe constructor. Args: *animations: List of AbstractAnimation inherited objects such as [Data][ipyvizzu.animation.Data], [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style]. **options: Dictionary of animation options for example `duration=1`. For information on all available animation options see the [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/interfaces/Anim.Options/#properties). Raises: ValueError: If `animations` is not set. ValueError: If initialized with a `Keyframe`. \"\"\" # pylint: disable=line-too-long if not animations: raise ValueError(\"No animation was set.\") if [animation for animation in animations if isinstance(animation, Keyframe)]: raise ValueError(\"A Keyframe cannot contain a Keyframe.\") self._keyframe = {} self._keyframe[\"target\"] = AnimationMerger.merge_animations(animations).build() if options: self._keyframe[\"options\"] = options build() A method for returning the keyframe animation dictionary. Returns: Type Description dict A dictionary that stored in the keyframe animation object. It contains a target key whose value is the stored animation and an optional options key whose value is the stored animation options. Source code in src/ipyvizzu/animation.py def build(self) -> dict: \"\"\" A method for returning the keyframe animation dictionary. Returns: A dictionary that stored in the keyframe animation object. It contains a `target` key whose value is the stored animation and an optional `options` key whose value is the stored animation options. \"\"\" return self._keyframe ipyvizzu.Snapshot Bases: AbstractAnimation A class for representing a stored chart state. It can build the snapshot id of the chart. Source code in src/ipyvizzu/animation.py class Snapshot(AbstractAnimation): \"\"\" A class for representing a stored chart state. It can build the snapshot id of the chart. \"\"\" def __init__(self, snapshot_id: str): \"\"\" Snapshot constructor. Args: snapshot_id: A snapshot id. \"\"\" self._snapshot_id = snapshot_id def build(self) -> str: # type: ignore \"\"\" A method for returning the snapshot id str. Returns: An str snapshot id that stored in the snapshot animation object. \"\"\" return self._snapshot_id __init__(snapshot_id) Snapshot constructor. Parameters: Name Type Description Default snapshot_id str A snapshot id. required Source code in src/ipyvizzu/animation.py def __init__(self, snapshot_id: str): \"\"\" Snapshot constructor. Args: snapshot_id: A snapshot id. \"\"\" self._snapshot_id = snapshot_id build() A method for returning the snapshot id str. Returns: Type Description str An str snapshot id that stored in the snapshot animation object. Source code in src/ipyvizzu/animation.py def build(self) -> str: # type: ignore \"\"\" A method for returning the snapshot id str. Returns: An str snapshot id that stored in the snapshot animation object. \"\"\" return self._snapshot_id ipyvizzu.Animation Bases: Snapshot A class for representing a stored animation. It can build the snapshot id of the animation. Source code in src/ipyvizzu/animation.py class Animation(Snapshot): \"\"\" A class for representing a stored animation. It can build the snapshot id of the animation. \"\"\" ipyvizzu.AbstractAnimation An abstract class for representing animation objects that have dump and build methods. Source code in src/ipyvizzu/animation.py class AbstractAnimation: \"\"\" An abstract class for representing animation objects that have `dump` and `build` methods. \"\"\" def dump(self) -> str: \"\"\" A method for converting the built dictionary into string. Returns: An str that has been json dumped with [RawJavaScriptEncoder][ipyvizzu.json.RawJavaScriptEncoder] from a dictionary. \"\"\" return json.dumps(self.build(), cls=RawJavaScriptEncoder) @abc.abstractmethod def build(self) -> dict: \"\"\" An abstract method for returning a dictionary with values that can be converted into json string. Returns: A dictionary that stored in the animation object. \"\"\" dump() A method for converting the built dictionary into string. Returns: Type Description str An str that has been json dumped with RawJavaScriptEncoder from a dictionary. Source code in src/ipyvizzu/animation.py def dump(self) -> str: \"\"\" A method for converting the built dictionary into string. Returns: An str that has been json dumped with [RawJavaScriptEncoder][ipyvizzu.json.RawJavaScriptEncoder] from a dictionary. \"\"\" return json.dumps(self.build(), cls=RawJavaScriptEncoder) build() abstractmethod An abstract method for returning a dictionary with values that can be converted into json string. Returns: Type Description dict A dictionary that stored in the animation object. Source code in src/ipyvizzu/animation.py @abc.abstractmethod def build(self) -> dict: \"\"\" An abstract method for returning a dictionary with values that can be converted into json string. Returns: A dictionary that stored in the animation object. \"\"\" ipyvizzu.PlainAnimation Bases: dict , AbstractAnimation A class for representing plain animation. It can build any dictionary. Source code in src/ipyvizzu/animation.py class PlainAnimation(dict, AbstractAnimation): \"\"\" A class for representing plain animation. It can build any dictionary. \"\"\" def build(self) -> dict: \"\"\" A method for returning the plain animation dictionary. Returns: A dictionary that stored in the plain animation object. \"\"\" return self build() A method for returning the plain animation dictionary. Returns: Type Description dict A dictionary that stored in the plain animation object. Source code in src/ipyvizzu/animation.py def build(self) -> dict: \"\"\" A method for returning the plain animation dictionary. Returns: A dictionary that stored in the plain animation object. \"\"\" return self ipyvizzu.AnimationMerger Bases: AbstractAnimation A class for merging different types of animations. Source code in src/ipyvizzu/animation.py class AnimationMerger(AbstractAnimation): \"\"\"A class for merging different types of animations.\"\"\" def __init__(self) -> None: \"\"\"AnimationMerger constructor.\"\"\" self._dict: dict = {} self._list: list = [] @classmethod def merge_animations( cls, animations: Tuple[AbstractAnimation, ...] ) -> AbstractAnimation: \"\"\" A class method for merging animations. Args: animations: List of `AbstractAnimation` inherited objects. Returns: An `AnimationMerger` class with the merged animations. \"\"\" if len(animations) == 1 and not isinstance(animations[0], Keyframe): return animations[0] merger = cls() for animation in animations: merger.merge(animation) return merger def merge(self, animation: AbstractAnimation) -> None: \"\"\" A method for merging an animation with the previously merged animations. Args: animation: An animation to be merged with with previously merged animations. Raises: ValueError: If the type of an animation is already merged. ValueError: If `Keyframe` is merged with different type of animation. \"\"\" if isinstance(animation, Keyframe): if self._dict: raise ValueError(\"Keyframe cannot be merged with other animations.\") data = animation.build() self._list.append(data) else: if self._list: raise ValueError(\"Keyframe cannot be merged with other animations.\") data = self._validate(animation) self._dict.update(data) def _validate(self, animation: AbstractAnimation) -> dict: if isinstance(animation, Snapshot): raise ValueError(\"Snapshot cannot be merged with other animations.\") data = animation.build() common_keys = set(data).intersection(self._dict) if common_keys: raise ValueError(f\"{common_keys} is already merged.\") return data def build(self) -> Union[dict, list]: # type: ignore \"\"\" A method for returning a merged list of `Keyframes` or a merged dictionary from different types of animations. Returns: A merged list of [Keyframes][ipyvizzu.animation.Keyframe] or a merged dictionary from [Data][ipyvizzu.animation.Data], [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style] animations. \"\"\" if self._dict: return self._dict return self._list __init__() AnimationMerger constructor. Source code in src/ipyvizzu/animation.py def __init__(self) -> None: \"\"\"AnimationMerger constructor.\"\"\" self._dict: dict = {} self._list: list = [] merge_animations(animations) classmethod A class method for merging animations. Parameters: Name Type Description Default animations Tuple [ AbstractAnimation , ...] List of AbstractAnimation inherited objects. required Returns: Type Description AbstractAnimation An AnimationMerger class with the merged animations. Source code in src/ipyvizzu/animation.py @classmethod def merge_animations( cls, animations: Tuple[AbstractAnimation, ...] ) -> AbstractAnimation: \"\"\" A class method for merging animations. Args: animations: List of `AbstractAnimation` inherited objects. Returns: An `AnimationMerger` class with the merged animations. \"\"\" if len(animations) == 1 and not isinstance(animations[0], Keyframe): return animations[0] merger = cls() for animation in animations: merger.merge(animation) return merger merge(animation) A method for merging an animation with the previously merged animations. Parameters: Name Type Description Default animation AbstractAnimation An animation to be merged with with previously merged animations. required Raises: Type Description ValueError If the type of an animation is already merged. ValueError If Keyframe is merged with different type of animation. Source code in src/ipyvizzu/animation.py def merge(self, animation: AbstractAnimation) -> None: \"\"\" A method for merging an animation with the previously merged animations. Args: animation: An animation to be merged with with previously merged animations. Raises: ValueError: If the type of an animation is already merged. ValueError: If `Keyframe` is merged with different type of animation. \"\"\" if isinstance(animation, Keyframe): if self._dict: raise ValueError(\"Keyframe cannot be merged with other animations.\") data = animation.build() self._list.append(data) else: if self._list: raise ValueError(\"Keyframe cannot be merged with other animations.\") data = self._validate(animation) self._dict.update(data) build() A method for returning a merged list of Keyframes or a merged dictionary from different types of animations. Returns: Type Description Union [ dict , list ] A merged list of Keyframes or a merged dictionary from Data , Config and Style animations. Source code in src/ipyvizzu/animation.py def build(self) -> Union[dict, list]: # type: ignore \"\"\" A method for returning a merged list of `Keyframes` or a merged dictionary from different types of animations. Returns: A merged list of [Keyframes][ipyvizzu.animation.Keyframe] or a merged dictionary from [Data][ipyvizzu.animation.Data], [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style] animations. \"\"\" if self._dict: return self._dict return self._list ipyvizzu.Animate Bases: Method A class for dumping chart independent parameters to DisplayTemplate.ANIMATE template. Source code in src/ipyvizzu/method.py class Animate(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.ANIMATE][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__( self, chart_target: AbstractAnimation, chart_anim_opts: Optional[dict] = None, ): \"\"\" Animate constructor. It stores and dumps `chart_target` and `chart_anim_opts` parameters. Args: chart_target: AbstractAnimation inherited object such as [Data][ipyvizzu.animation.Data] [Config][ipyvizzu.animation.Config] or [Style][ipyvizzu.animation.Style]. chart_anim_opts: Animation options' dictionary. If it is not set, it dumps `undefined`. \"\"\" self._data = { \"chart_target\": chart_target.dump(), \"chart_anim_opts\": PlainAnimation(chart_anim_opts).dump() if chart_anim_opts else \"undefined\", } __init__(chart_target, chart_anim_opts=None) Animate constructor. It stores and dumps chart_target and chart_anim_opts parameters. Parameters: Name Type Description Default chart_target AbstractAnimation AbstractAnimation inherited object such as Data Config or Style . required chart_anim_opts Optional [ dict ] Animation options' dictionary. If it is not set, it dumps undefined . None Source code in src/ipyvizzu/method.py def __init__( self, chart_target: AbstractAnimation, chart_anim_opts: Optional[dict] = None, ): \"\"\" Animate constructor. It stores and dumps `chart_target` and `chart_anim_opts` parameters. Args: chart_target: AbstractAnimation inherited object such as [Data][ipyvizzu.animation.Data] [Config][ipyvizzu.animation.Config] or [Style][ipyvizzu.animation.Style]. chart_anim_opts: Animation options' dictionary. If it is not set, it dumps `undefined`. \"\"\" self._data = { \"chart_target\": chart_target.dump(), \"chart_anim_opts\": PlainAnimation(chart_anim_opts).dump() if chart_anim_opts else \"undefined\", } ipyvizzu.Feature Bases: Method A class for dumping chart independent parameters to DisplayTemplate.FEATURE template. Source code in src/ipyvizzu/method.py class Feature(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.FEATURE][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__(self, name: str, enabled: bool): \"\"\" Feature constructor. It stores and dumps `name` and `enabled` parameters. Args: name: The name of a chart feature. enabled: The new state of a chart feature. \"\"\" self._data = {\"name\": name, \"enabled\": json.dumps(enabled)} __init__(name, enabled) Feature constructor. It stores and dumps name and enabled parameters. Parameters: Name Type Description Default name str The name of a chart feature. required enabled bool The new state of a chart feature. required Source code in src/ipyvizzu/method.py def __init__(self, name: str, enabled: bool): \"\"\" Feature constructor. It stores and dumps `name` and `enabled` parameters. Args: name: The name of a chart feature. enabled: The new state of a chart feature. \"\"\" self._data = {\"name\": name, \"enabled\": json.dumps(enabled)} ipyvizzu.Store Bases: Method A class for dumping chart independent parameters to DisplayTemplate.STORE template. Source code in src/ipyvizzu/method.py class Store(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.STORE][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__(self, snapshot_id: str): \"\"\" Store constructor. It stores and dumps `snapshot_id` parameter. Args: snapshot_id: The id of snapshot object. \"\"\" self._data = {\"id\": snapshot_id} __init__(snapshot_id) Store constructor. It stores and dumps snapshot_id parameter. Parameters: Name Type Description Default snapshot_id str The id of snapshot object. required Source code in src/ipyvizzu/method.py def __init__(self, snapshot_id: str): \"\"\" Store constructor. It stores and dumps `snapshot_id` parameter. Args: snapshot_id: The id of snapshot object. \"\"\" self._data = {\"id\": snapshot_id} ipyvizzu.EventOn Bases: Method A class for dumping chart independent parameters to DisplayTemplate.SET_EVENT template. Source code in src/ipyvizzu/method.py class EventOn(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.SET_EVENT][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__(self, event_handler: EventHandler): \"\"\" EventOn constructor. It stores and dumps the `id`, the `event` and the `handler` of the event handler object. Args: event_handler: An event handler object. \"\"\" self._data = { \"id\": event_handler.id, \"event\": event_handler.event, \"handler\": event_handler.handler, } __init__(event_handler) EventOn constructor. It stores and dumps the id , the event and the handler of the event handler object. Parameters: Name Type Description Default event_handler EventHandler An event handler object. required Source code in src/ipyvizzu/method.py def __init__(self, event_handler: EventHandler): \"\"\" EventOn constructor. It stores and dumps the `id`, the `event` and the `handler` of the event handler object. Args: event_handler: An event handler object. \"\"\" self._data = { \"id\": event_handler.id, \"event\": event_handler.event, \"handler\": event_handler.handler, } ipyvizzu.EventOff Bases: Method A class for dumping chart independent parameters to DisplayTemplate.CLEAR_EVENT template. Source code in src/ipyvizzu/method.py class EventOff(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.CLEAR_EVENT][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__(self, event_handler: EventHandler): \"\"\" EventOff constructor. It stores and dumps the `id` and the `event` of the event handler object. Args: event_handler: An event handler object. \"\"\" self._data = {\"id\": event_handler.id, \"event\": event_handler.event} __init__(event_handler) EventOff constructor. It stores and dumps the id and the event of the event handler object. Parameters: Name Type Description Default event_handler EventHandler An event handler object. required Source code in src/ipyvizzu/method.py def __init__(self, event_handler: EventHandler): \"\"\" EventOff constructor. It stores and dumps the `id` and the `event` of the event handler object. Args: event_handler: An event handler object. \"\"\" self._data = {\"id\": event_handler.id, \"event\": event_handler.event} ipyvizzu.Log Bases: Method A class for dumping chart independent parameters to DisplayTemplate.LOG template. Source code in src/ipyvizzu/method.py class Log(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.LOG][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__(self, chart_property: ChartProperty): \"\"\" Log constructor. It stores and dumps the value of the chart property object. Args: chart_property: A chart property such as [CONFIG][ipyvizzu.template.ChartProperty] and [STYLE][ipyvizzu.template.ChartProperty]. \"\"\" self._data = {\"chart_property\": chart_property.value} __init__(chart_property) Log constructor. It stores and dumps the value of the chart property object. Parameters: Name Type Description Default chart_property ChartProperty A chart property such as CONFIG and STYLE . required Source code in src/ipyvizzu/method.py def __init__(self, chart_property: ChartProperty): \"\"\" Log constructor. It stores and dumps the value of the chart property object. Args: chart_property: A chart property such as [CONFIG][ipyvizzu.template.ChartProperty] and [STYLE][ipyvizzu.template.ChartProperty]. \"\"\" self._data = {\"chart_property\": chart_property.value} ipyvizzu.AnimationControl A class for controlling animations. Source code in src/ipyvizzu/animationcontrol.py class AnimationControl: \"\"\" A class for controlling animations. \"\"\" def __init__(self, prev_id: str, last_id: str, display_method: Callable): \"\"\" AnimationControl constructor. Args: prev_id: Id of the previous animation promise. last_id: Id of the animation to be controlled. display_method: Displaying function. \"\"\" self._ids = \", \".join([f\"'{prev_id}'\", f\"'{last_id}'\"]) self._display = display_method def cancel(self) -> None: \"\"\"Cancels the animation, will reject the animation promise.\"\"\" self._display( DisplayTemplate.CONTROL.format( method=\"cancel\", params=self._ids, ) ) def pause(self) -> None: \"\"\"Pauses the controlled animation.\"\"\" self._display( DisplayTemplate.CONTROL.format( method=\"pause\", params=self._ids, ) ) def play(self) -> None: \"\"\"Plays/resumes playing of the controlled animation.\"\"\" self._display( DisplayTemplate.CONTROL.format( method=\"play\", params=self._ids, ) ) def reverse(self) -> None: \"\"\"Changes the direction of the controlled animation.\"\"\" self._display( DisplayTemplate.CONTROL.format( method=\"reverse\", params=self._ids, ) ) def seek(self, value: Union[int, str]) -> None: \"\"\" Seeks the animation to the position specified by time or progress percentage. Args: value: The position specified by time or progress percentage. \"\"\" params = \", \".join([self._ids, f\"'{value}'\"]) self._display( DisplayTemplate.CONTROL.format( method=\"seek\", params=params, ) ) def stop(self) -> None: \"\"\"Stops the current animation seeking it back to its start position.\"\"\" self._display( DisplayTemplate.CONTROL.format( method=\"stop\", params=self._ids, ) ) def store(self) -> Animation: \"\"\" A method for saving and storing the actual state of the animation. Returns: An `Animation` object wich stores the actual state of the animation. \"\"\" animation_id = uuid.uuid4().hex[:7] params = \", \".join([self._ids, f\"'{animation_id}'\"]) self._display( DisplayTemplate.CONTROL.format( method=\"store\", params=params, ) ) return Animation(animation_id) __init__(prev_id, last_id, display_method) AnimationControl constructor. Parameters: Name Type Description Default prev_id str Id of the previous animation promise. required last_id str Id of the animation to be controlled. required display_method Callable Displaying function. required Source code in src/ipyvizzu/animationcontrol.py def __init__(self, prev_id: str, last_id: str, display_method: Callable): \"\"\" AnimationControl constructor. Args: prev_id: Id of the previous animation promise. last_id: Id of the animation to be controlled. display_method: Displaying function. \"\"\" self._ids = \", \".join([f\"'{prev_id}'\", f\"'{last_id}'\"]) self._display = display_method cancel() Cancels the animation, will reject the animation promise. Source code in src/ipyvizzu/animationcontrol.py def cancel(self) -> None: \"\"\"Cancels the animation, will reject the animation promise.\"\"\" self._display( DisplayTemplate.CONTROL.format( method=\"cancel\", params=self._ids, ) ) pause() Pauses the controlled animation. Source code in src/ipyvizzu/animationcontrol.py def pause(self) -> None: \"\"\"Pauses the controlled animation.\"\"\" self._display( DisplayTemplate.CONTROL.format( method=\"pause\", params=self._ids, ) ) play() Plays/resumes playing of the controlled animation. Source code in src/ipyvizzu/animationcontrol.py def play(self) -> None: \"\"\"Plays/resumes playing of the controlled animation.\"\"\" self._display( DisplayTemplate.CONTROL.format( method=\"play\", params=self._ids, ) ) reverse() Changes the direction of the controlled animation. Source code in src/ipyvizzu/animationcontrol.py def reverse(self) -> None: \"\"\"Changes the direction of the controlled animation.\"\"\" self._display( DisplayTemplate.CONTROL.format( method=\"reverse\", params=self._ids, ) ) seek(value) Seeks the animation to the position specified by time or progress percentage. Parameters: Name Type Description Default value Union [ int , str ] The position specified by time or progress percentage. required Source code in src/ipyvizzu/animationcontrol.py def seek(self, value: Union[int, str]) -> None: \"\"\" Seeks the animation to the position specified by time or progress percentage. Args: value: The position specified by time or progress percentage. \"\"\" params = \", \".join([self._ids, f\"'{value}'\"]) self._display( DisplayTemplate.CONTROL.format( method=\"seek\", params=params, ) ) stop() Stops the current animation seeking it back to its start position. Source code in src/ipyvizzu/animationcontrol.py def stop(self) -> None: \"\"\"Stops the current animation seeking it back to its start position.\"\"\" self._display( DisplayTemplate.CONTROL.format( method=\"stop\", params=self._ids, ) ) store() A method for saving and storing the actual state of the animation. Returns: Type Description Animation An Animation object wich stores the actual state of the animation. Source code in src/ipyvizzu/animationcontrol.py def store(self) -> Animation: \"\"\" A method for saving and storing the actual state of the animation. Returns: An `Animation` object wich stores the actual state of the animation. \"\"\" animation_id = uuid.uuid4().hex[:7] params = \", \".join([self._ids, f\"'{animation_id}'\"]) self._display( DisplayTemplate.CONTROL.format( method=\"store\", params=params, ) ) return Animation(animation_id) ipyvizzu.NumpyArrayConverter Bases: ToSeriesListConverter Converts a numpy array into a list of dictionaries representing series. Each dictionary contains information about the series name , values and type . Parameters: Name Type Description Default np_array numpy . array The numpy array to convert. required column_name Optional [ ColumnName ] The name of a column. By default, uses column indices. Can be set with an Index:Name pair or, for single-dimensional arrays, with just the Name. None column_dtype Optional [ ColumnDtype ] The dtype of a column. By default, uses the np_array's dtype. Can be set with an Index:DType pair or, for single-dimensional arrays, with just the DType. None default_measure_value MeasureValue Default value to use for missing measure values. Defaults to 0. NAN_MEASURE default_dimension_value DimensionValue Default value to use for missing dimension values. Defaults to an empty string. NAN_DIMENSION Example Get series list from numpy array : converter = NumpyArrayConverter(np_array) series_list = converter.get_series_list() Source code in src/ipyvizzu/data/converters/numpy/converter.py class NumpyArrayConverter(ToSeriesListConverter): \"\"\" Converts a `numpy` `array` into a list of dictionaries representing series. Each dictionary contains information about the series `name`, `values` and `type`. Parameters: np_array: The `numpy` `array` to convert. column_name: The name of a column. By default, uses column indices. Can be set with an Index:Name pair or, for single-dimensional arrays, with just the Name. column_dtype: The dtype of a column. By default, uses the np_array's dtype. Can be set with an Index:DType pair or, for single-dimensional arrays, with just the DType. default_measure_value: Default value to use for missing measure values. Defaults to 0. default_dimension_value: Default value to use for missing dimension values. Defaults to an empty string. Example: Get series list from `numpy` `array`: converter = NumpyArrayConverter(np_array) series_list = converter.get_series_list() \"\"\" # pylint: disable=too-few-public-methods def __init__( self, np_array: \"numpy.array\", # type: ignore column_name: Optional[ColumnName] = None, column_dtype: Optional[ColumnDtype] = None, default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, ) -> None: # pylint: disable=too-many-arguments super().__init__(default_measure_value, default_dimension_value) self._np = self._get_numpy() self._np_array = np_array self._column_name: Dict[Index, Name] = self._get_columns_config(column_name) self._column_dtype: Dict[Index, DType] = self._get_columns_config(column_dtype) def get_series_list(self) -> List[Series]: \"\"\" Convert the `numpy` `array` to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" if self._np_array.ndim == 0: return [] if self._np_array.ndim == 1: return self._get_series_list_from_array1dim() if self._np_array.ndim == 2: return self._get_series_list_from_array2dim() raise ValueError(\"arrays larger than 2D are not supported\") def _get_series_list_from_array1dim(self) -> List[Series]: i = 0 name = self._column_name.get(i, i) values, infer_type = self._convert_to_series_values_and_type( (i, self._np_array) ) return [self._convert_to_series(name, values, infer_type)] def _get_series_list_from_array2dim(self) -> List[Series]: series_list = [] for i in range(self._np_array.shape[1]): name = self._column_name.get(i, i) values, infer_type = self._convert_to_series_values_and_type( (i, self._np_array[:, i]) ) series_list.append(self._convert_to_series(name, values, infer_type)) return series_list def _get_numpy(self) -> ModuleType: try: import numpy as np # pylint: disable=import-outside-toplevel return np except ImportError as error: raise ImportError( \"numpy is not available. Please install numpy to use this feature.\" ) from error def _get_columns_config( self, config: Optional[Union[ColumnConfig, Dict[Index, ColumnConfig]]], ) -> Dict[Index, ColumnConfig]: if config is None: return {} if not isinstance(config, dict): if not self._np_array.ndim == 1: raise ValueError(\"non dict value can only be used for a 1D array\") return {0: config} return config def _convert_to_series_values_and_type( self, obj: Tuple[int, \"numpy.array\"] # type: ignore ) -> Tuple[SeriesValues, InferType]: column = obj i = column[0] array = column[1] dtype = self._column_dtype.get(i, self._np_array.dtype) if self._np.issubdtype(dtype, self._np.number): return self._convert_to_measure_values(array), InferType.MEASURE return self._convert_to_dimension_values(array), InferType.DIMENSION def _convert_to_measure_values( self, obj: \"numpy.array\" # type: ignore ) -> List[MeasureValue]: array = obj array_float = array.astype(float) return self._np.nan_to_num( array_float, nan=self._default_measure_value ).tolist() def _convert_to_dimension_values( self, obj: \"numpy.array\" # type: ignore ) -> List[DimensionValue]: array = obj array_str = array.astype(str) replace_nan = \"nan\" mask = array_str == replace_nan array_str[mask] = self._default_dimension_value return array_str.tolist() get_series_list() Convert the numpy array to a list of dictionaries representing series. Returns: Type Description List [ Series ] A list of dictionaries representing series, List [ Series ] where each dictionary has name , values and type keys. Source code in src/ipyvizzu/data/converters/numpy/converter.py def get_series_list(self) -> List[Series]: \"\"\" Convert the `numpy` `array` to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" if self._np_array.ndim == 0: return [] if self._np_array.ndim == 1: return self._get_series_list_from_array1dim() if self._np_array.ndim == 2: return self._get_series_list_from_array2dim() raise ValueError(\"arrays larger than 2D are not supported\") ipyvizzu.PandasDataFrameConverter Bases: DataFrameConverter Converts a pandas DataFrame or Series into a list of dictionaries representing series. Each dictionary contains information about the series name , values and type . Parameters: Name Type Description Default df Union [ pandas . DataFrame , pandas . Series ] The pandas DataFrame or Series to convert. required default_measure_value MeasureValue Default value to use for missing measure values. Defaults to 0. NAN_MEASURE default_dimension_value DimensionValue Default value to use for missing dimension values. Defaults to an empty string. NAN_DIMENSION max_rows int The maximum number of rows to include in the converted series list. If the df contains more rows, a random sample of the given number of rows will be taken. MAX_ROWS include_index Optional [ str ] Name for the index column to include as a series. If provided, the index column will be added. Defaults to None. None Example Get series list from DataFrame columns: converter = PandasDataFrameConverter(df) series_list = converter.get_series_list() Source code in src/ipyvizzu/data/converters/pandas/converter.py class PandasDataFrameConverter(DataFrameConverter): \"\"\" Converts a `pandas` `DataFrame` or `Series` into a list of dictionaries representing series. Each dictionary contains information about the series `name`, `values` and `type`. Parameters: df: The `pandas` `DataFrame` or `Series` to convert. default_measure_value: Default value to use for missing measure values. Defaults to 0. default_dimension_value: Default value to use for missing dimension values. Defaults to an empty string. max_rows: The maximum number of rows to include in the converted series list. If the `df` contains more rows, a random sample of the given number of rows will be taken. include_index: Name for the index column to include as a series. If provided, the index column will be added. Defaults to None. Example: Get series list from `DataFrame` columns: converter = PandasDataFrameConverter(df) series_list = converter.get_series_list() \"\"\" def __init__( self, df: Union[\"pandas.DataFrame\", \"pandas.Series\"], # type: ignore default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, max_rows: int = MAX_ROWS, include_index: Optional[str] = None, ) -> None: # pylint: disable=too-many-arguments super().__init__(default_measure_value, default_dimension_value, max_rows) self._pd = self._get_pandas() self._df = self._get_sampled_df( self._convert_to_df(df) if isinstance(df, PandasSeries) else df ) self._include_index = include_index def get_series_list(self) -> List[Series]: \"\"\" Convert the `DataFrame` columns to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" series_list = super().get_series_list() index_series = self.get_series_from_index() return index_series + series_list def get_series_from_index(self) -> List[Series]: \"\"\" Convert the `DataFrame` index to a dictionary representing a series, if `include_index` is provided. Returns: A dictionary representing the index series with `name`, `values` and `type` keys. Returns `None` if `include_index` is not provided. \"\"\" if not self._include_index or self._df.index.empty: return [] df = self._pd.DataFrame({self._include_index: self._df.index}) index_series_converter = PandasDataFrameConverter( df, self._default_measure_value, self._default_dimension_value ) return index_series_converter.get_series_list() def _get_pandas(self) -> ModuleType: try: import pandas as pd # pylint: disable=import-outside-toplevel return pd except ImportError as error: raise ImportError( \"pandas is not available. Please install pandas to use this feature.\" ) from error def _convert_to_df(self, series: \"pandas.Series\") -> \"pandas.Dataframe\": # type: ignore if series.empty: return self._pd.DataFrame() return self._pd.DataFrame(series) def _get_sampled_df(self, df: \"pandas.DataFrame\") -> \"pandas.DataFrame\": # type: ignore row_number = len(df) if row_number > self._max_rows: frac = self._max_rows / row_number sampled_df = df.sample( replace=False, frac=frac, random_state=42, ) return sampled_df return df def _get_columns(self) -> List[str]: return self._df.columns def _convert_to_series_values_and_type( self, obj: str # type: ignore ) -> Tuple[SeriesValues, InferType]: column_name = obj column = self._df[column_name] if self._pd.api.types.is_numeric_dtype(column.dtype): return self._convert_to_measure_values(column), InferType.MEASURE return self._convert_to_dimension_values(column), InferType.DIMENSION def _convert_to_measure_values( self, obj: \"pandas.DataFrame\" # type: ignore ) -> List[MeasureValue]: column = obj return column.fillna(self._default_measure_value).astype(float).values.tolist() def _convert_to_dimension_values( self, obj: \"pandas.DataFrame\" # type: ignore ) -> List[DimensionValue]: column = obj return column.fillna(self._default_dimension_value).astype(str).values.tolist() get_series_list() Convert the DataFrame columns to a list of dictionaries representing series. Returns: Type Description List [ Series ] A list of dictionaries representing series, List [ Series ] where each dictionary has name , values and type keys. Source code in src/ipyvizzu/data/converters/pandas/converter.py def get_series_list(self) -> List[Series]: \"\"\" Convert the `DataFrame` columns to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" series_list = super().get_series_list() index_series = self.get_series_from_index() return index_series + series_list get_series_from_index() Convert the DataFrame index to a dictionary representing a series, if include_index is provided. Returns: Type Description List [ Series ] A dictionary representing the index series with name , values and type keys. List [ Series ] Returns None if include_index is not provided. Source code in src/ipyvizzu/data/converters/pandas/converter.py def get_series_from_index(self) -> List[Series]: \"\"\" Convert the `DataFrame` index to a dictionary representing a series, if `include_index` is provided. Returns: A dictionary representing the index series with `name`, `values` and `type` keys. Returns `None` if `include_index` is not provided. \"\"\" if not self._include_index or self._df.index.empty: return [] df = self._pd.DataFrame({self._include_index: self._df.index}) index_series_converter = PandasDataFrameConverter( df, self._default_measure_value, self._default_dimension_value ) return index_series_converter.get_series_list() ipyvizzu.InferType Bases: Enum An enum class for storing data infer types. Attributes: Name Type Description DIMENSION str An enum key-value for storing dimension infer type. Dimensions are categorical series that can contain strings and numbers, but both will be treated as strings. MEASURE str An enum key-value for storing measure infer type. Measures can only be numerical. Source code in src/ipyvizzu/data/infer_type.py class InferType(Enum): \"\"\" An enum class for storing data infer types. Attributes: DIMENSION: An enum key-value for storing dimension infer type. Dimensions are categorical series that can contain strings and numbers, but both will be treated as strings. MEASURE: An enum key-value for storing measure infer type. Measures can only be numerical. \"\"\" DIMENSION: str = \"dimension\" MEASURE: str = \"measure\" ipyvizzu.Method A class for storing and dumping any kind of data. Source code in src/ipyvizzu/method.py class Method: \"\"\"A class for storing and dumping any kind of data.\"\"\" # pylint: disable=too-few-public-methods _data: dict def dump(self) -> dict: \"\"\" A method for returning the stored data. Returns: The stored data. \"\"\" return self._data dump() A method for returning the stored data. Returns: Type Description dict The stored data. Source code in src/ipyvizzu/method.py def dump(self) -> dict: \"\"\" A method for returning the stored data. Returns: The stored data. \"\"\" return self._data ipyvizzu.EventHandler A class for representing an event handler. Source code in src/ipyvizzu/event.py class EventHandler: \"\"\"A class for representing an event handler.\"\"\" def __init__(self, event: str, handler: str): \"\"\" EventHandler constructor. It generates a uuid for the event handler, stores the event type and the body of the handler function. Args: event: The type of the event. handler: The body of the handler function. \"\"\" self._id = uuid.uuid4().hex[:7] self._event = event self._handler = \" \".join(handler.split()) @property def id(self) -> str: # pylint: disable=invalid-name \"\"\" A property for storing an id. Returns: The uuid of the event handler. \"\"\" return self._id @property def event(self) -> str: \"\"\" A property for storing an event type. Returns: The type of the event. \"\"\" return self._event @property def handler(self) -> str: \"\"\" A property for storing an event handler function. Returns: The body of the handler function. \"\"\" return self._handler id: str property A property for storing an id. Returns: Type Description str The uuid of the event handler. event: str property A property for storing an event type. Returns: Type Description str The type of the event. handler: str property A property for storing an event handler function. Returns: Type Description str The body of the handler function. __init__(event, handler) EventHandler constructor. It generates a uuid for the event handler, stores the event type and the body of the handler function. Parameters: Name Type Description Default event str The type of the event. required handler str The body of the handler function. required Source code in src/ipyvizzu/event.py def __init__(self, event: str, handler: str): \"\"\" EventHandler constructor. It generates a uuid for the event handler, stores the event type and the body of the handler function. Args: event: The type of the event. handler: The body of the handler function. \"\"\" self._id = uuid.uuid4().hex[:7] self._event = event self._handler = \" \".join(handler.split()) ipyvizzu.RawJavaScript A class for representing raw JavaScript code. Source code in src/ipyvizzu/json.py class RawJavaScript: \"\"\"A class for representing raw JavaScript code.\"\"\" # pylint: disable=too-few-public-methods def __init__(self, raw: Optional[str]): \"\"\" RawJavaScript constructor. It stores raw JavaScript code as a string. Args: raw: JavaScript code as `str`. \"\"\" self._raw = raw @property def raw(self) -> Optional[str]: \"\"\" A property for storing raw JavaScript code as a string. Returns: Raw JavaScript code as `str`. \"\"\" return self._raw raw: Optional[str] property A property for storing raw JavaScript code as a string. Returns: Type Description Optional [ str ] Raw JavaScript code as str . __init__(raw) RawJavaScript constructor. It stores raw JavaScript code as a string. Parameters: Name Type Description Default raw Optional [ str ] JavaScript code as str . required Source code in src/ipyvizzu/json.py def __init__(self, raw: Optional[str]): \"\"\" RawJavaScript constructor. It stores raw JavaScript code as a string. Args: raw: JavaScript code as `str`. \"\"\" self._raw = raw ipyvizzu.RawJavaScriptEncoder Bases: json . JSONEncoder A class for representing a custom json encoder, it can encode objects that contain RawJavaScript values. Source code in src/ipyvizzu/json.py class RawJavaScriptEncoder(json.JSONEncoder): \"\"\" A class for representing a custom json encoder, it can encode objects that contain [RawJavaScript][ipyvizzu.json.RawJavaScript] values. \"\"\" def __init__(self, *args, **kwargs): \"\"\" RawJavaScriptEncoder constructor. It extends [JSONEncoder][json.JSONEncoder] with an instance variable (`_raw_replacements`). The `_raw_replacements` dictionary stores the `uuids` and JavaScript codes of the [RawJavaScript][ipyvizzu.json.RawJavaScript] objects. \"\"\" json.JSONEncoder.__init__(self, *args, **kwargs) self._raw_replacements = {} def default(self, o: Any): \"\"\" Overrides [JSONEncoder.default][json.JSONEncoder.default] method. It replaces [RawJavaScript][ipyvizzu.json.RawJavaScript] object with `uuid` and it stores raw JavaScript code with `uuid` key in the `_raw_replacements` dictionary. \"\"\" if isinstance(o, RawJavaScript): key = uuid.uuid4().hex self._raw_replacements[key] = o.raw return key return json.JSONEncoder.default(self, o) def encode(self, o: Any): \"\"\" Overrides [JSONEncoder.encode][json.JSONEncoder.encode] method. It replaces `uuids` with raw JavaScript code without apostrophes. \"\"\" result = json.JSONEncoder.encode(self, o) for key, val in self._raw_replacements.items(): result = result.replace(f'\"{key}\"', val) return result __init__(*args, **kwargs) RawJavaScriptEncoder constructor. It extends JSONEncoder with an instance variable ( _raw_replacements ). The _raw_replacements dictionary stores the uuids and JavaScript codes of the RawJavaScript objects. Source code in src/ipyvizzu/json.py def __init__(self, *args, **kwargs): \"\"\" RawJavaScriptEncoder constructor. It extends [JSONEncoder][json.JSONEncoder] with an instance variable (`_raw_replacements`). The `_raw_replacements` dictionary stores the `uuids` and JavaScript codes of the [RawJavaScript][ipyvizzu.json.RawJavaScript] objects. \"\"\" json.JSONEncoder.__init__(self, *args, **kwargs) self._raw_replacements = {} default(o) Overrides JSONEncoder.default method. It replaces RawJavaScript object with uuid and it stores raw JavaScript code with uuid key in the _raw_replacements dictionary. Source code in src/ipyvizzu/json.py def default(self, o: Any): \"\"\" Overrides [JSONEncoder.default][json.JSONEncoder.default] method. It replaces [RawJavaScript][ipyvizzu.json.RawJavaScript] object with `uuid` and it stores raw JavaScript code with `uuid` key in the `_raw_replacements` dictionary. \"\"\" if isinstance(o, RawJavaScript): key = uuid.uuid4().hex self._raw_replacements[key] = o.raw return key return json.JSONEncoder.default(self, o) encode(o) Overrides JSONEncoder.encode method. It replaces uuids with raw JavaScript code without apostrophes. Source code in src/ipyvizzu/json.py def encode(self, o: Any): \"\"\" Overrides [JSONEncoder.encode][json.JSONEncoder.encode] method. It replaces `uuids` with raw JavaScript code without apostrophes. \"\"\" result = json.JSONEncoder.encode(self, o) for key, val in self._raw_replacements.items(): result = result.replace(f'\"{key}\"', val) return result ipyvizzu.ChartProperty Bases: Enum An enum class for storing chart properties. Source code in src/ipyvizzu/template.py class ChartProperty(Enum): \"\"\"An enum class for storing chart properties.\"\"\" CONFIG = \"config\" \"\"\"An enum key-value for storing config chart property.\"\"\" STYLE = \"style\" \"\"\"An enum key-value for storing style chart property.\"\"\" CONFIG = 'config' class-attribute instance-attribute An enum key-value for storing config chart property. STYLE = 'style' class-attribute instance-attribute An enum key-value for storing style chart property. ipyvizzu.DisplayTarget Bases: Enum An enum class for storing chart display options. Source code in src/ipyvizzu/template.py class DisplayTarget(Enum): \"\"\"An enum class for storing chart display options.\"\"\" BEGIN = \"begin\" \"\"\"Display all animation steps after the constructor's cell.\"\"\" END = \"end\" \"\"\"Display all animation steps after the last running cell.\"\"\" ACTUAL = \"actual\" \"\"\"Display the actual animation step after the currently running cell.\"\"\" MANUAL = \"manual\" \"\"\"Display all animation steps after calling a show method.\"\"\" BEGIN = 'begin' class-attribute instance-attribute Display all animation steps after the constructor's cell. END = 'end' class-attribute instance-attribute Display all animation steps after the last running cell. ACTUAL = 'actual' class-attribute instance-attribute Display the actual animation step after the currently running cell. MANUAL = 'manual' class-attribute instance-attribute Display all animation steps after calling a show method. ipyvizzu.DisplayTemplate A class for storing JavaScript snippet templates. Source code in src/ipyvizzu/template.py class DisplayTemplate: \"\"\"A class for storing JavaScript snippet templates.\"\"\" # pylint: disable=too-few-public-methods IPYVIZZUJS: str = \"{ipyvizzujs}\" \"\"\"ipyvizzu JavaScript class.\"\"\" INIT: str = ( \"window.ipyvizzu.createChart(element, \" + \"'{chart_id}', '{vizzu}', '{div_width}', '{div_height}');\" ) \"\"\"Call createChart JavaScript method.\"\"\" CHANGE_ANALYTICS_TO: str = ( \"if (window.IpyVizzu) window.IpyVizzu.changeAnalyticsTo({analytics});\" ) \"\"\"Call changeAnalyticsTo JavaScript method.\"\"\" ANIMATE: str = ( \"window.ipyvizzu.animate(element, \" + \"'{chart_id}', '{anim_id}', '{display_target}', {scroll}, \" + \"lib => {{ return {chart_target} }}, {chart_anim_opts});\" ) \"\"\"Call animate JavaScript method.\"\"\" FEATURE: str = ( \"window.ipyvizzu.feature(element, '{chart_id}', '{name}', {enabled});\" ) \"\"\"Call feature JavaScript method.\"\"\" STORE: str = \"window.ipyvizzu.store(element, '{chart_id}', '{id}');\" \"\"\"Call store JavaScript method.\"\"\" SET_EVENT: str = ( \"window.ipyvizzu.setEvent(element, \" + \"'{chart_id}', '{id}', '{event}', event => {{ {handler} }});\" ) \"\"\"Call setEvent JavaScript method.\"\"\" CLEAR_EVENT: str = ( \"window.ipyvizzu.clearEvent(element, '{chart_id}', '{id}', '{event}');\" ) \"\"\"Call clearEvent JavaScript method.\"\"\" LOG: str = \"window.ipyvizzu.log(element, '{chart_id}', '{chart_property}');\" \"\"\"Call log JavaScript method.\"\"\" CONTROL: str = \"window.ipyvizzu.control(element, '{method}', {params});\" \"\"\"Call animation control JavaScript methods.\"\"\" CLEAR_INHIBITSCROLL: str = ( \"if (window.IpyVizzu) { window.IpyVizzu.clearInhibitScroll(element); }\" ) \"\"\"Call clearInhibitScroll JavaScript method if ipyvizzu JavaScript class exists.\"\"\" IPYVIZZUJS: str = '{ipyvizzujs}' class-attribute instance-attribute ipyvizzu JavaScript class. INIT: str = 'window.ipyvizzu.createChart(element, ' + \"'{chart_id}', '{vizzu}', '{div_width}', '{div_height}');\" class-attribute instance-attribute Call createChart JavaScript method. CHANGE_ANALYTICS_TO: str = 'if (window.IpyVizzu) window.IpyVizzu.changeAnalyticsTo({analytics});' class-attribute instance-attribute Call changeAnalyticsTo JavaScript method. ANIMATE: str = 'window.ipyvizzu.animate(element, ' + \"'{chart_id}', '{anim_id}', '{display_target}', {scroll}, \" + 'lib => {{ return {chart_target} }}, {chart_anim_opts});' class-attribute instance-attribute Call animate JavaScript method. FEATURE: str = \"window.ipyvizzu.feature(element, '{chart_id}', '{name}', {enabled});\" class-attribute instance-attribute Call feature JavaScript method. STORE: str = \"window.ipyvizzu.store(element, '{chart_id}', '{id}');\" class-attribute instance-attribute Call store JavaScript method. SET_EVENT: str = 'window.ipyvizzu.setEvent(element, ' + \"'{chart_id}', '{id}', '{event}', event => {{ {handler} }});\" class-attribute instance-attribute Call setEvent JavaScript method. CLEAR_EVENT: str = \"window.ipyvizzu.clearEvent(element, '{chart_id}', '{id}', '{event}');\" class-attribute instance-attribute Call clearEvent JavaScript method. LOG: str = \"window.ipyvizzu.log(element, '{chart_id}', '{chart_property}');\" class-attribute instance-attribute Call log JavaScript method. CONTROL: str = \"window.ipyvizzu.control(element, '{method}', {params});\" class-attribute instance-attribute Call animation control JavaScript methods. CLEAR_INHIBITSCROLL: str = 'if (window.IpyVizzu) { window.IpyVizzu.clearInhibitScroll(element); }' class-attribute instance-attribute Call clearInhibitScroll JavaScript method if ipyvizzu JavaScript class exists.","title":"Code reference"},{"location":"reference/ipyvizzu/#ipyvizzu.Chart","text":"A class for representing a wrapper over Vizzu chart. Source code in src/ipyvizzu/chart.py class Chart: \"\"\"A class for representing a wrapper over Vizzu chart.\"\"\" # pylint: disable=too-many-instance-attributes VIZZU: str = \"https://cdn.jsdelivr.net/npm/vizzu@0.8/dist/vizzu.min.js\" \"\"\"A variable for storing the default url of vizzu package.\"\"\" def __init__( self, vizzu: str = VIZZU, width: str = \"800px\", height: str = \"480px\", display: Union[DisplayTarget, str] = DisplayTarget.ACTUAL, ): \"\"\" Chart constructor. Args: vizzu: The url of Vizzu JavaScript package. width: The width of the chart. height: The height of the chart. display: The display behaviour of the chart. \"\"\" self._chart_id: str = uuid.uuid4().hex[:7] self._vizzu: str = vizzu self._width: str = width self._height: str = height self._display_target: DisplayTarget = DisplayTarget(display) self._calls: List[str] = [] self._last_anim: Optional[str] = None self._showed: bool = False self._initialized: bool = False self._analytics: bool = True self._scroll_into_view: bool = False @staticmethod def _register_events() -> None: ipy = get_ipython() if ipy is not None: ipy.events.register(\"pre_run_cell\", Chart._register_pre_run_cell) @staticmethod def _register_pre_run_cell() -> None: display_javascript(DisplayTemplate.CLEAR_INHIBITSCROLL, raw=True) @property def analytics(self) -> bool: \"\"\" A property for enabling/disabling the usage statistics feature. The usage statistics feature allows aggregate usage data collection using Plausible's algorithm. Enabling this feature helps us follow the progress and overall trends of our library, allowing us to focus our resources effectively and better serve our users. We do not track, collect, or store any personal data or personally identifiable information. All data is isolated to a single day, a single site, and a single device only. Please note that even when this feature is enabled, publishing anything made with `ipyvizzu` remains GDPR compatible. Returns: The value of the property (default `True`). \"\"\" return self._analytics @analytics.setter def analytics(self, analytics: Optional[bool]) -> None: self._analytics = bool(analytics) if self._initialized: self._display_analytics() @property def scroll_into_view(self) -> bool: \"\"\" A property for turning on/off the scroll into view feature. Returns: The value of the property (default `False`). \"\"\" return self._scroll_into_view @scroll_into_view.setter def scroll_into_view(self, scroll_into_view: Optional[bool]) -> None: self._scroll_into_view = bool(scroll_into_view) @property def control(self) -> AnimationControl: \"\"\" A property for returning a control object of the last animation. Raises: AssertionError: If called before any animation plays. Returns: The control object of the last animation. \"\"\" assert self._last_anim, \"must be used after an animation.\" return AnimationControl(self._chart_id, self._last_anim, self._display) def initializing(self) -> None: \"\"\"A method for initializing the chart.\"\"\" if not self._initialized: self._initialized = True self._display_ipyvizzujs() self._display_analytics() if self._display_target != DisplayTarget.MANUAL: Chart._register_events() self._display_chart() def _display_ipyvizzujs(self) -> None: ipyvizzurawjs = pkgutil.get_data(__name__, \"templates/ipyvizzu.js\") ipyvizzujs = ipyvizzurawjs.decode(\"utf-8\").replace( # type: ignore '\"__version__\"', f'\"{__version__}\"' ) self._display(DisplayTemplate.IPYVIZZUJS.format(ipyvizzujs=ipyvizzujs)) def _display_analytics(self) -> None: self._display( DisplayTemplate.CHANGE_ANALYTICS_TO.format( analytics=str(self._analytics).lower() ) ) def _display_chart(self) -> None: self._display( DisplayTemplate.INIT.format( chart_id=self._chart_id, vizzu=self._vizzu, div_width=self._width, div_height=self._height, ) ) def animate( self, *animations: AbstractAnimation, **options: Optional[Union[str, int, float, dict]], ) -> None: \"\"\" A method for changing the state of the chart. Args: *animations: List of AbstractAnimation inherited objects such as [Data][ipyvizzu.animation.Data], [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style]. **options: Dictionary of animation options for example `duration=1`. For information on all available animation options see the [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/interfaces/Anim.Options/#properties). Raises: ValueError: If `animations` is not set. Example: Reset the chart styles: chart.animate(Style(None)) \"\"\" # pylint: disable=line-too-long if not animations: raise ValueError(\"No animation was set.\") animation = AnimationMerger.merge_animations(animations) animate = Animate(animation, options) self._last_anim = uuid.uuid4().hex[:7] self._display( DisplayTemplate.ANIMATE.format( display_target=self._display_target.value, chart_id=self._chart_id, anim_id=self._last_anim, scroll=str(self._scroll_into_view).lower(), **animate.dump(), ) ) def feature(self, name: str, enabled: bool) -> None: \"\"\" A method for turning on/off features of the chart. Args: name: The name of the chart feature. For information on all available features see the [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/modules/#feature). enabled: The new state of the chart feature. Example: Turn on `tooltip` of the chart: chart.feature(\"tooltip\", True) \"\"\" # pylint: disable=line-too-long self._display( DisplayTemplate.FEATURE.format( chart_id=self._chart_id, **Feature(name, enabled).dump(), ) ) def store(self) -> Snapshot: \"\"\" A method for saving and storing the actual state of the chart. Returns: A Snapshot object wich stores the actual state of the chart. Example: Save and restore the actual state of the chart: snapshot = chart.store() ... chart.animate(snapshot) \"\"\" snapshot_id = uuid.uuid4().hex[:7] self._display( DisplayTemplate.STORE.format( chart_id=self._chart_id, **Store(snapshot_id).dump() ) ) return Snapshot(snapshot_id) def on( # pylint: disable=invalid-name self, event: str, handler: str ) -> EventHandler: \"\"\" A method for creating and turning on an event handler. Args: event: The type of the event. For information on all available events see the [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/modules/Event/#type). handler: The JavaScript method of the event. Returns: The turned on event handler object. Example: Turn on an event handler which prints an alert message when someone clicks on the chart: handler = chart.on(\"click\", \"alert(JSON.stringify(event.data));\") \"\"\" # pylint: disable=line-too-long event_handler = EventHandler(event, handler) self._display( DisplayTemplate.SET_EVENT.format( chart_id=self._chart_id, **EventOn(event_handler).dump(), ) ) return event_handler def off(self, event_handler: EventHandler) -> None: \"\"\" A method for turning off an event handler. Args: event_handler: A previously created event handler object. Example: Turn off a previously created event handler: chart.off(handler) \"\"\" self._display( DisplayTemplate.CLEAR_EVENT.format( chart_id=self._chart_id, **EventOff(event_handler).dump(), ) ) def log(self, chart_property: ChartProperty) -> None: \"\"\" A method for printing chart properties to the browser console. Args: chart_property: A chart property such as [CONFIG][ipyvizzu.template.ChartProperty] and [STYLE][ipyvizzu.template.ChartProperty]. Example: Log the actual style of the chart to the browser console: chart.log(ChartProperty.STYLE) \"\"\" self._display( DisplayTemplate.LOG.format( chart_id=self._chart_id, **Log(chart_property).dump() ) ) def _repr_html_(self) -> str: assert ( self._display_target == DisplayTarget.MANUAL ), \"chart._repr_html_() can be used with display=DisplayTarget.MANUAL only\" assert not self._showed, \"cannot be used after chart displayed.\" self._showed = True if not self._initialized: return \"\" html_id = uuid.uuid4().hex[:7] script = ( self._calls[0] + \"\\n\" + \"\\n\".join(self._calls[1:]).replace( \"element\", f'document.getElementById(\"{html_id}\")' ) ) return f'<div id=\"{html_id}\"><script>{script}</script></div>' def show(self) -> None: \"\"\" A method for displaying the assembled JavaScript code. Raises: AssertionError: If [display][ipyvizzu.Chart.__init__] is not [DisplayTarget.MANUAL][ipyvizzu.template.DisplayTarget]. AssertionError: If chart already has been displayed. \"\"\" assert ( self._display_target == DisplayTarget.MANUAL ), \"chart.show() can be used with display=DisplayTarget.MANUAL only\" assert not self._showed, \"cannot be used after chart displayed\" display_javascript( \"\\n\".join(self._calls), raw=True, ) self._showed = True def _display(self, javascript: str) -> None: if not self._initialized: self.initializing() if self._display_target != DisplayTarget.MANUAL: display_javascript( javascript, raw=True, ) else: assert not self._showed, \"cannot be used after chart displayed\" self._calls.append(javascript)","title":"Chart"},{"location":"reference/ipyvizzu/#ipyvizzu.chart.Chart.VIZZU","text":"A variable for storing the default url of vizzu package.","title":"VIZZU"},{"location":"reference/ipyvizzu/#ipyvizzu.chart.Chart.analytics","text":"A property for enabling/disabling the usage statistics feature. The usage statistics feature allows aggregate usage data collection using Plausible's algorithm. Enabling this feature helps us follow the progress and overall trends of our library, allowing us to focus our resources effectively and better serve our users. We do not track, collect, or store any personal data or personally identifiable information. All data is isolated to a single day, a single site, and a single device only. Please note that even when this feature is enabled, publishing anything made with ipyvizzu remains GDPR compatible. Returns: Type Description bool The value of the property (default True ).","title":"analytics"},{"location":"reference/ipyvizzu/#ipyvizzu.chart.Chart.scroll_into_view","text":"A property for turning on/off the scroll into view feature. Returns: Type Description bool The value of the property (default False ).","title":"scroll_into_view"},{"location":"reference/ipyvizzu/#ipyvizzu.chart.Chart.control","text":"A property for returning a control object of the last animation. Raises: Type Description AssertionError If called before any animation plays. Returns: Type Description AnimationControl The control object of the last animation.","title":"control"},{"location":"reference/ipyvizzu/#ipyvizzu.chart.Chart.__init__","text":"Chart constructor. Parameters: Name Type Description Default vizzu str The url of Vizzu JavaScript package. VIZZU width str The width of the chart. '800px' height str The height of the chart. '480px' display Union [ DisplayTarget , str ] The display behaviour of the chart. DisplayTarget . ACTUAL Source code in src/ipyvizzu/chart.py def __init__( self, vizzu: str = VIZZU, width: str = \"800px\", height: str = \"480px\", display: Union[DisplayTarget, str] = DisplayTarget.ACTUAL, ): \"\"\" Chart constructor. Args: vizzu: The url of Vizzu JavaScript package. width: The width of the chart. height: The height of the chart. display: The display behaviour of the chart. \"\"\" self._chart_id: str = uuid.uuid4().hex[:7] self._vizzu: str = vizzu self._width: str = width self._height: str = height self._display_target: DisplayTarget = DisplayTarget(display) self._calls: List[str] = [] self._last_anim: Optional[str] = None self._showed: bool = False self._initialized: bool = False self._analytics: bool = True self._scroll_into_view: bool = False","title":"__init__()"},{"location":"reference/ipyvizzu/#ipyvizzu.chart.Chart.initializing","text":"A method for initializing the chart. Source code in src/ipyvizzu/chart.py def initializing(self) -> None: \"\"\"A method for initializing the chart.\"\"\" if not self._initialized: self._initialized = True self._display_ipyvizzujs() self._display_analytics() if self._display_target != DisplayTarget.MANUAL: Chart._register_events() self._display_chart()","title":"initializing()"},{"location":"reference/ipyvizzu/#ipyvizzu.chart.Chart.animate","text":"A method for changing the state of the chart. Parameters: Name Type Description Default *animations AbstractAnimation List of AbstractAnimation inherited objects such as Data , Config and Style . () **options Optional [ Union [ str , int , float , dict ]] Dictionary of animation options for example duration=1 . For information on all available animation options see the Vizzu Code reference . {} Raises: Type Description ValueError If animations is not set. Example Reset the chart styles: chart.animate(Style(None)) Source code in src/ipyvizzu/chart.py def animate( self, *animations: AbstractAnimation, **options: Optional[Union[str, int, float, dict]], ) -> None: \"\"\" A method for changing the state of the chart. Args: *animations: List of AbstractAnimation inherited objects such as [Data][ipyvizzu.animation.Data], [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style]. **options: Dictionary of animation options for example `duration=1`. For information on all available animation options see the [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/interfaces/Anim.Options/#properties). Raises: ValueError: If `animations` is not set. Example: Reset the chart styles: chart.animate(Style(None)) \"\"\" # pylint: disable=line-too-long if not animations: raise ValueError(\"No animation was set.\") animation = AnimationMerger.merge_animations(animations) animate = Animate(animation, options) self._last_anim = uuid.uuid4().hex[:7] self._display( DisplayTemplate.ANIMATE.format( display_target=self._display_target.value, chart_id=self._chart_id, anim_id=self._last_anim, scroll=str(self._scroll_into_view).lower(), **animate.dump(), ) )","title":"animate()"},{"location":"reference/ipyvizzu/#ipyvizzu.chart.Chart.feature","text":"A method for turning on/off features of the chart. Parameters: Name Type Description Default name str The name of the chart feature. For information on all available features see the Vizzu Code reference . required enabled bool The new state of the chart feature. required Example Turn on tooltip of the chart: chart.feature(\"tooltip\", True) Source code in src/ipyvizzu/chart.py def feature(self, name: str, enabled: bool) -> None: \"\"\" A method for turning on/off features of the chart. Args: name: The name of the chart feature. For information on all available features see the [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/modules/#feature). enabled: The new state of the chart feature. Example: Turn on `tooltip` of the chart: chart.feature(\"tooltip\", True) \"\"\" # pylint: disable=line-too-long self._display( DisplayTemplate.FEATURE.format( chart_id=self._chart_id, **Feature(name, enabled).dump(), ) )","title":"feature()"},{"location":"reference/ipyvizzu/#ipyvizzu.chart.Chart.store","text":"A method for saving and storing the actual state of the chart. Returns: Type Description Snapshot A Snapshot object wich stores the actual state of the chart. Example Save and restore the actual state of the chart: snapshot = chart.store() ... chart.animate(snapshot) Source code in src/ipyvizzu/chart.py def store(self) -> Snapshot: \"\"\" A method for saving and storing the actual state of the chart. Returns: A Snapshot object wich stores the actual state of the chart. Example: Save and restore the actual state of the chart: snapshot = chart.store() ... chart.animate(snapshot) \"\"\" snapshot_id = uuid.uuid4().hex[:7] self._display( DisplayTemplate.STORE.format( chart_id=self._chart_id, **Store(snapshot_id).dump() ) ) return Snapshot(snapshot_id)","title":"store()"},{"location":"reference/ipyvizzu/#ipyvizzu.chart.Chart.on","text":"A method for creating and turning on an event handler. Parameters: Name Type Description Default event str The type of the event. For information on all available events see the Vizzu Code reference . required handler str The JavaScript method of the event. required Returns: Type Description EventHandler The turned on event handler object. Example Turn on an event handler which prints an alert message when someone clicks on the chart: handler = chart.on(\"click\", \"alert(JSON.stringify(event.data));\") Source code in src/ipyvizzu/chart.py def on( # pylint: disable=invalid-name self, event: str, handler: str ) -> EventHandler: \"\"\" A method for creating and turning on an event handler. Args: event: The type of the event. For information on all available events see the [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/modules/Event/#type). handler: The JavaScript method of the event. Returns: The turned on event handler object. Example: Turn on an event handler which prints an alert message when someone clicks on the chart: handler = chart.on(\"click\", \"alert(JSON.stringify(event.data));\") \"\"\" # pylint: disable=line-too-long event_handler = EventHandler(event, handler) self._display( DisplayTemplate.SET_EVENT.format( chart_id=self._chart_id, **EventOn(event_handler).dump(), ) ) return event_handler","title":"on()"},{"location":"reference/ipyvizzu/#ipyvizzu.chart.Chart.off","text":"A method for turning off an event handler. Parameters: Name Type Description Default event_handler EventHandler A previously created event handler object. required Example Turn off a previously created event handler: chart.off(handler) Source code in src/ipyvizzu/chart.py def off(self, event_handler: EventHandler) -> None: \"\"\" A method for turning off an event handler. Args: event_handler: A previously created event handler object. Example: Turn off a previously created event handler: chart.off(handler) \"\"\" self._display( DisplayTemplate.CLEAR_EVENT.format( chart_id=self._chart_id, **EventOff(event_handler).dump(), ) )","title":"off()"},{"location":"reference/ipyvizzu/#ipyvizzu.chart.Chart.log","text":"A method for printing chart properties to the browser console. Parameters: Name Type Description Default chart_property ChartProperty A chart property such as CONFIG and STYLE . required Example Log the actual style of the chart to the browser console: chart.log(ChartProperty.STYLE) Source code in src/ipyvizzu/chart.py def log(self, chart_property: ChartProperty) -> None: \"\"\" A method for printing chart properties to the browser console. Args: chart_property: A chart property such as [CONFIG][ipyvizzu.template.ChartProperty] and [STYLE][ipyvizzu.template.ChartProperty]. Example: Log the actual style of the chart to the browser console: chart.log(ChartProperty.STYLE) \"\"\" self._display( DisplayTemplate.LOG.format( chart_id=self._chart_id, **Log(chart_property).dump() ) )","title":"log()"},{"location":"reference/ipyvizzu/#ipyvizzu.chart.Chart.show","text":"A method for displaying the assembled JavaScript code. Raises: Type Description AssertionError If display is not DisplayTarget.MANUAL . AssertionError If chart already has been displayed. Source code in src/ipyvizzu/chart.py def show(self) -> None: \"\"\" A method for displaying the assembled JavaScript code. Raises: AssertionError: If [display][ipyvizzu.Chart.__init__] is not [DisplayTarget.MANUAL][ipyvizzu.template.DisplayTarget]. AssertionError: If chart already has been displayed. \"\"\" assert ( self._display_target == DisplayTarget.MANUAL ), \"chart.show() can be used with display=DisplayTarget.MANUAL only\" assert not self._showed, \"cannot be used after chart displayed\" display_javascript( \"\\n\".join(self._calls), raw=True, ) self._showed = True","title":"show()"},{"location":"reference/ipyvizzu/#ipyvizzu.Data","text":"Bases: dict , AbstractAnimation A class for representing data animation. It can build data option of the chart. Source code in src/ipyvizzu/animation.py class Data(dict, AbstractAnimation): \"\"\" A class for representing data animation. It can build data option of the chart. \"\"\" @classmethod def filter(cls, filter_expr: Optional[str] = None) -> \"Data\": \"\"\" A class method for creating a [Data][ipyvizzu.animation.Data] class instance with a data filter. Args: filter_expr: The JavaScript data filter expression. Returns: (Data): A data animation instance that contains a data filter. Example: Create a [Data][ipyvizzu.animation.Data] class with a data filter: filter = Data.filter(\"record['Genres'] == 'Pop'\") \"\"\" data = cls() data.set_filter(filter_expr) return data def set_filter(self, filter_expr: Optional[str] = None) -> None: \"\"\" A method for adding a filter to an existing [Data][ipyvizzu.animation.Data] class instance. Args: filter_expr: The JavaScript data filter expression. Example: Add a data filter to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.set_filter(\"record['Genres'] == 'Pop'\") \"\"\" filter_expr_raw_js = ( RawJavaScript(f\"record => {{ return ({' '.join(filter_expr.split())}) }}\") if filter_expr is not None else filter_expr ) self.update({\"filter\": filter_expr_raw_js}) @classmethod def from_json(cls, filename: Union[str, bytes, PathLike]) -> \"Data\": \"\"\" A method for returning a [Data][ipyvizzu.animation.Data] class instance which has been created from a json file. Args: filename: The path of the data source json file. Returns: (Data): A data animation instance that has been created from a json file. \"\"\" with open(filename, \"r\", encoding=\"utf8\") as file_desc: return cls(json.load(file_desc)) def add_record(self, record: Record) -> None: \"\"\" A method for adding a record to an existing [Data][ipyvizzu.animation.Data] class instance. Args: record: A list that contains data values. Example: Adding a record to a [Data][ipyvizzu.animation.Data] class instance: data = Data() record = [\"Pop\", \"Hard\", 114] data.add_record(record) \"\"\" self._add_value(\"records\", record) def add_records(self, records: List[Record]) -> None: \"\"\" A method for adding records to an existing [Data][ipyvizzu.animation.Data] class instance. Args: records: A list that contains data records. Example: Adding records to a [Data][ipyvizzu.animation.Data] class instance: data = Data() records = [ [\"Pop\", \"Hard\", 114], [\"Rock\", \"Hard\", 96], [\"Pop\", \"Experimental\", 127], [\"Rock\", \"Experimental\", 83], ] data.add_records(records) \"\"\" list(map(self.add_record, records)) def add_series( self, name: str, values: Optional[SeriesValues] = None, **kwargs ) -> None: \"\"\" A method for adding a series to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the series. values: The data values of the series. **kwargs (Optional): Arbitrary keyword arguments. For example infer type can be set with the `type` keywod argument. Example: Adding a series without values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series(\"Genres\") Adding a series without values and with infer type to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series(\"Kinds\", type=\"dimension\") Adding a series with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series( \"Popularity\", [114, 96, 127, 83] ) \"\"\" self._add_named_value(\"series\", name, values, **kwargs) def add_series_list(self, series: List[Series]) -> None: \"\"\" A method for adding list of series to an existing [Data][ipyvizzu.animation.Data] class instance. Args: series: List of series. \"\"\" if series: self.setdefault(\"series\", []).extend(series) def add_dimension( self, name: str, values: Optional[List[DimensionValue]] = None, **kwargs ) -> None: \"\"\" A method for adding a dimension to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the dimension. values: The data values of the dimension. **kwargs (Optional): Arbitrary keyword arguments. Example: Adding a dimension with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_dimension(\"Genres\", [\"Pop\", \"Rock\"]) \"\"\" self._add_named_value(\"dimensions\", name, values, **kwargs) def add_measure( self, name: str, values: Optional[NestedMeasureValues] = None, **kwargs ) -> None: \"\"\" A method for adding a measure to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the measure. values: The data values of the measure. **kwargs (Optional): Arbitrary keyword arguments. Example: Adding a measure with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_measure( \"Popularity\", [ [114, 96], [127, 83], ], ) \"\"\" self._add_named_value(\"measures\", name, values, **kwargs) def add_df( self, df: Optional[ # type: ignore Union[ \"pandas.DataFrame\", \"pandas.Series\", \"pyspark.sql.DataFrame\", ] ], default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, max_rows: int = MAX_ROWS, include_index: Optional[str] = None, ) -> None: \"\"\" Add a `pandas` `DataFrame`, `Series` or a `pyspark` `DataFrame` to an existing [Data][ipyvizzu.animation.Data] class instance. Args: df: The `pandas` `DataFrame`, `Series` or the `pyspark` `DataFrame`to add. default_measure_value: The default measure value to fill empty values. Defaults to 0. default_dimension_value: The default dimension value to fill empty values. Defaults to an empty string. max_rows: The maximum number of rows to include in the converted series list. If the `df` contains more rows, a random sample of the given number of rows (approximately) will be taken. include_index: Add the data frame's index as a column with the given name. Defaults to `None`. (Cannot be used with `pyspark` `DataFrame`.) Example: Adding a data frame to a [Data][ipyvizzu.animation.Data] class instance: df = pd.DataFrame( { \"Genres\": [\"Pop\", \"Rock\", \"Pop\", \"Rock\"], \"Kinds\": [\"Hard\", \"Hard\", \"Experimental\", \"Experimental\"], \"Popularity\": [114, 96, 127, 83], } ) data = Data() data.add_df(df) \"\"\" # pylint: disable=too-many-arguments if not isinstance(df, type(None)): arguments = { \"df\": df, \"default_measure_value\": default_measure_value, \"default_dimension_value\": default_dimension_value, \"max_rows\": max_rows, \"include_index\": include_index, } Converter: Union[ Type[PandasDataFrameConverter], Type[SparkDataFrameConverter] ] = PandasDataFrameConverter if isinstance(df, SparkDataFrame): Converter = SparkDataFrameConverter if arguments[\"include_index\"] is not None: raise ValueError( \"`include_index` cannot be used with `pyspark` `DataFrame`\" ) del arguments[\"include_index\"] converter = Converter(**arguments) # type: ignore series_list = converter.get_series_list() self.add_series_list(series_list) def add_data_frame( self, data_frame: Optional[Union[\"pandas.DataFrame\", \"pandas.Series\"]], # type: ignore default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, ) -> None: \"\"\" [Deprecated] This function is deprecated and will be removed in future versions. Use [add_df][ipyvizzu.animation.Data.add_df] function instead. Add a `pandas` `DataFrame` or `Series` to an existing [Data][ipyvizzu.animation.Data] class instance. Args: data_frame: The `pandas` `DataFrame` or `Series` to add. default_measure_value: The default measure value to fill empty values. Defaults to 0. default_dimension_value: The default dimension value to fill empty values. Defaults to an empty string. \"\"\" # pylint: disable=line-too-long reference = \"https://ipyvizzu.vizzuhq.com/0.16/reference/ipyvizzu/animation/#ipyvizzu.animation.Data.add_df\" warnings.warn( f\"'add_data_frame' is deprecated and will be removed in future versions. Use 'add_df' instead - see {reference}\", DeprecationWarning, stacklevel=2, ) self.add_df(data_frame, default_measure_value, default_dimension_value) def add_df_index( self, df: Optional[Union[\"pandas.DataFrame\", \"pandas.Series\"]], # type: ignore column_name: str = \"Index\", ) -> None: \"\"\" Add the index of a `pandas` `DataFrame` as a series to an existing [Data][ipyvizzu.animation.Data] class instance. Args: df: The `pandas` `DataFrame` or `Series` from which to extract the index. column_name: Name for the index column to add as a series. Example: Adding a data frame's index to a [Data][ipyvizzu.animation.Data] class instance: df = pd.DataFrame( {\"Popularity\": [114, 96]}, index=[\"x\", \"y\"] ) data = Data() data.add_df_index(df, \"DataFrameIndex\") data.add_df(df) \"\"\" if not isinstance(df, type(None)): converter = PandasDataFrameConverter(df, include_index=column_name) series_list = converter.get_series_from_index() self.add_series_list(series_list) def add_data_frame_index( self, data_frame: Optional[Union[\"pandas.DataFrame\", \"pandas.Series\"]], # type: ignore name: str, ) -> None: \"\"\" [Deprecated] This function is deprecated and will be removed in future versions. Use [add_df_index][ipyvizzu.animation.Data.add_df_index] function instead. Add the index of a `pandas` `DataFrame` as a series to an existing [Data][ipyvizzu.animation.Data] class instance. Args: data_frame: The `pandas` `DataFrame` or `Series` from which to extract the index. name: The name of the index series. \"\"\" # pylint: disable=line-too-long reference = \"https://ipyvizzu.vizzuhq.com/0.16/reference/ipyvizzu/animation/#ipyvizzu.animation.Data.add_df_index\" warnings.warn( f\"'add_data_frame_index' is deprecated and will be removed in future versions. Use 'add_df_index' instead - see {reference}\", DeprecationWarning, stacklevel=2, ) self.add_df_index(data_frame, name) def add_np_array( self, np_array: Optional[\"numpy.array\"], # type: ignore column_name: Optional[ColumnName] = None, column_dtype: Optional[ColumnDtype] = None, default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, ) -> None: \"\"\" Add a `numpy` `array` to an existing [Data][ipyvizzu.animation.Data] class instance. Args: np_array: The `numpy` `array` to add. column_name: The name of a column. By default, uses column indices. Can be set with an Index:Name pair or, for single-dimensional arrays, with just the Name. column_dtype: The dtype of a column. By default, uses the np_array's dtype. Can be set with an Index:DType pair or, for single-dimensional arrays, with just the DType. default_measure_value: Default value to use for missing measure values. Defaults to 0. default_dimension_value: Default value to use for missing dimension values. Defaults to an empty string. Example: Adding a data frame to a [Data][ipyvizzu.animation.Data] class instance: np_array = np.zeros((3, 4)) data = Data() data.add_np_array(np_array) \"\"\" # pylint: disable=too-many-arguments if not isinstance(np_array, type(None)): converter = NumpyArrayConverter( np_array, column_name, column_dtype, default_measure_value, default_dimension_value, ) series_list = converter.get_series_list() self.add_series_list(series_list) def _add_named_value( self, dest: str, name: str, values: Optional[ Union[ SeriesValues, NestedMeasureValues, ] ] = None, **kwargs, ) -> None: value = {\"name\": name, **kwargs} if values is not None: value[\"values\"] = values self._add_value(dest, value) def _add_value(self, dest: str, value: Union[dict, list]) -> None: self.setdefault(dest, []).append(value) def build(self) -> dict: \"\"\" A method for validating and returning the data animation dictionary. Returns: A dictionary that stored in the data animation object. It contains a `data` key whose value is the stored animation. \"\"\" jsonschema.validate(self, DATA_SCHEMA) return {\"data\": self}","title":"Data"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Data.filter","text":"A class method for creating a Data class instance with a data filter. Parameters: Name Type Description Default filter_expr Optional [ str ] The JavaScript data filter expression. None Returns: Type Description Data A data animation instance that contains a data filter. Example Create a Data class with a data filter: filter = Data.filter(\"record['Genres'] == 'Pop'\") Source code in src/ipyvizzu/animation.py @classmethod def filter(cls, filter_expr: Optional[str] = None) -> \"Data\": \"\"\" A class method for creating a [Data][ipyvizzu.animation.Data] class instance with a data filter. Args: filter_expr: The JavaScript data filter expression. Returns: (Data): A data animation instance that contains a data filter. Example: Create a [Data][ipyvizzu.animation.Data] class with a data filter: filter = Data.filter(\"record['Genres'] == 'Pop'\") \"\"\" data = cls() data.set_filter(filter_expr) return data","title":"filter()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Data.set_filter","text":"A method for adding a filter to an existing Data class instance. Parameters: Name Type Description Default filter_expr Optional [ str ] The JavaScript data filter expression. None Example Add a data filter to a Data class instance: data = Data() data.set_filter(\"record['Genres'] == 'Pop'\") Source code in src/ipyvizzu/animation.py def set_filter(self, filter_expr: Optional[str] = None) -> None: \"\"\" A method for adding a filter to an existing [Data][ipyvizzu.animation.Data] class instance. Args: filter_expr: The JavaScript data filter expression. Example: Add a data filter to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.set_filter(\"record['Genres'] == 'Pop'\") \"\"\" filter_expr_raw_js = ( RawJavaScript(f\"record => {{ return ({' '.join(filter_expr.split())}) }}\") if filter_expr is not None else filter_expr ) self.update({\"filter\": filter_expr_raw_js})","title":"set_filter()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Data.from_json","text":"A method for returning a Data class instance which has been created from a json file. Parameters: Name Type Description Default filename Union [ str , bytes , PathLike ] The path of the data source json file. required Returns: Type Description Data A data animation instance that has been created from a json file. Source code in src/ipyvizzu/animation.py @classmethod def from_json(cls, filename: Union[str, bytes, PathLike]) -> \"Data\": \"\"\" A method for returning a [Data][ipyvizzu.animation.Data] class instance which has been created from a json file. Args: filename: The path of the data source json file. Returns: (Data): A data animation instance that has been created from a json file. \"\"\" with open(filename, \"r\", encoding=\"utf8\") as file_desc: return cls(json.load(file_desc))","title":"from_json()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Data.add_record","text":"A method for adding a record to an existing Data class instance. Parameters: Name Type Description Default record Record A list that contains data values. required Example Adding a record to a Data class instance: data = Data() record = [\"Pop\", \"Hard\", 114] data.add_record(record) Source code in src/ipyvizzu/animation.py def add_record(self, record: Record) -> None: \"\"\" A method for adding a record to an existing [Data][ipyvizzu.animation.Data] class instance. Args: record: A list that contains data values. Example: Adding a record to a [Data][ipyvizzu.animation.Data] class instance: data = Data() record = [\"Pop\", \"Hard\", 114] data.add_record(record) \"\"\" self._add_value(\"records\", record)","title":"add_record()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Data.add_records","text":"A method for adding records to an existing Data class instance. Parameters: Name Type Description Default records List [ Record ] A list that contains data records. required Example Adding records to a Data class instance: data = Data() records = [ [\"Pop\", \"Hard\", 114], [\"Rock\", \"Hard\", 96], [\"Pop\", \"Experimental\", 127], [\"Rock\", \"Experimental\", 83], ] data.add_records(records) Source code in src/ipyvizzu/animation.py def add_records(self, records: List[Record]) -> None: \"\"\" A method for adding records to an existing [Data][ipyvizzu.animation.Data] class instance. Args: records: A list that contains data records. Example: Adding records to a [Data][ipyvizzu.animation.Data] class instance: data = Data() records = [ [\"Pop\", \"Hard\", 114], [\"Rock\", \"Hard\", 96], [\"Pop\", \"Experimental\", 127], [\"Rock\", \"Experimental\", 83], ] data.add_records(records) \"\"\" list(map(self.add_record, records))","title":"add_records()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Data.add_series","text":"A method for adding a series to an existing Data class instance. Parameters: Name Type Description Default name str The name of the series. required values Optional [ SeriesValues ] The data values of the series. None **kwargs Optional Arbitrary keyword arguments. For example infer type can be set with the type keywod argument. {} Example Adding a series without values to a Data class instance: data = Data() data.add_series(\"Genres\") Adding a series without values and with infer type to a Data class instance: data = Data() data.add_series(\"Kinds\", type=\"dimension\") Adding a series with values to a Data class instance: data = Data() data.add_series( \"Popularity\", [114, 96, 127, 83] ) Source code in src/ipyvizzu/animation.py def add_series( self, name: str, values: Optional[SeriesValues] = None, **kwargs ) -> None: \"\"\" A method for adding a series to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the series. values: The data values of the series. **kwargs (Optional): Arbitrary keyword arguments. For example infer type can be set with the `type` keywod argument. Example: Adding a series without values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series(\"Genres\") Adding a series without values and with infer type to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series(\"Kinds\", type=\"dimension\") Adding a series with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series( \"Popularity\", [114, 96, 127, 83] ) \"\"\" self._add_named_value(\"series\", name, values, **kwargs)","title":"add_series()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Data.add_series_list","text":"A method for adding list of series to an existing Data class instance. Parameters: Name Type Description Default series List [ Series ] List of series. required Source code in src/ipyvizzu/animation.py def add_series_list(self, series: List[Series]) -> None: \"\"\" A method for adding list of series to an existing [Data][ipyvizzu.animation.Data] class instance. Args: series: List of series. \"\"\" if series: self.setdefault(\"series\", []).extend(series)","title":"add_series_list()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Data.add_dimension","text":"A method for adding a dimension to an existing Data class instance. Parameters: Name Type Description Default name str The name of the dimension. required values Optional [ List [ DimensionValue ]] The data values of the dimension. None **kwargs Optional Arbitrary keyword arguments. {} Example Adding a dimension with values to a Data class instance: data = Data() data.add_dimension(\"Genres\", [\"Pop\", \"Rock\"]) Source code in src/ipyvizzu/animation.py def add_dimension( self, name: str, values: Optional[List[DimensionValue]] = None, **kwargs ) -> None: \"\"\" A method for adding a dimension to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the dimension. values: The data values of the dimension. **kwargs (Optional): Arbitrary keyword arguments. Example: Adding a dimension with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_dimension(\"Genres\", [\"Pop\", \"Rock\"]) \"\"\" self._add_named_value(\"dimensions\", name, values, **kwargs)","title":"add_dimension()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Data.add_measure","text":"A method for adding a measure to an existing Data class instance. Parameters: Name Type Description Default name str The name of the measure. required values Optional [ NestedMeasureValues ] The data values of the measure. None **kwargs Optional Arbitrary keyword arguments. {} Example Adding a measure with values to a Data class instance: data = Data() data.add_measure( \"Popularity\", [ [114, 96], [127, 83], ], ) Source code in src/ipyvizzu/animation.py def add_measure( self, name: str, values: Optional[NestedMeasureValues] = None, **kwargs ) -> None: \"\"\" A method for adding a measure to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the measure. values: The data values of the measure. **kwargs (Optional): Arbitrary keyword arguments. Example: Adding a measure with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_measure( \"Popularity\", [ [114, 96], [127, 83], ], ) \"\"\" self._add_named_value(\"measures\", name, values, **kwargs)","title":"add_measure()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Data.add_df","text":"Add a pandas DataFrame , Series or a pyspark DataFrame to an existing Data class instance. Parameters: Name Type Description Default df Optional [ Union [ pandas . DataFrame , pandas . Series , pyspark . sql . DataFrame ]] The pandas DataFrame , Series or the pyspark DataFrame to add. required default_measure_value MeasureValue The default measure value to fill empty values. Defaults to 0. NAN_MEASURE default_dimension_value DimensionValue The default dimension value to fill empty values. Defaults to an empty string. NAN_DIMENSION max_rows int The maximum number of rows to include in the converted series list. If the df contains more rows, a random sample of the given number of rows (approximately) will be taken. MAX_ROWS include_index Optional [ str ] Add the data frame's index as a column with the given name. Defaults to None . (Cannot be used with pyspark DataFrame .) None Example Adding a data frame to a Data class instance: df = pd.DataFrame( { \"Genres\": [\"Pop\", \"Rock\", \"Pop\", \"Rock\"], \"Kinds\": [\"Hard\", \"Hard\", \"Experimental\", \"Experimental\"], \"Popularity\": [114, 96, 127, 83], } ) data = Data() data.add_df(df) Source code in src/ipyvizzu/animation.py def add_df( self, df: Optional[ # type: ignore Union[ \"pandas.DataFrame\", \"pandas.Series\", \"pyspark.sql.DataFrame\", ] ], default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, max_rows: int = MAX_ROWS, include_index: Optional[str] = None, ) -> None: \"\"\" Add a `pandas` `DataFrame`, `Series` or a `pyspark` `DataFrame` to an existing [Data][ipyvizzu.animation.Data] class instance. Args: df: The `pandas` `DataFrame`, `Series` or the `pyspark` `DataFrame`to add. default_measure_value: The default measure value to fill empty values. Defaults to 0. default_dimension_value: The default dimension value to fill empty values. Defaults to an empty string. max_rows: The maximum number of rows to include in the converted series list. If the `df` contains more rows, a random sample of the given number of rows (approximately) will be taken. include_index: Add the data frame's index as a column with the given name. Defaults to `None`. (Cannot be used with `pyspark` `DataFrame`.) Example: Adding a data frame to a [Data][ipyvizzu.animation.Data] class instance: df = pd.DataFrame( { \"Genres\": [\"Pop\", \"Rock\", \"Pop\", \"Rock\"], \"Kinds\": [\"Hard\", \"Hard\", \"Experimental\", \"Experimental\"], \"Popularity\": [114, 96, 127, 83], } ) data = Data() data.add_df(df) \"\"\" # pylint: disable=too-many-arguments if not isinstance(df, type(None)): arguments = { \"df\": df, \"default_measure_value\": default_measure_value, \"default_dimension_value\": default_dimension_value, \"max_rows\": max_rows, \"include_index\": include_index, } Converter: Union[ Type[PandasDataFrameConverter], Type[SparkDataFrameConverter] ] = PandasDataFrameConverter if isinstance(df, SparkDataFrame): Converter = SparkDataFrameConverter if arguments[\"include_index\"] is not None: raise ValueError( \"`include_index` cannot be used with `pyspark` `DataFrame`\" ) del arguments[\"include_index\"] converter = Converter(**arguments) # type: ignore series_list = converter.get_series_list() self.add_series_list(series_list)","title":"add_df()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Data.add_data_frame","text":"[Deprecated] This function is deprecated and will be removed in future versions. Use add_df function instead. Add a pandas DataFrame or Series to an existing Data class instance. Parameters: Name Type Description Default data_frame Optional [ Union [ pandas . DataFrame , pandas . Series ]] The pandas DataFrame or Series to add. required default_measure_value MeasureValue The default measure value to fill empty values. Defaults to 0. NAN_MEASURE default_dimension_value DimensionValue The default dimension value to fill empty values. Defaults to an empty string. NAN_DIMENSION Source code in src/ipyvizzu/animation.py def add_data_frame( self, data_frame: Optional[Union[\"pandas.DataFrame\", \"pandas.Series\"]], # type: ignore default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, ) -> None: \"\"\" [Deprecated] This function is deprecated and will be removed in future versions. Use [add_df][ipyvizzu.animation.Data.add_df] function instead. Add a `pandas` `DataFrame` or `Series` to an existing [Data][ipyvizzu.animation.Data] class instance. Args: data_frame: The `pandas` `DataFrame` or `Series` to add. default_measure_value: The default measure value to fill empty values. Defaults to 0. default_dimension_value: The default dimension value to fill empty values. Defaults to an empty string. \"\"\" # pylint: disable=line-too-long reference = \"https://ipyvizzu.vizzuhq.com/0.16/reference/ipyvizzu/animation/#ipyvizzu.animation.Data.add_df\" warnings.warn( f\"'add_data_frame' is deprecated and will be removed in future versions. Use 'add_df' instead - see {reference}\", DeprecationWarning, stacklevel=2, ) self.add_df(data_frame, default_measure_value, default_dimension_value)","title":"add_data_frame()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Data.add_df_index","text":"Add the index of a pandas DataFrame as a series to an existing Data class instance. Parameters: Name Type Description Default df Optional [ Union [ pandas . DataFrame , pandas . Series ]] The pandas DataFrame or Series from which to extract the index. required column_name str Name for the index column to add as a series. 'Index' Example Adding a data frame's index to a Data class instance: df = pd.DataFrame( {\"Popularity\": [114, 96]}, index=[\"x\", \"y\"] ) data = Data() data.add_df_index(df, \"DataFrameIndex\") data.add_df(df) Source code in src/ipyvizzu/animation.py def add_df_index( self, df: Optional[Union[\"pandas.DataFrame\", \"pandas.Series\"]], # type: ignore column_name: str = \"Index\", ) -> None: \"\"\" Add the index of a `pandas` `DataFrame` as a series to an existing [Data][ipyvizzu.animation.Data] class instance. Args: df: The `pandas` `DataFrame` or `Series` from which to extract the index. column_name: Name for the index column to add as a series. Example: Adding a data frame's index to a [Data][ipyvizzu.animation.Data] class instance: df = pd.DataFrame( {\"Popularity\": [114, 96]}, index=[\"x\", \"y\"] ) data = Data() data.add_df_index(df, \"DataFrameIndex\") data.add_df(df) \"\"\" if not isinstance(df, type(None)): converter = PandasDataFrameConverter(df, include_index=column_name) series_list = converter.get_series_from_index() self.add_series_list(series_list)","title":"add_df_index()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Data.add_data_frame_index","text":"[Deprecated] This function is deprecated and will be removed in future versions. Use add_df_index function instead. Add the index of a pandas DataFrame as a series to an existing Data class instance. Parameters: Name Type Description Default data_frame Optional [ Union [ pandas . DataFrame , pandas . Series ]] The pandas DataFrame or Series from which to extract the index. required name str The name of the index series. required Source code in src/ipyvizzu/animation.py def add_data_frame_index( self, data_frame: Optional[Union[\"pandas.DataFrame\", \"pandas.Series\"]], # type: ignore name: str, ) -> None: \"\"\" [Deprecated] This function is deprecated and will be removed in future versions. Use [add_df_index][ipyvizzu.animation.Data.add_df_index] function instead. Add the index of a `pandas` `DataFrame` as a series to an existing [Data][ipyvizzu.animation.Data] class instance. Args: data_frame: The `pandas` `DataFrame` or `Series` from which to extract the index. name: The name of the index series. \"\"\" # pylint: disable=line-too-long reference = \"https://ipyvizzu.vizzuhq.com/0.16/reference/ipyvizzu/animation/#ipyvizzu.animation.Data.add_df_index\" warnings.warn( f\"'add_data_frame_index' is deprecated and will be removed in future versions. Use 'add_df_index' instead - see {reference}\", DeprecationWarning, stacklevel=2, ) self.add_df_index(data_frame, name)","title":"add_data_frame_index()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Data.add_np_array","text":"Add a numpy array to an existing Data class instance. Parameters: Name Type Description Default np_array Optional [ numpy . array ] The numpy array to add. required column_name Optional [ ColumnName ] The name of a column. By default, uses column indices. Can be set with an Index:Name pair or, for single-dimensional arrays, with just the Name. None column_dtype Optional [ ColumnDtype ] The dtype of a column. By default, uses the np_array's dtype. Can be set with an Index:DType pair or, for single-dimensional arrays, with just the DType. None default_measure_value MeasureValue Default value to use for missing measure values. Defaults to 0. NAN_MEASURE default_dimension_value DimensionValue Default value to use for missing dimension values. Defaults to an empty string. NAN_DIMENSION Example Adding a data frame to a Data class instance: np_array = np.zeros((3, 4)) data = Data() data.add_np_array(np_array) Source code in src/ipyvizzu/animation.py def add_np_array( self, np_array: Optional[\"numpy.array\"], # type: ignore column_name: Optional[ColumnName] = None, column_dtype: Optional[ColumnDtype] = None, default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, ) -> None: \"\"\" Add a `numpy` `array` to an existing [Data][ipyvizzu.animation.Data] class instance. Args: np_array: The `numpy` `array` to add. column_name: The name of a column. By default, uses column indices. Can be set with an Index:Name pair or, for single-dimensional arrays, with just the Name. column_dtype: The dtype of a column. By default, uses the np_array's dtype. Can be set with an Index:DType pair or, for single-dimensional arrays, with just the DType. default_measure_value: Default value to use for missing measure values. Defaults to 0. default_dimension_value: Default value to use for missing dimension values. Defaults to an empty string. Example: Adding a data frame to a [Data][ipyvizzu.animation.Data] class instance: np_array = np.zeros((3, 4)) data = Data() data.add_np_array(np_array) \"\"\" # pylint: disable=too-many-arguments if not isinstance(np_array, type(None)): converter = NumpyArrayConverter( np_array, column_name, column_dtype, default_measure_value, default_dimension_value, ) series_list = converter.get_series_list() self.add_series_list(series_list)","title":"add_np_array()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Data.build","text":"A method for validating and returning the data animation dictionary. Returns: Type Description dict A dictionary that stored in the data animation object. It contains a data key whose value is the stored animation. Source code in src/ipyvizzu/animation.py def build(self) -> dict: \"\"\" A method for validating and returning the data animation dictionary. Returns: A dictionary that stored in the data animation object. It contains a `data` key whose value is the stored animation. \"\"\" jsonschema.validate(self, DATA_SCHEMA) return {\"data\": self}","title":"build()"},{"location":"reference/ipyvizzu/#ipyvizzu.Config","text":"Bases: AbstractAnimation A class for representing config animation. It can build config option of the chart. Source code in src/ipyvizzu/animation.py class Config(AbstractAnimation, metaclass=ConfigAttr): \"\"\" A class for representing config animation. It can build config option of the chart. \"\"\" def __init__(self, data: Optional[Union[dict, RawJavaScript]]): \"\"\" Config constructor. Args: data: A config animation dictionary. For information on all available config parameters see the [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/interfaces/Config.Chart/#properties). \"\"\" # pylint: disable=line-too-long self._data = data def build(self) -> dict: \"\"\" A method for returning the config animation dictionary. Returns: A dictionary that stored in the config animation object. It contains a `config` key whose value is the stored animation. \"\"\" return {\"config\": self._data}","title":"Config"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Config.__init__","text":"Config constructor. Parameters: Name Type Description Default data Optional [ Union [ dict , RawJavaScript ]] A config animation dictionary. For information on all available config parameters see the Vizzu Code reference . required Source code in src/ipyvizzu/animation.py def __init__(self, data: Optional[Union[dict, RawJavaScript]]): \"\"\" Config constructor. Args: data: A config animation dictionary. For information on all available config parameters see the [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/interfaces/Config.Chart/#properties). \"\"\" # pylint: disable=line-too-long self._data = data","title":"__init__()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Config.build","text":"A method for returning the config animation dictionary. Returns: Type Description dict A dictionary that stored in the config animation object. It contains a config key whose value is the stored animation. Source code in src/ipyvizzu/animation.py def build(self) -> dict: \"\"\" A method for returning the config animation dictionary. Returns: A dictionary that stored in the config animation object. It contains a `config` key whose value is the stored animation. \"\"\" return {\"config\": self._data}","title":"build()"},{"location":"reference/ipyvizzu/#ipyvizzu.Style","text":"Bases: AbstractAnimation A class for representing style animation. It can build style option of the chart. Source code in src/ipyvizzu/animation.py class Style(AbstractAnimation): \"\"\" A class for representing style animation. It can build style option of the chart. \"\"\" def __init__(self, data: Optional[dict]): \"\"\" Style constructor. Args: data: A style animation dictionary. For information on all available style parameters see the [Style][styling-properties] chapter or the [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/interfaces/Styles.Chart/#properties). \"\"\" # pylint: disable=line-too-long self._data = data def build(self) -> dict: \"\"\" A method for returning the style animation dictionary. Returns: A dictionary that stored in the style animation object. It contains a `style` key whose value is the stored animation. \"\"\" return {\"style\": self._data}","title":"Style"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Style.__init__","text":"Style constructor. Parameters: Name Type Description Default data Optional [ dict ] A style animation dictionary. For information on all available style parameters see the Style chapter or the Vizzu Code reference . required Source code in src/ipyvizzu/animation.py def __init__(self, data: Optional[dict]): \"\"\" Style constructor. Args: data: A style animation dictionary. For information on all available style parameters see the [Style][styling-properties] chapter or the [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/interfaces/Styles.Chart/#properties). \"\"\" # pylint: disable=line-too-long self._data = data","title":"__init__()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Style.build","text":"A method for returning the style animation dictionary. Returns: Type Description dict A dictionary that stored in the style animation object. It contains a style key whose value is the stored animation. Source code in src/ipyvizzu/animation.py def build(self) -> dict: \"\"\" A method for returning the style animation dictionary. Returns: A dictionary that stored in the style animation object. It contains a `style` key whose value is the stored animation. \"\"\" return {\"style\": self._data}","title":"build()"},{"location":"reference/ipyvizzu/#ipyvizzu.Keyframe","text":"Bases: AbstractAnimation A class for representing keyframe animation. It can build keyframe of the chart. Source code in src/ipyvizzu/animation.py class Keyframe(AbstractAnimation): \"\"\" A class for representing keyframe animation. It can build keyframe of the chart. \"\"\" def __init__( self, *animations: AbstractAnimation, **options: Optional[Union[str, int, float, dict]], ): \"\"\" Keyframe constructor. Args: *animations: List of AbstractAnimation inherited objects such as [Data][ipyvizzu.animation.Data], [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style]. **options: Dictionary of animation options for example `duration=1`. For information on all available animation options see the [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/interfaces/Anim.Options/#properties). Raises: ValueError: If `animations` is not set. ValueError: If initialized with a `Keyframe`. \"\"\" # pylint: disable=line-too-long if not animations: raise ValueError(\"No animation was set.\") if [animation for animation in animations if isinstance(animation, Keyframe)]: raise ValueError(\"A Keyframe cannot contain a Keyframe.\") self._keyframe = {} self._keyframe[\"target\"] = AnimationMerger.merge_animations(animations).build() if options: self._keyframe[\"options\"] = options def build(self) -> dict: \"\"\" A method for returning the keyframe animation dictionary. Returns: A dictionary that stored in the keyframe animation object. It contains a `target` key whose value is the stored animation and an optional `options` key whose value is the stored animation options. \"\"\" return self._keyframe","title":"Keyframe"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Keyframe.__init__","text":"Keyframe constructor. Parameters: Name Type Description Default *animations AbstractAnimation List of AbstractAnimation inherited objects such as Data , Config and Style . () **options Optional [ Union [ str , int , float , dict ]] Dictionary of animation options for example duration=1 . For information on all available animation options see the Vizzu Code reference . {} Raises: Type Description ValueError If animations is not set. ValueError If initialized with a Keyframe . Source code in src/ipyvizzu/animation.py def __init__( self, *animations: AbstractAnimation, **options: Optional[Union[str, int, float, dict]], ): \"\"\" Keyframe constructor. Args: *animations: List of AbstractAnimation inherited objects such as [Data][ipyvizzu.animation.Data], [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style]. **options: Dictionary of animation options for example `duration=1`. For information on all available animation options see the [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/interfaces/Anim.Options/#properties). Raises: ValueError: If `animations` is not set. ValueError: If initialized with a `Keyframe`. \"\"\" # pylint: disable=line-too-long if not animations: raise ValueError(\"No animation was set.\") if [animation for animation in animations if isinstance(animation, Keyframe)]: raise ValueError(\"A Keyframe cannot contain a Keyframe.\") self._keyframe = {} self._keyframe[\"target\"] = AnimationMerger.merge_animations(animations).build() if options: self._keyframe[\"options\"] = options","title":"__init__()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Keyframe.build","text":"A method for returning the keyframe animation dictionary. Returns: Type Description dict A dictionary that stored in the keyframe animation object. It contains a target key whose value is the stored animation and an optional options key whose value is the stored animation options. Source code in src/ipyvizzu/animation.py def build(self) -> dict: \"\"\" A method for returning the keyframe animation dictionary. Returns: A dictionary that stored in the keyframe animation object. It contains a `target` key whose value is the stored animation and an optional `options` key whose value is the stored animation options. \"\"\" return self._keyframe","title":"build()"},{"location":"reference/ipyvizzu/#ipyvizzu.Snapshot","text":"Bases: AbstractAnimation A class for representing a stored chart state. It can build the snapshot id of the chart. Source code in src/ipyvizzu/animation.py class Snapshot(AbstractAnimation): \"\"\" A class for representing a stored chart state. It can build the snapshot id of the chart. \"\"\" def __init__(self, snapshot_id: str): \"\"\" Snapshot constructor. Args: snapshot_id: A snapshot id. \"\"\" self._snapshot_id = snapshot_id def build(self) -> str: # type: ignore \"\"\" A method for returning the snapshot id str. Returns: An str snapshot id that stored in the snapshot animation object. \"\"\" return self._snapshot_id","title":"Snapshot"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Snapshot.__init__","text":"Snapshot constructor. Parameters: Name Type Description Default snapshot_id str A snapshot id. required Source code in src/ipyvizzu/animation.py def __init__(self, snapshot_id: str): \"\"\" Snapshot constructor. Args: snapshot_id: A snapshot id. \"\"\" self._snapshot_id = snapshot_id","title":"__init__()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.Snapshot.build","text":"A method for returning the snapshot id str. Returns: Type Description str An str snapshot id that stored in the snapshot animation object. Source code in src/ipyvizzu/animation.py def build(self) -> str: # type: ignore \"\"\" A method for returning the snapshot id str. Returns: An str snapshot id that stored in the snapshot animation object. \"\"\" return self._snapshot_id","title":"build()"},{"location":"reference/ipyvizzu/#ipyvizzu.Animation","text":"Bases: Snapshot A class for representing a stored animation. It can build the snapshot id of the animation. Source code in src/ipyvizzu/animation.py class Animation(Snapshot): \"\"\" A class for representing a stored animation. It can build the snapshot id of the animation. \"\"\"","title":"Animation"},{"location":"reference/ipyvizzu/#ipyvizzu.AbstractAnimation","text":"An abstract class for representing animation objects that have dump and build methods. Source code in src/ipyvizzu/animation.py class AbstractAnimation: \"\"\" An abstract class for representing animation objects that have `dump` and `build` methods. \"\"\" def dump(self) -> str: \"\"\" A method for converting the built dictionary into string. Returns: An str that has been json dumped with [RawJavaScriptEncoder][ipyvizzu.json.RawJavaScriptEncoder] from a dictionary. \"\"\" return json.dumps(self.build(), cls=RawJavaScriptEncoder) @abc.abstractmethod def build(self) -> dict: \"\"\" An abstract method for returning a dictionary with values that can be converted into json string. Returns: A dictionary that stored in the animation object. \"\"\"","title":"AbstractAnimation"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.AbstractAnimation.dump","text":"A method for converting the built dictionary into string. Returns: Type Description str An str that has been json dumped with RawJavaScriptEncoder from a dictionary. Source code in src/ipyvizzu/animation.py def dump(self) -> str: \"\"\" A method for converting the built dictionary into string. Returns: An str that has been json dumped with [RawJavaScriptEncoder][ipyvizzu.json.RawJavaScriptEncoder] from a dictionary. \"\"\" return json.dumps(self.build(), cls=RawJavaScriptEncoder)","title":"dump()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.AbstractAnimation.build","text":"An abstract method for returning a dictionary with values that can be converted into json string. Returns: Type Description dict A dictionary that stored in the animation object. Source code in src/ipyvizzu/animation.py @abc.abstractmethod def build(self) -> dict: \"\"\" An abstract method for returning a dictionary with values that can be converted into json string. Returns: A dictionary that stored in the animation object. \"\"\"","title":"build()"},{"location":"reference/ipyvizzu/#ipyvizzu.PlainAnimation","text":"Bases: dict , AbstractAnimation A class for representing plain animation. It can build any dictionary. Source code in src/ipyvizzu/animation.py class PlainAnimation(dict, AbstractAnimation): \"\"\" A class for representing plain animation. It can build any dictionary. \"\"\" def build(self) -> dict: \"\"\" A method for returning the plain animation dictionary. Returns: A dictionary that stored in the plain animation object. \"\"\" return self","title":"PlainAnimation"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.PlainAnimation.build","text":"A method for returning the plain animation dictionary. Returns: Type Description dict A dictionary that stored in the plain animation object. Source code in src/ipyvizzu/animation.py def build(self) -> dict: \"\"\" A method for returning the plain animation dictionary. Returns: A dictionary that stored in the plain animation object. \"\"\" return self","title":"build()"},{"location":"reference/ipyvizzu/#ipyvizzu.AnimationMerger","text":"Bases: AbstractAnimation A class for merging different types of animations. Source code in src/ipyvizzu/animation.py class AnimationMerger(AbstractAnimation): \"\"\"A class for merging different types of animations.\"\"\" def __init__(self) -> None: \"\"\"AnimationMerger constructor.\"\"\" self._dict: dict = {} self._list: list = [] @classmethod def merge_animations( cls, animations: Tuple[AbstractAnimation, ...] ) -> AbstractAnimation: \"\"\" A class method for merging animations. Args: animations: List of `AbstractAnimation` inherited objects. Returns: An `AnimationMerger` class with the merged animations. \"\"\" if len(animations) == 1 and not isinstance(animations[0], Keyframe): return animations[0] merger = cls() for animation in animations: merger.merge(animation) return merger def merge(self, animation: AbstractAnimation) -> None: \"\"\" A method for merging an animation with the previously merged animations. Args: animation: An animation to be merged with with previously merged animations. Raises: ValueError: If the type of an animation is already merged. ValueError: If `Keyframe` is merged with different type of animation. \"\"\" if isinstance(animation, Keyframe): if self._dict: raise ValueError(\"Keyframe cannot be merged with other animations.\") data = animation.build() self._list.append(data) else: if self._list: raise ValueError(\"Keyframe cannot be merged with other animations.\") data = self._validate(animation) self._dict.update(data) def _validate(self, animation: AbstractAnimation) -> dict: if isinstance(animation, Snapshot): raise ValueError(\"Snapshot cannot be merged with other animations.\") data = animation.build() common_keys = set(data).intersection(self._dict) if common_keys: raise ValueError(f\"{common_keys} is already merged.\") return data def build(self) -> Union[dict, list]: # type: ignore \"\"\" A method for returning a merged list of `Keyframes` or a merged dictionary from different types of animations. Returns: A merged list of [Keyframes][ipyvizzu.animation.Keyframe] or a merged dictionary from [Data][ipyvizzu.animation.Data], [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style] animations. \"\"\" if self._dict: return self._dict return self._list","title":"AnimationMerger"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.AnimationMerger.__init__","text":"AnimationMerger constructor. Source code in src/ipyvizzu/animation.py def __init__(self) -> None: \"\"\"AnimationMerger constructor.\"\"\" self._dict: dict = {} self._list: list = []","title":"__init__()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.AnimationMerger.merge_animations","text":"A class method for merging animations. Parameters: Name Type Description Default animations Tuple [ AbstractAnimation , ...] List of AbstractAnimation inherited objects. required Returns: Type Description AbstractAnimation An AnimationMerger class with the merged animations. Source code in src/ipyvizzu/animation.py @classmethod def merge_animations( cls, animations: Tuple[AbstractAnimation, ...] ) -> AbstractAnimation: \"\"\" A class method for merging animations. Args: animations: List of `AbstractAnimation` inherited objects. Returns: An `AnimationMerger` class with the merged animations. \"\"\" if len(animations) == 1 and not isinstance(animations[0], Keyframe): return animations[0] merger = cls() for animation in animations: merger.merge(animation) return merger","title":"merge_animations()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.AnimationMerger.merge","text":"A method for merging an animation with the previously merged animations. Parameters: Name Type Description Default animation AbstractAnimation An animation to be merged with with previously merged animations. required Raises: Type Description ValueError If the type of an animation is already merged. ValueError If Keyframe is merged with different type of animation. Source code in src/ipyvizzu/animation.py def merge(self, animation: AbstractAnimation) -> None: \"\"\" A method for merging an animation with the previously merged animations. Args: animation: An animation to be merged with with previously merged animations. Raises: ValueError: If the type of an animation is already merged. ValueError: If `Keyframe` is merged with different type of animation. \"\"\" if isinstance(animation, Keyframe): if self._dict: raise ValueError(\"Keyframe cannot be merged with other animations.\") data = animation.build() self._list.append(data) else: if self._list: raise ValueError(\"Keyframe cannot be merged with other animations.\") data = self._validate(animation) self._dict.update(data)","title":"merge()"},{"location":"reference/ipyvizzu/#ipyvizzu.animation.AnimationMerger.build","text":"A method for returning a merged list of Keyframes or a merged dictionary from different types of animations. Returns: Type Description Union [ dict , list ] A merged list of Keyframes or a merged dictionary from Data , Config and Style animations. Source code in src/ipyvizzu/animation.py def build(self) -> Union[dict, list]: # type: ignore \"\"\" A method for returning a merged list of `Keyframes` or a merged dictionary from different types of animations. Returns: A merged list of [Keyframes][ipyvizzu.animation.Keyframe] or a merged dictionary from [Data][ipyvizzu.animation.Data], [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style] animations. \"\"\" if self._dict: return self._dict return self._list","title":"build()"},{"location":"reference/ipyvizzu/#ipyvizzu.Animate","text":"Bases: Method A class for dumping chart independent parameters to DisplayTemplate.ANIMATE template. Source code in src/ipyvizzu/method.py class Animate(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.ANIMATE][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__( self, chart_target: AbstractAnimation, chart_anim_opts: Optional[dict] = None, ): \"\"\" Animate constructor. It stores and dumps `chart_target` and `chart_anim_opts` parameters. Args: chart_target: AbstractAnimation inherited object such as [Data][ipyvizzu.animation.Data] [Config][ipyvizzu.animation.Config] or [Style][ipyvizzu.animation.Style]. chart_anim_opts: Animation options' dictionary. If it is not set, it dumps `undefined`. \"\"\" self._data = { \"chart_target\": chart_target.dump(), \"chart_anim_opts\": PlainAnimation(chart_anim_opts).dump() if chart_anim_opts else \"undefined\", }","title":"Animate"},{"location":"reference/ipyvizzu/#ipyvizzu.method.Animate.__init__","text":"Animate constructor. It stores and dumps chart_target and chart_anim_opts parameters. Parameters: Name Type Description Default chart_target AbstractAnimation AbstractAnimation inherited object such as Data Config or Style . required chart_anim_opts Optional [ dict ] Animation options' dictionary. If it is not set, it dumps undefined . None Source code in src/ipyvizzu/method.py def __init__( self, chart_target: AbstractAnimation, chart_anim_opts: Optional[dict] = None, ): \"\"\" Animate constructor. It stores and dumps `chart_target` and `chart_anim_opts` parameters. Args: chart_target: AbstractAnimation inherited object such as [Data][ipyvizzu.animation.Data] [Config][ipyvizzu.animation.Config] or [Style][ipyvizzu.animation.Style]. chart_anim_opts: Animation options' dictionary. If it is not set, it dumps `undefined`. \"\"\" self._data = { \"chart_target\": chart_target.dump(), \"chart_anim_opts\": PlainAnimation(chart_anim_opts).dump() if chart_anim_opts else \"undefined\", }","title":"__init__()"},{"location":"reference/ipyvizzu/#ipyvizzu.Feature","text":"Bases: Method A class for dumping chart independent parameters to DisplayTemplate.FEATURE template. Source code in src/ipyvizzu/method.py class Feature(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.FEATURE][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__(self, name: str, enabled: bool): \"\"\" Feature constructor. It stores and dumps `name` and `enabled` parameters. Args: name: The name of a chart feature. enabled: The new state of a chart feature. \"\"\" self._data = {\"name\": name, \"enabled\": json.dumps(enabled)}","title":"Feature"},{"location":"reference/ipyvizzu/#ipyvizzu.method.Feature.__init__","text":"Feature constructor. It stores and dumps name and enabled parameters. Parameters: Name Type Description Default name str The name of a chart feature. required enabled bool The new state of a chart feature. required Source code in src/ipyvizzu/method.py def __init__(self, name: str, enabled: bool): \"\"\" Feature constructor. It stores and dumps `name` and `enabled` parameters. Args: name: The name of a chart feature. enabled: The new state of a chart feature. \"\"\" self._data = {\"name\": name, \"enabled\": json.dumps(enabled)}","title":"__init__()"},{"location":"reference/ipyvizzu/#ipyvizzu.Store","text":"Bases: Method A class for dumping chart independent parameters to DisplayTemplate.STORE template. Source code in src/ipyvizzu/method.py class Store(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.STORE][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__(self, snapshot_id: str): \"\"\" Store constructor. It stores and dumps `snapshot_id` parameter. Args: snapshot_id: The id of snapshot object. \"\"\" self._data = {\"id\": snapshot_id}","title":"Store"},{"location":"reference/ipyvizzu/#ipyvizzu.method.Store.__init__","text":"Store constructor. It stores and dumps snapshot_id parameter. Parameters: Name Type Description Default snapshot_id str The id of snapshot object. required Source code in src/ipyvizzu/method.py def __init__(self, snapshot_id: str): \"\"\" Store constructor. It stores and dumps `snapshot_id` parameter. Args: snapshot_id: The id of snapshot object. \"\"\" self._data = {\"id\": snapshot_id}","title":"__init__()"},{"location":"reference/ipyvizzu/#ipyvizzu.EventOn","text":"Bases: Method A class for dumping chart independent parameters to DisplayTemplate.SET_EVENT template. Source code in src/ipyvizzu/method.py class EventOn(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.SET_EVENT][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__(self, event_handler: EventHandler): \"\"\" EventOn constructor. It stores and dumps the `id`, the `event` and the `handler` of the event handler object. Args: event_handler: An event handler object. \"\"\" self._data = { \"id\": event_handler.id, \"event\": event_handler.event, \"handler\": event_handler.handler, }","title":"EventOn"},{"location":"reference/ipyvizzu/#ipyvizzu.method.EventOn.__init__","text":"EventOn constructor. It stores and dumps the id , the event and the handler of the event handler object. Parameters: Name Type Description Default event_handler EventHandler An event handler object. required Source code in src/ipyvizzu/method.py def __init__(self, event_handler: EventHandler): \"\"\" EventOn constructor. It stores and dumps the `id`, the `event` and the `handler` of the event handler object. Args: event_handler: An event handler object. \"\"\" self._data = { \"id\": event_handler.id, \"event\": event_handler.event, \"handler\": event_handler.handler, }","title":"__init__()"},{"location":"reference/ipyvizzu/#ipyvizzu.EventOff","text":"Bases: Method A class for dumping chart independent parameters to DisplayTemplate.CLEAR_EVENT template. Source code in src/ipyvizzu/method.py class EventOff(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.CLEAR_EVENT][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__(self, event_handler: EventHandler): \"\"\" EventOff constructor. It stores and dumps the `id` and the `event` of the event handler object. Args: event_handler: An event handler object. \"\"\" self._data = {\"id\": event_handler.id, \"event\": event_handler.event}","title":"EventOff"},{"location":"reference/ipyvizzu/#ipyvizzu.method.EventOff.__init__","text":"EventOff constructor. It stores and dumps the id and the event of the event handler object. Parameters: Name Type Description Default event_handler EventHandler An event handler object. required Source code in src/ipyvizzu/method.py def __init__(self, event_handler: EventHandler): \"\"\" EventOff constructor. It stores and dumps the `id` and the `event` of the event handler object. Args: event_handler: An event handler object. \"\"\" self._data = {\"id\": event_handler.id, \"event\": event_handler.event}","title":"__init__()"},{"location":"reference/ipyvizzu/#ipyvizzu.Log","text":"Bases: Method A class for dumping chart independent parameters to DisplayTemplate.LOG template. Source code in src/ipyvizzu/method.py class Log(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.LOG][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__(self, chart_property: ChartProperty): \"\"\" Log constructor. It stores and dumps the value of the chart property object. Args: chart_property: A chart property such as [CONFIG][ipyvizzu.template.ChartProperty] and [STYLE][ipyvizzu.template.ChartProperty]. \"\"\" self._data = {\"chart_property\": chart_property.value}","title":"Log"},{"location":"reference/ipyvizzu/#ipyvizzu.method.Log.__init__","text":"Log constructor. It stores and dumps the value of the chart property object. Parameters: Name Type Description Default chart_property ChartProperty A chart property such as CONFIG and STYLE . required Source code in src/ipyvizzu/method.py def __init__(self, chart_property: ChartProperty): \"\"\" Log constructor. It stores and dumps the value of the chart property object. Args: chart_property: A chart property such as [CONFIG][ipyvizzu.template.ChartProperty] and [STYLE][ipyvizzu.template.ChartProperty]. \"\"\" self._data = {\"chart_property\": chart_property.value}","title":"__init__()"},{"location":"reference/ipyvizzu/#ipyvizzu.AnimationControl","text":"A class for controlling animations. Source code in src/ipyvizzu/animationcontrol.py class AnimationControl: \"\"\" A class for controlling animations. \"\"\" def __init__(self, prev_id: str, last_id: str, display_method: Callable): \"\"\" AnimationControl constructor. Args: prev_id: Id of the previous animation promise. last_id: Id of the animation to be controlled. display_method: Displaying function. \"\"\" self._ids = \", \".join([f\"'{prev_id}'\", f\"'{last_id}'\"]) self._display = display_method def cancel(self) -> None: \"\"\"Cancels the animation, will reject the animation promise.\"\"\" self._display( DisplayTemplate.CONTROL.format( method=\"cancel\", params=self._ids, ) ) def pause(self) -> None: \"\"\"Pauses the controlled animation.\"\"\" self._display( DisplayTemplate.CONTROL.format( method=\"pause\", params=self._ids, ) ) def play(self) -> None: \"\"\"Plays/resumes playing of the controlled animation.\"\"\" self._display( DisplayTemplate.CONTROL.format( method=\"play\", params=self._ids, ) ) def reverse(self) -> None: \"\"\"Changes the direction of the controlled animation.\"\"\" self._display( DisplayTemplate.CONTROL.format( method=\"reverse\", params=self._ids, ) ) def seek(self, value: Union[int, str]) -> None: \"\"\" Seeks the animation to the position specified by time or progress percentage. Args: value: The position specified by time or progress percentage. \"\"\" params = \", \".join([self._ids, f\"'{value}'\"]) self._display( DisplayTemplate.CONTROL.format( method=\"seek\", params=params, ) ) def stop(self) -> None: \"\"\"Stops the current animation seeking it back to its start position.\"\"\" self._display( DisplayTemplate.CONTROL.format( method=\"stop\", params=self._ids, ) ) def store(self) -> Animation: \"\"\" A method for saving and storing the actual state of the animation. Returns: An `Animation` object wich stores the actual state of the animation. \"\"\" animation_id = uuid.uuid4().hex[:7] params = \", \".join([self._ids, f\"'{animation_id}'\"]) self._display( DisplayTemplate.CONTROL.format( method=\"store\", params=params, ) ) return Animation(animation_id)","title":"AnimationControl"},{"location":"reference/ipyvizzu/#ipyvizzu.animationcontrol.AnimationControl.__init__","text":"AnimationControl constructor. Parameters: Name Type Description Default prev_id str Id of the previous animation promise. required last_id str Id of the animation to be controlled. required display_method Callable Displaying function. required Source code in src/ipyvizzu/animationcontrol.py def __init__(self, prev_id: str, last_id: str, display_method: Callable): \"\"\" AnimationControl constructor. Args: prev_id: Id of the previous animation promise. last_id: Id of the animation to be controlled. display_method: Displaying function. \"\"\" self._ids = \", \".join([f\"'{prev_id}'\", f\"'{last_id}'\"]) self._display = display_method","title":"__init__()"},{"location":"reference/ipyvizzu/#ipyvizzu.animationcontrol.AnimationControl.cancel","text":"Cancels the animation, will reject the animation promise. Source code in src/ipyvizzu/animationcontrol.py def cancel(self) -> None: \"\"\"Cancels the animation, will reject the animation promise.\"\"\" self._display( DisplayTemplate.CONTROL.format( method=\"cancel\", params=self._ids, ) )","title":"cancel()"},{"location":"reference/ipyvizzu/#ipyvizzu.animationcontrol.AnimationControl.pause","text":"Pauses the controlled animation. Source code in src/ipyvizzu/animationcontrol.py def pause(self) -> None: \"\"\"Pauses the controlled animation.\"\"\" self._display( DisplayTemplate.CONTROL.format( method=\"pause\", params=self._ids, ) )","title":"pause()"},{"location":"reference/ipyvizzu/#ipyvizzu.animationcontrol.AnimationControl.play","text":"Plays/resumes playing of the controlled animation. Source code in src/ipyvizzu/animationcontrol.py def play(self) -> None: \"\"\"Plays/resumes playing of the controlled animation.\"\"\" self._display( DisplayTemplate.CONTROL.format( method=\"play\", params=self._ids, ) )","title":"play()"},{"location":"reference/ipyvizzu/#ipyvizzu.animationcontrol.AnimationControl.reverse","text":"Changes the direction of the controlled animation. Source code in src/ipyvizzu/animationcontrol.py def reverse(self) -> None: \"\"\"Changes the direction of the controlled animation.\"\"\" self._display( DisplayTemplate.CONTROL.format( method=\"reverse\", params=self._ids, ) )","title":"reverse()"},{"location":"reference/ipyvizzu/#ipyvizzu.animationcontrol.AnimationControl.seek","text":"Seeks the animation to the position specified by time or progress percentage. Parameters: Name Type Description Default value Union [ int , str ] The position specified by time or progress percentage. required Source code in src/ipyvizzu/animationcontrol.py def seek(self, value: Union[int, str]) -> None: \"\"\" Seeks the animation to the position specified by time or progress percentage. Args: value: The position specified by time or progress percentage. \"\"\" params = \", \".join([self._ids, f\"'{value}'\"]) self._display( DisplayTemplate.CONTROL.format( method=\"seek\", params=params, ) )","title":"seek()"},{"location":"reference/ipyvizzu/#ipyvizzu.animationcontrol.AnimationControl.stop","text":"Stops the current animation seeking it back to its start position. Source code in src/ipyvizzu/animationcontrol.py def stop(self) -> None: \"\"\"Stops the current animation seeking it back to its start position.\"\"\" self._display( DisplayTemplate.CONTROL.format( method=\"stop\", params=self._ids, ) )","title":"stop()"},{"location":"reference/ipyvizzu/#ipyvizzu.animationcontrol.AnimationControl.store","text":"A method for saving and storing the actual state of the animation. Returns: Type Description Animation An Animation object wich stores the actual state of the animation. Source code in src/ipyvizzu/animationcontrol.py def store(self) -> Animation: \"\"\" A method for saving and storing the actual state of the animation. Returns: An `Animation` object wich stores the actual state of the animation. \"\"\" animation_id = uuid.uuid4().hex[:7] params = \", \".join([self._ids, f\"'{animation_id}'\"]) self._display( DisplayTemplate.CONTROL.format( method=\"store\", params=params, ) ) return Animation(animation_id)","title":"store()"},{"location":"reference/ipyvizzu/#ipyvizzu.NumpyArrayConverter","text":"Bases: ToSeriesListConverter Converts a numpy array into a list of dictionaries representing series. Each dictionary contains information about the series name , values and type . Parameters: Name Type Description Default np_array numpy . array The numpy array to convert. required column_name Optional [ ColumnName ] The name of a column. By default, uses column indices. Can be set with an Index:Name pair or, for single-dimensional arrays, with just the Name. None column_dtype Optional [ ColumnDtype ] The dtype of a column. By default, uses the np_array's dtype. Can be set with an Index:DType pair or, for single-dimensional arrays, with just the DType. None default_measure_value MeasureValue Default value to use for missing measure values. Defaults to 0. NAN_MEASURE default_dimension_value DimensionValue Default value to use for missing dimension values. Defaults to an empty string. NAN_DIMENSION Example Get series list from numpy array : converter = NumpyArrayConverter(np_array) series_list = converter.get_series_list() Source code in src/ipyvizzu/data/converters/numpy/converter.py class NumpyArrayConverter(ToSeriesListConverter): \"\"\" Converts a `numpy` `array` into a list of dictionaries representing series. Each dictionary contains information about the series `name`, `values` and `type`. Parameters: np_array: The `numpy` `array` to convert. column_name: The name of a column. By default, uses column indices. Can be set with an Index:Name pair or, for single-dimensional arrays, with just the Name. column_dtype: The dtype of a column. By default, uses the np_array's dtype. Can be set with an Index:DType pair or, for single-dimensional arrays, with just the DType. default_measure_value: Default value to use for missing measure values. Defaults to 0. default_dimension_value: Default value to use for missing dimension values. Defaults to an empty string. Example: Get series list from `numpy` `array`: converter = NumpyArrayConverter(np_array) series_list = converter.get_series_list() \"\"\" # pylint: disable=too-few-public-methods def __init__( self, np_array: \"numpy.array\", # type: ignore column_name: Optional[ColumnName] = None, column_dtype: Optional[ColumnDtype] = None, default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, ) -> None: # pylint: disable=too-many-arguments super().__init__(default_measure_value, default_dimension_value) self._np = self._get_numpy() self._np_array = np_array self._column_name: Dict[Index, Name] = self._get_columns_config(column_name) self._column_dtype: Dict[Index, DType] = self._get_columns_config(column_dtype) def get_series_list(self) -> List[Series]: \"\"\" Convert the `numpy` `array` to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" if self._np_array.ndim == 0: return [] if self._np_array.ndim == 1: return self._get_series_list_from_array1dim() if self._np_array.ndim == 2: return self._get_series_list_from_array2dim() raise ValueError(\"arrays larger than 2D are not supported\") def _get_series_list_from_array1dim(self) -> List[Series]: i = 0 name = self._column_name.get(i, i) values, infer_type = self._convert_to_series_values_and_type( (i, self._np_array) ) return [self._convert_to_series(name, values, infer_type)] def _get_series_list_from_array2dim(self) -> List[Series]: series_list = [] for i in range(self._np_array.shape[1]): name = self._column_name.get(i, i) values, infer_type = self._convert_to_series_values_and_type( (i, self._np_array[:, i]) ) series_list.append(self._convert_to_series(name, values, infer_type)) return series_list def _get_numpy(self) -> ModuleType: try: import numpy as np # pylint: disable=import-outside-toplevel return np except ImportError as error: raise ImportError( \"numpy is not available. Please install numpy to use this feature.\" ) from error def _get_columns_config( self, config: Optional[Union[ColumnConfig, Dict[Index, ColumnConfig]]], ) -> Dict[Index, ColumnConfig]: if config is None: return {} if not isinstance(config, dict): if not self._np_array.ndim == 1: raise ValueError(\"non dict value can only be used for a 1D array\") return {0: config} return config def _convert_to_series_values_and_type( self, obj: Tuple[int, \"numpy.array\"] # type: ignore ) -> Tuple[SeriesValues, InferType]: column = obj i = column[0] array = column[1] dtype = self._column_dtype.get(i, self._np_array.dtype) if self._np.issubdtype(dtype, self._np.number): return self._convert_to_measure_values(array), InferType.MEASURE return self._convert_to_dimension_values(array), InferType.DIMENSION def _convert_to_measure_values( self, obj: \"numpy.array\" # type: ignore ) -> List[MeasureValue]: array = obj array_float = array.astype(float) return self._np.nan_to_num( array_float, nan=self._default_measure_value ).tolist() def _convert_to_dimension_values( self, obj: \"numpy.array\" # type: ignore ) -> List[DimensionValue]: array = obj array_str = array.astype(str) replace_nan = \"nan\" mask = array_str == replace_nan array_str[mask] = self._default_dimension_value return array_str.tolist()","title":"NumpyArrayConverter"},{"location":"reference/ipyvizzu/#ipyvizzu.data.converters.numpy.converter.NumpyArrayConverter.get_series_list","text":"Convert the numpy array to a list of dictionaries representing series. Returns: Type Description List [ Series ] A list of dictionaries representing series, List [ Series ] where each dictionary has name , values and type keys. Source code in src/ipyvizzu/data/converters/numpy/converter.py def get_series_list(self) -> List[Series]: \"\"\" Convert the `numpy` `array` to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" if self._np_array.ndim == 0: return [] if self._np_array.ndim == 1: return self._get_series_list_from_array1dim() if self._np_array.ndim == 2: return self._get_series_list_from_array2dim() raise ValueError(\"arrays larger than 2D are not supported\")","title":"get_series_list()"},{"location":"reference/ipyvizzu/#ipyvizzu.PandasDataFrameConverter","text":"Bases: DataFrameConverter Converts a pandas DataFrame or Series into a list of dictionaries representing series. Each dictionary contains information about the series name , values and type . Parameters: Name Type Description Default df Union [ pandas . DataFrame , pandas . Series ] The pandas DataFrame or Series to convert. required default_measure_value MeasureValue Default value to use for missing measure values. Defaults to 0. NAN_MEASURE default_dimension_value DimensionValue Default value to use for missing dimension values. Defaults to an empty string. NAN_DIMENSION max_rows int The maximum number of rows to include in the converted series list. If the df contains more rows, a random sample of the given number of rows will be taken. MAX_ROWS include_index Optional [ str ] Name for the index column to include as a series. If provided, the index column will be added. Defaults to None. None Example Get series list from DataFrame columns: converter = PandasDataFrameConverter(df) series_list = converter.get_series_list() Source code in src/ipyvizzu/data/converters/pandas/converter.py class PandasDataFrameConverter(DataFrameConverter): \"\"\" Converts a `pandas` `DataFrame` or `Series` into a list of dictionaries representing series. Each dictionary contains information about the series `name`, `values` and `type`. Parameters: df: The `pandas` `DataFrame` or `Series` to convert. default_measure_value: Default value to use for missing measure values. Defaults to 0. default_dimension_value: Default value to use for missing dimension values. Defaults to an empty string. max_rows: The maximum number of rows to include in the converted series list. If the `df` contains more rows, a random sample of the given number of rows will be taken. include_index: Name for the index column to include as a series. If provided, the index column will be added. Defaults to None. Example: Get series list from `DataFrame` columns: converter = PandasDataFrameConverter(df) series_list = converter.get_series_list() \"\"\" def __init__( self, df: Union[\"pandas.DataFrame\", \"pandas.Series\"], # type: ignore default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, max_rows: int = MAX_ROWS, include_index: Optional[str] = None, ) -> None: # pylint: disable=too-many-arguments super().__init__(default_measure_value, default_dimension_value, max_rows) self._pd = self._get_pandas() self._df = self._get_sampled_df( self._convert_to_df(df) if isinstance(df, PandasSeries) else df ) self._include_index = include_index def get_series_list(self) -> List[Series]: \"\"\" Convert the `DataFrame` columns to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" series_list = super().get_series_list() index_series = self.get_series_from_index() return index_series + series_list def get_series_from_index(self) -> List[Series]: \"\"\" Convert the `DataFrame` index to a dictionary representing a series, if `include_index` is provided. Returns: A dictionary representing the index series with `name`, `values` and `type` keys. Returns `None` if `include_index` is not provided. \"\"\" if not self._include_index or self._df.index.empty: return [] df = self._pd.DataFrame({self._include_index: self._df.index}) index_series_converter = PandasDataFrameConverter( df, self._default_measure_value, self._default_dimension_value ) return index_series_converter.get_series_list() def _get_pandas(self) -> ModuleType: try: import pandas as pd # pylint: disable=import-outside-toplevel return pd except ImportError as error: raise ImportError( \"pandas is not available. Please install pandas to use this feature.\" ) from error def _convert_to_df(self, series: \"pandas.Series\") -> \"pandas.Dataframe\": # type: ignore if series.empty: return self._pd.DataFrame() return self._pd.DataFrame(series) def _get_sampled_df(self, df: \"pandas.DataFrame\") -> \"pandas.DataFrame\": # type: ignore row_number = len(df) if row_number > self._max_rows: frac = self._max_rows / row_number sampled_df = df.sample( replace=False, frac=frac, random_state=42, ) return sampled_df return df def _get_columns(self) -> List[str]: return self._df.columns def _convert_to_series_values_and_type( self, obj: str # type: ignore ) -> Tuple[SeriesValues, InferType]: column_name = obj column = self._df[column_name] if self._pd.api.types.is_numeric_dtype(column.dtype): return self._convert_to_measure_values(column), InferType.MEASURE return self._convert_to_dimension_values(column), InferType.DIMENSION def _convert_to_measure_values( self, obj: \"pandas.DataFrame\" # type: ignore ) -> List[MeasureValue]: column = obj return column.fillna(self._default_measure_value).astype(float).values.tolist() def _convert_to_dimension_values( self, obj: \"pandas.DataFrame\" # type: ignore ) -> List[DimensionValue]: column = obj return column.fillna(self._default_dimension_value).astype(str).values.tolist()","title":"PandasDataFrameConverter"},{"location":"reference/ipyvizzu/#ipyvizzu.data.converters.pandas.converter.PandasDataFrameConverter.get_series_list","text":"Convert the DataFrame columns to a list of dictionaries representing series. Returns: Type Description List [ Series ] A list of dictionaries representing series, List [ Series ] where each dictionary has name , values and type keys. Source code in src/ipyvizzu/data/converters/pandas/converter.py def get_series_list(self) -> List[Series]: \"\"\" Convert the `DataFrame` columns to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" series_list = super().get_series_list() index_series = self.get_series_from_index() return index_series + series_list","title":"get_series_list()"},{"location":"reference/ipyvizzu/#ipyvizzu.data.converters.pandas.converter.PandasDataFrameConverter.get_series_from_index","text":"Convert the DataFrame index to a dictionary representing a series, if include_index is provided. Returns: Type Description List [ Series ] A dictionary representing the index series with name , values and type keys. List [ Series ] Returns None if include_index is not provided. Source code in src/ipyvizzu/data/converters/pandas/converter.py def get_series_from_index(self) -> List[Series]: \"\"\" Convert the `DataFrame` index to a dictionary representing a series, if `include_index` is provided. Returns: A dictionary representing the index series with `name`, `values` and `type` keys. Returns `None` if `include_index` is not provided. \"\"\" if not self._include_index or self._df.index.empty: return [] df = self._pd.DataFrame({self._include_index: self._df.index}) index_series_converter = PandasDataFrameConverter( df, self._default_measure_value, self._default_dimension_value ) return index_series_converter.get_series_list()","title":"get_series_from_index()"},{"location":"reference/ipyvizzu/#ipyvizzu.InferType","text":"Bases: Enum An enum class for storing data infer types. Attributes: Name Type Description DIMENSION str An enum key-value for storing dimension infer type. Dimensions are categorical series that can contain strings and numbers, but both will be treated as strings. MEASURE str An enum key-value for storing measure infer type. Measures can only be numerical. Source code in src/ipyvizzu/data/infer_type.py class InferType(Enum): \"\"\" An enum class for storing data infer types. Attributes: DIMENSION: An enum key-value for storing dimension infer type. Dimensions are categorical series that can contain strings and numbers, but both will be treated as strings. MEASURE: An enum key-value for storing measure infer type. Measures can only be numerical. \"\"\" DIMENSION: str = \"dimension\" MEASURE: str = \"measure\"","title":"InferType"},{"location":"reference/ipyvizzu/#ipyvizzu.Method","text":"A class for storing and dumping any kind of data. Source code in src/ipyvizzu/method.py class Method: \"\"\"A class for storing and dumping any kind of data.\"\"\" # pylint: disable=too-few-public-methods _data: dict def dump(self) -> dict: \"\"\" A method for returning the stored data. Returns: The stored data. \"\"\" return self._data","title":"Method"},{"location":"reference/ipyvizzu/#ipyvizzu.method.Method.dump","text":"A method for returning the stored data. Returns: Type Description dict The stored data. Source code in src/ipyvizzu/method.py def dump(self) -> dict: \"\"\" A method for returning the stored data. Returns: The stored data. \"\"\" return self._data","title":"dump()"},{"location":"reference/ipyvizzu/#ipyvizzu.EventHandler","text":"A class for representing an event handler. Source code in src/ipyvizzu/event.py class EventHandler: \"\"\"A class for representing an event handler.\"\"\" def __init__(self, event: str, handler: str): \"\"\" EventHandler constructor. It generates a uuid for the event handler, stores the event type and the body of the handler function. Args: event: The type of the event. handler: The body of the handler function. \"\"\" self._id = uuid.uuid4().hex[:7] self._event = event self._handler = \" \".join(handler.split()) @property def id(self) -> str: # pylint: disable=invalid-name \"\"\" A property for storing an id. Returns: The uuid of the event handler. \"\"\" return self._id @property def event(self) -> str: \"\"\" A property for storing an event type. Returns: The type of the event. \"\"\" return self._event @property def handler(self) -> str: \"\"\" A property for storing an event handler function. Returns: The body of the handler function. \"\"\" return self._handler","title":"EventHandler"},{"location":"reference/ipyvizzu/#ipyvizzu.event.EventHandler.id","text":"A property for storing an id. Returns: Type Description str The uuid of the event handler.","title":"id"},{"location":"reference/ipyvizzu/#ipyvizzu.event.EventHandler.event","text":"A property for storing an event type. Returns: Type Description str The type of the event.","title":"event"},{"location":"reference/ipyvizzu/#ipyvizzu.event.EventHandler.handler","text":"A property for storing an event handler function. Returns: Type Description str The body of the handler function.","title":"handler"},{"location":"reference/ipyvizzu/#ipyvizzu.event.EventHandler.__init__","text":"EventHandler constructor. It generates a uuid for the event handler, stores the event type and the body of the handler function. Parameters: Name Type Description Default event str The type of the event. required handler str The body of the handler function. required Source code in src/ipyvizzu/event.py def __init__(self, event: str, handler: str): \"\"\" EventHandler constructor. It generates a uuid for the event handler, stores the event type and the body of the handler function. Args: event: The type of the event. handler: The body of the handler function. \"\"\" self._id = uuid.uuid4().hex[:7] self._event = event self._handler = \" \".join(handler.split())","title":"__init__()"},{"location":"reference/ipyvizzu/#ipyvizzu.RawJavaScript","text":"A class for representing raw JavaScript code. Source code in src/ipyvizzu/json.py class RawJavaScript: \"\"\"A class for representing raw JavaScript code.\"\"\" # pylint: disable=too-few-public-methods def __init__(self, raw: Optional[str]): \"\"\" RawJavaScript constructor. It stores raw JavaScript code as a string. Args: raw: JavaScript code as `str`. \"\"\" self._raw = raw @property def raw(self) -> Optional[str]: \"\"\" A property for storing raw JavaScript code as a string. Returns: Raw JavaScript code as `str`. \"\"\" return self._raw","title":"RawJavaScript"},{"location":"reference/ipyvizzu/#ipyvizzu.json.RawJavaScript.raw","text":"A property for storing raw JavaScript code as a string. Returns: Type Description Optional [ str ] Raw JavaScript code as str .","title":"raw"},{"location":"reference/ipyvizzu/#ipyvizzu.json.RawJavaScript.__init__","text":"RawJavaScript constructor. It stores raw JavaScript code as a string. Parameters: Name Type Description Default raw Optional [ str ] JavaScript code as str . required Source code in src/ipyvizzu/json.py def __init__(self, raw: Optional[str]): \"\"\" RawJavaScript constructor. It stores raw JavaScript code as a string. Args: raw: JavaScript code as `str`. \"\"\" self._raw = raw","title":"__init__()"},{"location":"reference/ipyvizzu/#ipyvizzu.RawJavaScriptEncoder","text":"Bases: json . JSONEncoder A class for representing a custom json encoder, it can encode objects that contain RawJavaScript values. Source code in src/ipyvizzu/json.py class RawJavaScriptEncoder(json.JSONEncoder): \"\"\" A class for representing a custom json encoder, it can encode objects that contain [RawJavaScript][ipyvizzu.json.RawJavaScript] values. \"\"\" def __init__(self, *args, **kwargs): \"\"\" RawJavaScriptEncoder constructor. It extends [JSONEncoder][json.JSONEncoder] with an instance variable (`_raw_replacements`). The `_raw_replacements` dictionary stores the `uuids` and JavaScript codes of the [RawJavaScript][ipyvizzu.json.RawJavaScript] objects. \"\"\" json.JSONEncoder.__init__(self, *args, **kwargs) self._raw_replacements = {} def default(self, o: Any): \"\"\" Overrides [JSONEncoder.default][json.JSONEncoder.default] method. It replaces [RawJavaScript][ipyvizzu.json.RawJavaScript] object with `uuid` and it stores raw JavaScript code with `uuid` key in the `_raw_replacements` dictionary. \"\"\" if isinstance(o, RawJavaScript): key = uuid.uuid4().hex self._raw_replacements[key] = o.raw return key return json.JSONEncoder.default(self, o) def encode(self, o: Any): \"\"\" Overrides [JSONEncoder.encode][json.JSONEncoder.encode] method. It replaces `uuids` with raw JavaScript code without apostrophes. \"\"\" result = json.JSONEncoder.encode(self, o) for key, val in self._raw_replacements.items(): result = result.replace(f'\"{key}\"', val) return result","title":"RawJavaScriptEncoder"},{"location":"reference/ipyvizzu/#ipyvizzu.json.RawJavaScriptEncoder.__init__","text":"RawJavaScriptEncoder constructor. It extends JSONEncoder with an instance variable ( _raw_replacements ). The _raw_replacements dictionary stores the uuids and JavaScript codes of the RawJavaScript objects. Source code in src/ipyvizzu/json.py def __init__(self, *args, **kwargs): \"\"\" RawJavaScriptEncoder constructor. It extends [JSONEncoder][json.JSONEncoder] with an instance variable (`_raw_replacements`). The `_raw_replacements` dictionary stores the `uuids` and JavaScript codes of the [RawJavaScript][ipyvizzu.json.RawJavaScript] objects. \"\"\" json.JSONEncoder.__init__(self, *args, **kwargs) self._raw_replacements = {}","title":"__init__()"},{"location":"reference/ipyvizzu/#ipyvizzu.json.RawJavaScriptEncoder.default","text":"Overrides JSONEncoder.default method. It replaces RawJavaScript object with uuid and it stores raw JavaScript code with uuid key in the _raw_replacements dictionary. Source code in src/ipyvizzu/json.py def default(self, o: Any): \"\"\" Overrides [JSONEncoder.default][json.JSONEncoder.default] method. It replaces [RawJavaScript][ipyvizzu.json.RawJavaScript] object with `uuid` and it stores raw JavaScript code with `uuid` key in the `_raw_replacements` dictionary. \"\"\" if isinstance(o, RawJavaScript): key = uuid.uuid4().hex self._raw_replacements[key] = o.raw return key return json.JSONEncoder.default(self, o)","title":"default()"},{"location":"reference/ipyvizzu/#ipyvizzu.json.RawJavaScriptEncoder.encode","text":"Overrides JSONEncoder.encode method. It replaces uuids with raw JavaScript code without apostrophes. Source code in src/ipyvizzu/json.py def encode(self, o: Any): \"\"\" Overrides [JSONEncoder.encode][json.JSONEncoder.encode] method. It replaces `uuids` with raw JavaScript code without apostrophes. \"\"\" result = json.JSONEncoder.encode(self, o) for key, val in self._raw_replacements.items(): result = result.replace(f'\"{key}\"', val) return result","title":"encode()"},{"location":"reference/ipyvizzu/#ipyvizzu.ChartProperty","text":"Bases: Enum An enum class for storing chart properties. Source code in src/ipyvizzu/template.py class ChartProperty(Enum): \"\"\"An enum class for storing chart properties.\"\"\" CONFIG = \"config\" \"\"\"An enum key-value for storing config chart property.\"\"\" STYLE = \"style\" \"\"\"An enum key-value for storing style chart property.\"\"\"","title":"ChartProperty"},{"location":"reference/ipyvizzu/#ipyvizzu.template.ChartProperty.CONFIG","text":"An enum key-value for storing config chart property.","title":"CONFIG"},{"location":"reference/ipyvizzu/#ipyvizzu.template.ChartProperty.STYLE","text":"An enum key-value for storing style chart property.","title":"STYLE"},{"location":"reference/ipyvizzu/#ipyvizzu.DisplayTarget","text":"Bases: Enum An enum class for storing chart display options. Source code in src/ipyvizzu/template.py class DisplayTarget(Enum): \"\"\"An enum class for storing chart display options.\"\"\" BEGIN = \"begin\" \"\"\"Display all animation steps after the constructor's cell.\"\"\" END = \"end\" \"\"\"Display all animation steps after the last running cell.\"\"\" ACTUAL = \"actual\" \"\"\"Display the actual animation step after the currently running cell.\"\"\" MANUAL = \"manual\" \"\"\"Display all animation steps after calling a show method.\"\"\"","title":"DisplayTarget"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTarget.BEGIN","text":"Display all animation steps after the constructor's cell.","title":"BEGIN"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTarget.END","text":"Display all animation steps after the last running cell.","title":"END"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTarget.ACTUAL","text":"Display the actual animation step after the currently running cell.","title":"ACTUAL"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTarget.MANUAL","text":"Display all animation steps after calling a show method.","title":"MANUAL"},{"location":"reference/ipyvizzu/#ipyvizzu.DisplayTemplate","text":"A class for storing JavaScript snippet templates. Source code in src/ipyvizzu/template.py class DisplayTemplate: \"\"\"A class for storing JavaScript snippet templates.\"\"\" # pylint: disable=too-few-public-methods IPYVIZZUJS: str = \"{ipyvizzujs}\" \"\"\"ipyvizzu JavaScript class.\"\"\" INIT: str = ( \"window.ipyvizzu.createChart(element, \" + \"'{chart_id}', '{vizzu}', '{div_width}', '{div_height}');\" ) \"\"\"Call createChart JavaScript method.\"\"\" CHANGE_ANALYTICS_TO: str = ( \"if (window.IpyVizzu) window.IpyVizzu.changeAnalyticsTo({analytics});\" ) \"\"\"Call changeAnalyticsTo JavaScript method.\"\"\" ANIMATE: str = ( \"window.ipyvizzu.animate(element, \" + \"'{chart_id}', '{anim_id}', '{display_target}', {scroll}, \" + \"lib => {{ return {chart_target} }}, {chart_anim_opts});\" ) \"\"\"Call animate JavaScript method.\"\"\" FEATURE: str = ( \"window.ipyvizzu.feature(element, '{chart_id}', '{name}', {enabled});\" ) \"\"\"Call feature JavaScript method.\"\"\" STORE: str = \"window.ipyvizzu.store(element, '{chart_id}', '{id}');\" \"\"\"Call store JavaScript method.\"\"\" SET_EVENT: str = ( \"window.ipyvizzu.setEvent(element, \" + \"'{chart_id}', '{id}', '{event}', event => {{ {handler} }});\" ) \"\"\"Call setEvent JavaScript method.\"\"\" CLEAR_EVENT: str = ( \"window.ipyvizzu.clearEvent(element, '{chart_id}', '{id}', '{event}');\" ) \"\"\"Call clearEvent JavaScript method.\"\"\" LOG: str = \"window.ipyvizzu.log(element, '{chart_id}', '{chart_property}');\" \"\"\"Call log JavaScript method.\"\"\" CONTROL: str = \"window.ipyvizzu.control(element, '{method}', {params});\" \"\"\"Call animation control JavaScript methods.\"\"\" CLEAR_INHIBITSCROLL: str = ( \"if (window.IpyVizzu) { window.IpyVizzu.clearInhibitScroll(element); }\" ) \"\"\"Call clearInhibitScroll JavaScript method if ipyvizzu JavaScript class exists.\"\"\"","title":"DisplayTemplate"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTemplate.IPYVIZZUJS","text":"ipyvizzu JavaScript class.","title":"IPYVIZZUJS"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTemplate.INIT","text":"Call createChart JavaScript method.","title":"INIT"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTemplate.CHANGE_ANALYTICS_TO","text":"Call changeAnalyticsTo JavaScript method.","title":"CHANGE_ANALYTICS_TO"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTemplate.ANIMATE","text":"Call animate JavaScript method.","title":"ANIMATE"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTemplate.FEATURE","text":"Call feature JavaScript method.","title":"FEATURE"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTemplate.STORE","text":"Call store JavaScript method.","title":"STORE"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTemplate.SET_EVENT","text":"Call setEvent JavaScript method.","title":"SET_EVENT"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTemplate.CLEAR_EVENT","text":"Call clearEvent JavaScript method.","title":"CLEAR_EVENT"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTemplate.LOG","text":"Call log JavaScript method.","title":"LOG"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTemplate.CONTROL","text":"Call animation control JavaScript methods.","title":"CONTROL"},{"location":"reference/ipyvizzu/#ipyvizzu.template.DisplayTemplate.CLEAR_INHIBITSCROLL","text":"Call clearInhibitScroll JavaScript method if ipyvizzu JavaScript class exists.","title":"CLEAR_INHIBITSCROLL"},{"location":"reference/ipyvizzu/__version__/","text":"ipyvizzu.__version__ A module for storing version number.","title":"  version  "},{"location":"reference/ipyvizzu/__version__/#ipyvizzu.__version__","text":"A module for storing version number.","title":"__version__"},{"location":"reference/ipyvizzu/animation/","text":"ipyvizzu.animation A module for working with chart animations. ipyvizzu.animation.AbstractAnimation An abstract class for representing animation objects that have dump and build methods. Source code in src/ipyvizzu/animation.py class AbstractAnimation: \"\"\" An abstract class for representing animation objects that have `dump` and `build` methods. \"\"\" def dump(self) -> str: \"\"\" A method for converting the built dictionary into string. Returns: An str that has been json dumped with [RawJavaScriptEncoder][ipyvizzu.json.RawJavaScriptEncoder] from a dictionary. \"\"\" return json.dumps(self.build(), cls=RawJavaScriptEncoder) @abc.abstractmethod def build(self) -> dict: \"\"\" An abstract method for returning a dictionary with values that can be converted into json string. Returns: A dictionary that stored in the animation object. \"\"\" dump() A method for converting the built dictionary into string. Returns: Type Description str An str that has been json dumped with RawJavaScriptEncoder from a dictionary. Source code in src/ipyvizzu/animation.py def dump(self) -> str: \"\"\" A method for converting the built dictionary into string. Returns: An str that has been json dumped with [RawJavaScriptEncoder][ipyvizzu.json.RawJavaScriptEncoder] from a dictionary. \"\"\" return json.dumps(self.build(), cls=RawJavaScriptEncoder) build() abstractmethod An abstract method for returning a dictionary with values that can be converted into json string. Returns: Type Description dict A dictionary that stored in the animation object. Source code in src/ipyvizzu/animation.py @abc.abstractmethod def build(self) -> dict: \"\"\" An abstract method for returning a dictionary with values that can be converted into json string. Returns: A dictionary that stored in the animation object. \"\"\" ipyvizzu.animation.PlainAnimation Bases: dict , AbstractAnimation A class for representing plain animation. It can build any dictionary. Source code in src/ipyvizzu/animation.py class PlainAnimation(dict, AbstractAnimation): \"\"\" A class for representing plain animation. It can build any dictionary. \"\"\" def build(self) -> dict: \"\"\" A method for returning the plain animation dictionary. Returns: A dictionary that stored in the plain animation object. \"\"\" return self build() A method for returning the plain animation dictionary. Returns: Type Description dict A dictionary that stored in the plain animation object. Source code in src/ipyvizzu/animation.py def build(self) -> dict: \"\"\" A method for returning the plain animation dictionary. Returns: A dictionary that stored in the plain animation object. \"\"\" return self ipyvizzu.animation.Data Bases: dict , AbstractAnimation A class for representing data animation. It can build data option of the chart. Source code in src/ipyvizzu/animation.py class Data(dict, AbstractAnimation): \"\"\" A class for representing data animation. It can build data option of the chart. \"\"\" @classmethod def filter(cls, filter_expr: Optional[str] = None) -> \"Data\": \"\"\" A class method for creating a [Data][ipyvizzu.animation.Data] class instance with a data filter. Args: filter_expr: The JavaScript data filter expression. Returns: (Data): A data animation instance that contains a data filter. Example: Create a [Data][ipyvizzu.animation.Data] class with a data filter: filter = Data.filter(\"record['Genres'] == 'Pop'\") \"\"\" data = cls() data.set_filter(filter_expr) return data def set_filter(self, filter_expr: Optional[str] = None) -> None: \"\"\" A method for adding a filter to an existing [Data][ipyvizzu.animation.Data] class instance. Args: filter_expr: The JavaScript data filter expression. Example: Add a data filter to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.set_filter(\"record['Genres'] == 'Pop'\") \"\"\" filter_expr_raw_js = ( RawJavaScript(f\"record => {{ return ({' '.join(filter_expr.split())}) }}\") if filter_expr is not None else filter_expr ) self.update({\"filter\": filter_expr_raw_js}) @classmethod def from_json(cls, filename: Union[str, bytes, PathLike]) -> \"Data\": \"\"\" A method for returning a [Data][ipyvizzu.animation.Data] class instance which has been created from a json file. Args: filename: The path of the data source json file. Returns: (Data): A data animation instance that has been created from a json file. \"\"\" with open(filename, \"r\", encoding=\"utf8\") as file_desc: return cls(json.load(file_desc)) def add_record(self, record: Record) -> None: \"\"\" A method for adding a record to an existing [Data][ipyvizzu.animation.Data] class instance. Args: record: A list that contains data values. Example: Adding a record to a [Data][ipyvizzu.animation.Data] class instance: data = Data() record = [\"Pop\", \"Hard\", 114] data.add_record(record) \"\"\" self._add_value(\"records\", record) def add_records(self, records: List[Record]) -> None: \"\"\" A method for adding records to an existing [Data][ipyvizzu.animation.Data] class instance. Args: records: A list that contains data records. Example: Adding records to a [Data][ipyvizzu.animation.Data] class instance: data = Data() records = [ [\"Pop\", \"Hard\", 114], [\"Rock\", \"Hard\", 96], [\"Pop\", \"Experimental\", 127], [\"Rock\", \"Experimental\", 83], ] data.add_records(records) \"\"\" list(map(self.add_record, records)) def add_series( self, name: str, values: Optional[SeriesValues] = None, **kwargs ) -> None: \"\"\" A method for adding a series to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the series. values: The data values of the series. **kwargs (Optional): Arbitrary keyword arguments. For example infer type can be set with the `type` keywod argument. Example: Adding a series without values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series(\"Genres\") Adding a series without values and with infer type to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series(\"Kinds\", type=\"dimension\") Adding a series with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series( \"Popularity\", [114, 96, 127, 83] ) \"\"\" self._add_named_value(\"series\", name, values, **kwargs) def add_series_list(self, series: List[Series]) -> None: \"\"\" A method for adding list of series to an existing [Data][ipyvizzu.animation.Data] class instance. Args: series: List of series. \"\"\" if series: self.setdefault(\"series\", []).extend(series) def add_dimension( self, name: str, values: Optional[List[DimensionValue]] = None, **kwargs ) -> None: \"\"\" A method for adding a dimension to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the dimension. values: The data values of the dimension. **kwargs (Optional): Arbitrary keyword arguments. Example: Adding a dimension with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_dimension(\"Genres\", [\"Pop\", \"Rock\"]) \"\"\" self._add_named_value(\"dimensions\", name, values, **kwargs) def add_measure( self, name: str, values: Optional[NestedMeasureValues] = None, **kwargs ) -> None: \"\"\" A method for adding a measure to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the measure. values: The data values of the measure. **kwargs (Optional): Arbitrary keyword arguments. Example: Adding a measure with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_measure( \"Popularity\", [ [114, 96], [127, 83], ], ) \"\"\" self._add_named_value(\"measures\", name, values, **kwargs) def add_df( self, df: Optional[ # type: ignore Union[ \"pandas.DataFrame\", \"pandas.Series\", \"pyspark.sql.DataFrame\", ] ], default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, max_rows: int = MAX_ROWS, include_index: Optional[str] = None, ) -> None: \"\"\" Add a `pandas` `DataFrame`, `Series` or a `pyspark` `DataFrame` to an existing [Data][ipyvizzu.animation.Data] class instance. Args: df: The `pandas` `DataFrame`, `Series` or the `pyspark` `DataFrame`to add. default_measure_value: The default measure value to fill empty values. Defaults to 0. default_dimension_value: The default dimension value to fill empty values. Defaults to an empty string. max_rows: The maximum number of rows to include in the converted series list. If the `df` contains more rows, a random sample of the given number of rows (approximately) will be taken. include_index: Add the data frame's index as a column with the given name. Defaults to `None`. (Cannot be used with `pyspark` `DataFrame`.) Example: Adding a data frame to a [Data][ipyvizzu.animation.Data] class instance: df = pd.DataFrame( { \"Genres\": [\"Pop\", \"Rock\", \"Pop\", \"Rock\"], \"Kinds\": [\"Hard\", \"Hard\", \"Experimental\", \"Experimental\"], \"Popularity\": [114, 96, 127, 83], } ) data = Data() data.add_df(df) \"\"\" # pylint: disable=too-many-arguments if not isinstance(df, type(None)): arguments = { \"df\": df, \"default_measure_value\": default_measure_value, \"default_dimension_value\": default_dimension_value, \"max_rows\": max_rows, \"include_index\": include_index, } Converter: Union[ Type[PandasDataFrameConverter], Type[SparkDataFrameConverter] ] = PandasDataFrameConverter if isinstance(df, SparkDataFrame): Converter = SparkDataFrameConverter if arguments[\"include_index\"] is not None: raise ValueError( \"`include_index` cannot be used with `pyspark` `DataFrame`\" ) del arguments[\"include_index\"] converter = Converter(**arguments) # type: ignore series_list = converter.get_series_list() self.add_series_list(series_list) def add_data_frame( self, data_frame: Optional[Union[\"pandas.DataFrame\", \"pandas.Series\"]], # type: ignore default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, ) -> None: \"\"\" [Deprecated] This function is deprecated and will be removed in future versions. Use [add_df][ipyvizzu.animation.Data.add_df] function instead. Add a `pandas` `DataFrame` or `Series` to an existing [Data][ipyvizzu.animation.Data] class instance. Args: data_frame: The `pandas` `DataFrame` or `Series` to add. default_measure_value: The default measure value to fill empty values. Defaults to 0. default_dimension_value: The default dimension value to fill empty values. Defaults to an empty string. \"\"\" # pylint: disable=line-too-long reference = \"https://ipyvizzu.vizzuhq.com/0.16/reference/ipyvizzu/animation/#ipyvizzu.animation.Data.add_df\" warnings.warn( f\"'add_data_frame' is deprecated and will be removed in future versions. Use 'add_df' instead - see {reference}\", DeprecationWarning, stacklevel=2, ) self.add_df(data_frame, default_measure_value, default_dimension_value) def add_df_index( self, df: Optional[Union[\"pandas.DataFrame\", \"pandas.Series\"]], # type: ignore column_name: str = \"Index\", ) -> None: \"\"\" Add the index of a `pandas` `DataFrame` as a series to an existing [Data][ipyvizzu.animation.Data] class instance. Args: df: The `pandas` `DataFrame` or `Series` from which to extract the index. column_name: Name for the index column to add as a series. Example: Adding a data frame's index to a [Data][ipyvizzu.animation.Data] class instance: df = pd.DataFrame( {\"Popularity\": [114, 96]}, index=[\"x\", \"y\"] ) data = Data() data.add_df_index(df, \"DataFrameIndex\") data.add_df(df) \"\"\" if not isinstance(df, type(None)): converter = PandasDataFrameConverter(df, include_index=column_name) series_list = converter.get_series_from_index() self.add_series_list(series_list) def add_data_frame_index( self, data_frame: Optional[Union[\"pandas.DataFrame\", \"pandas.Series\"]], # type: ignore name: str, ) -> None: \"\"\" [Deprecated] This function is deprecated and will be removed in future versions. Use [add_df_index][ipyvizzu.animation.Data.add_df_index] function instead. Add the index of a `pandas` `DataFrame` as a series to an existing [Data][ipyvizzu.animation.Data] class instance. Args: data_frame: The `pandas` `DataFrame` or `Series` from which to extract the index. name: The name of the index series. \"\"\" # pylint: disable=line-too-long reference = \"https://ipyvizzu.vizzuhq.com/0.16/reference/ipyvizzu/animation/#ipyvizzu.animation.Data.add_df_index\" warnings.warn( f\"'add_data_frame_index' is deprecated and will be removed in future versions. Use 'add_df_index' instead - see {reference}\", DeprecationWarning, stacklevel=2, ) self.add_df_index(data_frame, name) def add_np_array( self, np_array: Optional[\"numpy.array\"], # type: ignore column_name: Optional[ColumnName] = None, column_dtype: Optional[ColumnDtype] = None, default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, ) -> None: \"\"\" Add a `numpy` `array` to an existing [Data][ipyvizzu.animation.Data] class instance. Args: np_array: The `numpy` `array` to add. column_name: The name of a column. By default, uses column indices. Can be set with an Index:Name pair or, for single-dimensional arrays, with just the Name. column_dtype: The dtype of a column. By default, uses the np_array's dtype. Can be set with an Index:DType pair or, for single-dimensional arrays, with just the DType. default_measure_value: Default value to use for missing measure values. Defaults to 0. default_dimension_value: Default value to use for missing dimension values. Defaults to an empty string. Example: Adding a data frame to a [Data][ipyvizzu.animation.Data] class instance: np_array = np.zeros((3, 4)) data = Data() data.add_np_array(np_array) \"\"\" # pylint: disable=too-many-arguments if not isinstance(np_array, type(None)): converter = NumpyArrayConverter( np_array, column_name, column_dtype, default_measure_value, default_dimension_value, ) series_list = converter.get_series_list() self.add_series_list(series_list) def _add_named_value( self, dest: str, name: str, values: Optional[ Union[ SeriesValues, NestedMeasureValues, ] ] = None, **kwargs, ) -> None: value = {\"name\": name, **kwargs} if values is not None: value[\"values\"] = values self._add_value(dest, value) def _add_value(self, dest: str, value: Union[dict, list]) -> None: self.setdefault(dest, []).append(value) def build(self) -> dict: \"\"\" A method for validating and returning the data animation dictionary. Returns: A dictionary that stored in the data animation object. It contains a `data` key whose value is the stored animation. \"\"\" jsonschema.validate(self, DATA_SCHEMA) return {\"data\": self} filter(filter_expr=None) classmethod A class method for creating a Data class instance with a data filter. Parameters: Name Type Description Default filter_expr Optional [ str ] The JavaScript data filter expression. None Returns: Type Description Data A data animation instance that contains a data filter. Example Create a Data class with a data filter: filter = Data.filter(\"record['Genres'] == 'Pop'\") Source code in src/ipyvizzu/animation.py @classmethod def filter(cls, filter_expr: Optional[str] = None) -> \"Data\": \"\"\" A class method for creating a [Data][ipyvizzu.animation.Data] class instance with a data filter. Args: filter_expr: The JavaScript data filter expression. Returns: (Data): A data animation instance that contains a data filter. Example: Create a [Data][ipyvizzu.animation.Data] class with a data filter: filter = Data.filter(\"record['Genres'] == 'Pop'\") \"\"\" data = cls() data.set_filter(filter_expr) return data set_filter(filter_expr=None) A method for adding a filter to an existing Data class instance. Parameters: Name Type Description Default filter_expr Optional [ str ] The JavaScript data filter expression. None Example Add a data filter to a Data class instance: data = Data() data.set_filter(\"record['Genres'] == 'Pop'\") Source code in src/ipyvizzu/animation.py def set_filter(self, filter_expr: Optional[str] = None) -> None: \"\"\" A method for adding a filter to an existing [Data][ipyvizzu.animation.Data] class instance. Args: filter_expr: The JavaScript data filter expression. Example: Add a data filter to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.set_filter(\"record['Genres'] == 'Pop'\") \"\"\" filter_expr_raw_js = ( RawJavaScript(f\"record => {{ return ({' '.join(filter_expr.split())}) }}\") if filter_expr is not None else filter_expr ) self.update({\"filter\": filter_expr_raw_js}) from_json(filename) classmethod A method for returning a Data class instance which has been created from a json file. Parameters: Name Type Description Default filename Union [ str , bytes , PathLike ] The path of the data source json file. required Returns: Type Description Data A data animation instance that has been created from a json file. Source code in src/ipyvizzu/animation.py @classmethod def from_json(cls, filename: Union[str, bytes, PathLike]) -> \"Data\": \"\"\" A method for returning a [Data][ipyvizzu.animation.Data] class instance which has been created from a json file. Args: filename: The path of the data source json file. Returns: (Data): A data animation instance that has been created from a json file. \"\"\" with open(filename, \"r\", encoding=\"utf8\") as file_desc: return cls(json.load(file_desc)) add_record(record) A method for adding a record to an existing Data class instance. Parameters: Name Type Description Default record Record A list that contains data values. required Example Adding a record to a Data class instance: data = Data() record = [\"Pop\", \"Hard\", 114] data.add_record(record) Source code in src/ipyvizzu/animation.py def add_record(self, record: Record) -> None: \"\"\" A method for adding a record to an existing [Data][ipyvizzu.animation.Data] class instance. Args: record: A list that contains data values. Example: Adding a record to a [Data][ipyvizzu.animation.Data] class instance: data = Data() record = [\"Pop\", \"Hard\", 114] data.add_record(record) \"\"\" self._add_value(\"records\", record) add_records(records) A method for adding records to an existing Data class instance. Parameters: Name Type Description Default records List [ Record ] A list that contains data records. required Example Adding records to a Data class instance: data = Data() records = [ [\"Pop\", \"Hard\", 114], [\"Rock\", \"Hard\", 96], [\"Pop\", \"Experimental\", 127], [\"Rock\", \"Experimental\", 83], ] data.add_records(records) Source code in src/ipyvizzu/animation.py def add_records(self, records: List[Record]) -> None: \"\"\" A method for adding records to an existing [Data][ipyvizzu.animation.Data] class instance. Args: records: A list that contains data records. Example: Adding records to a [Data][ipyvizzu.animation.Data] class instance: data = Data() records = [ [\"Pop\", \"Hard\", 114], [\"Rock\", \"Hard\", 96], [\"Pop\", \"Experimental\", 127], [\"Rock\", \"Experimental\", 83], ] data.add_records(records) \"\"\" list(map(self.add_record, records)) add_series(name, values=None, **kwargs) A method for adding a series to an existing Data class instance. Parameters: Name Type Description Default name str The name of the series. required values Optional [ SeriesValues ] The data values of the series. None **kwargs Optional Arbitrary keyword arguments. For example infer type can be set with the type keywod argument. {} Example Adding a series without values to a Data class instance: data = Data() data.add_series(\"Genres\") Adding a series without values and with infer type to a Data class instance: data = Data() data.add_series(\"Kinds\", type=\"dimension\") Adding a series with values to a Data class instance: data = Data() data.add_series( \"Popularity\", [114, 96, 127, 83] ) Source code in src/ipyvizzu/animation.py def add_series( self, name: str, values: Optional[SeriesValues] = None, **kwargs ) -> None: \"\"\" A method for adding a series to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the series. values: The data values of the series. **kwargs (Optional): Arbitrary keyword arguments. For example infer type can be set with the `type` keywod argument. Example: Adding a series without values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series(\"Genres\") Adding a series without values and with infer type to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series(\"Kinds\", type=\"dimension\") Adding a series with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series( \"Popularity\", [114, 96, 127, 83] ) \"\"\" self._add_named_value(\"series\", name, values, **kwargs) add_series_list(series) A method for adding list of series to an existing Data class instance. Parameters: Name Type Description Default series List [ Series ] List of series. required Source code in src/ipyvizzu/animation.py def add_series_list(self, series: List[Series]) -> None: \"\"\" A method for adding list of series to an existing [Data][ipyvizzu.animation.Data] class instance. Args: series: List of series. \"\"\" if series: self.setdefault(\"series\", []).extend(series) add_dimension(name, values=None, **kwargs) A method for adding a dimension to an existing Data class instance. Parameters: Name Type Description Default name str The name of the dimension. required values Optional [ List [ DimensionValue ]] The data values of the dimension. None **kwargs Optional Arbitrary keyword arguments. {} Example Adding a dimension with values to a Data class instance: data = Data() data.add_dimension(\"Genres\", [\"Pop\", \"Rock\"]) Source code in src/ipyvizzu/animation.py def add_dimension( self, name: str, values: Optional[List[DimensionValue]] = None, **kwargs ) -> None: \"\"\" A method for adding a dimension to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the dimension. values: The data values of the dimension. **kwargs (Optional): Arbitrary keyword arguments. Example: Adding a dimension with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_dimension(\"Genres\", [\"Pop\", \"Rock\"]) \"\"\" self._add_named_value(\"dimensions\", name, values, **kwargs) add_measure(name, values=None, **kwargs) A method for adding a measure to an existing Data class instance. Parameters: Name Type Description Default name str The name of the measure. required values Optional [ NestedMeasureValues ] The data values of the measure. None **kwargs Optional Arbitrary keyword arguments. {} Example Adding a measure with values to a Data class instance: data = Data() data.add_measure( \"Popularity\", [ [114, 96], [127, 83], ], ) Source code in src/ipyvizzu/animation.py def add_measure( self, name: str, values: Optional[NestedMeasureValues] = None, **kwargs ) -> None: \"\"\" A method for adding a measure to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the measure. values: The data values of the measure. **kwargs (Optional): Arbitrary keyword arguments. Example: Adding a measure with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_measure( \"Popularity\", [ [114, 96], [127, 83], ], ) \"\"\" self._add_named_value(\"measures\", name, values, **kwargs) add_df(df, default_measure_value=NAN_MEASURE, default_dimension_value=NAN_DIMENSION, max_rows=MAX_ROWS, include_index=None) Add a pandas DataFrame , Series or a pyspark DataFrame to an existing Data class instance. Parameters: Name Type Description Default df Optional [ Union [ pandas . DataFrame , pandas . Series , pyspark . sql . DataFrame ]] The pandas DataFrame , Series or the pyspark DataFrame to add. required default_measure_value MeasureValue The default measure value to fill empty values. Defaults to 0. NAN_MEASURE default_dimension_value DimensionValue The default dimension value to fill empty values. Defaults to an empty string. NAN_DIMENSION max_rows int The maximum number of rows to include in the converted series list. If the df contains more rows, a random sample of the given number of rows (approximately) will be taken. MAX_ROWS include_index Optional [ str ] Add the data frame's index as a column with the given name. Defaults to None . (Cannot be used with pyspark DataFrame .) None Example Adding a data frame to a Data class instance: df = pd.DataFrame( { \"Genres\": [\"Pop\", \"Rock\", \"Pop\", \"Rock\"], \"Kinds\": [\"Hard\", \"Hard\", \"Experimental\", \"Experimental\"], \"Popularity\": [114, 96, 127, 83], } ) data = Data() data.add_df(df) Source code in src/ipyvizzu/animation.py def add_df( self, df: Optional[ # type: ignore Union[ \"pandas.DataFrame\", \"pandas.Series\", \"pyspark.sql.DataFrame\", ] ], default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, max_rows: int = MAX_ROWS, include_index: Optional[str] = None, ) -> None: \"\"\" Add a `pandas` `DataFrame`, `Series` or a `pyspark` `DataFrame` to an existing [Data][ipyvizzu.animation.Data] class instance. Args: df: The `pandas` `DataFrame`, `Series` or the `pyspark` `DataFrame`to add. default_measure_value: The default measure value to fill empty values. Defaults to 0. default_dimension_value: The default dimension value to fill empty values. Defaults to an empty string. max_rows: The maximum number of rows to include in the converted series list. If the `df` contains more rows, a random sample of the given number of rows (approximately) will be taken. include_index: Add the data frame's index as a column with the given name. Defaults to `None`. (Cannot be used with `pyspark` `DataFrame`.) Example: Adding a data frame to a [Data][ipyvizzu.animation.Data] class instance: df = pd.DataFrame( { \"Genres\": [\"Pop\", \"Rock\", \"Pop\", \"Rock\"], \"Kinds\": [\"Hard\", \"Hard\", \"Experimental\", \"Experimental\"], \"Popularity\": [114, 96, 127, 83], } ) data = Data() data.add_df(df) \"\"\" # pylint: disable=too-many-arguments if not isinstance(df, type(None)): arguments = { \"df\": df, \"default_measure_value\": default_measure_value, \"default_dimension_value\": default_dimension_value, \"max_rows\": max_rows, \"include_index\": include_index, } Converter: Union[ Type[PandasDataFrameConverter], Type[SparkDataFrameConverter] ] = PandasDataFrameConverter if isinstance(df, SparkDataFrame): Converter = SparkDataFrameConverter if arguments[\"include_index\"] is not None: raise ValueError( \"`include_index` cannot be used with `pyspark` `DataFrame`\" ) del arguments[\"include_index\"] converter = Converter(**arguments) # type: ignore series_list = converter.get_series_list() self.add_series_list(series_list) add_data_frame(data_frame, default_measure_value=NAN_MEASURE, default_dimension_value=NAN_DIMENSION) [Deprecated] This function is deprecated and will be removed in future versions. Use add_df function instead. Add a pandas DataFrame or Series to an existing Data class instance. Parameters: Name Type Description Default data_frame Optional [ Union [ pandas . DataFrame , pandas . Series ]] The pandas DataFrame or Series to add. required default_measure_value MeasureValue The default measure value to fill empty values. Defaults to 0. NAN_MEASURE default_dimension_value DimensionValue The default dimension value to fill empty values. Defaults to an empty string. NAN_DIMENSION Source code in src/ipyvizzu/animation.py def add_data_frame( self, data_frame: Optional[Union[\"pandas.DataFrame\", \"pandas.Series\"]], # type: ignore default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, ) -> None: \"\"\" [Deprecated] This function is deprecated and will be removed in future versions. Use [add_df][ipyvizzu.animation.Data.add_df] function instead. Add a `pandas` `DataFrame` or `Series` to an existing [Data][ipyvizzu.animation.Data] class instance. Args: data_frame: The `pandas` `DataFrame` or `Series` to add. default_measure_value: The default measure value to fill empty values. Defaults to 0. default_dimension_value: The default dimension value to fill empty values. Defaults to an empty string. \"\"\" # pylint: disable=line-too-long reference = \"https://ipyvizzu.vizzuhq.com/0.16/reference/ipyvizzu/animation/#ipyvizzu.animation.Data.add_df\" warnings.warn( f\"'add_data_frame' is deprecated and will be removed in future versions. Use 'add_df' instead - see {reference}\", DeprecationWarning, stacklevel=2, ) self.add_df(data_frame, default_measure_value, default_dimension_value) add_df_index(df, column_name='Index') Add the index of a pandas DataFrame as a series to an existing Data class instance. Parameters: Name Type Description Default df Optional [ Union [ pandas . DataFrame , pandas . Series ]] The pandas DataFrame or Series from which to extract the index. required column_name str Name for the index column to add as a series. 'Index' Example Adding a data frame's index to a Data class instance: df = pd.DataFrame( {\"Popularity\": [114, 96]}, index=[\"x\", \"y\"] ) data = Data() data.add_df_index(df, \"DataFrameIndex\") data.add_df(df) Source code in src/ipyvizzu/animation.py def add_df_index( self, df: Optional[Union[\"pandas.DataFrame\", \"pandas.Series\"]], # type: ignore column_name: str = \"Index\", ) -> None: \"\"\" Add the index of a `pandas` `DataFrame` as a series to an existing [Data][ipyvizzu.animation.Data] class instance. Args: df: The `pandas` `DataFrame` or `Series` from which to extract the index. column_name: Name for the index column to add as a series. Example: Adding a data frame's index to a [Data][ipyvizzu.animation.Data] class instance: df = pd.DataFrame( {\"Popularity\": [114, 96]}, index=[\"x\", \"y\"] ) data = Data() data.add_df_index(df, \"DataFrameIndex\") data.add_df(df) \"\"\" if not isinstance(df, type(None)): converter = PandasDataFrameConverter(df, include_index=column_name) series_list = converter.get_series_from_index() self.add_series_list(series_list) add_data_frame_index(data_frame, name) [Deprecated] This function is deprecated and will be removed in future versions. Use add_df_index function instead. Add the index of a pandas DataFrame as a series to an existing Data class instance. Parameters: Name Type Description Default data_frame Optional [ Union [ pandas . DataFrame , pandas . Series ]] The pandas DataFrame or Series from which to extract the index. required name str The name of the index series. required Source code in src/ipyvizzu/animation.py def add_data_frame_index( self, data_frame: Optional[Union[\"pandas.DataFrame\", \"pandas.Series\"]], # type: ignore name: str, ) -> None: \"\"\" [Deprecated] This function is deprecated and will be removed in future versions. Use [add_df_index][ipyvizzu.animation.Data.add_df_index] function instead. Add the index of a `pandas` `DataFrame` as a series to an existing [Data][ipyvizzu.animation.Data] class instance. Args: data_frame: The `pandas` `DataFrame` or `Series` from which to extract the index. name: The name of the index series. \"\"\" # pylint: disable=line-too-long reference = \"https://ipyvizzu.vizzuhq.com/0.16/reference/ipyvizzu/animation/#ipyvizzu.animation.Data.add_df_index\" warnings.warn( f\"'add_data_frame_index' is deprecated and will be removed in future versions. Use 'add_df_index' instead - see {reference}\", DeprecationWarning, stacklevel=2, ) self.add_df_index(data_frame, name) add_np_array(np_array, column_name=None, column_dtype=None, default_measure_value=NAN_MEASURE, default_dimension_value=NAN_DIMENSION) Add a numpy array to an existing Data class instance. Parameters: Name Type Description Default np_array Optional [ numpy . array ] The numpy array to add. required column_name Optional [ ColumnName ] The name of a column. By default, uses column indices. Can be set with an Index:Name pair or, for single-dimensional arrays, with just the Name. None column_dtype Optional [ ColumnDtype ] The dtype of a column. By default, uses the np_array's dtype. Can be set with an Index:DType pair or, for single-dimensional arrays, with just the DType. None default_measure_value MeasureValue Default value to use for missing measure values. Defaults to 0. NAN_MEASURE default_dimension_value DimensionValue Default value to use for missing dimension values. Defaults to an empty string. NAN_DIMENSION Example Adding a data frame to a Data class instance: np_array = np.zeros((3, 4)) data = Data() data.add_np_array(np_array) Source code in src/ipyvizzu/animation.py def add_np_array( self, np_array: Optional[\"numpy.array\"], # type: ignore column_name: Optional[ColumnName] = None, column_dtype: Optional[ColumnDtype] = None, default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, ) -> None: \"\"\" Add a `numpy` `array` to an existing [Data][ipyvizzu.animation.Data] class instance. Args: np_array: The `numpy` `array` to add. column_name: The name of a column. By default, uses column indices. Can be set with an Index:Name pair or, for single-dimensional arrays, with just the Name. column_dtype: The dtype of a column. By default, uses the np_array's dtype. Can be set with an Index:DType pair or, for single-dimensional arrays, with just the DType. default_measure_value: Default value to use for missing measure values. Defaults to 0. default_dimension_value: Default value to use for missing dimension values. Defaults to an empty string. Example: Adding a data frame to a [Data][ipyvizzu.animation.Data] class instance: np_array = np.zeros((3, 4)) data = Data() data.add_np_array(np_array) \"\"\" # pylint: disable=too-many-arguments if not isinstance(np_array, type(None)): converter = NumpyArrayConverter( np_array, column_name, column_dtype, default_measure_value, default_dimension_value, ) series_list = converter.get_series_list() self.add_series_list(series_list) build() A method for validating and returning the data animation dictionary. Returns: Type Description dict A dictionary that stored in the data animation object. It contains a data key whose value is the stored animation. Source code in src/ipyvizzu/animation.py def build(self) -> dict: \"\"\" A method for validating and returning the data animation dictionary. Returns: A dictionary that stored in the data animation object. It contains a `data` key whose value is the stored animation. \"\"\" jsonschema.validate(self, DATA_SCHEMA) return {\"data\": self} ipyvizzu.animation.ConfigAttr Bases: type A metaclass class for the Config class. Returns a Config class with a chart preset if the __getattr__ method called. For information on all available chart presets see the Vizzu Code reference . Source code in src/ipyvizzu/animation.py class ConfigAttr(type): \"\"\" A metaclass class for the [Config][ipyvizzu.animation.Config] class. Returns a [Config][ipyvizzu.animation.Config] class with a chart preset if the `__getattr__` method called. For information on all available chart presets see the [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/modules/Presets/#interfaces). \"\"\" @classmethod def __getattr__(mcs, name): config_attr = mcs(\"ConfigAttr\", (object,), {\"name\": name}) return config_attr._get_preset # pylint: disable=no-member def _get_preset(cls, preset): config = Config(RawJavaScript(f\"lib.presets.{cls.name}({preset})\")) return config ipyvizzu.animation.Config Bases: AbstractAnimation A class for representing config animation. It can build config option of the chart. Source code in src/ipyvizzu/animation.py class Config(AbstractAnimation, metaclass=ConfigAttr): \"\"\" A class for representing config animation. It can build config option of the chart. \"\"\" def __init__(self, data: Optional[Union[dict, RawJavaScript]]): \"\"\" Config constructor. Args: data: A config animation dictionary. For information on all available config parameters see the [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/interfaces/Config.Chart/#properties). \"\"\" # pylint: disable=line-too-long self._data = data def build(self) -> dict: \"\"\" A method for returning the config animation dictionary. Returns: A dictionary that stored in the config animation object. It contains a `config` key whose value is the stored animation. \"\"\" return {\"config\": self._data} __init__(data) Config constructor. Parameters: Name Type Description Default data Optional [ Union [ dict , RawJavaScript ]] A config animation dictionary. For information on all available config parameters see the Vizzu Code reference . required Source code in src/ipyvizzu/animation.py def __init__(self, data: Optional[Union[dict, RawJavaScript]]): \"\"\" Config constructor. Args: data: A config animation dictionary. For information on all available config parameters see the [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/interfaces/Config.Chart/#properties). \"\"\" # pylint: disable=line-too-long self._data = data build() A method for returning the config animation dictionary. Returns: Type Description dict A dictionary that stored in the config animation object. It contains a config key whose value is the stored animation. Source code in src/ipyvizzu/animation.py def build(self) -> dict: \"\"\" A method for returning the config animation dictionary. Returns: A dictionary that stored in the config animation object. It contains a `config` key whose value is the stored animation. \"\"\" return {\"config\": self._data} ipyvizzu.animation.Style Bases: AbstractAnimation A class for representing style animation. It can build style option of the chart. Source code in src/ipyvizzu/animation.py class Style(AbstractAnimation): \"\"\" A class for representing style animation. It can build style option of the chart. \"\"\" def __init__(self, data: Optional[dict]): \"\"\" Style constructor. Args: data: A style animation dictionary. For information on all available style parameters see the [Style][styling-properties] chapter or the [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/interfaces/Styles.Chart/#properties). \"\"\" # pylint: disable=line-too-long self._data = data def build(self) -> dict: \"\"\" A method for returning the style animation dictionary. Returns: A dictionary that stored in the style animation object. It contains a `style` key whose value is the stored animation. \"\"\" return {\"style\": self._data} __init__(data) Style constructor. Parameters: Name Type Description Default data Optional [ dict ] A style animation dictionary. For information on all available style parameters see the Style chapter or the Vizzu Code reference . required Source code in src/ipyvizzu/animation.py def __init__(self, data: Optional[dict]): \"\"\" Style constructor. Args: data: A style animation dictionary. For information on all available style parameters see the [Style][styling-properties] chapter or the [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/interfaces/Styles.Chart/#properties). \"\"\" # pylint: disable=line-too-long self._data = data build() A method for returning the style animation dictionary. Returns: Type Description dict A dictionary that stored in the style animation object. It contains a style key whose value is the stored animation. Source code in src/ipyvizzu/animation.py def build(self) -> dict: \"\"\" A method for returning the style animation dictionary. Returns: A dictionary that stored in the style animation object. It contains a `style` key whose value is the stored animation. \"\"\" return {\"style\": self._data} ipyvizzu.animation.Keyframe Bases: AbstractAnimation A class for representing keyframe animation. It can build keyframe of the chart. Source code in src/ipyvizzu/animation.py class Keyframe(AbstractAnimation): \"\"\" A class for representing keyframe animation. It can build keyframe of the chart. \"\"\" def __init__( self, *animations: AbstractAnimation, **options: Optional[Union[str, int, float, dict]], ): \"\"\" Keyframe constructor. Args: *animations: List of AbstractAnimation inherited objects such as [Data][ipyvizzu.animation.Data], [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style]. **options: Dictionary of animation options for example `duration=1`. For information on all available animation options see the [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/interfaces/Anim.Options/#properties). Raises: ValueError: If `animations` is not set. ValueError: If initialized with a `Keyframe`. \"\"\" # pylint: disable=line-too-long if not animations: raise ValueError(\"No animation was set.\") if [animation for animation in animations if isinstance(animation, Keyframe)]: raise ValueError(\"A Keyframe cannot contain a Keyframe.\") self._keyframe = {} self._keyframe[\"target\"] = AnimationMerger.merge_animations(animations).build() if options: self._keyframe[\"options\"] = options def build(self) -> dict: \"\"\" A method for returning the keyframe animation dictionary. Returns: A dictionary that stored in the keyframe animation object. It contains a `target` key whose value is the stored animation and an optional `options` key whose value is the stored animation options. \"\"\" return self._keyframe __init__(*animations, **options) Keyframe constructor. Parameters: Name Type Description Default *animations AbstractAnimation List of AbstractAnimation inherited objects such as Data , Config and Style . () **options Optional [ Union [ str , int , float , dict ]] Dictionary of animation options for example duration=1 . For information on all available animation options see the Vizzu Code reference . {} Raises: Type Description ValueError If animations is not set. ValueError If initialized with a Keyframe . Source code in src/ipyvizzu/animation.py def __init__( self, *animations: AbstractAnimation, **options: Optional[Union[str, int, float, dict]], ): \"\"\" Keyframe constructor. Args: *animations: List of AbstractAnimation inherited objects such as [Data][ipyvizzu.animation.Data], [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style]. **options: Dictionary of animation options for example `duration=1`. For information on all available animation options see the [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/interfaces/Anim.Options/#properties). Raises: ValueError: If `animations` is not set. ValueError: If initialized with a `Keyframe`. \"\"\" # pylint: disable=line-too-long if not animations: raise ValueError(\"No animation was set.\") if [animation for animation in animations if isinstance(animation, Keyframe)]: raise ValueError(\"A Keyframe cannot contain a Keyframe.\") self._keyframe = {} self._keyframe[\"target\"] = AnimationMerger.merge_animations(animations).build() if options: self._keyframe[\"options\"] = options build() A method for returning the keyframe animation dictionary. Returns: Type Description dict A dictionary that stored in the keyframe animation object. It contains a target key whose value is the stored animation and an optional options key whose value is the stored animation options. Source code in src/ipyvizzu/animation.py def build(self) -> dict: \"\"\" A method for returning the keyframe animation dictionary. Returns: A dictionary that stored in the keyframe animation object. It contains a `target` key whose value is the stored animation and an optional `options` key whose value is the stored animation options. \"\"\" return self._keyframe ipyvizzu.animation.Snapshot Bases: AbstractAnimation A class for representing a stored chart state. It can build the snapshot id of the chart. Source code in src/ipyvizzu/animation.py class Snapshot(AbstractAnimation): \"\"\" A class for representing a stored chart state. It can build the snapshot id of the chart. \"\"\" def __init__(self, snapshot_id: str): \"\"\" Snapshot constructor. Args: snapshot_id: A snapshot id. \"\"\" self._snapshot_id = snapshot_id def build(self) -> str: # type: ignore \"\"\" A method for returning the snapshot id str. Returns: An str snapshot id that stored in the snapshot animation object. \"\"\" return self._snapshot_id __init__(snapshot_id) Snapshot constructor. Parameters: Name Type Description Default snapshot_id str A snapshot id. required Source code in src/ipyvizzu/animation.py def __init__(self, snapshot_id: str): \"\"\" Snapshot constructor. Args: snapshot_id: A snapshot id. \"\"\" self._snapshot_id = snapshot_id build() A method for returning the snapshot id str. Returns: Type Description str An str snapshot id that stored in the snapshot animation object. Source code in src/ipyvizzu/animation.py def build(self) -> str: # type: ignore \"\"\" A method for returning the snapshot id str. Returns: An str snapshot id that stored in the snapshot animation object. \"\"\" return self._snapshot_id ipyvizzu.animation.Animation Bases: Snapshot A class for representing a stored animation. It can build the snapshot id of the animation. Source code in src/ipyvizzu/animation.py class Animation(Snapshot): \"\"\" A class for representing a stored animation. It can build the snapshot id of the animation. \"\"\" ipyvizzu.animation.AnimationMerger Bases: AbstractAnimation A class for merging different types of animations. Source code in src/ipyvizzu/animation.py class AnimationMerger(AbstractAnimation): \"\"\"A class for merging different types of animations.\"\"\" def __init__(self) -> None: \"\"\"AnimationMerger constructor.\"\"\" self._dict: dict = {} self._list: list = [] @classmethod def merge_animations( cls, animations: Tuple[AbstractAnimation, ...] ) -> AbstractAnimation: \"\"\" A class method for merging animations. Args: animations: List of `AbstractAnimation` inherited objects. Returns: An `AnimationMerger` class with the merged animations. \"\"\" if len(animations) == 1 and not isinstance(animations[0], Keyframe): return animations[0] merger = cls() for animation in animations: merger.merge(animation) return merger def merge(self, animation: AbstractAnimation) -> None: \"\"\" A method for merging an animation with the previously merged animations. Args: animation: An animation to be merged with with previously merged animations. Raises: ValueError: If the type of an animation is already merged. ValueError: If `Keyframe` is merged with different type of animation. \"\"\" if isinstance(animation, Keyframe): if self._dict: raise ValueError(\"Keyframe cannot be merged with other animations.\") data = animation.build() self._list.append(data) else: if self._list: raise ValueError(\"Keyframe cannot be merged with other animations.\") data = self._validate(animation) self._dict.update(data) def _validate(self, animation: AbstractAnimation) -> dict: if isinstance(animation, Snapshot): raise ValueError(\"Snapshot cannot be merged with other animations.\") data = animation.build() common_keys = set(data).intersection(self._dict) if common_keys: raise ValueError(f\"{common_keys} is already merged.\") return data def build(self) -> Union[dict, list]: # type: ignore \"\"\" A method for returning a merged list of `Keyframes` or a merged dictionary from different types of animations. Returns: A merged list of [Keyframes][ipyvizzu.animation.Keyframe] or a merged dictionary from [Data][ipyvizzu.animation.Data], [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style] animations. \"\"\" if self._dict: return self._dict return self._list __init__() AnimationMerger constructor. Source code in src/ipyvizzu/animation.py def __init__(self) -> None: \"\"\"AnimationMerger constructor.\"\"\" self._dict: dict = {} self._list: list = [] merge_animations(animations) classmethod A class method for merging animations. Parameters: Name Type Description Default animations Tuple [ AbstractAnimation , ...] List of AbstractAnimation inherited objects. required Returns: Type Description AbstractAnimation An AnimationMerger class with the merged animations. Source code in src/ipyvizzu/animation.py @classmethod def merge_animations( cls, animations: Tuple[AbstractAnimation, ...] ) -> AbstractAnimation: \"\"\" A class method for merging animations. Args: animations: List of `AbstractAnimation` inherited objects. Returns: An `AnimationMerger` class with the merged animations. \"\"\" if len(animations) == 1 and not isinstance(animations[0], Keyframe): return animations[0] merger = cls() for animation in animations: merger.merge(animation) return merger merge(animation) A method for merging an animation with the previously merged animations. Parameters: Name Type Description Default animation AbstractAnimation An animation to be merged with with previously merged animations. required Raises: Type Description ValueError If the type of an animation is already merged. ValueError If Keyframe is merged with different type of animation. Source code in src/ipyvizzu/animation.py def merge(self, animation: AbstractAnimation) -> None: \"\"\" A method for merging an animation with the previously merged animations. Args: animation: An animation to be merged with with previously merged animations. Raises: ValueError: If the type of an animation is already merged. ValueError: If `Keyframe` is merged with different type of animation. \"\"\" if isinstance(animation, Keyframe): if self._dict: raise ValueError(\"Keyframe cannot be merged with other animations.\") data = animation.build() self._list.append(data) else: if self._list: raise ValueError(\"Keyframe cannot be merged with other animations.\") data = self._validate(animation) self._dict.update(data) build() A method for returning a merged list of Keyframes or a merged dictionary from different types of animations. Returns: Type Description Union [ dict , list ] A merged list of Keyframes or a merged dictionary from Data , Config and Style animations. Source code in src/ipyvizzu/animation.py def build(self) -> Union[dict, list]: # type: ignore \"\"\" A method for returning a merged list of `Keyframes` or a merged dictionary from different types of animations. Returns: A merged list of [Keyframes][ipyvizzu.animation.Keyframe] or a merged dictionary from [Data][ipyvizzu.animation.Data], [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style] animations. \"\"\" if self._dict: return self._dict return self._list","title":"Animation"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation","text":"A module for working with chart animations.","title":"animation"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.AbstractAnimation","text":"An abstract class for representing animation objects that have dump and build methods. Source code in src/ipyvizzu/animation.py class AbstractAnimation: \"\"\" An abstract class for representing animation objects that have `dump` and `build` methods. \"\"\" def dump(self) -> str: \"\"\" A method for converting the built dictionary into string. Returns: An str that has been json dumped with [RawJavaScriptEncoder][ipyvizzu.json.RawJavaScriptEncoder] from a dictionary. \"\"\" return json.dumps(self.build(), cls=RawJavaScriptEncoder) @abc.abstractmethod def build(self) -> dict: \"\"\" An abstract method for returning a dictionary with values that can be converted into json string. Returns: A dictionary that stored in the animation object. \"\"\"","title":"AbstractAnimation"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.AbstractAnimation.dump","text":"A method for converting the built dictionary into string. Returns: Type Description str An str that has been json dumped with RawJavaScriptEncoder from a dictionary. Source code in src/ipyvizzu/animation.py def dump(self) -> str: \"\"\" A method for converting the built dictionary into string. Returns: An str that has been json dumped with [RawJavaScriptEncoder][ipyvizzu.json.RawJavaScriptEncoder] from a dictionary. \"\"\" return json.dumps(self.build(), cls=RawJavaScriptEncoder)","title":"dump()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.AbstractAnimation.build","text":"An abstract method for returning a dictionary with values that can be converted into json string. Returns: Type Description dict A dictionary that stored in the animation object. Source code in src/ipyvizzu/animation.py @abc.abstractmethod def build(self) -> dict: \"\"\" An abstract method for returning a dictionary with values that can be converted into json string. Returns: A dictionary that stored in the animation object. \"\"\"","title":"build()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.PlainAnimation","text":"Bases: dict , AbstractAnimation A class for representing plain animation. It can build any dictionary. Source code in src/ipyvizzu/animation.py class PlainAnimation(dict, AbstractAnimation): \"\"\" A class for representing plain animation. It can build any dictionary. \"\"\" def build(self) -> dict: \"\"\" A method for returning the plain animation dictionary. Returns: A dictionary that stored in the plain animation object. \"\"\" return self","title":"PlainAnimation"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.PlainAnimation.build","text":"A method for returning the plain animation dictionary. Returns: Type Description dict A dictionary that stored in the plain animation object. Source code in src/ipyvizzu/animation.py def build(self) -> dict: \"\"\" A method for returning the plain animation dictionary. Returns: A dictionary that stored in the plain animation object. \"\"\" return self","title":"build()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Data","text":"Bases: dict , AbstractAnimation A class for representing data animation. It can build data option of the chart. Source code in src/ipyvizzu/animation.py class Data(dict, AbstractAnimation): \"\"\" A class for representing data animation. It can build data option of the chart. \"\"\" @classmethod def filter(cls, filter_expr: Optional[str] = None) -> \"Data\": \"\"\" A class method for creating a [Data][ipyvizzu.animation.Data] class instance with a data filter. Args: filter_expr: The JavaScript data filter expression. Returns: (Data): A data animation instance that contains a data filter. Example: Create a [Data][ipyvizzu.animation.Data] class with a data filter: filter = Data.filter(\"record['Genres'] == 'Pop'\") \"\"\" data = cls() data.set_filter(filter_expr) return data def set_filter(self, filter_expr: Optional[str] = None) -> None: \"\"\" A method for adding a filter to an existing [Data][ipyvizzu.animation.Data] class instance. Args: filter_expr: The JavaScript data filter expression. Example: Add a data filter to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.set_filter(\"record['Genres'] == 'Pop'\") \"\"\" filter_expr_raw_js = ( RawJavaScript(f\"record => {{ return ({' '.join(filter_expr.split())}) }}\") if filter_expr is not None else filter_expr ) self.update({\"filter\": filter_expr_raw_js}) @classmethod def from_json(cls, filename: Union[str, bytes, PathLike]) -> \"Data\": \"\"\" A method for returning a [Data][ipyvizzu.animation.Data] class instance which has been created from a json file. Args: filename: The path of the data source json file. Returns: (Data): A data animation instance that has been created from a json file. \"\"\" with open(filename, \"r\", encoding=\"utf8\") as file_desc: return cls(json.load(file_desc)) def add_record(self, record: Record) -> None: \"\"\" A method for adding a record to an existing [Data][ipyvizzu.animation.Data] class instance. Args: record: A list that contains data values. Example: Adding a record to a [Data][ipyvizzu.animation.Data] class instance: data = Data() record = [\"Pop\", \"Hard\", 114] data.add_record(record) \"\"\" self._add_value(\"records\", record) def add_records(self, records: List[Record]) -> None: \"\"\" A method for adding records to an existing [Data][ipyvizzu.animation.Data] class instance. Args: records: A list that contains data records. Example: Adding records to a [Data][ipyvizzu.animation.Data] class instance: data = Data() records = [ [\"Pop\", \"Hard\", 114], [\"Rock\", \"Hard\", 96], [\"Pop\", \"Experimental\", 127], [\"Rock\", \"Experimental\", 83], ] data.add_records(records) \"\"\" list(map(self.add_record, records)) def add_series( self, name: str, values: Optional[SeriesValues] = None, **kwargs ) -> None: \"\"\" A method for adding a series to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the series. values: The data values of the series. **kwargs (Optional): Arbitrary keyword arguments. For example infer type can be set with the `type` keywod argument. Example: Adding a series without values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series(\"Genres\") Adding a series without values and with infer type to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series(\"Kinds\", type=\"dimension\") Adding a series with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series( \"Popularity\", [114, 96, 127, 83] ) \"\"\" self._add_named_value(\"series\", name, values, **kwargs) def add_series_list(self, series: List[Series]) -> None: \"\"\" A method for adding list of series to an existing [Data][ipyvizzu.animation.Data] class instance. Args: series: List of series. \"\"\" if series: self.setdefault(\"series\", []).extend(series) def add_dimension( self, name: str, values: Optional[List[DimensionValue]] = None, **kwargs ) -> None: \"\"\" A method for adding a dimension to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the dimension. values: The data values of the dimension. **kwargs (Optional): Arbitrary keyword arguments. Example: Adding a dimension with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_dimension(\"Genres\", [\"Pop\", \"Rock\"]) \"\"\" self._add_named_value(\"dimensions\", name, values, **kwargs) def add_measure( self, name: str, values: Optional[NestedMeasureValues] = None, **kwargs ) -> None: \"\"\" A method for adding a measure to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the measure. values: The data values of the measure. **kwargs (Optional): Arbitrary keyword arguments. Example: Adding a measure with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_measure( \"Popularity\", [ [114, 96], [127, 83], ], ) \"\"\" self._add_named_value(\"measures\", name, values, **kwargs) def add_df( self, df: Optional[ # type: ignore Union[ \"pandas.DataFrame\", \"pandas.Series\", \"pyspark.sql.DataFrame\", ] ], default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, max_rows: int = MAX_ROWS, include_index: Optional[str] = None, ) -> None: \"\"\" Add a `pandas` `DataFrame`, `Series` or a `pyspark` `DataFrame` to an existing [Data][ipyvizzu.animation.Data] class instance. Args: df: The `pandas` `DataFrame`, `Series` or the `pyspark` `DataFrame`to add. default_measure_value: The default measure value to fill empty values. Defaults to 0. default_dimension_value: The default dimension value to fill empty values. Defaults to an empty string. max_rows: The maximum number of rows to include in the converted series list. If the `df` contains more rows, a random sample of the given number of rows (approximately) will be taken. include_index: Add the data frame's index as a column with the given name. Defaults to `None`. (Cannot be used with `pyspark` `DataFrame`.) Example: Adding a data frame to a [Data][ipyvizzu.animation.Data] class instance: df = pd.DataFrame( { \"Genres\": [\"Pop\", \"Rock\", \"Pop\", \"Rock\"], \"Kinds\": [\"Hard\", \"Hard\", \"Experimental\", \"Experimental\"], \"Popularity\": [114, 96, 127, 83], } ) data = Data() data.add_df(df) \"\"\" # pylint: disable=too-many-arguments if not isinstance(df, type(None)): arguments = { \"df\": df, \"default_measure_value\": default_measure_value, \"default_dimension_value\": default_dimension_value, \"max_rows\": max_rows, \"include_index\": include_index, } Converter: Union[ Type[PandasDataFrameConverter], Type[SparkDataFrameConverter] ] = PandasDataFrameConverter if isinstance(df, SparkDataFrame): Converter = SparkDataFrameConverter if arguments[\"include_index\"] is not None: raise ValueError( \"`include_index` cannot be used with `pyspark` `DataFrame`\" ) del arguments[\"include_index\"] converter = Converter(**arguments) # type: ignore series_list = converter.get_series_list() self.add_series_list(series_list) def add_data_frame( self, data_frame: Optional[Union[\"pandas.DataFrame\", \"pandas.Series\"]], # type: ignore default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, ) -> None: \"\"\" [Deprecated] This function is deprecated and will be removed in future versions. Use [add_df][ipyvizzu.animation.Data.add_df] function instead. Add a `pandas` `DataFrame` or `Series` to an existing [Data][ipyvizzu.animation.Data] class instance. Args: data_frame: The `pandas` `DataFrame` or `Series` to add. default_measure_value: The default measure value to fill empty values. Defaults to 0. default_dimension_value: The default dimension value to fill empty values. Defaults to an empty string. \"\"\" # pylint: disable=line-too-long reference = \"https://ipyvizzu.vizzuhq.com/0.16/reference/ipyvizzu/animation/#ipyvizzu.animation.Data.add_df\" warnings.warn( f\"'add_data_frame' is deprecated and will be removed in future versions. Use 'add_df' instead - see {reference}\", DeprecationWarning, stacklevel=2, ) self.add_df(data_frame, default_measure_value, default_dimension_value) def add_df_index( self, df: Optional[Union[\"pandas.DataFrame\", \"pandas.Series\"]], # type: ignore column_name: str = \"Index\", ) -> None: \"\"\" Add the index of a `pandas` `DataFrame` as a series to an existing [Data][ipyvizzu.animation.Data] class instance. Args: df: The `pandas` `DataFrame` or `Series` from which to extract the index. column_name: Name for the index column to add as a series. Example: Adding a data frame's index to a [Data][ipyvizzu.animation.Data] class instance: df = pd.DataFrame( {\"Popularity\": [114, 96]}, index=[\"x\", \"y\"] ) data = Data() data.add_df_index(df, \"DataFrameIndex\") data.add_df(df) \"\"\" if not isinstance(df, type(None)): converter = PandasDataFrameConverter(df, include_index=column_name) series_list = converter.get_series_from_index() self.add_series_list(series_list) def add_data_frame_index( self, data_frame: Optional[Union[\"pandas.DataFrame\", \"pandas.Series\"]], # type: ignore name: str, ) -> None: \"\"\" [Deprecated] This function is deprecated and will be removed in future versions. Use [add_df_index][ipyvizzu.animation.Data.add_df_index] function instead. Add the index of a `pandas` `DataFrame` as a series to an existing [Data][ipyvizzu.animation.Data] class instance. Args: data_frame: The `pandas` `DataFrame` or `Series` from which to extract the index. name: The name of the index series. \"\"\" # pylint: disable=line-too-long reference = \"https://ipyvizzu.vizzuhq.com/0.16/reference/ipyvizzu/animation/#ipyvizzu.animation.Data.add_df_index\" warnings.warn( f\"'add_data_frame_index' is deprecated and will be removed in future versions. Use 'add_df_index' instead - see {reference}\", DeprecationWarning, stacklevel=2, ) self.add_df_index(data_frame, name) def add_np_array( self, np_array: Optional[\"numpy.array\"], # type: ignore column_name: Optional[ColumnName] = None, column_dtype: Optional[ColumnDtype] = None, default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, ) -> None: \"\"\" Add a `numpy` `array` to an existing [Data][ipyvizzu.animation.Data] class instance. Args: np_array: The `numpy` `array` to add. column_name: The name of a column. By default, uses column indices. Can be set with an Index:Name pair or, for single-dimensional arrays, with just the Name. column_dtype: The dtype of a column. By default, uses the np_array's dtype. Can be set with an Index:DType pair or, for single-dimensional arrays, with just the DType. default_measure_value: Default value to use for missing measure values. Defaults to 0. default_dimension_value: Default value to use for missing dimension values. Defaults to an empty string. Example: Adding a data frame to a [Data][ipyvizzu.animation.Data] class instance: np_array = np.zeros((3, 4)) data = Data() data.add_np_array(np_array) \"\"\" # pylint: disable=too-many-arguments if not isinstance(np_array, type(None)): converter = NumpyArrayConverter( np_array, column_name, column_dtype, default_measure_value, default_dimension_value, ) series_list = converter.get_series_list() self.add_series_list(series_list) def _add_named_value( self, dest: str, name: str, values: Optional[ Union[ SeriesValues, NestedMeasureValues, ] ] = None, **kwargs, ) -> None: value = {\"name\": name, **kwargs} if values is not None: value[\"values\"] = values self._add_value(dest, value) def _add_value(self, dest: str, value: Union[dict, list]) -> None: self.setdefault(dest, []).append(value) def build(self) -> dict: \"\"\" A method for validating and returning the data animation dictionary. Returns: A dictionary that stored in the data animation object. It contains a `data` key whose value is the stored animation. \"\"\" jsonschema.validate(self, DATA_SCHEMA) return {\"data\": self}","title":"Data"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Data.filter","text":"A class method for creating a Data class instance with a data filter. Parameters: Name Type Description Default filter_expr Optional [ str ] The JavaScript data filter expression. None Returns: Type Description Data A data animation instance that contains a data filter. Example Create a Data class with a data filter: filter = Data.filter(\"record['Genres'] == 'Pop'\") Source code in src/ipyvizzu/animation.py @classmethod def filter(cls, filter_expr: Optional[str] = None) -> \"Data\": \"\"\" A class method for creating a [Data][ipyvizzu.animation.Data] class instance with a data filter. Args: filter_expr: The JavaScript data filter expression. Returns: (Data): A data animation instance that contains a data filter. Example: Create a [Data][ipyvizzu.animation.Data] class with a data filter: filter = Data.filter(\"record['Genres'] == 'Pop'\") \"\"\" data = cls() data.set_filter(filter_expr) return data","title":"filter()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Data.set_filter","text":"A method for adding a filter to an existing Data class instance. Parameters: Name Type Description Default filter_expr Optional [ str ] The JavaScript data filter expression. None Example Add a data filter to a Data class instance: data = Data() data.set_filter(\"record['Genres'] == 'Pop'\") Source code in src/ipyvizzu/animation.py def set_filter(self, filter_expr: Optional[str] = None) -> None: \"\"\" A method for adding a filter to an existing [Data][ipyvizzu.animation.Data] class instance. Args: filter_expr: The JavaScript data filter expression. Example: Add a data filter to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.set_filter(\"record['Genres'] == 'Pop'\") \"\"\" filter_expr_raw_js = ( RawJavaScript(f\"record => {{ return ({' '.join(filter_expr.split())}) }}\") if filter_expr is not None else filter_expr ) self.update({\"filter\": filter_expr_raw_js})","title":"set_filter()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Data.from_json","text":"A method for returning a Data class instance which has been created from a json file. Parameters: Name Type Description Default filename Union [ str , bytes , PathLike ] The path of the data source json file. required Returns: Type Description Data A data animation instance that has been created from a json file. Source code in src/ipyvizzu/animation.py @classmethod def from_json(cls, filename: Union[str, bytes, PathLike]) -> \"Data\": \"\"\" A method for returning a [Data][ipyvizzu.animation.Data] class instance which has been created from a json file. Args: filename: The path of the data source json file. Returns: (Data): A data animation instance that has been created from a json file. \"\"\" with open(filename, \"r\", encoding=\"utf8\") as file_desc: return cls(json.load(file_desc))","title":"from_json()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Data.add_record","text":"A method for adding a record to an existing Data class instance. Parameters: Name Type Description Default record Record A list that contains data values. required Example Adding a record to a Data class instance: data = Data() record = [\"Pop\", \"Hard\", 114] data.add_record(record) Source code in src/ipyvizzu/animation.py def add_record(self, record: Record) -> None: \"\"\" A method for adding a record to an existing [Data][ipyvizzu.animation.Data] class instance. Args: record: A list that contains data values. Example: Adding a record to a [Data][ipyvizzu.animation.Data] class instance: data = Data() record = [\"Pop\", \"Hard\", 114] data.add_record(record) \"\"\" self._add_value(\"records\", record)","title":"add_record()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Data.add_records","text":"A method for adding records to an existing Data class instance. Parameters: Name Type Description Default records List [ Record ] A list that contains data records. required Example Adding records to a Data class instance: data = Data() records = [ [\"Pop\", \"Hard\", 114], [\"Rock\", \"Hard\", 96], [\"Pop\", \"Experimental\", 127], [\"Rock\", \"Experimental\", 83], ] data.add_records(records) Source code in src/ipyvizzu/animation.py def add_records(self, records: List[Record]) -> None: \"\"\" A method for adding records to an existing [Data][ipyvizzu.animation.Data] class instance. Args: records: A list that contains data records. Example: Adding records to a [Data][ipyvizzu.animation.Data] class instance: data = Data() records = [ [\"Pop\", \"Hard\", 114], [\"Rock\", \"Hard\", 96], [\"Pop\", \"Experimental\", 127], [\"Rock\", \"Experimental\", 83], ] data.add_records(records) \"\"\" list(map(self.add_record, records))","title":"add_records()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Data.add_series","text":"A method for adding a series to an existing Data class instance. Parameters: Name Type Description Default name str The name of the series. required values Optional [ SeriesValues ] The data values of the series. None **kwargs Optional Arbitrary keyword arguments. For example infer type can be set with the type keywod argument. {} Example Adding a series without values to a Data class instance: data = Data() data.add_series(\"Genres\") Adding a series without values and with infer type to a Data class instance: data = Data() data.add_series(\"Kinds\", type=\"dimension\") Adding a series with values to a Data class instance: data = Data() data.add_series( \"Popularity\", [114, 96, 127, 83] ) Source code in src/ipyvizzu/animation.py def add_series( self, name: str, values: Optional[SeriesValues] = None, **kwargs ) -> None: \"\"\" A method for adding a series to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the series. values: The data values of the series. **kwargs (Optional): Arbitrary keyword arguments. For example infer type can be set with the `type` keywod argument. Example: Adding a series without values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series(\"Genres\") Adding a series without values and with infer type to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series(\"Kinds\", type=\"dimension\") Adding a series with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_series( \"Popularity\", [114, 96, 127, 83] ) \"\"\" self._add_named_value(\"series\", name, values, **kwargs)","title":"add_series()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Data.add_series_list","text":"A method for adding list of series to an existing Data class instance. Parameters: Name Type Description Default series List [ Series ] List of series. required Source code in src/ipyvizzu/animation.py def add_series_list(self, series: List[Series]) -> None: \"\"\" A method for adding list of series to an existing [Data][ipyvizzu.animation.Data] class instance. Args: series: List of series. \"\"\" if series: self.setdefault(\"series\", []).extend(series)","title":"add_series_list()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Data.add_dimension","text":"A method for adding a dimension to an existing Data class instance. Parameters: Name Type Description Default name str The name of the dimension. required values Optional [ List [ DimensionValue ]] The data values of the dimension. None **kwargs Optional Arbitrary keyword arguments. {} Example Adding a dimension with values to a Data class instance: data = Data() data.add_dimension(\"Genres\", [\"Pop\", \"Rock\"]) Source code in src/ipyvizzu/animation.py def add_dimension( self, name: str, values: Optional[List[DimensionValue]] = None, **kwargs ) -> None: \"\"\" A method for adding a dimension to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the dimension. values: The data values of the dimension. **kwargs (Optional): Arbitrary keyword arguments. Example: Adding a dimension with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_dimension(\"Genres\", [\"Pop\", \"Rock\"]) \"\"\" self._add_named_value(\"dimensions\", name, values, **kwargs)","title":"add_dimension()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Data.add_measure","text":"A method for adding a measure to an existing Data class instance. Parameters: Name Type Description Default name str The name of the measure. required values Optional [ NestedMeasureValues ] The data values of the measure. None **kwargs Optional Arbitrary keyword arguments. {} Example Adding a measure with values to a Data class instance: data = Data() data.add_measure( \"Popularity\", [ [114, 96], [127, 83], ], ) Source code in src/ipyvizzu/animation.py def add_measure( self, name: str, values: Optional[NestedMeasureValues] = None, **kwargs ) -> None: \"\"\" A method for adding a measure to an existing [Data][ipyvizzu.animation.Data] class instance. Args: name: The name of the measure. values: The data values of the measure. **kwargs (Optional): Arbitrary keyword arguments. Example: Adding a measure with values to a [Data][ipyvizzu.animation.Data] class instance: data = Data() data.add_measure( \"Popularity\", [ [114, 96], [127, 83], ], ) \"\"\" self._add_named_value(\"measures\", name, values, **kwargs)","title":"add_measure()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Data.add_df","text":"Add a pandas DataFrame , Series or a pyspark DataFrame to an existing Data class instance. Parameters: Name Type Description Default df Optional [ Union [ pandas . DataFrame , pandas . Series , pyspark . sql . DataFrame ]] The pandas DataFrame , Series or the pyspark DataFrame to add. required default_measure_value MeasureValue The default measure value to fill empty values. Defaults to 0. NAN_MEASURE default_dimension_value DimensionValue The default dimension value to fill empty values. Defaults to an empty string. NAN_DIMENSION max_rows int The maximum number of rows to include in the converted series list. If the df contains more rows, a random sample of the given number of rows (approximately) will be taken. MAX_ROWS include_index Optional [ str ] Add the data frame's index as a column with the given name. Defaults to None . (Cannot be used with pyspark DataFrame .) None Example Adding a data frame to a Data class instance: df = pd.DataFrame( { \"Genres\": [\"Pop\", \"Rock\", \"Pop\", \"Rock\"], \"Kinds\": [\"Hard\", \"Hard\", \"Experimental\", \"Experimental\"], \"Popularity\": [114, 96, 127, 83], } ) data = Data() data.add_df(df) Source code in src/ipyvizzu/animation.py def add_df( self, df: Optional[ # type: ignore Union[ \"pandas.DataFrame\", \"pandas.Series\", \"pyspark.sql.DataFrame\", ] ], default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, max_rows: int = MAX_ROWS, include_index: Optional[str] = None, ) -> None: \"\"\" Add a `pandas` `DataFrame`, `Series` or a `pyspark` `DataFrame` to an existing [Data][ipyvizzu.animation.Data] class instance. Args: df: The `pandas` `DataFrame`, `Series` or the `pyspark` `DataFrame`to add. default_measure_value: The default measure value to fill empty values. Defaults to 0. default_dimension_value: The default dimension value to fill empty values. Defaults to an empty string. max_rows: The maximum number of rows to include in the converted series list. If the `df` contains more rows, a random sample of the given number of rows (approximately) will be taken. include_index: Add the data frame's index as a column with the given name. Defaults to `None`. (Cannot be used with `pyspark` `DataFrame`.) Example: Adding a data frame to a [Data][ipyvizzu.animation.Data] class instance: df = pd.DataFrame( { \"Genres\": [\"Pop\", \"Rock\", \"Pop\", \"Rock\"], \"Kinds\": [\"Hard\", \"Hard\", \"Experimental\", \"Experimental\"], \"Popularity\": [114, 96, 127, 83], } ) data = Data() data.add_df(df) \"\"\" # pylint: disable=too-many-arguments if not isinstance(df, type(None)): arguments = { \"df\": df, \"default_measure_value\": default_measure_value, \"default_dimension_value\": default_dimension_value, \"max_rows\": max_rows, \"include_index\": include_index, } Converter: Union[ Type[PandasDataFrameConverter], Type[SparkDataFrameConverter] ] = PandasDataFrameConverter if isinstance(df, SparkDataFrame): Converter = SparkDataFrameConverter if arguments[\"include_index\"] is not None: raise ValueError( \"`include_index` cannot be used with `pyspark` `DataFrame`\" ) del arguments[\"include_index\"] converter = Converter(**arguments) # type: ignore series_list = converter.get_series_list() self.add_series_list(series_list)","title":"add_df()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Data.add_data_frame","text":"[Deprecated] This function is deprecated and will be removed in future versions. Use add_df function instead. Add a pandas DataFrame or Series to an existing Data class instance. Parameters: Name Type Description Default data_frame Optional [ Union [ pandas . DataFrame , pandas . Series ]] The pandas DataFrame or Series to add. required default_measure_value MeasureValue The default measure value to fill empty values. Defaults to 0. NAN_MEASURE default_dimension_value DimensionValue The default dimension value to fill empty values. Defaults to an empty string. NAN_DIMENSION Source code in src/ipyvizzu/animation.py def add_data_frame( self, data_frame: Optional[Union[\"pandas.DataFrame\", \"pandas.Series\"]], # type: ignore default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, ) -> None: \"\"\" [Deprecated] This function is deprecated and will be removed in future versions. Use [add_df][ipyvizzu.animation.Data.add_df] function instead. Add a `pandas` `DataFrame` or `Series` to an existing [Data][ipyvizzu.animation.Data] class instance. Args: data_frame: The `pandas` `DataFrame` or `Series` to add. default_measure_value: The default measure value to fill empty values. Defaults to 0. default_dimension_value: The default dimension value to fill empty values. Defaults to an empty string. \"\"\" # pylint: disable=line-too-long reference = \"https://ipyvizzu.vizzuhq.com/0.16/reference/ipyvizzu/animation/#ipyvizzu.animation.Data.add_df\" warnings.warn( f\"'add_data_frame' is deprecated and will be removed in future versions. Use 'add_df' instead - see {reference}\", DeprecationWarning, stacklevel=2, ) self.add_df(data_frame, default_measure_value, default_dimension_value)","title":"add_data_frame()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Data.add_df_index","text":"Add the index of a pandas DataFrame as a series to an existing Data class instance. Parameters: Name Type Description Default df Optional [ Union [ pandas . DataFrame , pandas . Series ]] The pandas DataFrame or Series from which to extract the index. required column_name str Name for the index column to add as a series. 'Index' Example Adding a data frame's index to a Data class instance: df = pd.DataFrame( {\"Popularity\": [114, 96]}, index=[\"x\", \"y\"] ) data = Data() data.add_df_index(df, \"DataFrameIndex\") data.add_df(df) Source code in src/ipyvizzu/animation.py def add_df_index( self, df: Optional[Union[\"pandas.DataFrame\", \"pandas.Series\"]], # type: ignore column_name: str = \"Index\", ) -> None: \"\"\" Add the index of a `pandas` `DataFrame` as a series to an existing [Data][ipyvizzu.animation.Data] class instance. Args: df: The `pandas` `DataFrame` or `Series` from which to extract the index. column_name: Name for the index column to add as a series. Example: Adding a data frame's index to a [Data][ipyvizzu.animation.Data] class instance: df = pd.DataFrame( {\"Popularity\": [114, 96]}, index=[\"x\", \"y\"] ) data = Data() data.add_df_index(df, \"DataFrameIndex\") data.add_df(df) \"\"\" if not isinstance(df, type(None)): converter = PandasDataFrameConverter(df, include_index=column_name) series_list = converter.get_series_from_index() self.add_series_list(series_list)","title":"add_df_index()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Data.add_data_frame_index","text":"[Deprecated] This function is deprecated and will be removed in future versions. Use add_df_index function instead. Add the index of a pandas DataFrame as a series to an existing Data class instance. Parameters: Name Type Description Default data_frame Optional [ Union [ pandas . DataFrame , pandas . Series ]] The pandas DataFrame or Series from which to extract the index. required name str The name of the index series. required Source code in src/ipyvizzu/animation.py def add_data_frame_index( self, data_frame: Optional[Union[\"pandas.DataFrame\", \"pandas.Series\"]], # type: ignore name: str, ) -> None: \"\"\" [Deprecated] This function is deprecated and will be removed in future versions. Use [add_df_index][ipyvizzu.animation.Data.add_df_index] function instead. Add the index of a `pandas` `DataFrame` as a series to an existing [Data][ipyvizzu.animation.Data] class instance. Args: data_frame: The `pandas` `DataFrame` or `Series` from which to extract the index. name: The name of the index series. \"\"\" # pylint: disable=line-too-long reference = \"https://ipyvizzu.vizzuhq.com/0.16/reference/ipyvizzu/animation/#ipyvizzu.animation.Data.add_df_index\" warnings.warn( f\"'add_data_frame_index' is deprecated and will be removed in future versions. Use 'add_df_index' instead - see {reference}\", DeprecationWarning, stacklevel=2, ) self.add_df_index(data_frame, name)","title":"add_data_frame_index()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Data.add_np_array","text":"Add a numpy array to an existing Data class instance. Parameters: Name Type Description Default np_array Optional [ numpy . array ] The numpy array to add. required column_name Optional [ ColumnName ] The name of a column. By default, uses column indices. Can be set with an Index:Name pair or, for single-dimensional arrays, with just the Name. None column_dtype Optional [ ColumnDtype ] The dtype of a column. By default, uses the np_array's dtype. Can be set with an Index:DType pair or, for single-dimensional arrays, with just the DType. None default_measure_value MeasureValue Default value to use for missing measure values. Defaults to 0. NAN_MEASURE default_dimension_value DimensionValue Default value to use for missing dimension values. Defaults to an empty string. NAN_DIMENSION Example Adding a data frame to a Data class instance: np_array = np.zeros((3, 4)) data = Data() data.add_np_array(np_array) Source code in src/ipyvizzu/animation.py def add_np_array( self, np_array: Optional[\"numpy.array\"], # type: ignore column_name: Optional[ColumnName] = None, column_dtype: Optional[ColumnDtype] = None, default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, ) -> None: \"\"\" Add a `numpy` `array` to an existing [Data][ipyvizzu.animation.Data] class instance. Args: np_array: The `numpy` `array` to add. column_name: The name of a column. By default, uses column indices. Can be set with an Index:Name pair or, for single-dimensional arrays, with just the Name. column_dtype: The dtype of a column. By default, uses the np_array's dtype. Can be set with an Index:DType pair or, for single-dimensional arrays, with just the DType. default_measure_value: Default value to use for missing measure values. Defaults to 0. default_dimension_value: Default value to use for missing dimension values. Defaults to an empty string. Example: Adding a data frame to a [Data][ipyvizzu.animation.Data] class instance: np_array = np.zeros((3, 4)) data = Data() data.add_np_array(np_array) \"\"\" # pylint: disable=too-many-arguments if not isinstance(np_array, type(None)): converter = NumpyArrayConverter( np_array, column_name, column_dtype, default_measure_value, default_dimension_value, ) series_list = converter.get_series_list() self.add_series_list(series_list)","title":"add_np_array()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Data.build","text":"A method for validating and returning the data animation dictionary. Returns: Type Description dict A dictionary that stored in the data animation object. It contains a data key whose value is the stored animation. Source code in src/ipyvizzu/animation.py def build(self) -> dict: \"\"\" A method for validating and returning the data animation dictionary. Returns: A dictionary that stored in the data animation object. It contains a `data` key whose value is the stored animation. \"\"\" jsonschema.validate(self, DATA_SCHEMA) return {\"data\": self}","title":"build()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.ConfigAttr","text":"Bases: type A metaclass class for the Config class. Returns a Config class with a chart preset if the __getattr__ method called. For information on all available chart presets see the Vizzu Code reference . Source code in src/ipyvizzu/animation.py class ConfigAttr(type): \"\"\" A metaclass class for the [Config][ipyvizzu.animation.Config] class. Returns a [Config][ipyvizzu.animation.Config] class with a chart preset if the `__getattr__` method called. For information on all available chart presets see the [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/modules/Presets/#interfaces). \"\"\" @classmethod def __getattr__(mcs, name): config_attr = mcs(\"ConfigAttr\", (object,), {\"name\": name}) return config_attr._get_preset # pylint: disable=no-member def _get_preset(cls, preset): config = Config(RawJavaScript(f\"lib.presets.{cls.name}({preset})\")) return config","title":"ConfigAttr"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Config","text":"Bases: AbstractAnimation A class for representing config animation. It can build config option of the chart. Source code in src/ipyvizzu/animation.py class Config(AbstractAnimation, metaclass=ConfigAttr): \"\"\" A class for representing config animation. It can build config option of the chart. \"\"\" def __init__(self, data: Optional[Union[dict, RawJavaScript]]): \"\"\" Config constructor. Args: data: A config animation dictionary. For information on all available config parameters see the [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/interfaces/Config.Chart/#properties). \"\"\" # pylint: disable=line-too-long self._data = data def build(self) -> dict: \"\"\" A method for returning the config animation dictionary. Returns: A dictionary that stored in the config animation object. It contains a `config` key whose value is the stored animation. \"\"\" return {\"config\": self._data}","title":"Config"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Config.__init__","text":"Config constructor. Parameters: Name Type Description Default data Optional [ Union [ dict , RawJavaScript ]] A config animation dictionary. For information on all available config parameters see the Vizzu Code reference . required Source code in src/ipyvizzu/animation.py def __init__(self, data: Optional[Union[dict, RawJavaScript]]): \"\"\" Config constructor. Args: data: A config animation dictionary. For information on all available config parameters see the [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/interfaces/Config.Chart/#properties). \"\"\" # pylint: disable=line-too-long self._data = data","title":"__init__()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Config.build","text":"A method for returning the config animation dictionary. Returns: Type Description dict A dictionary that stored in the config animation object. It contains a config key whose value is the stored animation. Source code in src/ipyvizzu/animation.py def build(self) -> dict: \"\"\" A method for returning the config animation dictionary. Returns: A dictionary that stored in the config animation object. It contains a `config` key whose value is the stored animation. \"\"\" return {\"config\": self._data}","title":"build()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Style","text":"Bases: AbstractAnimation A class for representing style animation. It can build style option of the chart. Source code in src/ipyvizzu/animation.py class Style(AbstractAnimation): \"\"\" A class for representing style animation. It can build style option of the chart. \"\"\" def __init__(self, data: Optional[dict]): \"\"\" Style constructor. Args: data: A style animation dictionary. For information on all available style parameters see the [Style][styling-properties] chapter or the [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/interfaces/Styles.Chart/#properties). \"\"\" # pylint: disable=line-too-long self._data = data def build(self) -> dict: \"\"\" A method for returning the style animation dictionary. Returns: A dictionary that stored in the style animation object. It contains a `style` key whose value is the stored animation. \"\"\" return {\"style\": self._data}","title":"Style"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Style.__init__","text":"Style constructor. Parameters: Name Type Description Default data Optional [ dict ] A style animation dictionary. For information on all available style parameters see the Style chapter or the Vizzu Code reference . required Source code in src/ipyvizzu/animation.py def __init__(self, data: Optional[dict]): \"\"\" Style constructor. Args: data: A style animation dictionary. For information on all available style parameters see the [Style][styling-properties] chapter or the [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/interfaces/Styles.Chart/#properties). \"\"\" # pylint: disable=line-too-long self._data = data","title":"__init__()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Style.build","text":"A method for returning the style animation dictionary. Returns: Type Description dict A dictionary that stored in the style animation object. It contains a style key whose value is the stored animation. Source code in src/ipyvizzu/animation.py def build(self) -> dict: \"\"\" A method for returning the style animation dictionary. Returns: A dictionary that stored in the style animation object. It contains a `style` key whose value is the stored animation. \"\"\" return {\"style\": self._data}","title":"build()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Keyframe","text":"Bases: AbstractAnimation A class for representing keyframe animation. It can build keyframe of the chart. Source code in src/ipyvizzu/animation.py class Keyframe(AbstractAnimation): \"\"\" A class for representing keyframe animation. It can build keyframe of the chart. \"\"\" def __init__( self, *animations: AbstractAnimation, **options: Optional[Union[str, int, float, dict]], ): \"\"\" Keyframe constructor. Args: *animations: List of AbstractAnimation inherited objects such as [Data][ipyvizzu.animation.Data], [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style]. **options: Dictionary of animation options for example `duration=1`. For information on all available animation options see the [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/interfaces/Anim.Options/#properties). Raises: ValueError: If `animations` is not set. ValueError: If initialized with a `Keyframe`. \"\"\" # pylint: disable=line-too-long if not animations: raise ValueError(\"No animation was set.\") if [animation for animation in animations if isinstance(animation, Keyframe)]: raise ValueError(\"A Keyframe cannot contain a Keyframe.\") self._keyframe = {} self._keyframe[\"target\"] = AnimationMerger.merge_animations(animations).build() if options: self._keyframe[\"options\"] = options def build(self) -> dict: \"\"\" A method for returning the keyframe animation dictionary. Returns: A dictionary that stored in the keyframe animation object. It contains a `target` key whose value is the stored animation and an optional `options` key whose value is the stored animation options. \"\"\" return self._keyframe","title":"Keyframe"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Keyframe.__init__","text":"Keyframe constructor. Parameters: Name Type Description Default *animations AbstractAnimation List of AbstractAnimation inherited objects such as Data , Config and Style . () **options Optional [ Union [ str , int , float , dict ]] Dictionary of animation options for example duration=1 . For information on all available animation options see the Vizzu Code reference . {} Raises: Type Description ValueError If animations is not set. ValueError If initialized with a Keyframe . Source code in src/ipyvizzu/animation.py def __init__( self, *animations: AbstractAnimation, **options: Optional[Union[str, int, float, dict]], ): \"\"\" Keyframe constructor. Args: *animations: List of AbstractAnimation inherited objects such as [Data][ipyvizzu.animation.Data], [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style]. **options: Dictionary of animation options for example `duration=1`. For information on all available animation options see the [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/interfaces/Anim.Options/#properties). Raises: ValueError: If `animations` is not set. ValueError: If initialized with a `Keyframe`. \"\"\" # pylint: disable=line-too-long if not animations: raise ValueError(\"No animation was set.\") if [animation for animation in animations if isinstance(animation, Keyframe)]: raise ValueError(\"A Keyframe cannot contain a Keyframe.\") self._keyframe = {} self._keyframe[\"target\"] = AnimationMerger.merge_animations(animations).build() if options: self._keyframe[\"options\"] = options","title":"__init__()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Keyframe.build","text":"A method for returning the keyframe animation dictionary. Returns: Type Description dict A dictionary that stored in the keyframe animation object. It contains a target key whose value is the stored animation and an optional options key whose value is the stored animation options. Source code in src/ipyvizzu/animation.py def build(self) -> dict: \"\"\" A method for returning the keyframe animation dictionary. Returns: A dictionary that stored in the keyframe animation object. It contains a `target` key whose value is the stored animation and an optional `options` key whose value is the stored animation options. \"\"\" return self._keyframe","title":"build()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Snapshot","text":"Bases: AbstractAnimation A class for representing a stored chart state. It can build the snapshot id of the chart. Source code in src/ipyvizzu/animation.py class Snapshot(AbstractAnimation): \"\"\" A class for representing a stored chart state. It can build the snapshot id of the chart. \"\"\" def __init__(self, snapshot_id: str): \"\"\" Snapshot constructor. Args: snapshot_id: A snapshot id. \"\"\" self._snapshot_id = snapshot_id def build(self) -> str: # type: ignore \"\"\" A method for returning the snapshot id str. Returns: An str snapshot id that stored in the snapshot animation object. \"\"\" return self._snapshot_id","title":"Snapshot"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Snapshot.__init__","text":"Snapshot constructor. Parameters: Name Type Description Default snapshot_id str A snapshot id. required Source code in src/ipyvizzu/animation.py def __init__(self, snapshot_id: str): \"\"\" Snapshot constructor. Args: snapshot_id: A snapshot id. \"\"\" self._snapshot_id = snapshot_id","title":"__init__()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Snapshot.build","text":"A method for returning the snapshot id str. Returns: Type Description str An str snapshot id that stored in the snapshot animation object. Source code in src/ipyvizzu/animation.py def build(self) -> str: # type: ignore \"\"\" A method for returning the snapshot id str. Returns: An str snapshot id that stored in the snapshot animation object. \"\"\" return self._snapshot_id","title":"build()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.Animation","text":"Bases: Snapshot A class for representing a stored animation. It can build the snapshot id of the animation. Source code in src/ipyvizzu/animation.py class Animation(Snapshot): \"\"\" A class for representing a stored animation. It can build the snapshot id of the animation. \"\"\"","title":"Animation"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.AnimationMerger","text":"Bases: AbstractAnimation A class for merging different types of animations. Source code in src/ipyvizzu/animation.py class AnimationMerger(AbstractAnimation): \"\"\"A class for merging different types of animations.\"\"\" def __init__(self) -> None: \"\"\"AnimationMerger constructor.\"\"\" self._dict: dict = {} self._list: list = [] @classmethod def merge_animations( cls, animations: Tuple[AbstractAnimation, ...] ) -> AbstractAnimation: \"\"\" A class method for merging animations. Args: animations: List of `AbstractAnimation` inherited objects. Returns: An `AnimationMerger` class with the merged animations. \"\"\" if len(animations) == 1 and not isinstance(animations[0], Keyframe): return animations[0] merger = cls() for animation in animations: merger.merge(animation) return merger def merge(self, animation: AbstractAnimation) -> None: \"\"\" A method for merging an animation with the previously merged animations. Args: animation: An animation to be merged with with previously merged animations. Raises: ValueError: If the type of an animation is already merged. ValueError: If `Keyframe` is merged with different type of animation. \"\"\" if isinstance(animation, Keyframe): if self._dict: raise ValueError(\"Keyframe cannot be merged with other animations.\") data = animation.build() self._list.append(data) else: if self._list: raise ValueError(\"Keyframe cannot be merged with other animations.\") data = self._validate(animation) self._dict.update(data) def _validate(self, animation: AbstractAnimation) -> dict: if isinstance(animation, Snapshot): raise ValueError(\"Snapshot cannot be merged with other animations.\") data = animation.build() common_keys = set(data).intersection(self._dict) if common_keys: raise ValueError(f\"{common_keys} is already merged.\") return data def build(self) -> Union[dict, list]: # type: ignore \"\"\" A method for returning a merged list of `Keyframes` or a merged dictionary from different types of animations. Returns: A merged list of [Keyframes][ipyvizzu.animation.Keyframe] or a merged dictionary from [Data][ipyvizzu.animation.Data], [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style] animations. \"\"\" if self._dict: return self._dict return self._list","title":"AnimationMerger"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.AnimationMerger.__init__","text":"AnimationMerger constructor. Source code in src/ipyvizzu/animation.py def __init__(self) -> None: \"\"\"AnimationMerger constructor.\"\"\" self._dict: dict = {} self._list: list = []","title":"__init__()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.AnimationMerger.merge_animations","text":"A class method for merging animations. Parameters: Name Type Description Default animations Tuple [ AbstractAnimation , ...] List of AbstractAnimation inherited objects. required Returns: Type Description AbstractAnimation An AnimationMerger class with the merged animations. Source code in src/ipyvizzu/animation.py @classmethod def merge_animations( cls, animations: Tuple[AbstractAnimation, ...] ) -> AbstractAnimation: \"\"\" A class method for merging animations. Args: animations: List of `AbstractAnimation` inherited objects. Returns: An `AnimationMerger` class with the merged animations. \"\"\" if len(animations) == 1 and not isinstance(animations[0], Keyframe): return animations[0] merger = cls() for animation in animations: merger.merge(animation) return merger","title":"merge_animations()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.AnimationMerger.merge","text":"A method for merging an animation with the previously merged animations. Parameters: Name Type Description Default animation AbstractAnimation An animation to be merged with with previously merged animations. required Raises: Type Description ValueError If the type of an animation is already merged. ValueError If Keyframe is merged with different type of animation. Source code in src/ipyvizzu/animation.py def merge(self, animation: AbstractAnimation) -> None: \"\"\" A method for merging an animation with the previously merged animations. Args: animation: An animation to be merged with with previously merged animations. Raises: ValueError: If the type of an animation is already merged. ValueError: If `Keyframe` is merged with different type of animation. \"\"\" if isinstance(animation, Keyframe): if self._dict: raise ValueError(\"Keyframe cannot be merged with other animations.\") data = animation.build() self._list.append(data) else: if self._list: raise ValueError(\"Keyframe cannot be merged with other animations.\") data = self._validate(animation) self._dict.update(data)","title":"merge()"},{"location":"reference/ipyvizzu/animation/#ipyvizzu.animation.AnimationMerger.build","text":"A method for returning a merged list of Keyframes or a merged dictionary from different types of animations. Returns: Type Description Union [ dict , list ] A merged list of Keyframes or a merged dictionary from Data , Config and Style animations. Source code in src/ipyvizzu/animation.py def build(self) -> Union[dict, list]: # type: ignore \"\"\" A method for returning a merged list of `Keyframes` or a merged dictionary from different types of animations. Returns: A merged list of [Keyframes][ipyvizzu.animation.Keyframe] or a merged dictionary from [Data][ipyvizzu.animation.Data], [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style] animations. \"\"\" if self._dict: return self._dict return self._list","title":"build()"},{"location":"reference/ipyvizzu/animationcontrol/","text":"ipyvizzu.animationcontrol A module for working with animation control. ipyvizzu.animationcontrol.AnimationControl A class for controlling animations. Source code in src/ipyvizzu/animationcontrol.py class AnimationControl: \"\"\" A class for controlling animations. \"\"\" def __init__(self, prev_id: str, last_id: str, display_method: Callable): \"\"\" AnimationControl constructor. Args: prev_id: Id of the previous animation promise. last_id: Id of the animation to be controlled. display_method: Displaying function. \"\"\" self._ids = \", \".join([f\"'{prev_id}'\", f\"'{last_id}'\"]) self._display = display_method def cancel(self) -> None: \"\"\"Cancels the animation, will reject the animation promise.\"\"\" self._display( DisplayTemplate.CONTROL.format( method=\"cancel\", params=self._ids, ) ) def pause(self) -> None: \"\"\"Pauses the controlled animation.\"\"\" self._display( DisplayTemplate.CONTROL.format( method=\"pause\", params=self._ids, ) ) def play(self) -> None: \"\"\"Plays/resumes playing of the controlled animation.\"\"\" self._display( DisplayTemplate.CONTROL.format( method=\"play\", params=self._ids, ) ) def reverse(self) -> None: \"\"\"Changes the direction of the controlled animation.\"\"\" self._display( DisplayTemplate.CONTROL.format( method=\"reverse\", params=self._ids, ) ) def seek(self, value: Union[int, str]) -> None: \"\"\" Seeks the animation to the position specified by time or progress percentage. Args: value: The position specified by time or progress percentage. \"\"\" params = \", \".join([self._ids, f\"'{value}'\"]) self._display( DisplayTemplate.CONTROL.format( method=\"seek\", params=params, ) ) def stop(self) -> None: \"\"\"Stops the current animation seeking it back to its start position.\"\"\" self._display( DisplayTemplate.CONTROL.format( method=\"stop\", params=self._ids, ) ) def store(self) -> Animation: \"\"\" A method for saving and storing the actual state of the animation. Returns: An `Animation` object wich stores the actual state of the animation. \"\"\" animation_id = uuid.uuid4().hex[:7] params = \", \".join([self._ids, f\"'{animation_id}'\"]) self._display( DisplayTemplate.CONTROL.format( method=\"store\", params=params, ) ) return Animation(animation_id) __init__(prev_id, last_id, display_method) AnimationControl constructor. Parameters: Name Type Description Default prev_id str Id of the previous animation promise. required last_id str Id of the animation to be controlled. required display_method Callable Displaying function. required Source code in src/ipyvizzu/animationcontrol.py def __init__(self, prev_id: str, last_id: str, display_method: Callable): \"\"\" AnimationControl constructor. Args: prev_id: Id of the previous animation promise. last_id: Id of the animation to be controlled. display_method: Displaying function. \"\"\" self._ids = \", \".join([f\"'{prev_id}'\", f\"'{last_id}'\"]) self._display = display_method cancel() Cancels the animation, will reject the animation promise. Source code in src/ipyvizzu/animationcontrol.py def cancel(self) -> None: \"\"\"Cancels the animation, will reject the animation promise.\"\"\" self._display( DisplayTemplate.CONTROL.format( method=\"cancel\", params=self._ids, ) ) pause() Pauses the controlled animation. Source code in src/ipyvizzu/animationcontrol.py def pause(self) -> None: \"\"\"Pauses the controlled animation.\"\"\" self._display( DisplayTemplate.CONTROL.format( method=\"pause\", params=self._ids, ) ) play() Plays/resumes playing of the controlled animation. Source code in src/ipyvizzu/animationcontrol.py def play(self) -> None: \"\"\"Plays/resumes playing of the controlled animation.\"\"\" self._display( DisplayTemplate.CONTROL.format( method=\"play\", params=self._ids, ) ) reverse() Changes the direction of the controlled animation. Source code in src/ipyvizzu/animationcontrol.py def reverse(self) -> None: \"\"\"Changes the direction of the controlled animation.\"\"\" self._display( DisplayTemplate.CONTROL.format( method=\"reverse\", params=self._ids, ) ) seek(value) Seeks the animation to the position specified by time or progress percentage. Parameters: Name Type Description Default value Union [ int , str ] The position specified by time or progress percentage. required Source code in src/ipyvizzu/animationcontrol.py def seek(self, value: Union[int, str]) -> None: \"\"\" Seeks the animation to the position specified by time or progress percentage. Args: value: The position specified by time or progress percentage. \"\"\" params = \", \".join([self._ids, f\"'{value}'\"]) self._display( DisplayTemplate.CONTROL.format( method=\"seek\", params=params, ) ) stop() Stops the current animation seeking it back to its start position. Source code in src/ipyvizzu/animationcontrol.py def stop(self) -> None: \"\"\"Stops the current animation seeking it back to its start position.\"\"\" self._display( DisplayTemplate.CONTROL.format( method=\"stop\", params=self._ids, ) ) store() A method for saving and storing the actual state of the animation. Returns: Type Description Animation An Animation object wich stores the actual state of the animation. Source code in src/ipyvizzu/animationcontrol.py def store(self) -> Animation: \"\"\" A method for saving and storing the actual state of the animation. Returns: An `Animation` object wich stores the actual state of the animation. \"\"\" animation_id = uuid.uuid4().hex[:7] params = \", \".join([self._ids, f\"'{animation_id}'\"]) self._display( DisplayTemplate.CONTROL.format( method=\"store\", params=params, ) ) return Animation(animation_id)","title":"Animationcontrol"},{"location":"reference/ipyvizzu/animationcontrol/#ipyvizzu.animationcontrol","text":"A module for working with animation control.","title":"animationcontrol"},{"location":"reference/ipyvizzu/animationcontrol/#ipyvizzu.animationcontrol.AnimationControl","text":"A class for controlling animations. Source code in src/ipyvizzu/animationcontrol.py class AnimationControl: \"\"\" A class for controlling animations. \"\"\" def __init__(self, prev_id: str, last_id: str, display_method: Callable): \"\"\" AnimationControl constructor. Args: prev_id: Id of the previous animation promise. last_id: Id of the animation to be controlled. display_method: Displaying function. \"\"\" self._ids = \", \".join([f\"'{prev_id}'\", f\"'{last_id}'\"]) self._display = display_method def cancel(self) -> None: \"\"\"Cancels the animation, will reject the animation promise.\"\"\" self._display( DisplayTemplate.CONTROL.format( method=\"cancel\", params=self._ids, ) ) def pause(self) -> None: \"\"\"Pauses the controlled animation.\"\"\" self._display( DisplayTemplate.CONTROL.format( method=\"pause\", params=self._ids, ) ) def play(self) -> None: \"\"\"Plays/resumes playing of the controlled animation.\"\"\" self._display( DisplayTemplate.CONTROL.format( method=\"play\", params=self._ids, ) ) def reverse(self) -> None: \"\"\"Changes the direction of the controlled animation.\"\"\" self._display( DisplayTemplate.CONTROL.format( method=\"reverse\", params=self._ids, ) ) def seek(self, value: Union[int, str]) -> None: \"\"\" Seeks the animation to the position specified by time or progress percentage. Args: value: The position specified by time or progress percentage. \"\"\" params = \", \".join([self._ids, f\"'{value}'\"]) self._display( DisplayTemplate.CONTROL.format( method=\"seek\", params=params, ) ) def stop(self) -> None: \"\"\"Stops the current animation seeking it back to its start position.\"\"\" self._display( DisplayTemplate.CONTROL.format( method=\"stop\", params=self._ids, ) ) def store(self) -> Animation: \"\"\" A method for saving and storing the actual state of the animation. Returns: An `Animation` object wich stores the actual state of the animation. \"\"\" animation_id = uuid.uuid4().hex[:7] params = \", \".join([self._ids, f\"'{animation_id}'\"]) self._display( DisplayTemplate.CONTROL.format( method=\"store\", params=params, ) ) return Animation(animation_id)","title":"AnimationControl"},{"location":"reference/ipyvizzu/animationcontrol/#ipyvizzu.animationcontrol.AnimationControl.__init__","text":"AnimationControl constructor. Parameters: Name Type Description Default prev_id str Id of the previous animation promise. required last_id str Id of the animation to be controlled. required display_method Callable Displaying function. required Source code in src/ipyvizzu/animationcontrol.py def __init__(self, prev_id: str, last_id: str, display_method: Callable): \"\"\" AnimationControl constructor. Args: prev_id: Id of the previous animation promise. last_id: Id of the animation to be controlled. display_method: Displaying function. \"\"\" self._ids = \", \".join([f\"'{prev_id}'\", f\"'{last_id}'\"]) self._display = display_method","title":"__init__()"},{"location":"reference/ipyvizzu/animationcontrol/#ipyvizzu.animationcontrol.AnimationControl.cancel","text":"Cancels the animation, will reject the animation promise. Source code in src/ipyvizzu/animationcontrol.py def cancel(self) -> None: \"\"\"Cancels the animation, will reject the animation promise.\"\"\" self._display( DisplayTemplate.CONTROL.format( method=\"cancel\", params=self._ids, ) )","title":"cancel()"},{"location":"reference/ipyvizzu/animationcontrol/#ipyvizzu.animationcontrol.AnimationControl.pause","text":"Pauses the controlled animation. Source code in src/ipyvizzu/animationcontrol.py def pause(self) -> None: \"\"\"Pauses the controlled animation.\"\"\" self._display( DisplayTemplate.CONTROL.format( method=\"pause\", params=self._ids, ) )","title":"pause()"},{"location":"reference/ipyvizzu/animationcontrol/#ipyvizzu.animationcontrol.AnimationControl.play","text":"Plays/resumes playing of the controlled animation. Source code in src/ipyvizzu/animationcontrol.py def play(self) -> None: \"\"\"Plays/resumes playing of the controlled animation.\"\"\" self._display( DisplayTemplate.CONTROL.format( method=\"play\", params=self._ids, ) )","title":"play()"},{"location":"reference/ipyvizzu/animationcontrol/#ipyvizzu.animationcontrol.AnimationControl.reverse","text":"Changes the direction of the controlled animation. Source code in src/ipyvizzu/animationcontrol.py def reverse(self) -> None: \"\"\"Changes the direction of the controlled animation.\"\"\" self._display( DisplayTemplate.CONTROL.format( method=\"reverse\", params=self._ids, ) )","title":"reverse()"},{"location":"reference/ipyvizzu/animationcontrol/#ipyvizzu.animationcontrol.AnimationControl.seek","text":"Seeks the animation to the position specified by time or progress percentage. Parameters: Name Type Description Default value Union [ int , str ] The position specified by time or progress percentage. required Source code in src/ipyvizzu/animationcontrol.py def seek(self, value: Union[int, str]) -> None: \"\"\" Seeks the animation to the position specified by time or progress percentage. Args: value: The position specified by time or progress percentage. \"\"\" params = \", \".join([self._ids, f\"'{value}'\"]) self._display( DisplayTemplate.CONTROL.format( method=\"seek\", params=params, ) )","title":"seek()"},{"location":"reference/ipyvizzu/animationcontrol/#ipyvizzu.animationcontrol.AnimationControl.stop","text":"Stops the current animation seeking it back to its start position. Source code in src/ipyvizzu/animationcontrol.py def stop(self) -> None: \"\"\"Stops the current animation seeking it back to its start position.\"\"\" self._display( DisplayTemplate.CONTROL.format( method=\"stop\", params=self._ids, ) )","title":"stop()"},{"location":"reference/ipyvizzu/animationcontrol/#ipyvizzu.animationcontrol.AnimationControl.store","text":"A method for saving and storing the actual state of the animation. Returns: Type Description Animation An Animation object wich stores the actual state of the animation. Source code in src/ipyvizzu/animationcontrol.py def store(self) -> Animation: \"\"\" A method for saving and storing the actual state of the animation. Returns: An `Animation` object wich stores the actual state of the animation. \"\"\" animation_id = uuid.uuid4().hex[:7] params = \", \".join([self._ids, f\"'{animation_id}'\"]) self._display( DisplayTemplate.CONTROL.format( method=\"store\", params=params, ) ) return Animation(animation_id)","title":"store()"},{"location":"reference/ipyvizzu/chart/","text":"ipyvizzu.chart A module for working with Vizzu charts. ipyvizzu.chart.Chart A class for representing a wrapper over Vizzu chart. Source code in src/ipyvizzu/chart.py class Chart: \"\"\"A class for representing a wrapper over Vizzu chart.\"\"\" # pylint: disable=too-many-instance-attributes VIZZU: str = \"https://cdn.jsdelivr.net/npm/vizzu@0.8/dist/vizzu.min.js\" \"\"\"A variable for storing the default url of vizzu package.\"\"\" def __init__( self, vizzu: str = VIZZU, width: str = \"800px\", height: str = \"480px\", display: Union[DisplayTarget, str] = DisplayTarget.ACTUAL, ): \"\"\" Chart constructor. Args: vizzu: The url of Vizzu JavaScript package. width: The width of the chart. height: The height of the chart. display: The display behaviour of the chart. \"\"\" self._chart_id: str = uuid.uuid4().hex[:7] self._vizzu: str = vizzu self._width: str = width self._height: str = height self._display_target: DisplayTarget = DisplayTarget(display) self._calls: List[str] = [] self._last_anim: Optional[str] = None self._showed: bool = False self._initialized: bool = False self._analytics: bool = True self._scroll_into_view: bool = False @staticmethod def _register_events() -> None: ipy = get_ipython() if ipy is not None: ipy.events.register(\"pre_run_cell\", Chart._register_pre_run_cell) @staticmethod def _register_pre_run_cell() -> None: display_javascript(DisplayTemplate.CLEAR_INHIBITSCROLL, raw=True) @property def analytics(self) -> bool: \"\"\" A property for enabling/disabling the usage statistics feature. The usage statistics feature allows aggregate usage data collection using Plausible's algorithm. Enabling this feature helps us follow the progress and overall trends of our library, allowing us to focus our resources effectively and better serve our users. We do not track, collect, or store any personal data or personally identifiable information. All data is isolated to a single day, a single site, and a single device only. Please note that even when this feature is enabled, publishing anything made with `ipyvizzu` remains GDPR compatible. Returns: The value of the property (default `True`). \"\"\" return self._analytics @analytics.setter def analytics(self, analytics: Optional[bool]) -> None: self._analytics = bool(analytics) if self._initialized: self._display_analytics() @property def scroll_into_view(self) -> bool: \"\"\" A property for turning on/off the scroll into view feature. Returns: The value of the property (default `False`). \"\"\" return self._scroll_into_view @scroll_into_view.setter def scroll_into_view(self, scroll_into_view: Optional[bool]) -> None: self._scroll_into_view = bool(scroll_into_view) @property def control(self) -> AnimationControl: \"\"\" A property for returning a control object of the last animation. Raises: AssertionError: If called before any animation plays. Returns: The control object of the last animation. \"\"\" assert self._last_anim, \"must be used after an animation.\" return AnimationControl(self._chart_id, self._last_anim, self._display) def initializing(self) -> None: \"\"\"A method for initializing the chart.\"\"\" if not self._initialized: self._initialized = True self._display_ipyvizzujs() self._display_analytics() if self._display_target != DisplayTarget.MANUAL: Chart._register_events() self._display_chart() def _display_ipyvizzujs(self) -> None: ipyvizzurawjs = pkgutil.get_data(__name__, \"templates/ipyvizzu.js\") ipyvizzujs = ipyvizzurawjs.decode(\"utf-8\").replace( # type: ignore '\"__version__\"', f'\"{__version__}\"' ) self._display(DisplayTemplate.IPYVIZZUJS.format(ipyvizzujs=ipyvizzujs)) def _display_analytics(self) -> None: self._display( DisplayTemplate.CHANGE_ANALYTICS_TO.format( analytics=str(self._analytics).lower() ) ) def _display_chart(self) -> None: self._display( DisplayTemplate.INIT.format( chart_id=self._chart_id, vizzu=self._vizzu, div_width=self._width, div_height=self._height, ) ) def animate( self, *animations: AbstractAnimation, **options: Optional[Union[str, int, float, dict]], ) -> None: \"\"\" A method for changing the state of the chart. Args: *animations: List of AbstractAnimation inherited objects such as [Data][ipyvizzu.animation.Data], [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style]. **options: Dictionary of animation options for example `duration=1`. For information on all available animation options see the [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/interfaces/Anim.Options/#properties). Raises: ValueError: If `animations` is not set. Example: Reset the chart styles: chart.animate(Style(None)) \"\"\" # pylint: disable=line-too-long if not animations: raise ValueError(\"No animation was set.\") animation = AnimationMerger.merge_animations(animations) animate = Animate(animation, options) self._last_anim = uuid.uuid4().hex[:7] self._display( DisplayTemplate.ANIMATE.format( display_target=self._display_target.value, chart_id=self._chart_id, anim_id=self._last_anim, scroll=str(self._scroll_into_view).lower(), **animate.dump(), ) ) def feature(self, name: str, enabled: bool) -> None: \"\"\" A method for turning on/off features of the chart. Args: name: The name of the chart feature. For information on all available features see the [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/modules/#feature). enabled: The new state of the chart feature. Example: Turn on `tooltip` of the chart: chart.feature(\"tooltip\", True) \"\"\" # pylint: disable=line-too-long self._display( DisplayTemplate.FEATURE.format( chart_id=self._chart_id, **Feature(name, enabled).dump(), ) ) def store(self) -> Snapshot: \"\"\" A method for saving and storing the actual state of the chart. Returns: A Snapshot object wich stores the actual state of the chart. Example: Save and restore the actual state of the chart: snapshot = chart.store() ... chart.animate(snapshot) \"\"\" snapshot_id = uuid.uuid4().hex[:7] self._display( DisplayTemplate.STORE.format( chart_id=self._chart_id, **Store(snapshot_id).dump() ) ) return Snapshot(snapshot_id) def on( # pylint: disable=invalid-name self, event: str, handler: str ) -> EventHandler: \"\"\" A method for creating and turning on an event handler. Args: event: The type of the event. For information on all available events see the [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/modules/Event/#type). handler: The JavaScript method of the event. Returns: The turned on event handler object. Example: Turn on an event handler which prints an alert message when someone clicks on the chart: handler = chart.on(\"click\", \"alert(JSON.stringify(event.data));\") \"\"\" # pylint: disable=line-too-long event_handler = EventHandler(event, handler) self._display( DisplayTemplate.SET_EVENT.format( chart_id=self._chart_id, **EventOn(event_handler).dump(), ) ) return event_handler def off(self, event_handler: EventHandler) -> None: \"\"\" A method for turning off an event handler. Args: event_handler: A previously created event handler object. Example: Turn off a previously created event handler: chart.off(handler) \"\"\" self._display( DisplayTemplate.CLEAR_EVENT.format( chart_id=self._chart_id, **EventOff(event_handler).dump(), ) ) def log(self, chart_property: ChartProperty) -> None: \"\"\" A method for printing chart properties to the browser console. Args: chart_property: A chart property such as [CONFIG][ipyvizzu.template.ChartProperty] and [STYLE][ipyvizzu.template.ChartProperty]. Example: Log the actual style of the chart to the browser console: chart.log(ChartProperty.STYLE) \"\"\" self._display( DisplayTemplate.LOG.format( chart_id=self._chart_id, **Log(chart_property).dump() ) ) def _repr_html_(self) -> str: assert ( self._display_target == DisplayTarget.MANUAL ), \"chart._repr_html_() can be used with display=DisplayTarget.MANUAL only\" assert not self._showed, \"cannot be used after chart displayed.\" self._showed = True if not self._initialized: return \"\" html_id = uuid.uuid4().hex[:7] script = ( self._calls[0] + \"\\n\" + \"\\n\".join(self._calls[1:]).replace( \"element\", f'document.getElementById(\"{html_id}\")' ) ) return f'<div id=\"{html_id}\"><script>{script}</script></div>' def show(self) -> None: \"\"\" A method for displaying the assembled JavaScript code. Raises: AssertionError: If [display][ipyvizzu.Chart.__init__] is not [DisplayTarget.MANUAL][ipyvizzu.template.DisplayTarget]. AssertionError: If chart already has been displayed. \"\"\" assert ( self._display_target == DisplayTarget.MANUAL ), \"chart.show() can be used with display=DisplayTarget.MANUAL only\" assert not self._showed, \"cannot be used after chart displayed\" display_javascript( \"\\n\".join(self._calls), raw=True, ) self._showed = True def _display(self, javascript: str) -> None: if not self._initialized: self.initializing() if self._display_target != DisplayTarget.MANUAL: display_javascript( javascript, raw=True, ) else: assert not self._showed, \"cannot be used after chart displayed\" self._calls.append(javascript) VIZZU: str = 'https://cdn.jsdelivr.net/npm/vizzu@0.8/dist/vizzu.min.js' class-attribute instance-attribute A variable for storing the default url of vizzu package. analytics: bool property writable A property for enabling/disabling the usage statistics feature. The usage statistics feature allows aggregate usage data collection using Plausible's algorithm. Enabling this feature helps us follow the progress and overall trends of our library, allowing us to focus our resources effectively and better serve our users. We do not track, collect, or store any personal data or personally identifiable information. All data is isolated to a single day, a single site, and a single device only. Please note that even when this feature is enabled, publishing anything made with ipyvizzu remains GDPR compatible. Returns: Type Description bool The value of the property (default True ). scroll_into_view: bool property writable A property for turning on/off the scroll into view feature. Returns: Type Description bool The value of the property (default False ). control: AnimationControl property A property for returning a control object of the last animation. Raises: Type Description AssertionError If called before any animation plays. Returns: Type Description AnimationControl The control object of the last animation. __init__(vizzu=VIZZU, width='800px', height='480px', display=DisplayTarget.ACTUAL) Chart constructor. Parameters: Name Type Description Default vizzu str The url of Vizzu JavaScript package. VIZZU width str The width of the chart. '800px' height str The height of the chart. '480px' display Union [ DisplayTarget , str ] The display behaviour of the chart. DisplayTarget . ACTUAL Source code in src/ipyvizzu/chart.py def __init__( self, vizzu: str = VIZZU, width: str = \"800px\", height: str = \"480px\", display: Union[DisplayTarget, str] = DisplayTarget.ACTUAL, ): \"\"\" Chart constructor. Args: vizzu: The url of Vizzu JavaScript package. width: The width of the chart. height: The height of the chart. display: The display behaviour of the chart. \"\"\" self._chart_id: str = uuid.uuid4().hex[:7] self._vizzu: str = vizzu self._width: str = width self._height: str = height self._display_target: DisplayTarget = DisplayTarget(display) self._calls: List[str] = [] self._last_anim: Optional[str] = None self._showed: bool = False self._initialized: bool = False self._analytics: bool = True self._scroll_into_view: bool = False initializing() A method for initializing the chart. Source code in src/ipyvizzu/chart.py def initializing(self) -> None: \"\"\"A method for initializing the chart.\"\"\" if not self._initialized: self._initialized = True self._display_ipyvizzujs() self._display_analytics() if self._display_target != DisplayTarget.MANUAL: Chart._register_events() self._display_chart() animate(*animations, **options) A method for changing the state of the chart. Parameters: Name Type Description Default *animations AbstractAnimation List of AbstractAnimation inherited objects such as Data , Config and Style . () **options Optional [ Union [ str , int , float , dict ]] Dictionary of animation options for example duration=1 . For information on all available animation options see the Vizzu Code reference . {} Raises: Type Description ValueError If animations is not set. Example Reset the chart styles: chart.animate(Style(None)) Source code in src/ipyvizzu/chart.py def animate( self, *animations: AbstractAnimation, **options: Optional[Union[str, int, float, dict]], ) -> None: \"\"\" A method for changing the state of the chart. Args: *animations: List of AbstractAnimation inherited objects such as [Data][ipyvizzu.animation.Data], [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style]. **options: Dictionary of animation options for example `duration=1`. For information on all available animation options see the [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/interfaces/Anim.Options/#properties). Raises: ValueError: If `animations` is not set. Example: Reset the chart styles: chart.animate(Style(None)) \"\"\" # pylint: disable=line-too-long if not animations: raise ValueError(\"No animation was set.\") animation = AnimationMerger.merge_animations(animations) animate = Animate(animation, options) self._last_anim = uuid.uuid4().hex[:7] self._display( DisplayTemplate.ANIMATE.format( display_target=self._display_target.value, chart_id=self._chart_id, anim_id=self._last_anim, scroll=str(self._scroll_into_view).lower(), **animate.dump(), ) ) feature(name, enabled) A method for turning on/off features of the chart. Parameters: Name Type Description Default name str The name of the chart feature. For information on all available features see the Vizzu Code reference . required enabled bool The new state of the chart feature. required Example Turn on tooltip of the chart: chart.feature(\"tooltip\", True) Source code in src/ipyvizzu/chart.py def feature(self, name: str, enabled: bool) -> None: \"\"\" A method for turning on/off features of the chart. Args: name: The name of the chart feature. For information on all available features see the [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/modules/#feature). enabled: The new state of the chart feature. Example: Turn on `tooltip` of the chart: chart.feature(\"tooltip\", True) \"\"\" # pylint: disable=line-too-long self._display( DisplayTemplate.FEATURE.format( chart_id=self._chart_id, **Feature(name, enabled).dump(), ) ) store() A method for saving and storing the actual state of the chart. Returns: Type Description Snapshot A Snapshot object wich stores the actual state of the chart. Example Save and restore the actual state of the chart: snapshot = chart.store() ... chart.animate(snapshot) Source code in src/ipyvizzu/chart.py def store(self) -> Snapshot: \"\"\" A method for saving and storing the actual state of the chart. Returns: A Snapshot object wich stores the actual state of the chart. Example: Save and restore the actual state of the chart: snapshot = chart.store() ... chart.animate(snapshot) \"\"\" snapshot_id = uuid.uuid4().hex[:7] self._display( DisplayTemplate.STORE.format( chart_id=self._chart_id, **Store(snapshot_id).dump() ) ) return Snapshot(snapshot_id) on(event, handler) A method for creating and turning on an event handler. Parameters: Name Type Description Default event str The type of the event. For information on all available events see the Vizzu Code reference . required handler str The JavaScript method of the event. required Returns: Type Description EventHandler The turned on event handler object. Example Turn on an event handler which prints an alert message when someone clicks on the chart: handler = chart.on(\"click\", \"alert(JSON.stringify(event.data));\") Source code in src/ipyvizzu/chart.py def on( # pylint: disable=invalid-name self, event: str, handler: str ) -> EventHandler: \"\"\" A method for creating and turning on an event handler. Args: event: The type of the event. For information on all available events see the [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/modules/Event/#type). handler: The JavaScript method of the event. Returns: The turned on event handler object. Example: Turn on an event handler which prints an alert message when someone clicks on the chart: handler = chart.on(\"click\", \"alert(JSON.stringify(event.data));\") \"\"\" # pylint: disable=line-too-long event_handler = EventHandler(event, handler) self._display( DisplayTemplate.SET_EVENT.format( chart_id=self._chart_id, **EventOn(event_handler).dump(), ) ) return event_handler off(event_handler) A method for turning off an event handler. Parameters: Name Type Description Default event_handler EventHandler A previously created event handler object. required Example Turn off a previously created event handler: chart.off(handler) Source code in src/ipyvizzu/chart.py def off(self, event_handler: EventHandler) -> None: \"\"\" A method for turning off an event handler. Args: event_handler: A previously created event handler object. Example: Turn off a previously created event handler: chart.off(handler) \"\"\" self._display( DisplayTemplate.CLEAR_EVENT.format( chart_id=self._chart_id, **EventOff(event_handler).dump(), ) ) log(chart_property) A method for printing chart properties to the browser console. Parameters: Name Type Description Default chart_property ChartProperty A chart property such as CONFIG and STYLE . required Example Log the actual style of the chart to the browser console: chart.log(ChartProperty.STYLE) Source code in src/ipyvizzu/chart.py def log(self, chart_property: ChartProperty) -> None: \"\"\" A method for printing chart properties to the browser console. Args: chart_property: A chart property such as [CONFIG][ipyvizzu.template.ChartProperty] and [STYLE][ipyvizzu.template.ChartProperty]. Example: Log the actual style of the chart to the browser console: chart.log(ChartProperty.STYLE) \"\"\" self._display( DisplayTemplate.LOG.format( chart_id=self._chart_id, **Log(chart_property).dump() ) ) show() A method for displaying the assembled JavaScript code. Raises: Type Description AssertionError If display is not DisplayTarget.MANUAL . AssertionError If chart already has been displayed. Source code in src/ipyvizzu/chart.py def show(self) -> None: \"\"\" A method for displaying the assembled JavaScript code. Raises: AssertionError: If [display][ipyvizzu.Chart.__init__] is not [DisplayTarget.MANUAL][ipyvizzu.template.DisplayTarget]. AssertionError: If chart already has been displayed. \"\"\" assert ( self._display_target == DisplayTarget.MANUAL ), \"chart.show() can be used with display=DisplayTarget.MANUAL only\" assert not self._showed, \"cannot be used after chart displayed\" display_javascript( \"\\n\".join(self._calls), raw=True, ) self._showed = True","title":"Chart"},{"location":"reference/ipyvizzu/chart/#ipyvizzu.chart","text":"A module for working with Vizzu charts.","title":"chart"},{"location":"reference/ipyvizzu/chart/#ipyvizzu.chart.Chart","text":"A class for representing a wrapper over Vizzu chart. Source code in src/ipyvizzu/chart.py class Chart: \"\"\"A class for representing a wrapper over Vizzu chart.\"\"\" # pylint: disable=too-many-instance-attributes VIZZU: str = \"https://cdn.jsdelivr.net/npm/vizzu@0.8/dist/vizzu.min.js\" \"\"\"A variable for storing the default url of vizzu package.\"\"\" def __init__( self, vizzu: str = VIZZU, width: str = \"800px\", height: str = \"480px\", display: Union[DisplayTarget, str] = DisplayTarget.ACTUAL, ): \"\"\" Chart constructor. Args: vizzu: The url of Vizzu JavaScript package. width: The width of the chart. height: The height of the chart. display: The display behaviour of the chart. \"\"\" self._chart_id: str = uuid.uuid4().hex[:7] self._vizzu: str = vizzu self._width: str = width self._height: str = height self._display_target: DisplayTarget = DisplayTarget(display) self._calls: List[str] = [] self._last_anim: Optional[str] = None self._showed: bool = False self._initialized: bool = False self._analytics: bool = True self._scroll_into_view: bool = False @staticmethod def _register_events() -> None: ipy = get_ipython() if ipy is not None: ipy.events.register(\"pre_run_cell\", Chart._register_pre_run_cell) @staticmethod def _register_pre_run_cell() -> None: display_javascript(DisplayTemplate.CLEAR_INHIBITSCROLL, raw=True) @property def analytics(self) -> bool: \"\"\" A property for enabling/disabling the usage statistics feature. The usage statistics feature allows aggregate usage data collection using Plausible's algorithm. Enabling this feature helps us follow the progress and overall trends of our library, allowing us to focus our resources effectively and better serve our users. We do not track, collect, or store any personal data or personally identifiable information. All data is isolated to a single day, a single site, and a single device only. Please note that even when this feature is enabled, publishing anything made with `ipyvizzu` remains GDPR compatible. Returns: The value of the property (default `True`). \"\"\" return self._analytics @analytics.setter def analytics(self, analytics: Optional[bool]) -> None: self._analytics = bool(analytics) if self._initialized: self._display_analytics() @property def scroll_into_view(self) -> bool: \"\"\" A property for turning on/off the scroll into view feature. Returns: The value of the property (default `False`). \"\"\" return self._scroll_into_view @scroll_into_view.setter def scroll_into_view(self, scroll_into_view: Optional[bool]) -> None: self._scroll_into_view = bool(scroll_into_view) @property def control(self) -> AnimationControl: \"\"\" A property for returning a control object of the last animation. Raises: AssertionError: If called before any animation plays. Returns: The control object of the last animation. \"\"\" assert self._last_anim, \"must be used after an animation.\" return AnimationControl(self._chart_id, self._last_anim, self._display) def initializing(self) -> None: \"\"\"A method for initializing the chart.\"\"\" if not self._initialized: self._initialized = True self._display_ipyvizzujs() self._display_analytics() if self._display_target != DisplayTarget.MANUAL: Chart._register_events() self._display_chart() def _display_ipyvizzujs(self) -> None: ipyvizzurawjs = pkgutil.get_data(__name__, \"templates/ipyvizzu.js\") ipyvizzujs = ipyvizzurawjs.decode(\"utf-8\").replace( # type: ignore '\"__version__\"', f'\"{__version__}\"' ) self._display(DisplayTemplate.IPYVIZZUJS.format(ipyvizzujs=ipyvizzujs)) def _display_analytics(self) -> None: self._display( DisplayTemplate.CHANGE_ANALYTICS_TO.format( analytics=str(self._analytics).lower() ) ) def _display_chart(self) -> None: self._display( DisplayTemplate.INIT.format( chart_id=self._chart_id, vizzu=self._vizzu, div_width=self._width, div_height=self._height, ) ) def animate( self, *animations: AbstractAnimation, **options: Optional[Union[str, int, float, dict]], ) -> None: \"\"\" A method for changing the state of the chart. Args: *animations: List of AbstractAnimation inherited objects such as [Data][ipyvizzu.animation.Data], [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style]. **options: Dictionary of animation options for example `duration=1`. For information on all available animation options see the [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/interfaces/Anim.Options/#properties). Raises: ValueError: If `animations` is not set. Example: Reset the chart styles: chart.animate(Style(None)) \"\"\" # pylint: disable=line-too-long if not animations: raise ValueError(\"No animation was set.\") animation = AnimationMerger.merge_animations(animations) animate = Animate(animation, options) self._last_anim = uuid.uuid4().hex[:7] self._display( DisplayTemplate.ANIMATE.format( display_target=self._display_target.value, chart_id=self._chart_id, anim_id=self._last_anim, scroll=str(self._scroll_into_view).lower(), **animate.dump(), ) ) def feature(self, name: str, enabled: bool) -> None: \"\"\" A method for turning on/off features of the chart. Args: name: The name of the chart feature. For information on all available features see the [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/modules/#feature). enabled: The new state of the chart feature. Example: Turn on `tooltip` of the chart: chart.feature(\"tooltip\", True) \"\"\" # pylint: disable=line-too-long self._display( DisplayTemplate.FEATURE.format( chart_id=self._chart_id, **Feature(name, enabled).dump(), ) ) def store(self) -> Snapshot: \"\"\" A method for saving and storing the actual state of the chart. Returns: A Snapshot object wich stores the actual state of the chart. Example: Save and restore the actual state of the chart: snapshot = chart.store() ... chart.animate(snapshot) \"\"\" snapshot_id = uuid.uuid4().hex[:7] self._display( DisplayTemplate.STORE.format( chart_id=self._chart_id, **Store(snapshot_id).dump() ) ) return Snapshot(snapshot_id) def on( # pylint: disable=invalid-name self, event: str, handler: str ) -> EventHandler: \"\"\" A method for creating and turning on an event handler. Args: event: The type of the event. For information on all available events see the [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/modules/Event/#type). handler: The JavaScript method of the event. Returns: The turned on event handler object. Example: Turn on an event handler which prints an alert message when someone clicks on the chart: handler = chart.on(\"click\", \"alert(JSON.stringify(event.data));\") \"\"\" # pylint: disable=line-too-long event_handler = EventHandler(event, handler) self._display( DisplayTemplate.SET_EVENT.format( chart_id=self._chart_id, **EventOn(event_handler).dump(), ) ) return event_handler def off(self, event_handler: EventHandler) -> None: \"\"\" A method for turning off an event handler. Args: event_handler: A previously created event handler object. Example: Turn off a previously created event handler: chart.off(handler) \"\"\" self._display( DisplayTemplate.CLEAR_EVENT.format( chart_id=self._chart_id, **EventOff(event_handler).dump(), ) ) def log(self, chart_property: ChartProperty) -> None: \"\"\" A method for printing chart properties to the browser console. Args: chart_property: A chart property such as [CONFIG][ipyvizzu.template.ChartProperty] and [STYLE][ipyvizzu.template.ChartProperty]. Example: Log the actual style of the chart to the browser console: chart.log(ChartProperty.STYLE) \"\"\" self._display( DisplayTemplate.LOG.format( chart_id=self._chart_id, **Log(chart_property).dump() ) ) def _repr_html_(self) -> str: assert ( self._display_target == DisplayTarget.MANUAL ), \"chart._repr_html_() can be used with display=DisplayTarget.MANUAL only\" assert not self._showed, \"cannot be used after chart displayed.\" self._showed = True if not self._initialized: return \"\" html_id = uuid.uuid4().hex[:7] script = ( self._calls[0] + \"\\n\" + \"\\n\".join(self._calls[1:]).replace( \"element\", f'document.getElementById(\"{html_id}\")' ) ) return f'<div id=\"{html_id}\"><script>{script}</script></div>' def show(self) -> None: \"\"\" A method for displaying the assembled JavaScript code. Raises: AssertionError: If [display][ipyvizzu.Chart.__init__] is not [DisplayTarget.MANUAL][ipyvizzu.template.DisplayTarget]. AssertionError: If chart already has been displayed. \"\"\" assert ( self._display_target == DisplayTarget.MANUAL ), \"chart.show() can be used with display=DisplayTarget.MANUAL only\" assert not self._showed, \"cannot be used after chart displayed\" display_javascript( \"\\n\".join(self._calls), raw=True, ) self._showed = True def _display(self, javascript: str) -> None: if not self._initialized: self.initializing() if self._display_target != DisplayTarget.MANUAL: display_javascript( javascript, raw=True, ) else: assert not self._showed, \"cannot be used after chart displayed\" self._calls.append(javascript)","title":"Chart"},{"location":"reference/ipyvizzu/chart/#ipyvizzu.chart.Chart.VIZZU","text":"A variable for storing the default url of vizzu package.","title":"VIZZU"},{"location":"reference/ipyvizzu/chart/#ipyvizzu.chart.Chart.analytics","text":"A property for enabling/disabling the usage statistics feature. The usage statistics feature allows aggregate usage data collection using Plausible's algorithm. Enabling this feature helps us follow the progress and overall trends of our library, allowing us to focus our resources effectively and better serve our users. We do not track, collect, or store any personal data or personally identifiable information. All data is isolated to a single day, a single site, and a single device only. Please note that even when this feature is enabled, publishing anything made with ipyvizzu remains GDPR compatible. Returns: Type Description bool The value of the property (default True ).","title":"analytics"},{"location":"reference/ipyvizzu/chart/#ipyvizzu.chart.Chart.scroll_into_view","text":"A property for turning on/off the scroll into view feature. Returns: Type Description bool The value of the property (default False ).","title":"scroll_into_view"},{"location":"reference/ipyvizzu/chart/#ipyvizzu.chart.Chart.control","text":"A property for returning a control object of the last animation. Raises: Type Description AssertionError If called before any animation plays. Returns: Type Description AnimationControl The control object of the last animation.","title":"control"},{"location":"reference/ipyvizzu/chart/#ipyvizzu.chart.Chart.__init__","text":"Chart constructor. Parameters: Name Type Description Default vizzu str The url of Vizzu JavaScript package. VIZZU width str The width of the chart. '800px' height str The height of the chart. '480px' display Union [ DisplayTarget , str ] The display behaviour of the chart. DisplayTarget . ACTUAL Source code in src/ipyvizzu/chart.py def __init__( self, vizzu: str = VIZZU, width: str = \"800px\", height: str = \"480px\", display: Union[DisplayTarget, str] = DisplayTarget.ACTUAL, ): \"\"\" Chart constructor. Args: vizzu: The url of Vizzu JavaScript package. width: The width of the chart. height: The height of the chart. display: The display behaviour of the chart. \"\"\" self._chart_id: str = uuid.uuid4().hex[:7] self._vizzu: str = vizzu self._width: str = width self._height: str = height self._display_target: DisplayTarget = DisplayTarget(display) self._calls: List[str] = [] self._last_anim: Optional[str] = None self._showed: bool = False self._initialized: bool = False self._analytics: bool = True self._scroll_into_view: bool = False","title":"__init__()"},{"location":"reference/ipyvizzu/chart/#ipyvizzu.chart.Chart.initializing","text":"A method for initializing the chart. Source code in src/ipyvizzu/chart.py def initializing(self) -> None: \"\"\"A method for initializing the chart.\"\"\" if not self._initialized: self._initialized = True self._display_ipyvizzujs() self._display_analytics() if self._display_target != DisplayTarget.MANUAL: Chart._register_events() self._display_chart()","title":"initializing()"},{"location":"reference/ipyvizzu/chart/#ipyvizzu.chart.Chart.animate","text":"A method for changing the state of the chart. Parameters: Name Type Description Default *animations AbstractAnimation List of AbstractAnimation inherited objects such as Data , Config and Style . () **options Optional [ Union [ str , int , float , dict ]] Dictionary of animation options for example duration=1 . For information on all available animation options see the Vizzu Code reference . {} Raises: Type Description ValueError If animations is not set. Example Reset the chart styles: chart.animate(Style(None)) Source code in src/ipyvizzu/chart.py def animate( self, *animations: AbstractAnimation, **options: Optional[Union[str, int, float, dict]], ) -> None: \"\"\" A method for changing the state of the chart. Args: *animations: List of AbstractAnimation inherited objects such as [Data][ipyvizzu.animation.Data], [Config][ipyvizzu.animation.Config] and [Style][ipyvizzu.animation.Style]. **options: Dictionary of animation options for example `duration=1`. For information on all available animation options see the [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/interfaces/Anim.Options/#properties). Raises: ValueError: If `animations` is not set. Example: Reset the chart styles: chart.animate(Style(None)) \"\"\" # pylint: disable=line-too-long if not animations: raise ValueError(\"No animation was set.\") animation = AnimationMerger.merge_animations(animations) animate = Animate(animation, options) self._last_anim = uuid.uuid4().hex[:7] self._display( DisplayTemplate.ANIMATE.format( display_target=self._display_target.value, chart_id=self._chart_id, anim_id=self._last_anim, scroll=str(self._scroll_into_view).lower(), **animate.dump(), ) )","title":"animate()"},{"location":"reference/ipyvizzu/chart/#ipyvizzu.chart.Chart.feature","text":"A method for turning on/off features of the chart. Parameters: Name Type Description Default name str The name of the chart feature. For information on all available features see the Vizzu Code reference . required enabled bool The new state of the chart feature. required Example Turn on tooltip of the chart: chart.feature(\"tooltip\", True) Source code in src/ipyvizzu/chart.py def feature(self, name: str, enabled: bool) -> None: \"\"\" A method for turning on/off features of the chart. Args: name: The name of the chart feature. For information on all available features see the [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/modules/#feature). enabled: The new state of the chart feature. Example: Turn on `tooltip` of the chart: chart.feature(\"tooltip\", True) \"\"\" # pylint: disable=line-too-long self._display( DisplayTemplate.FEATURE.format( chart_id=self._chart_id, **Feature(name, enabled).dump(), ) )","title":"feature()"},{"location":"reference/ipyvizzu/chart/#ipyvizzu.chart.Chart.store","text":"A method for saving and storing the actual state of the chart. Returns: Type Description Snapshot A Snapshot object wich stores the actual state of the chart. Example Save and restore the actual state of the chart: snapshot = chart.store() ... chart.animate(snapshot) Source code in src/ipyvizzu/chart.py def store(self) -> Snapshot: \"\"\" A method for saving and storing the actual state of the chart. Returns: A Snapshot object wich stores the actual state of the chart. Example: Save and restore the actual state of the chart: snapshot = chart.store() ... chart.animate(snapshot) \"\"\" snapshot_id = uuid.uuid4().hex[:7] self._display( DisplayTemplate.STORE.format( chart_id=self._chart_id, **Store(snapshot_id).dump() ) ) return Snapshot(snapshot_id)","title":"store()"},{"location":"reference/ipyvizzu/chart/#ipyvizzu.chart.Chart.on","text":"A method for creating and turning on an event handler. Parameters: Name Type Description Default event str The type of the event. For information on all available events see the Vizzu Code reference . required handler str The JavaScript method of the event. required Returns: Type Description EventHandler The turned on event handler object. Example Turn on an event handler which prints an alert message when someone clicks on the chart: handler = chart.on(\"click\", \"alert(JSON.stringify(event.data));\") Source code in src/ipyvizzu/chart.py def on( # pylint: disable=invalid-name self, event: str, handler: str ) -> EventHandler: \"\"\" A method for creating and turning on an event handler. Args: event: The type of the event. For information on all available events see the [Vizzu Code reference](https://lib.vizzuhq.com/latest/reference/modules/Event/#type). handler: The JavaScript method of the event. Returns: The turned on event handler object. Example: Turn on an event handler which prints an alert message when someone clicks on the chart: handler = chart.on(\"click\", \"alert(JSON.stringify(event.data));\") \"\"\" # pylint: disable=line-too-long event_handler = EventHandler(event, handler) self._display( DisplayTemplate.SET_EVENT.format( chart_id=self._chart_id, **EventOn(event_handler).dump(), ) ) return event_handler","title":"on()"},{"location":"reference/ipyvizzu/chart/#ipyvizzu.chart.Chart.off","text":"A method for turning off an event handler. Parameters: Name Type Description Default event_handler EventHandler A previously created event handler object. required Example Turn off a previously created event handler: chart.off(handler) Source code in src/ipyvizzu/chart.py def off(self, event_handler: EventHandler) -> None: \"\"\" A method for turning off an event handler. Args: event_handler: A previously created event handler object. Example: Turn off a previously created event handler: chart.off(handler) \"\"\" self._display( DisplayTemplate.CLEAR_EVENT.format( chart_id=self._chart_id, **EventOff(event_handler).dump(), ) )","title":"off()"},{"location":"reference/ipyvizzu/chart/#ipyvizzu.chart.Chart.log","text":"A method for printing chart properties to the browser console. Parameters: Name Type Description Default chart_property ChartProperty A chart property such as CONFIG and STYLE . required Example Log the actual style of the chart to the browser console: chart.log(ChartProperty.STYLE) Source code in src/ipyvizzu/chart.py def log(self, chart_property: ChartProperty) -> None: \"\"\" A method for printing chart properties to the browser console. Args: chart_property: A chart property such as [CONFIG][ipyvizzu.template.ChartProperty] and [STYLE][ipyvizzu.template.ChartProperty]. Example: Log the actual style of the chart to the browser console: chart.log(ChartProperty.STYLE) \"\"\" self._display( DisplayTemplate.LOG.format( chart_id=self._chart_id, **Log(chart_property).dump() ) )","title":"log()"},{"location":"reference/ipyvizzu/chart/#ipyvizzu.chart.Chart.show","text":"A method for displaying the assembled JavaScript code. Raises: Type Description AssertionError If display is not DisplayTarget.MANUAL . AssertionError If chart already has been displayed. Source code in src/ipyvizzu/chart.py def show(self) -> None: \"\"\" A method for displaying the assembled JavaScript code. Raises: AssertionError: If [display][ipyvizzu.Chart.__init__] is not [DisplayTarget.MANUAL][ipyvizzu.template.DisplayTarget]. AssertionError: If chart already has been displayed. \"\"\" assert ( self._display_target == DisplayTarget.MANUAL ), \"chart.show() can be used with display=DisplayTarget.MANUAL only\" assert not self._showed, \"cannot be used after chart displayed\" display_javascript( \"\\n\".join(self._calls), raw=True, ) self._showed = True","title":"show()"},{"location":"reference/ipyvizzu/event/","text":"ipyvizzu.event A module for working with JavaScript events ipyvizzu.event.EventHandler A class for representing an event handler. Source code in src/ipyvizzu/event.py class EventHandler: \"\"\"A class for representing an event handler.\"\"\" def __init__(self, event: str, handler: str): \"\"\" EventHandler constructor. It generates a uuid for the event handler, stores the event type and the body of the handler function. Args: event: The type of the event. handler: The body of the handler function. \"\"\" self._id = uuid.uuid4().hex[:7] self._event = event self._handler = \" \".join(handler.split()) @property def id(self) -> str: # pylint: disable=invalid-name \"\"\" A property for storing an id. Returns: The uuid of the event handler. \"\"\" return self._id @property def event(self) -> str: \"\"\" A property for storing an event type. Returns: The type of the event. \"\"\" return self._event @property def handler(self) -> str: \"\"\" A property for storing an event handler function. Returns: The body of the handler function. \"\"\" return self._handler id: str property A property for storing an id. Returns: Type Description str The uuid of the event handler. event: str property A property for storing an event type. Returns: Type Description str The type of the event. handler: str property A property for storing an event handler function. Returns: Type Description str The body of the handler function. __init__(event, handler) EventHandler constructor. It generates a uuid for the event handler, stores the event type and the body of the handler function. Parameters: Name Type Description Default event str The type of the event. required handler str The body of the handler function. required Source code in src/ipyvizzu/event.py def __init__(self, event: str, handler: str): \"\"\" EventHandler constructor. It generates a uuid for the event handler, stores the event type and the body of the handler function. Args: event: The type of the event. handler: The body of the handler function. \"\"\" self._id = uuid.uuid4().hex[:7] self._event = event self._handler = \" \".join(handler.split())","title":"Event"},{"location":"reference/ipyvizzu/event/#ipyvizzu.event","text":"A module for working with JavaScript events","title":"event"},{"location":"reference/ipyvizzu/event/#ipyvizzu.event.EventHandler","text":"A class for representing an event handler. Source code in src/ipyvizzu/event.py class EventHandler: \"\"\"A class for representing an event handler.\"\"\" def __init__(self, event: str, handler: str): \"\"\" EventHandler constructor. It generates a uuid for the event handler, stores the event type and the body of the handler function. Args: event: The type of the event. handler: The body of the handler function. \"\"\" self._id = uuid.uuid4().hex[:7] self._event = event self._handler = \" \".join(handler.split()) @property def id(self) -> str: # pylint: disable=invalid-name \"\"\" A property for storing an id. Returns: The uuid of the event handler. \"\"\" return self._id @property def event(self) -> str: \"\"\" A property for storing an event type. Returns: The type of the event. \"\"\" return self._event @property def handler(self) -> str: \"\"\" A property for storing an event handler function. Returns: The body of the handler function. \"\"\" return self._handler","title":"EventHandler"},{"location":"reference/ipyvizzu/event/#ipyvizzu.event.EventHandler.id","text":"A property for storing an id. Returns: Type Description str The uuid of the event handler.","title":"id"},{"location":"reference/ipyvizzu/event/#ipyvizzu.event.EventHandler.event","text":"A property for storing an event type. Returns: Type Description str The type of the event.","title":"event"},{"location":"reference/ipyvizzu/event/#ipyvizzu.event.EventHandler.handler","text":"A property for storing an event handler function. Returns: Type Description str The body of the handler function.","title":"handler"},{"location":"reference/ipyvizzu/event/#ipyvizzu.event.EventHandler.__init__","text":"EventHandler constructor. It generates a uuid for the event handler, stores the event type and the body of the handler function. Parameters: Name Type Description Default event str The type of the event. required handler str The body of the handler function. required Source code in src/ipyvizzu/event.py def __init__(self, event: str, handler: str): \"\"\" EventHandler constructor. It generates a uuid for the event handler, stores the event type and the body of the handler function. Args: event: The type of the event. handler: The body of the handler function. \"\"\" self._id = uuid.uuid4().hex[:7] self._event = event self._handler = \" \".join(handler.split())","title":"__init__()"},{"location":"reference/ipyvizzu/json/","text":"ipyvizzu.json A module for working JavaScript code in json convertible objects. ipyvizzu.json.RawJavaScript A class for representing raw JavaScript code. Source code in src/ipyvizzu/json.py class RawJavaScript: \"\"\"A class for representing raw JavaScript code.\"\"\" # pylint: disable=too-few-public-methods def __init__(self, raw: Optional[str]): \"\"\" RawJavaScript constructor. It stores raw JavaScript code as a string. Args: raw: JavaScript code as `str`. \"\"\" self._raw = raw @property def raw(self) -> Optional[str]: \"\"\" A property for storing raw JavaScript code as a string. Returns: Raw JavaScript code as `str`. \"\"\" return self._raw raw: Optional[str] property A property for storing raw JavaScript code as a string. Returns: Type Description Optional [ str ] Raw JavaScript code as str . __init__(raw) RawJavaScript constructor. It stores raw JavaScript code as a string. Parameters: Name Type Description Default raw Optional [ str ] JavaScript code as str . required Source code in src/ipyvizzu/json.py def __init__(self, raw: Optional[str]): \"\"\" RawJavaScript constructor. It stores raw JavaScript code as a string. Args: raw: JavaScript code as `str`. \"\"\" self._raw = raw ipyvizzu.json.RawJavaScriptEncoder Bases: json . JSONEncoder A class for representing a custom json encoder, it can encode objects that contain RawJavaScript values. Source code in src/ipyvizzu/json.py class RawJavaScriptEncoder(json.JSONEncoder): \"\"\" A class for representing a custom json encoder, it can encode objects that contain [RawJavaScript][ipyvizzu.json.RawJavaScript] values. \"\"\" def __init__(self, *args, **kwargs): \"\"\" RawJavaScriptEncoder constructor. It extends [JSONEncoder][json.JSONEncoder] with an instance variable (`_raw_replacements`). The `_raw_replacements` dictionary stores the `uuids` and JavaScript codes of the [RawJavaScript][ipyvizzu.json.RawJavaScript] objects. \"\"\" json.JSONEncoder.__init__(self, *args, **kwargs) self._raw_replacements = {} def default(self, o: Any): \"\"\" Overrides [JSONEncoder.default][json.JSONEncoder.default] method. It replaces [RawJavaScript][ipyvizzu.json.RawJavaScript] object with `uuid` and it stores raw JavaScript code with `uuid` key in the `_raw_replacements` dictionary. \"\"\" if isinstance(o, RawJavaScript): key = uuid.uuid4().hex self._raw_replacements[key] = o.raw return key return json.JSONEncoder.default(self, o) def encode(self, o: Any): \"\"\" Overrides [JSONEncoder.encode][json.JSONEncoder.encode] method. It replaces `uuids` with raw JavaScript code without apostrophes. \"\"\" result = json.JSONEncoder.encode(self, o) for key, val in self._raw_replacements.items(): result = result.replace(f'\"{key}\"', val) return result __init__(*args, **kwargs) RawJavaScriptEncoder constructor. It extends JSONEncoder with an instance variable ( _raw_replacements ). The _raw_replacements dictionary stores the uuids and JavaScript codes of the RawJavaScript objects. Source code in src/ipyvizzu/json.py def __init__(self, *args, **kwargs): \"\"\" RawJavaScriptEncoder constructor. It extends [JSONEncoder][json.JSONEncoder] with an instance variable (`_raw_replacements`). The `_raw_replacements` dictionary stores the `uuids` and JavaScript codes of the [RawJavaScript][ipyvizzu.json.RawJavaScript] objects. \"\"\" json.JSONEncoder.__init__(self, *args, **kwargs) self._raw_replacements = {} default(o) Overrides JSONEncoder.default method. It replaces RawJavaScript object with uuid and it stores raw JavaScript code with uuid key in the _raw_replacements dictionary. Source code in src/ipyvizzu/json.py def default(self, o: Any): \"\"\" Overrides [JSONEncoder.default][json.JSONEncoder.default] method. It replaces [RawJavaScript][ipyvizzu.json.RawJavaScript] object with `uuid` and it stores raw JavaScript code with `uuid` key in the `_raw_replacements` dictionary. \"\"\" if isinstance(o, RawJavaScript): key = uuid.uuid4().hex self._raw_replacements[key] = o.raw return key return json.JSONEncoder.default(self, o) encode(o) Overrides JSONEncoder.encode method. It replaces uuids with raw JavaScript code without apostrophes. Source code in src/ipyvizzu/json.py def encode(self, o: Any): \"\"\" Overrides [JSONEncoder.encode][json.JSONEncoder.encode] method. It replaces `uuids` with raw JavaScript code without apostrophes. \"\"\" result = json.JSONEncoder.encode(self, o) for key, val in self._raw_replacements.items(): result = result.replace(f'\"{key}\"', val) return result","title":"Json"},{"location":"reference/ipyvizzu/json/#ipyvizzu.json","text":"A module for working JavaScript code in json convertible objects.","title":"json"},{"location":"reference/ipyvizzu/json/#ipyvizzu.json.RawJavaScript","text":"A class for representing raw JavaScript code. Source code in src/ipyvizzu/json.py class RawJavaScript: \"\"\"A class for representing raw JavaScript code.\"\"\" # pylint: disable=too-few-public-methods def __init__(self, raw: Optional[str]): \"\"\" RawJavaScript constructor. It stores raw JavaScript code as a string. Args: raw: JavaScript code as `str`. \"\"\" self._raw = raw @property def raw(self) -> Optional[str]: \"\"\" A property for storing raw JavaScript code as a string. Returns: Raw JavaScript code as `str`. \"\"\" return self._raw","title":"RawJavaScript"},{"location":"reference/ipyvizzu/json/#ipyvizzu.json.RawJavaScript.raw","text":"A property for storing raw JavaScript code as a string. Returns: Type Description Optional [ str ] Raw JavaScript code as str .","title":"raw"},{"location":"reference/ipyvizzu/json/#ipyvizzu.json.RawJavaScript.__init__","text":"RawJavaScript constructor. It stores raw JavaScript code as a string. Parameters: Name Type Description Default raw Optional [ str ] JavaScript code as str . required Source code in src/ipyvizzu/json.py def __init__(self, raw: Optional[str]): \"\"\" RawJavaScript constructor. It stores raw JavaScript code as a string. Args: raw: JavaScript code as `str`. \"\"\" self._raw = raw","title":"__init__()"},{"location":"reference/ipyvizzu/json/#ipyvizzu.json.RawJavaScriptEncoder","text":"Bases: json . JSONEncoder A class for representing a custom json encoder, it can encode objects that contain RawJavaScript values. Source code in src/ipyvizzu/json.py class RawJavaScriptEncoder(json.JSONEncoder): \"\"\" A class for representing a custom json encoder, it can encode objects that contain [RawJavaScript][ipyvizzu.json.RawJavaScript] values. \"\"\" def __init__(self, *args, **kwargs): \"\"\" RawJavaScriptEncoder constructor. It extends [JSONEncoder][json.JSONEncoder] with an instance variable (`_raw_replacements`). The `_raw_replacements` dictionary stores the `uuids` and JavaScript codes of the [RawJavaScript][ipyvizzu.json.RawJavaScript] objects. \"\"\" json.JSONEncoder.__init__(self, *args, **kwargs) self._raw_replacements = {} def default(self, o: Any): \"\"\" Overrides [JSONEncoder.default][json.JSONEncoder.default] method. It replaces [RawJavaScript][ipyvizzu.json.RawJavaScript] object with `uuid` and it stores raw JavaScript code with `uuid` key in the `_raw_replacements` dictionary. \"\"\" if isinstance(o, RawJavaScript): key = uuid.uuid4().hex self._raw_replacements[key] = o.raw return key return json.JSONEncoder.default(self, o) def encode(self, o: Any): \"\"\" Overrides [JSONEncoder.encode][json.JSONEncoder.encode] method. It replaces `uuids` with raw JavaScript code without apostrophes. \"\"\" result = json.JSONEncoder.encode(self, o) for key, val in self._raw_replacements.items(): result = result.replace(f'\"{key}\"', val) return result","title":"RawJavaScriptEncoder"},{"location":"reference/ipyvizzu/json/#ipyvizzu.json.RawJavaScriptEncoder.__init__","text":"RawJavaScriptEncoder constructor. It extends JSONEncoder with an instance variable ( _raw_replacements ). The _raw_replacements dictionary stores the uuids and JavaScript codes of the RawJavaScript objects. Source code in src/ipyvizzu/json.py def __init__(self, *args, **kwargs): \"\"\" RawJavaScriptEncoder constructor. It extends [JSONEncoder][json.JSONEncoder] with an instance variable (`_raw_replacements`). The `_raw_replacements` dictionary stores the `uuids` and JavaScript codes of the [RawJavaScript][ipyvizzu.json.RawJavaScript] objects. \"\"\" json.JSONEncoder.__init__(self, *args, **kwargs) self._raw_replacements = {}","title":"__init__()"},{"location":"reference/ipyvizzu/json/#ipyvizzu.json.RawJavaScriptEncoder.default","text":"Overrides JSONEncoder.default method. It replaces RawJavaScript object with uuid and it stores raw JavaScript code with uuid key in the _raw_replacements dictionary. Source code in src/ipyvizzu/json.py def default(self, o: Any): \"\"\" Overrides [JSONEncoder.default][json.JSONEncoder.default] method. It replaces [RawJavaScript][ipyvizzu.json.RawJavaScript] object with `uuid` and it stores raw JavaScript code with `uuid` key in the `_raw_replacements` dictionary. \"\"\" if isinstance(o, RawJavaScript): key = uuid.uuid4().hex self._raw_replacements[key] = o.raw return key return json.JSONEncoder.default(self, o)","title":"default()"},{"location":"reference/ipyvizzu/json/#ipyvizzu.json.RawJavaScriptEncoder.encode","text":"Overrides JSONEncoder.encode method. It replaces uuids with raw JavaScript code without apostrophes. Source code in src/ipyvizzu/json.py def encode(self, o: Any): \"\"\" Overrides [JSONEncoder.encode][json.JSONEncoder.encode] method. It replaces `uuids` with raw JavaScript code without apostrophes. \"\"\" result = json.JSONEncoder.encode(self, o) for key, val in self._raw_replacements.items(): result = result.replace(f'\"{key}\"', val) return result","title":"encode()"},{"location":"reference/ipyvizzu/method/","text":"ipyvizzu.method A module for working with template methods. ipyvizzu.method.Method A class for storing and dumping any kind of data. Source code in src/ipyvizzu/method.py class Method: \"\"\"A class for storing and dumping any kind of data.\"\"\" # pylint: disable=too-few-public-methods _data: dict def dump(self) -> dict: \"\"\" A method for returning the stored data. Returns: The stored data. \"\"\" return self._data dump() A method for returning the stored data. Returns: Type Description dict The stored data. Source code in src/ipyvizzu/method.py def dump(self) -> dict: \"\"\" A method for returning the stored data. Returns: The stored data. \"\"\" return self._data ipyvizzu.method.Animate Bases: Method A class for dumping chart independent parameters to DisplayTemplate.ANIMATE template. Source code in src/ipyvizzu/method.py class Animate(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.ANIMATE][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__( self, chart_target: AbstractAnimation, chart_anim_opts: Optional[dict] = None, ): \"\"\" Animate constructor. It stores and dumps `chart_target` and `chart_anim_opts` parameters. Args: chart_target: AbstractAnimation inherited object such as [Data][ipyvizzu.animation.Data] [Config][ipyvizzu.animation.Config] or [Style][ipyvizzu.animation.Style]. chart_anim_opts: Animation options' dictionary. If it is not set, it dumps `undefined`. \"\"\" self._data = { \"chart_target\": chart_target.dump(), \"chart_anim_opts\": PlainAnimation(chart_anim_opts).dump() if chart_anim_opts else \"undefined\", } __init__(chart_target, chart_anim_opts=None) Animate constructor. It stores and dumps chart_target and chart_anim_opts parameters. Parameters: Name Type Description Default chart_target AbstractAnimation AbstractAnimation inherited object such as Data Config or Style . required chart_anim_opts Optional [ dict ] Animation options' dictionary. If it is not set, it dumps undefined . None Source code in src/ipyvizzu/method.py def __init__( self, chart_target: AbstractAnimation, chart_anim_opts: Optional[dict] = None, ): \"\"\" Animate constructor. It stores and dumps `chart_target` and `chart_anim_opts` parameters. Args: chart_target: AbstractAnimation inherited object such as [Data][ipyvizzu.animation.Data] [Config][ipyvizzu.animation.Config] or [Style][ipyvizzu.animation.Style]. chart_anim_opts: Animation options' dictionary. If it is not set, it dumps `undefined`. \"\"\" self._data = { \"chart_target\": chart_target.dump(), \"chart_anim_opts\": PlainAnimation(chart_anim_opts).dump() if chart_anim_opts else \"undefined\", } ipyvizzu.method.Feature Bases: Method A class for dumping chart independent parameters to DisplayTemplate.FEATURE template. Source code in src/ipyvizzu/method.py class Feature(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.FEATURE][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__(self, name: str, enabled: bool): \"\"\" Feature constructor. It stores and dumps `name` and `enabled` parameters. Args: name: The name of a chart feature. enabled: The new state of a chart feature. \"\"\" self._data = {\"name\": name, \"enabled\": json.dumps(enabled)} __init__(name, enabled) Feature constructor. It stores and dumps name and enabled parameters. Parameters: Name Type Description Default name str The name of a chart feature. required enabled bool The new state of a chart feature. required Source code in src/ipyvizzu/method.py def __init__(self, name: str, enabled: bool): \"\"\" Feature constructor. It stores and dumps `name` and `enabled` parameters. Args: name: The name of a chart feature. enabled: The new state of a chart feature. \"\"\" self._data = {\"name\": name, \"enabled\": json.dumps(enabled)} ipyvizzu.method.Store Bases: Method A class for dumping chart independent parameters to DisplayTemplate.STORE template. Source code in src/ipyvizzu/method.py class Store(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.STORE][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__(self, snapshot_id: str): \"\"\" Store constructor. It stores and dumps `snapshot_id` parameter. Args: snapshot_id: The id of snapshot object. \"\"\" self._data = {\"id\": snapshot_id} __init__(snapshot_id) Store constructor. It stores and dumps snapshot_id parameter. Parameters: Name Type Description Default snapshot_id str The id of snapshot object. required Source code in src/ipyvizzu/method.py def __init__(self, snapshot_id: str): \"\"\" Store constructor. It stores and dumps `snapshot_id` parameter. Args: snapshot_id: The id of snapshot object. \"\"\" self._data = {\"id\": snapshot_id} ipyvizzu.method.EventOn Bases: Method A class for dumping chart independent parameters to DisplayTemplate.SET_EVENT template. Source code in src/ipyvizzu/method.py class EventOn(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.SET_EVENT][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__(self, event_handler: EventHandler): \"\"\" EventOn constructor. It stores and dumps the `id`, the `event` and the `handler` of the event handler object. Args: event_handler: An event handler object. \"\"\" self._data = { \"id\": event_handler.id, \"event\": event_handler.event, \"handler\": event_handler.handler, } __init__(event_handler) EventOn constructor. It stores and dumps the id , the event and the handler of the event handler object. Parameters: Name Type Description Default event_handler EventHandler An event handler object. required Source code in src/ipyvizzu/method.py def __init__(self, event_handler: EventHandler): \"\"\" EventOn constructor. It stores and dumps the `id`, the `event` and the `handler` of the event handler object. Args: event_handler: An event handler object. \"\"\" self._data = { \"id\": event_handler.id, \"event\": event_handler.event, \"handler\": event_handler.handler, } ipyvizzu.method.EventOff Bases: Method A class for dumping chart independent parameters to DisplayTemplate.CLEAR_EVENT template. Source code in src/ipyvizzu/method.py class EventOff(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.CLEAR_EVENT][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__(self, event_handler: EventHandler): \"\"\" EventOff constructor. It stores and dumps the `id` and the `event` of the event handler object. Args: event_handler: An event handler object. \"\"\" self._data = {\"id\": event_handler.id, \"event\": event_handler.event} __init__(event_handler) EventOff constructor. It stores and dumps the id and the event of the event handler object. Parameters: Name Type Description Default event_handler EventHandler An event handler object. required Source code in src/ipyvizzu/method.py def __init__(self, event_handler: EventHandler): \"\"\" EventOff constructor. It stores and dumps the `id` and the `event` of the event handler object. Args: event_handler: An event handler object. \"\"\" self._data = {\"id\": event_handler.id, \"event\": event_handler.event} ipyvizzu.method.Log Bases: Method A class for dumping chart independent parameters to DisplayTemplate.LOG template. Source code in src/ipyvizzu/method.py class Log(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.LOG][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__(self, chart_property: ChartProperty): \"\"\" Log constructor. It stores and dumps the value of the chart property object. Args: chart_property: A chart property such as [CONFIG][ipyvizzu.template.ChartProperty] and [STYLE][ipyvizzu.template.ChartProperty]. \"\"\" self._data = {\"chart_property\": chart_property.value} __init__(chart_property) Log constructor. It stores and dumps the value of the chart property object. Parameters: Name Type Description Default chart_property ChartProperty A chart property such as CONFIG and STYLE . required Source code in src/ipyvizzu/method.py def __init__(self, chart_property: ChartProperty): \"\"\" Log constructor. It stores and dumps the value of the chart property object. Args: chart_property: A chart property such as [CONFIG][ipyvizzu.template.ChartProperty] and [STYLE][ipyvizzu.template.ChartProperty]. \"\"\" self._data = {\"chart_property\": chart_property.value}","title":"Method"},{"location":"reference/ipyvizzu/method/#ipyvizzu.method","text":"A module for working with template methods.","title":"method"},{"location":"reference/ipyvizzu/method/#ipyvizzu.method.Method","text":"A class for storing and dumping any kind of data. Source code in src/ipyvizzu/method.py class Method: \"\"\"A class for storing and dumping any kind of data.\"\"\" # pylint: disable=too-few-public-methods _data: dict def dump(self) -> dict: \"\"\" A method for returning the stored data. Returns: The stored data. \"\"\" return self._data","title":"Method"},{"location":"reference/ipyvizzu/method/#ipyvizzu.method.Method.dump","text":"A method for returning the stored data. Returns: Type Description dict The stored data. Source code in src/ipyvizzu/method.py def dump(self) -> dict: \"\"\" A method for returning the stored data. Returns: The stored data. \"\"\" return self._data","title":"dump()"},{"location":"reference/ipyvizzu/method/#ipyvizzu.method.Animate","text":"Bases: Method A class for dumping chart independent parameters to DisplayTemplate.ANIMATE template. Source code in src/ipyvizzu/method.py class Animate(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.ANIMATE][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__( self, chart_target: AbstractAnimation, chart_anim_opts: Optional[dict] = None, ): \"\"\" Animate constructor. It stores and dumps `chart_target` and `chart_anim_opts` parameters. Args: chart_target: AbstractAnimation inherited object such as [Data][ipyvizzu.animation.Data] [Config][ipyvizzu.animation.Config] or [Style][ipyvizzu.animation.Style]. chart_anim_opts: Animation options' dictionary. If it is not set, it dumps `undefined`. \"\"\" self._data = { \"chart_target\": chart_target.dump(), \"chart_anim_opts\": PlainAnimation(chart_anim_opts).dump() if chart_anim_opts else \"undefined\", }","title":"Animate"},{"location":"reference/ipyvizzu/method/#ipyvizzu.method.Animate.__init__","text":"Animate constructor. It stores and dumps chart_target and chart_anim_opts parameters. Parameters: Name Type Description Default chart_target AbstractAnimation AbstractAnimation inherited object such as Data Config or Style . required chart_anim_opts Optional [ dict ] Animation options' dictionary. If it is not set, it dumps undefined . None Source code in src/ipyvizzu/method.py def __init__( self, chart_target: AbstractAnimation, chart_anim_opts: Optional[dict] = None, ): \"\"\" Animate constructor. It stores and dumps `chart_target` and `chart_anim_opts` parameters. Args: chart_target: AbstractAnimation inherited object such as [Data][ipyvizzu.animation.Data] [Config][ipyvizzu.animation.Config] or [Style][ipyvizzu.animation.Style]. chart_anim_opts: Animation options' dictionary. If it is not set, it dumps `undefined`. \"\"\" self._data = { \"chart_target\": chart_target.dump(), \"chart_anim_opts\": PlainAnimation(chart_anim_opts).dump() if chart_anim_opts else \"undefined\", }","title":"__init__()"},{"location":"reference/ipyvizzu/method/#ipyvizzu.method.Feature","text":"Bases: Method A class for dumping chart independent parameters to DisplayTemplate.FEATURE template. Source code in src/ipyvizzu/method.py class Feature(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.FEATURE][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__(self, name: str, enabled: bool): \"\"\" Feature constructor. It stores and dumps `name` and `enabled` parameters. Args: name: The name of a chart feature. enabled: The new state of a chart feature. \"\"\" self._data = {\"name\": name, \"enabled\": json.dumps(enabled)}","title":"Feature"},{"location":"reference/ipyvizzu/method/#ipyvizzu.method.Feature.__init__","text":"Feature constructor. It stores and dumps name and enabled parameters. Parameters: Name Type Description Default name str The name of a chart feature. required enabled bool The new state of a chart feature. required Source code in src/ipyvizzu/method.py def __init__(self, name: str, enabled: bool): \"\"\" Feature constructor. It stores and dumps `name` and `enabled` parameters. Args: name: The name of a chart feature. enabled: The new state of a chart feature. \"\"\" self._data = {\"name\": name, \"enabled\": json.dumps(enabled)}","title":"__init__()"},{"location":"reference/ipyvizzu/method/#ipyvizzu.method.Store","text":"Bases: Method A class for dumping chart independent parameters to DisplayTemplate.STORE template. Source code in src/ipyvizzu/method.py class Store(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.STORE][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__(self, snapshot_id: str): \"\"\" Store constructor. It stores and dumps `snapshot_id` parameter. Args: snapshot_id: The id of snapshot object. \"\"\" self._data = {\"id\": snapshot_id}","title":"Store"},{"location":"reference/ipyvizzu/method/#ipyvizzu.method.Store.__init__","text":"Store constructor. It stores and dumps snapshot_id parameter. Parameters: Name Type Description Default snapshot_id str The id of snapshot object. required Source code in src/ipyvizzu/method.py def __init__(self, snapshot_id: str): \"\"\" Store constructor. It stores and dumps `snapshot_id` parameter. Args: snapshot_id: The id of snapshot object. \"\"\" self._data = {\"id\": snapshot_id}","title":"__init__()"},{"location":"reference/ipyvizzu/method/#ipyvizzu.method.EventOn","text":"Bases: Method A class for dumping chart independent parameters to DisplayTemplate.SET_EVENT template. Source code in src/ipyvizzu/method.py class EventOn(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.SET_EVENT][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__(self, event_handler: EventHandler): \"\"\" EventOn constructor. It stores and dumps the `id`, the `event` and the `handler` of the event handler object. Args: event_handler: An event handler object. \"\"\" self._data = { \"id\": event_handler.id, \"event\": event_handler.event, \"handler\": event_handler.handler, }","title":"EventOn"},{"location":"reference/ipyvizzu/method/#ipyvizzu.method.EventOn.__init__","text":"EventOn constructor. It stores and dumps the id , the event and the handler of the event handler object. Parameters: Name Type Description Default event_handler EventHandler An event handler object. required Source code in src/ipyvizzu/method.py def __init__(self, event_handler: EventHandler): \"\"\" EventOn constructor. It stores and dumps the `id`, the `event` and the `handler` of the event handler object. Args: event_handler: An event handler object. \"\"\" self._data = { \"id\": event_handler.id, \"event\": event_handler.event, \"handler\": event_handler.handler, }","title":"__init__()"},{"location":"reference/ipyvizzu/method/#ipyvizzu.method.EventOff","text":"Bases: Method A class for dumping chart independent parameters to DisplayTemplate.CLEAR_EVENT template. Source code in src/ipyvizzu/method.py class EventOff(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.CLEAR_EVENT][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__(self, event_handler: EventHandler): \"\"\" EventOff constructor. It stores and dumps the `id` and the `event` of the event handler object. Args: event_handler: An event handler object. \"\"\" self._data = {\"id\": event_handler.id, \"event\": event_handler.event}","title":"EventOff"},{"location":"reference/ipyvizzu/method/#ipyvizzu.method.EventOff.__init__","text":"EventOff constructor. It stores and dumps the id and the event of the event handler object. Parameters: Name Type Description Default event_handler EventHandler An event handler object. required Source code in src/ipyvizzu/method.py def __init__(self, event_handler: EventHandler): \"\"\" EventOff constructor. It stores and dumps the `id` and the `event` of the event handler object. Args: event_handler: An event handler object. \"\"\" self._data = {\"id\": event_handler.id, \"event\": event_handler.event}","title":"__init__()"},{"location":"reference/ipyvizzu/method/#ipyvizzu.method.Log","text":"Bases: Method A class for dumping chart independent parameters to DisplayTemplate.LOG template. Source code in src/ipyvizzu/method.py class Log(Method): \"\"\" A class for dumping chart independent parameters to [DisplayTemplate.LOG][ipyvizzu.template.DisplayTemplate] template. \"\"\" # pylint: disable=too-few-public-methods def __init__(self, chart_property: ChartProperty): \"\"\" Log constructor. It stores and dumps the value of the chart property object. Args: chart_property: A chart property such as [CONFIG][ipyvizzu.template.ChartProperty] and [STYLE][ipyvizzu.template.ChartProperty]. \"\"\" self._data = {\"chart_property\": chart_property.value}","title":"Log"},{"location":"reference/ipyvizzu/method/#ipyvizzu.method.Log.__init__","text":"Log constructor. It stores and dumps the value of the chart property object. Parameters: Name Type Description Default chart_property ChartProperty A chart property such as CONFIG and STYLE . required Source code in src/ipyvizzu/method.py def __init__(self, chart_property: ChartProperty): \"\"\" Log constructor. It stores and dumps the value of the chart property object. Args: chart_property: A chart property such as [CONFIG][ipyvizzu.template.ChartProperty] and [STYLE][ipyvizzu.template.ChartProperty]. \"\"\" self._data = {\"chart_property\": chart_property.value}","title":"__init__()"},{"location":"reference/ipyvizzu/schema/","text":"ipyvizzu.schema A module for storing the data schema. ipyvizzu.schema.NAMED_SCHEMA: dict = {'type': 'array', 'items': {'type': 'object', 'properties': {'name': {'type': 'string'}, 'values': {'type': 'array', 'optional': True}, 'type': {'type': 'string', 'optional': True}}, 'required': ['name']}} module-attribute Store the schema of the series , dimensions and measures data types. ipyvizzu.schema.RECORD_SCHEMA: dict = {'type': 'array', 'items': {'anyOf': [{'type': 'array'}, {'type': 'object'}]}} module-attribute Store the schema of the records data type. ipyvizzu.schema.DATA_SCHEMA: dict = {'type': 'object', 'oneOf': [{'properties': {'series': NAMED_SCHEMA, 'records': RECORD_SCHEMA, 'filter': {'optional': True}}, 'additionalProperties': False}, {'properties': {'dimensions': NAMED_SCHEMA, 'measures': NAMED_SCHEMA, 'filter': {'optional': True}}, 'additionalProperties': False, 'required': ['dimensions', 'measures']}]} module-attribute Store the schema of the data animation.","title":"Schema"},{"location":"reference/ipyvizzu/schema/#ipyvizzu.schema","text":"A module for storing the data schema.","title":"schema"},{"location":"reference/ipyvizzu/schema/#ipyvizzu.schema.NAMED_SCHEMA","text":"Store the schema of the series , dimensions and measures data types.","title":"NAMED_SCHEMA"},{"location":"reference/ipyvizzu/schema/#ipyvizzu.schema.RECORD_SCHEMA","text":"Store the schema of the records data type.","title":"RECORD_SCHEMA"},{"location":"reference/ipyvizzu/schema/#ipyvizzu.schema.DATA_SCHEMA","text":"Store the schema of the data animation.","title":"DATA_SCHEMA"},{"location":"reference/ipyvizzu/template/","text":"ipyvizzu.template A module for storing the JavaScript templates. ipyvizzu.template.ChartProperty Bases: Enum An enum class for storing chart properties. Source code in src/ipyvizzu/template.py class ChartProperty(Enum): \"\"\"An enum class for storing chart properties.\"\"\" CONFIG = \"config\" \"\"\"An enum key-value for storing config chart property.\"\"\" STYLE = \"style\" \"\"\"An enum key-value for storing style chart property.\"\"\" CONFIG = 'config' class-attribute instance-attribute An enum key-value for storing config chart property. STYLE = 'style' class-attribute instance-attribute An enum key-value for storing style chart property. ipyvizzu.template.DisplayTarget Bases: Enum An enum class for storing chart display options. Source code in src/ipyvizzu/template.py class DisplayTarget(Enum): \"\"\"An enum class for storing chart display options.\"\"\" BEGIN = \"begin\" \"\"\"Display all animation steps after the constructor's cell.\"\"\" END = \"end\" \"\"\"Display all animation steps after the last running cell.\"\"\" ACTUAL = \"actual\" \"\"\"Display the actual animation step after the currently running cell.\"\"\" MANUAL = \"manual\" \"\"\"Display all animation steps after calling a show method.\"\"\" BEGIN = 'begin' class-attribute instance-attribute Display all animation steps after the constructor's cell. END = 'end' class-attribute instance-attribute Display all animation steps after the last running cell. ACTUAL = 'actual' class-attribute instance-attribute Display the actual animation step after the currently running cell. MANUAL = 'manual' class-attribute instance-attribute Display all animation steps after calling a show method. ipyvizzu.template.DisplayTemplate A class for storing JavaScript snippet templates. Source code in src/ipyvizzu/template.py class DisplayTemplate: \"\"\"A class for storing JavaScript snippet templates.\"\"\" # pylint: disable=too-few-public-methods IPYVIZZUJS: str = \"{ipyvizzujs}\" \"\"\"ipyvizzu JavaScript class.\"\"\" INIT: str = ( \"window.ipyvizzu.createChart(element, \" + \"'{chart_id}', '{vizzu}', '{div_width}', '{div_height}');\" ) \"\"\"Call createChart JavaScript method.\"\"\" CHANGE_ANALYTICS_TO: str = ( \"if (window.IpyVizzu) window.IpyVizzu.changeAnalyticsTo({analytics});\" ) \"\"\"Call changeAnalyticsTo JavaScript method.\"\"\" ANIMATE: str = ( \"window.ipyvizzu.animate(element, \" + \"'{chart_id}', '{anim_id}', '{display_target}', {scroll}, \" + \"lib => {{ return {chart_target} }}, {chart_anim_opts});\" ) \"\"\"Call animate JavaScript method.\"\"\" FEATURE: str = ( \"window.ipyvizzu.feature(element, '{chart_id}', '{name}', {enabled});\" ) \"\"\"Call feature JavaScript method.\"\"\" STORE: str = \"window.ipyvizzu.store(element, '{chart_id}', '{id}');\" \"\"\"Call store JavaScript method.\"\"\" SET_EVENT: str = ( \"window.ipyvizzu.setEvent(element, \" + \"'{chart_id}', '{id}', '{event}', event => {{ {handler} }});\" ) \"\"\"Call setEvent JavaScript method.\"\"\" CLEAR_EVENT: str = ( \"window.ipyvizzu.clearEvent(element, '{chart_id}', '{id}', '{event}');\" ) \"\"\"Call clearEvent JavaScript method.\"\"\" LOG: str = \"window.ipyvizzu.log(element, '{chart_id}', '{chart_property}');\" \"\"\"Call log JavaScript method.\"\"\" CONTROL: str = \"window.ipyvizzu.control(element, '{method}', {params});\" \"\"\"Call animation control JavaScript methods.\"\"\" CLEAR_INHIBITSCROLL: str = ( \"if (window.IpyVizzu) { window.IpyVizzu.clearInhibitScroll(element); }\" ) \"\"\"Call clearInhibitScroll JavaScript method if ipyvizzu JavaScript class exists.\"\"\" IPYVIZZUJS: str = '{ipyvizzujs}' class-attribute instance-attribute ipyvizzu JavaScript class. INIT: str = 'window.ipyvizzu.createChart(element, ' + \"'{chart_id}', '{vizzu}', '{div_width}', '{div_height}');\" class-attribute instance-attribute Call createChart JavaScript method. CHANGE_ANALYTICS_TO: str = 'if (window.IpyVizzu) window.IpyVizzu.changeAnalyticsTo({analytics});' class-attribute instance-attribute Call changeAnalyticsTo JavaScript method. ANIMATE: str = 'window.ipyvizzu.animate(element, ' + \"'{chart_id}', '{anim_id}', '{display_target}', {scroll}, \" + 'lib => {{ return {chart_target} }}, {chart_anim_opts});' class-attribute instance-attribute Call animate JavaScript method. FEATURE: str = \"window.ipyvizzu.feature(element, '{chart_id}', '{name}', {enabled});\" class-attribute instance-attribute Call feature JavaScript method. STORE: str = \"window.ipyvizzu.store(element, '{chart_id}', '{id}');\" class-attribute instance-attribute Call store JavaScript method. SET_EVENT: str = 'window.ipyvizzu.setEvent(element, ' + \"'{chart_id}', '{id}', '{event}', event => {{ {handler} }});\" class-attribute instance-attribute Call setEvent JavaScript method. CLEAR_EVENT: str = \"window.ipyvizzu.clearEvent(element, '{chart_id}', '{id}', '{event}');\" class-attribute instance-attribute Call clearEvent JavaScript method. LOG: str = \"window.ipyvizzu.log(element, '{chart_id}', '{chart_property}');\" class-attribute instance-attribute Call log JavaScript method. CONTROL: str = \"window.ipyvizzu.control(element, '{method}', {params});\" class-attribute instance-attribute Call animation control JavaScript methods. CLEAR_INHIBITSCROLL: str = 'if (window.IpyVizzu) { window.IpyVizzu.clearInhibitScroll(element); }' class-attribute instance-attribute Call clearInhibitScroll JavaScript method if ipyvizzu JavaScript class exists.","title":"Template"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template","text":"A module for storing the JavaScript templates.","title":"template"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.ChartProperty","text":"Bases: Enum An enum class for storing chart properties. Source code in src/ipyvizzu/template.py class ChartProperty(Enum): \"\"\"An enum class for storing chart properties.\"\"\" CONFIG = \"config\" \"\"\"An enum key-value for storing config chart property.\"\"\" STYLE = \"style\" \"\"\"An enum key-value for storing style chart property.\"\"\"","title":"ChartProperty"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.ChartProperty.CONFIG","text":"An enum key-value for storing config chart property.","title":"CONFIG"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.ChartProperty.STYLE","text":"An enum key-value for storing style chart property.","title":"STYLE"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.DisplayTarget","text":"Bases: Enum An enum class for storing chart display options. Source code in src/ipyvizzu/template.py class DisplayTarget(Enum): \"\"\"An enum class for storing chart display options.\"\"\" BEGIN = \"begin\" \"\"\"Display all animation steps after the constructor's cell.\"\"\" END = \"end\" \"\"\"Display all animation steps after the last running cell.\"\"\" ACTUAL = \"actual\" \"\"\"Display the actual animation step after the currently running cell.\"\"\" MANUAL = \"manual\" \"\"\"Display all animation steps after calling a show method.\"\"\"","title":"DisplayTarget"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.DisplayTarget.BEGIN","text":"Display all animation steps after the constructor's cell.","title":"BEGIN"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.DisplayTarget.END","text":"Display all animation steps after the last running cell.","title":"END"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.DisplayTarget.ACTUAL","text":"Display the actual animation step after the currently running cell.","title":"ACTUAL"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.DisplayTarget.MANUAL","text":"Display all animation steps after calling a show method.","title":"MANUAL"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.DisplayTemplate","text":"A class for storing JavaScript snippet templates. Source code in src/ipyvizzu/template.py class DisplayTemplate: \"\"\"A class for storing JavaScript snippet templates.\"\"\" # pylint: disable=too-few-public-methods IPYVIZZUJS: str = \"{ipyvizzujs}\" \"\"\"ipyvizzu JavaScript class.\"\"\" INIT: str = ( \"window.ipyvizzu.createChart(element, \" + \"'{chart_id}', '{vizzu}', '{div_width}', '{div_height}');\" ) \"\"\"Call createChart JavaScript method.\"\"\" CHANGE_ANALYTICS_TO: str = ( \"if (window.IpyVizzu) window.IpyVizzu.changeAnalyticsTo({analytics});\" ) \"\"\"Call changeAnalyticsTo JavaScript method.\"\"\" ANIMATE: str = ( \"window.ipyvizzu.animate(element, \" + \"'{chart_id}', '{anim_id}', '{display_target}', {scroll}, \" + \"lib => {{ return {chart_target} }}, {chart_anim_opts});\" ) \"\"\"Call animate JavaScript method.\"\"\" FEATURE: str = ( \"window.ipyvizzu.feature(element, '{chart_id}', '{name}', {enabled});\" ) \"\"\"Call feature JavaScript method.\"\"\" STORE: str = \"window.ipyvizzu.store(element, '{chart_id}', '{id}');\" \"\"\"Call store JavaScript method.\"\"\" SET_EVENT: str = ( \"window.ipyvizzu.setEvent(element, \" + \"'{chart_id}', '{id}', '{event}', event => {{ {handler} }});\" ) \"\"\"Call setEvent JavaScript method.\"\"\" CLEAR_EVENT: str = ( \"window.ipyvizzu.clearEvent(element, '{chart_id}', '{id}', '{event}');\" ) \"\"\"Call clearEvent JavaScript method.\"\"\" LOG: str = \"window.ipyvizzu.log(element, '{chart_id}', '{chart_property}');\" \"\"\"Call log JavaScript method.\"\"\" CONTROL: str = \"window.ipyvizzu.control(element, '{method}', {params});\" \"\"\"Call animation control JavaScript methods.\"\"\" CLEAR_INHIBITSCROLL: str = ( \"if (window.IpyVizzu) { window.IpyVizzu.clearInhibitScroll(element); }\" ) \"\"\"Call clearInhibitScroll JavaScript method if ipyvizzu JavaScript class exists.\"\"\"","title":"DisplayTemplate"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.DisplayTemplate.IPYVIZZUJS","text":"ipyvizzu JavaScript class.","title":"IPYVIZZUJS"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.DisplayTemplate.INIT","text":"Call createChart JavaScript method.","title":"INIT"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.DisplayTemplate.CHANGE_ANALYTICS_TO","text":"Call changeAnalyticsTo JavaScript method.","title":"CHANGE_ANALYTICS_TO"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.DisplayTemplate.ANIMATE","text":"Call animate JavaScript method.","title":"ANIMATE"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.DisplayTemplate.FEATURE","text":"Call feature JavaScript method.","title":"FEATURE"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.DisplayTemplate.STORE","text":"Call store JavaScript method.","title":"STORE"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.DisplayTemplate.SET_EVENT","text":"Call setEvent JavaScript method.","title":"SET_EVENT"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.DisplayTemplate.CLEAR_EVENT","text":"Call clearEvent JavaScript method.","title":"CLEAR_EVENT"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.DisplayTemplate.LOG","text":"Call log JavaScript method.","title":"LOG"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.DisplayTemplate.CONTROL","text":"Call animation control JavaScript methods.","title":"CONTROL"},{"location":"reference/ipyvizzu/template/#ipyvizzu.template.DisplayTemplate.CLEAR_INHIBITSCROLL","text":"Call clearInhibitScroll JavaScript method if ipyvizzu JavaScript class exists.","title":"CLEAR_INHIBITSCROLL"},{"location":"reference/ipyvizzu/data/","text":"ipyvizzu.data This module serves as a collection of data-related utilities, including converter classes, data infer types and data typing aliases. ipyvizzu.data.type_alias This module provides typing aliases for data used in ipyvizzu. DimensionValue = str module-attribute Represents a value that can be either a string or a number, but both will be treated as strings. MeasureValue = Union[int, float] module-attribute Represents a numerical value, which can be either an int or a float. NestedMeasureValues = Union[MeasureValue, List['NestedMeasureValues']] module-attribute Represents a nested structure of MeasureValues. It can be a single MeasureValue or a list containing other NestedMeasureValues. RecordValue = Union[DimensionValue, MeasureValue] module-attribute Represents a value that can be either a DimensionValue or a MeasureValue. Record = Union[List[RecordValue], Dict[str, RecordValue]] module-attribute Represents a Record, which is a collection of RecordValues. A Record can be represented as either a list of RecordValues or a dictionary where keys are series names and values are the corresponding RecordValues. SeriesValues = Union[Sequence[DimensionValue], Sequence[MeasureValue]] module-attribute Represents a collection of values for a Series. It can be a list of DimensionValues or a list of MeasureValues. Series = Dict[str, Union[str, SeriesValues]] module-attribute Represents a Series in a dictionary format. It consists of a name (string), an optional type (also a string), and a values key which contains a SeriesValues. ipyvizzu.data.infer_type This module provides the InferType class, which stores data infer types. InferType Bases: Enum An enum class for storing data infer types. Attributes: Name Type Description DIMENSION str An enum key-value for storing dimension infer type. Dimensions are categorical series that can contain strings and numbers, but both will be treated as strings. MEASURE str An enum key-value for storing measure infer type. Measures can only be numerical. Source code in src/ipyvizzu/data/infer_type.py class InferType(Enum): \"\"\" An enum class for storing data infer types. Attributes: DIMENSION: An enum key-value for storing dimension infer type. Dimensions are categorical series that can contain strings and numbers, but both will be treated as strings. MEASURE: An enum key-value for storing measure infer type. Measures can only be numerical. \"\"\" DIMENSION: str = \"dimension\" MEASURE: str = \"measure\" ipyvizzu.data.converters This module contains converter classes that offer a user-friendly interface for data conversion, enabling users to effortlessly transform various data formats into a standardized representation of series compatible with ipyvizzu . converter This module provides the ToSeriesListConverter abstract class. ToSeriesListConverter Bases: ABC Converts data into a list of dictionaries representing series. Each dictionary contains information about the series name , values and type . Source code in src/ipyvizzu/data/converters/converter.py class ToSeriesListConverter(ABC): \"\"\" Converts data into a list of dictionaries representing series. Each dictionary contains information about the series `name`, `values` and `type`. \"\"\" # pylint: disable=too-few-public-methods def __init__( self, default_measure_value: MeasureValue, default_dimension_value: DimensionValue, ) -> None: self._default_measure_value = default_measure_value self._default_dimension_value = default_dimension_value @abstractmethod def get_series_list(self) -> List[Series]: \"\"\" Convert data to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" @abstractmethod def _convert_to_series_values_and_type( self, obj: Any ) -> Tuple[SeriesValues, InferType]: \"\"\" Convert object to SeriesValues and InferType. \"\"\" @abstractmethod def _convert_to_measure_values(self, obj: Any) -> List[MeasureValue]: \"\"\" Convert object to a list of MeasureValue. \"\"\" @abstractmethod def _convert_to_dimension_values(self, obj: Any) -> List[DimensionValue]: \"\"\" Convert object to a list of DimensionValue. \"\"\" def _convert_to_series( self, name: Union[str, int], values: SeriesValues, infer_type: InferType ) -> Series: return { \"name\": str(name), \"values\": values, \"type\": infer_type.value, } get_series_list() abstractmethod Convert data to a list of dictionaries representing series. Returns: Type Description List [ Series ] A list of dictionaries representing series, List [ Series ] where each dictionary has name , values and type keys. Source code in src/ipyvizzu/data/converters/converter.py @abstractmethod def get_series_list(self) -> List[Series]: \"\"\" Convert data to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" defaults This module provides default values for converters. NAN_DIMENSION: DimensionValue = '' module-attribute Default dimension value to replace nan values. NAN_MEASURE: MeasureValue = 0 module-attribute Default measure value to replace nan values. numpy This module provides modules for numpy converter. type_alias This module provides typing aliases for numpy converter. Index = int module-attribute Represents the index of a column. Name = str module-attribute Represents the name of a column. DType = type module-attribute Represents the dtype of a column. ColumnName = Union[Name, Dict[Index, Name]] module-attribute Represents a column name. It is a dictionary of Index:Name pairs or for single-dimensional arrays, it can be just a Name. ColumnDtype = Union[DType, Dict[Index, DType]] module-attribute Represents a column dtype. It is a dictionary of Index:DType pairs or for single-dimensional arrays, it can be just a DType. ColumnConfig = TypeVar('ColumnConfig', Name, DType) module-attribute Represents a column config. It can be Name or DType. converter This module provides the NumpyArrayConverter class, which allows converting a numpy array into a list of dictionaries representing series. NumpyArrayConverter Bases: ToSeriesListConverter Converts a numpy array into a list of dictionaries representing series. Each dictionary contains information about the series name , values and type . Parameters: Name Type Description Default np_array numpy . array The numpy array to convert. required column_name Optional [ ColumnName ] The name of a column. By default, uses column indices. Can be set with an Index:Name pair or, for single-dimensional arrays, with just the Name. None column_dtype Optional [ ColumnDtype ] The dtype of a column. By default, uses the np_array's dtype. Can be set with an Index:DType pair or, for single-dimensional arrays, with just the DType. None default_measure_value MeasureValue Default value to use for missing measure values. Defaults to 0. NAN_MEASURE default_dimension_value DimensionValue Default value to use for missing dimension values. Defaults to an empty string. NAN_DIMENSION Example Get series list from numpy array : converter = NumpyArrayConverter(np_array) series_list = converter.get_series_list() Source code in src/ipyvizzu/data/converters/numpy/converter.py class NumpyArrayConverter(ToSeriesListConverter): \"\"\" Converts a `numpy` `array` into a list of dictionaries representing series. Each dictionary contains information about the series `name`, `values` and `type`. Parameters: np_array: The `numpy` `array` to convert. column_name: The name of a column. By default, uses column indices. Can be set with an Index:Name pair or, for single-dimensional arrays, with just the Name. column_dtype: The dtype of a column. By default, uses the np_array's dtype. Can be set with an Index:DType pair or, for single-dimensional arrays, with just the DType. default_measure_value: Default value to use for missing measure values. Defaults to 0. default_dimension_value: Default value to use for missing dimension values. Defaults to an empty string. Example: Get series list from `numpy` `array`: converter = NumpyArrayConverter(np_array) series_list = converter.get_series_list() \"\"\" # pylint: disable=too-few-public-methods def __init__( self, np_array: \"numpy.array\", # type: ignore column_name: Optional[ColumnName] = None, column_dtype: Optional[ColumnDtype] = None, default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, ) -> None: # pylint: disable=too-many-arguments super().__init__(default_measure_value, default_dimension_value) self._np = self._get_numpy() self._np_array = np_array self._column_name: Dict[Index, Name] = self._get_columns_config(column_name) self._column_dtype: Dict[Index, DType] = self._get_columns_config(column_dtype) def get_series_list(self) -> List[Series]: \"\"\" Convert the `numpy` `array` to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" if self._np_array.ndim == 0: return [] if self._np_array.ndim == 1: return self._get_series_list_from_array1dim() if self._np_array.ndim == 2: return self._get_series_list_from_array2dim() raise ValueError(\"arrays larger than 2D are not supported\") def _get_series_list_from_array1dim(self) -> List[Series]: i = 0 name = self._column_name.get(i, i) values, infer_type = self._convert_to_series_values_and_type( (i, self._np_array) ) return [self._convert_to_series(name, values, infer_type)] def _get_series_list_from_array2dim(self) -> List[Series]: series_list = [] for i in range(self._np_array.shape[1]): name = self._column_name.get(i, i) values, infer_type = self._convert_to_series_values_and_type( (i, self._np_array[:, i]) ) series_list.append(self._convert_to_series(name, values, infer_type)) return series_list def _get_numpy(self) -> ModuleType: try: import numpy as np # pylint: disable=import-outside-toplevel return np except ImportError as error: raise ImportError( \"numpy is not available. Please install numpy to use this feature.\" ) from error def _get_columns_config( self, config: Optional[Union[ColumnConfig, Dict[Index, ColumnConfig]]], ) -> Dict[Index, ColumnConfig]: if config is None: return {} if not isinstance(config, dict): if not self._np_array.ndim == 1: raise ValueError(\"non dict value can only be used for a 1D array\") return {0: config} return config def _convert_to_series_values_and_type( self, obj: Tuple[int, \"numpy.array\"] # type: ignore ) -> Tuple[SeriesValues, InferType]: column = obj i = column[0] array = column[1] dtype = self._column_dtype.get(i, self._np_array.dtype) if self._np.issubdtype(dtype, self._np.number): return self._convert_to_measure_values(array), InferType.MEASURE return self._convert_to_dimension_values(array), InferType.DIMENSION def _convert_to_measure_values( self, obj: \"numpy.array\" # type: ignore ) -> List[MeasureValue]: array = obj array_float = array.astype(float) return self._np.nan_to_num( array_float, nan=self._default_measure_value ).tolist() def _convert_to_dimension_values( self, obj: \"numpy.array\" # type: ignore ) -> List[DimensionValue]: array = obj array_str = array.astype(str) replace_nan = \"nan\" mask = array_str == replace_nan array_str[mask] = self._default_dimension_value return array_str.tolist() get_series_list() Convert the numpy array to a list of dictionaries representing series. Returns: Type Description List [ Series ] A list of dictionaries representing series, List [ Series ] where each dictionary has name , values and type keys. Source code in src/ipyvizzu/data/converters/numpy/converter.py def get_series_list(self) -> List[Series]: \"\"\" Convert the `numpy` `array` to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" if self._np_array.ndim == 0: return [] if self._np_array.ndim == 1: return self._get_series_list_from_array1dim() if self._np_array.ndim == 2: return self._get_series_list_from_array2dim() raise ValueError(\"arrays larger than 2D are not supported\") spark This module provides modules for pyspark converter. protocol This module provides protocol classes for pandas data frame converter. SparkDataFrame Bases: Protocol Represents a pyspark DataFrame Protocol. Source code in src/ipyvizzu/data/converters/spark/protocol.py @runtime_checkable class SparkDataFrame(Protocol): \"\"\" Represents a pyspark DataFrame Protocol. \"\"\" # pylint: disable=too-few-public-methods columns: Sequence[str] count: Callable[..., int] sample: Callable[..., Any] limit: Callable[..., Any] select: Callable[..., Any] withColumn: Callable[..., Any] rdd: Any converter This module provides the SparkDataFrameConverter class, which allows converting a pyspark DataFrame into a list of dictionaries representing series. SparkDataFrameConverter Bases: DataFrameConverter Converts a pyspark DataFrame into a list of dictionaries representing series. Each dictionary contains information about the series name , values and type . Parameters: Name Type Description Default df pyspark . sql . DataFrame The pyspark DataFrame to convert. required default_measure_value MeasureValue Default value to use for missing measure values. Defaults to 0. NAN_MEASURE default_dimension_value DimensionValue Default value to use for missing dimension values. Defaults to an empty string. NAN_DIMENSION max_rows int The maximum number of rows to include in the converted series list. If the df contains more rows, a random sample of the given number of rows (approximately) will be taken. MAX_ROWS Example Get series list from DataFrame columns: converter = SparkDataFrameConverter(df) series_list = converter.get_series_list() Source code in src/ipyvizzu/data/converters/spark/converter.py class SparkDataFrameConverter(DataFrameConverter): \"\"\" Converts a `pyspark` `DataFrame` into a list of dictionaries representing series. Each dictionary contains information about the series `name`, `values` and `type`. Parameters: df: The `pyspark` `DataFrame` to convert. default_measure_value: Default value to use for missing measure values. Defaults to 0. default_dimension_value: Default value to use for missing dimension values. Defaults to an empty string. max_rows: The maximum number of rows to include in the converted series list. If the `df` contains more rows, a random sample of the given number of rows (approximately) will be taken. Example: Get series list from `DataFrame` columns: converter = SparkDataFrameConverter(df) series_list = converter.get_series_list() \"\"\" # pylint: disable=too-few-public-methods def __init__( self, df: \"pyspark.sql.DataFrame\", # type: ignore default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, max_rows: int = MAX_ROWS, ) -> None: super().__init__(default_measure_value, default_dimension_value, max_rows) self._pyspark, self._pyspark_func = self._get_pyspark() self._df = self._get_sampled_df(df) def _get_pyspark(self) -> Tuple[ModuleType, ModuleType]: try: import pyspark # pylint: disable=import-outside-toplevel from pyspark.sql import functions # pylint: disable=import-outside-toplevel return pyspark, functions except ImportError as error: raise ImportError( \"pyspark is not available. Please install pyspark to use this feature.\" ) from error def _get_sampled_df( self, df: \"pyspark.sql.DataFrame\" # type: ignore ) -> \"pyspark.sql.DataFrame\": # type: ignore row_number = df.count() if row_number > self._max_rows: fraction = self._max_rows / row_number sample_df = df.sample(withReplacement=False, fraction=fraction, seed=42) return sample_df.limit(self._max_rows) return df def _get_columns(self) -> List[str]: return self._df.columns def _convert_to_series_values_and_type( self, obj: str ) -> Tuple[SeriesValues, InferType]: column_name = obj column = self._df.select(column_name) integer_type = self._pyspark.sql.types.IntegerType double_type = self._pyspark.sql.types.DoubleType if isinstance(column.schema[column_name].dataType, (integer_type, double_type)): return self._convert_to_measure_values(column_name), InferType.MEASURE return self._convert_to_dimension_values(column_name), InferType.DIMENSION def _convert_to_measure_values(self, obj: str) -> List[MeasureValue]: column_name = obj func = self._pyspark_func df = self._df.withColumn( column_name, func.when( func.col(column_name).isNull(), self._default_measure_value ).otherwise(func.col(column_name)), ) df_rdd = ( df.withColumn(column_name, func.col(column_name).cast(\"float\")) .select(column_name) .rdd ) return df_rdd.flatMap(list).collect() def _convert_to_dimension_values(self, obj: str) -> List[DimensionValue]: column_name = obj func = self._pyspark_func df = self._df.withColumn( column_name, func.when( func.col(column_name).isNull(), self._default_dimension_value ).otherwise(func.col(column_name)), ) df_rdd = ( df.withColumn(column_name, func.col(column_name).cast(\"string\")) .select(column_name) .rdd ) return df_rdd.flatMap(list).collect() pandas This module provides modules for pandas converter. protocol This module provides protocol classes for pandas data frame converter. PandasDataFrame Bases: Protocol Represents a pandas DataFrame Protocol. Source code in src/ipyvizzu/data/converters/pandas/protocol.py @runtime_checkable class PandasDataFrame(Protocol): \"\"\" Represents a pandas DataFrame Protocol. \"\"\" # pylint: disable=too-few-public-methods index: Any columns: Sequence[str] sample: Callable[..., Any] __len__: Callable[[], int] __getitem__: Callable[[Any], Any] PandasSeries Bases: Protocol Represents a pandas Series Protocol. Source code in src/ipyvizzu/data/converters/pandas/protocol.py @runtime_checkable class PandasSeries(Protocol): \"\"\" Represents a pandas Series Protocol. \"\"\" # pylint: disable=too-few-public-methods index: Any values: Any dtype: Any __len__: Callable[[], int] __getitem__: Callable[[Any], Any] converter This module provides the PandasDataFrameConverter class, which allows converting a pandas DataFrame or Series into a list of dictionaries representing series. PandasDataFrameConverter Bases: DataFrameConverter Converts a pandas DataFrame or Series into a list of dictionaries representing series. Each dictionary contains information about the series name , values and type . Parameters: Name Type Description Default df Union [ pandas . DataFrame , pandas . Series ] The pandas DataFrame or Series to convert. required default_measure_value MeasureValue Default value to use for missing measure values. Defaults to 0. NAN_MEASURE default_dimension_value DimensionValue Default value to use for missing dimension values. Defaults to an empty string. NAN_DIMENSION max_rows int The maximum number of rows to include in the converted series list. If the df contains more rows, a random sample of the given number of rows will be taken. MAX_ROWS include_index Optional [ str ] Name for the index column to include as a series. If provided, the index column will be added. Defaults to None. None Example Get series list from DataFrame columns: converter = PandasDataFrameConverter(df) series_list = converter.get_series_list() Source code in src/ipyvizzu/data/converters/pandas/converter.py class PandasDataFrameConverter(DataFrameConverter): \"\"\" Converts a `pandas` `DataFrame` or `Series` into a list of dictionaries representing series. Each dictionary contains information about the series `name`, `values` and `type`. Parameters: df: The `pandas` `DataFrame` or `Series` to convert. default_measure_value: Default value to use for missing measure values. Defaults to 0. default_dimension_value: Default value to use for missing dimension values. Defaults to an empty string. max_rows: The maximum number of rows to include in the converted series list. If the `df` contains more rows, a random sample of the given number of rows will be taken. include_index: Name for the index column to include as a series. If provided, the index column will be added. Defaults to None. Example: Get series list from `DataFrame` columns: converter = PandasDataFrameConverter(df) series_list = converter.get_series_list() \"\"\" def __init__( self, df: Union[\"pandas.DataFrame\", \"pandas.Series\"], # type: ignore default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, max_rows: int = MAX_ROWS, include_index: Optional[str] = None, ) -> None: # pylint: disable=too-many-arguments super().__init__(default_measure_value, default_dimension_value, max_rows) self._pd = self._get_pandas() self._df = self._get_sampled_df( self._convert_to_df(df) if isinstance(df, PandasSeries) else df ) self._include_index = include_index def get_series_list(self) -> List[Series]: \"\"\" Convert the `DataFrame` columns to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" series_list = super().get_series_list() index_series = self.get_series_from_index() return index_series + series_list def get_series_from_index(self) -> List[Series]: \"\"\" Convert the `DataFrame` index to a dictionary representing a series, if `include_index` is provided. Returns: A dictionary representing the index series with `name`, `values` and `type` keys. Returns `None` if `include_index` is not provided. \"\"\" if not self._include_index or self._df.index.empty: return [] df = self._pd.DataFrame({self._include_index: self._df.index}) index_series_converter = PandasDataFrameConverter( df, self._default_measure_value, self._default_dimension_value ) return index_series_converter.get_series_list() def _get_pandas(self) -> ModuleType: try: import pandas as pd # pylint: disable=import-outside-toplevel return pd except ImportError as error: raise ImportError( \"pandas is not available. Please install pandas to use this feature.\" ) from error def _convert_to_df(self, series: \"pandas.Series\") -> \"pandas.Dataframe\": # type: ignore if series.empty: return self._pd.DataFrame() return self._pd.DataFrame(series) def _get_sampled_df(self, df: \"pandas.DataFrame\") -> \"pandas.DataFrame\": # type: ignore row_number = len(df) if row_number > self._max_rows: frac = self._max_rows / row_number sampled_df = df.sample( replace=False, frac=frac, random_state=42, ) return sampled_df return df def _get_columns(self) -> List[str]: return self._df.columns def _convert_to_series_values_and_type( self, obj: str # type: ignore ) -> Tuple[SeriesValues, InferType]: column_name = obj column = self._df[column_name] if self._pd.api.types.is_numeric_dtype(column.dtype): return self._convert_to_measure_values(column), InferType.MEASURE return self._convert_to_dimension_values(column), InferType.DIMENSION def _convert_to_measure_values( self, obj: \"pandas.DataFrame\" # type: ignore ) -> List[MeasureValue]: column = obj return column.fillna(self._default_measure_value).astype(float).values.tolist() def _convert_to_dimension_values( self, obj: \"pandas.DataFrame\" # type: ignore ) -> List[DimensionValue]: column = obj return column.fillna(self._default_dimension_value).astype(str).values.tolist() get_series_list() Convert the DataFrame columns to a list of dictionaries representing series. Returns: Type Description List [ Series ] A list of dictionaries representing series, List [ Series ] where each dictionary has name , values and type keys. Source code in src/ipyvizzu/data/converters/pandas/converter.py def get_series_list(self) -> List[Series]: \"\"\" Convert the `DataFrame` columns to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" series_list = super().get_series_list() index_series = self.get_series_from_index() return index_series + series_list get_series_from_index() Convert the DataFrame index to a dictionary representing a series, if include_index is provided. Returns: Type Description List [ Series ] A dictionary representing the index series with name , values and type keys. List [ Series ] Returns None if include_index is not provided. Source code in src/ipyvizzu/data/converters/pandas/converter.py def get_series_from_index(self) -> List[Series]: \"\"\" Convert the `DataFrame` index to a dictionary representing a series, if `include_index` is provided. Returns: A dictionary representing the index series with `name`, `values` and `type` keys. Returns `None` if `include_index` is not provided. \"\"\" if not self._include_index or self._df.index.empty: return [] df = self._pd.DataFrame({self._include_index: self._df.index}) index_series_converter = PandasDataFrameConverter( df, self._default_measure_value, self._default_dimension_value ) return index_series_converter.get_series_list() df This module provides modules for data frame converter. type_alias This module provides typing aliases for data frame converter. DataFrame = TypeVar('DataFrame', Any, Any) module-attribute Represents a data frame. converter This module provides the DataFrameConverter abstract class. DataFrameConverter Bases: ToSeriesListConverter Converts data frame into a list of dictionaries representing series. Each dictionary contains information about the series name , values and type . Source code in src/ipyvizzu/data/converters/df/converter.py class DataFrameConverter(ToSeriesListConverter): \"\"\" Converts data frame into a list of dictionaries representing series. Each dictionary contains information about the series `name`, `values` and `type`. \"\"\" # pylint: disable=too-few-public-methods def __init__( self, default_measure_value: MeasureValue, default_dimension_value: DimensionValue, max_rows: int, ) -> None: super().__init__(default_measure_value, default_dimension_value) self._max_rows = max_rows def get_series_list(self) -> List[Series]: \"\"\" Convert the `DataFrame` columns to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" series_list = [] for name in self._get_columns(): series_list.append(self._get_series_from_column(name)) return series_list def _get_series_from_column(self, column_name: str) -> Series: values, infer_type = self._convert_to_series_values_and_type(column_name) return self._convert_to_series(column_name, values, infer_type) @abstractmethod def _get_sampled_df(self, df: DataFrame) -> DataFrame: \"\"\" Returns a sampled data frame for the maximum number of rows. \"\"\" @abstractmethod def _get_columns(self) -> List[str]: \"\"\" Return column names of the data frame. \"\"\" get_series_list() Convert the DataFrame columns to a list of dictionaries representing series. Returns: Type Description List [ Series ] A list of dictionaries representing series, List [ Series ] where each dictionary has name , values and type keys. Source code in src/ipyvizzu/data/converters/df/converter.py def get_series_list(self) -> List[Series]: \"\"\" Convert the `DataFrame` columns to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" series_list = [] for name in self._get_columns(): series_list.append(self._get_series_from_column(name)) return series_list defaults This module provides default values for data frame converter. MAX_ROWS: int = 10000 module-attribute Default maximum number of rows.","title":"Data"},{"location":"reference/ipyvizzu/data/#ipyvizzu.data","text":"This module serves as a collection of data-related utilities, including converter classes, data infer types and data typing aliases.","title":"data"},{"location":"reference/ipyvizzu/data/#ipyvizzu.data.type_alias","text":"This module provides typing aliases for data used in ipyvizzu.","title":"type_alias"},{"location":"reference/ipyvizzu/data/#ipyvizzu.data.type_alias.DimensionValue","text":"Represents a value that can be either a string or a number, but both will be treated as strings.","title":"DimensionValue"},{"location":"reference/ipyvizzu/data/#ipyvizzu.data.type_alias.MeasureValue","text":"Represents a numerical value, which can be either an int or a float.","title":"MeasureValue"},{"location":"reference/ipyvizzu/data/#ipyvizzu.data.type_alias.NestedMeasureValues","text":"Represents a nested structure of MeasureValues. It can be a single MeasureValue or a list containing other NestedMeasureValues.","title":"NestedMeasureValues"},{"location":"reference/ipyvizzu/data/#ipyvizzu.data.type_alias.RecordValue","text":"Represents a value that can be either a DimensionValue or a MeasureValue.","title":"RecordValue"},{"location":"reference/ipyvizzu/data/#ipyvizzu.data.type_alias.Record","text":"Represents a Record, which is a collection of RecordValues. A Record can be represented as either a list of RecordValues or a dictionary where keys are series names and values are the corresponding RecordValues.","title":"Record"},{"location":"reference/ipyvizzu/data/#ipyvizzu.data.type_alias.SeriesValues","text":"Represents a collection of values for a Series. It can be a list of DimensionValues or a list of MeasureValues.","title":"SeriesValues"},{"location":"reference/ipyvizzu/data/#ipyvizzu.data.type_alias.Series","text":"Represents a Series in a dictionary format. It consists of a name (string), an optional type (also a string), and a values key which contains a SeriesValues.","title":"Series"},{"location":"reference/ipyvizzu/data/#ipyvizzu.data.infer_type","text":"This module provides the InferType class, which stores data infer types.","title":"infer_type"},{"location":"reference/ipyvizzu/data/#ipyvizzu.data.infer_type.InferType","text":"Bases: Enum An enum class for storing data infer types. Attributes: Name Type Description DIMENSION str An enum key-value for storing dimension infer type. Dimensions are categorical series that can contain strings and numbers, but both will be treated as strings. MEASURE str An enum key-value for storing measure infer type. Measures can only be numerical. Source code in src/ipyvizzu/data/infer_type.py class InferType(Enum): \"\"\" An enum class for storing data infer types. Attributes: DIMENSION: An enum key-value for storing dimension infer type. Dimensions are categorical series that can contain strings and numbers, but both will be treated as strings. MEASURE: An enum key-value for storing measure infer type. Measures can only be numerical. \"\"\" DIMENSION: str = \"dimension\" MEASURE: str = \"measure\"","title":"InferType"},{"location":"reference/ipyvizzu/data/#ipyvizzu.data.converters","text":"This module contains converter classes that offer a user-friendly interface for data conversion, enabling users to effortlessly transform various data formats into a standardized representation of series compatible with ipyvizzu .","title":"converters"},{"location":"reference/ipyvizzu/data/#ipyvizzu.data.converters.converter","text":"This module provides the ToSeriesListConverter abstract class.","title":"converter"},{"location":"reference/ipyvizzu/data/#ipyvizzu.data.converters.converter.ToSeriesListConverter","text":"Bases: ABC Converts data into a list of dictionaries representing series. Each dictionary contains information about the series name , values and type . Source code in src/ipyvizzu/data/converters/converter.py class ToSeriesListConverter(ABC): \"\"\" Converts data into a list of dictionaries representing series. Each dictionary contains information about the series `name`, `values` and `type`. \"\"\" # pylint: disable=too-few-public-methods def __init__( self, default_measure_value: MeasureValue, default_dimension_value: DimensionValue, ) -> None: self._default_measure_value = default_measure_value self._default_dimension_value = default_dimension_value @abstractmethod def get_series_list(self) -> List[Series]: \"\"\" Convert data to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" @abstractmethod def _convert_to_series_values_and_type( self, obj: Any ) -> Tuple[SeriesValues, InferType]: \"\"\" Convert object to SeriesValues and InferType. \"\"\" @abstractmethod def _convert_to_measure_values(self, obj: Any) -> List[MeasureValue]: \"\"\" Convert object to a list of MeasureValue. \"\"\" @abstractmethod def _convert_to_dimension_values(self, obj: Any) -> List[DimensionValue]: \"\"\" Convert object to a list of DimensionValue. \"\"\" def _convert_to_series( self, name: Union[str, int], values: SeriesValues, infer_type: InferType ) -> Series: return { \"name\": str(name), \"values\": values, \"type\": infer_type.value, }","title":"ToSeriesListConverter"},{"location":"reference/ipyvizzu/data/#ipyvizzu.data.converters.converter.ToSeriesListConverter.get_series_list","text":"Convert data to a list of dictionaries representing series. Returns: Type Description List [ Series ] A list of dictionaries representing series, List [ Series ] where each dictionary has name , values and type keys. Source code in src/ipyvizzu/data/converters/converter.py @abstractmethod def get_series_list(self) -> List[Series]: \"\"\" Convert data to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\"","title":"get_series_list()"},{"location":"reference/ipyvizzu/data/#ipyvizzu.data.converters.defaults","text":"This module provides default values for converters.","title":"defaults"},{"location":"reference/ipyvizzu/data/#ipyvizzu.data.converters.defaults.NAN_DIMENSION","text":"Default dimension value to replace nan values.","title":"NAN_DIMENSION"},{"location":"reference/ipyvizzu/data/#ipyvizzu.data.converters.defaults.NAN_MEASURE","text":"Default measure value to replace nan values.","title":"NAN_MEASURE"},{"location":"reference/ipyvizzu/data/#ipyvizzu.data.converters.numpy","text":"This module provides modules for numpy converter.","title":"numpy"},{"location":"reference/ipyvizzu/data/#ipyvizzu.data.converters.numpy.type_alias","text":"This module provides typing aliases for numpy converter.","title":"type_alias"},{"location":"reference/ipyvizzu/data/#ipyvizzu.data.converters.numpy.type_alias.Index","text":"Represents the index of a column.","title":"Index"},{"location":"reference/ipyvizzu/data/#ipyvizzu.data.converters.numpy.type_alias.Name","text":"Represents the name of a column.","title":"Name"},{"location":"reference/ipyvizzu/data/#ipyvizzu.data.converters.numpy.type_alias.DType","text":"Represents the dtype of a column.","title":"DType"},{"location":"reference/ipyvizzu/data/#ipyvizzu.data.converters.numpy.type_alias.ColumnName","text":"Represents a column name. It is a dictionary of Index:Name pairs or for single-dimensional arrays, it can be just a Name.","title":"ColumnName"},{"location":"reference/ipyvizzu/data/#ipyvizzu.data.converters.numpy.type_alias.ColumnDtype","text":"Represents a column dtype. It is a dictionary of Index:DType pairs or for single-dimensional arrays, it can be just a DType.","title":"ColumnDtype"},{"location":"reference/ipyvizzu/data/#ipyvizzu.data.converters.numpy.type_alias.ColumnConfig","text":"Represents a column config. It can be Name or DType.","title":"ColumnConfig"},{"location":"reference/ipyvizzu/data/#ipyvizzu.data.converters.numpy.converter","text":"This module provides the NumpyArrayConverter class, which allows converting a numpy array into a list of dictionaries representing series.","title":"converter"},{"location":"reference/ipyvizzu/data/#ipyvizzu.data.converters.numpy.converter.NumpyArrayConverter","text":"Bases: ToSeriesListConverter Converts a numpy array into a list of dictionaries representing series. Each dictionary contains information about the series name , values and type . Parameters: Name Type Description Default np_array numpy . array The numpy array to convert. required column_name Optional [ ColumnName ] The name of a column. By default, uses column indices. Can be set with an Index:Name pair or, for single-dimensional arrays, with just the Name. None column_dtype Optional [ ColumnDtype ] The dtype of a column. By default, uses the np_array's dtype. Can be set with an Index:DType pair or, for single-dimensional arrays, with just the DType. None default_measure_value MeasureValue Default value to use for missing measure values. Defaults to 0. NAN_MEASURE default_dimension_value DimensionValue Default value to use for missing dimension values. Defaults to an empty string. NAN_DIMENSION Example Get series list from numpy array : converter = NumpyArrayConverter(np_array) series_list = converter.get_series_list() Source code in src/ipyvizzu/data/converters/numpy/converter.py class NumpyArrayConverter(ToSeriesListConverter): \"\"\" Converts a `numpy` `array` into a list of dictionaries representing series. Each dictionary contains information about the series `name`, `values` and `type`. Parameters: np_array: The `numpy` `array` to convert. column_name: The name of a column. By default, uses column indices. Can be set with an Index:Name pair or, for single-dimensional arrays, with just the Name. column_dtype: The dtype of a column. By default, uses the np_array's dtype. Can be set with an Index:DType pair or, for single-dimensional arrays, with just the DType. default_measure_value: Default value to use for missing measure values. Defaults to 0. default_dimension_value: Default value to use for missing dimension values. Defaults to an empty string. Example: Get series list from `numpy` `array`: converter = NumpyArrayConverter(np_array) series_list = converter.get_series_list() \"\"\" # pylint: disable=too-few-public-methods def __init__( self, np_array: \"numpy.array\", # type: ignore column_name: Optional[ColumnName] = None, column_dtype: Optional[ColumnDtype] = None, default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, ) -> None: # pylint: disable=too-many-arguments super().__init__(default_measure_value, default_dimension_value) self._np = self._get_numpy() self._np_array = np_array self._column_name: Dict[Index, Name] = self._get_columns_config(column_name) self._column_dtype: Dict[Index, DType] = self._get_columns_config(column_dtype) def get_series_list(self) -> List[Series]: \"\"\" Convert the `numpy` `array` to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" if self._np_array.ndim == 0: return [] if self._np_array.ndim == 1: return self._get_series_list_from_array1dim() if self._np_array.ndim == 2: return self._get_series_list_from_array2dim() raise ValueError(\"arrays larger than 2D are not supported\") def _get_series_list_from_array1dim(self) -> List[Series]: i = 0 name = self._column_name.get(i, i) values, infer_type = self._convert_to_series_values_and_type( (i, self._np_array) ) return [self._convert_to_series(name, values, infer_type)] def _get_series_list_from_array2dim(self) -> List[Series]: series_list = [] for i in range(self._np_array.shape[1]): name = self._column_name.get(i, i) values, infer_type = self._convert_to_series_values_and_type( (i, self._np_array[:, i]) ) series_list.append(self._convert_to_series(name, values, infer_type)) return series_list def _get_numpy(self) -> ModuleType: try: import numpy as np # pylint: disable=import-outside-toplevel return np except ImportError as error: raise ImportError( \"numpy is not available. Please install numpy to use this feature.\" ) from error def _get_columns_config( self, config: Optional[Union[ColumnConfig, Dict[Index, ColumnConfig]]], ) -> Dict[Index, ColumnConfig]: if config is None: return {} if not isinstance(config, dict): if not self._np_array.ndim == 1: raise ValueError(\"non dict value can only be used for a 1D array\") return {0: config} return config def _convert_to_series_values_and_type( self, obj: Tuple[int, \"numpy.array\"] # type: ignore ) -> Tuple[SeriesValues, InferType]: column = obj i = column[0] array = column[1] dtype = self._column_dtype.get(i, self._np_array.dtype) if self._np.issubdtype(dtype, self._np.number): return self._convert_to_measure_values(array), InferType.MEASURE return self._convert_to_dimension_values(array), InferType.DIMENSION def _convert_to_measure_values( self, obj: \"numpy.array\" # type: ignore ) -> List[MeasureValue]: array = obj array_float = array.astype(float) return self._np.nan_to_num( array_float, nan=self._default_measure_value ).tolist() def _convert_to_dimension_values( self, obj: \"numpy.array\" # type: ignore ) -> List[DimensionValue]: array = obj array_str = array.astype(str) replace_nan = \"nan\" mask = array_str == replace_nan array_str[mask] = self._default_dimension_value return array_str.tolist() get_series_list() Convert the numpy array to a list of dictionaries representing series. Returns: Type Description List [ Series ] A list of dictionaries representing series, List [ Series ] where each dictionary has name , values and type keys. Source code in src/ipyvizzu/data/converters/numpy/converter.py def get_series_list(self) -> List[Series]: \"\"\" Convert the `numpy` `array` to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" if self._np_array.ndim == 0: return [] if self._np_array.ndim == 1: return self._get_series_list_from_array1dim() if self._np_array.ndim == 2: return self._get_series_list_from_array2dim() raise ValueError(\"arrays larger than 2D are not supported\")","title":"NumpyArrayConverter"},{"location":"reference/ipyvizzu/data/#ipyvizzu.data.converters.spark","text":"This module provides modules for pyspark converter.","title":"spark"},{"location":"reference/ipyvizzu/data/#ipyvizzu.data.converters.spark.protocol","text":"This module provides protocol classes for pandas data frame converter.","title":"protocol"},{"location":"reference/ipyvizzu/data/#ipyvizzu.data.converters.spark.protocol.SparkDataFrame","text":"Bases: Protocol Represents a pyspark DataFrame Protocol. Source code in src/ipyvizzu/data/converters/spark/protocol.py @runtime_checkable class SparkDataFrame(Protocol): \"\"\" Represents a pyspark DataFrame Protocol. \"\"\" # pylint: disable=too-few-public-methods columns: Sequence[str] count: Callable[..., int] sample: Callable[..., Any] limit: Callable[..., Any] select: Callable[..., Any] withColumn: Callable[..., Any] rdd: Any","title":"SparkDataFrame"},{"location":"reference/ipyvizzu/data/#ipyvizzu.data.converters.spark.converter","text":"This module provides the SparkDataFrameConverter class, which allows converting a pyspark DataFrame into a list of dictionaries representing series.","title":"converter"},{"location":"reference/ipyvizzu/data/#ipyvizzu.data.converters.spark.converter.SparkDataFrameConverter","text":"Bases: DataFrameConverter Converts a pyspark DataFrame into a list of dictionaries representing series. Each dictionary contains information about the series name , values and type . Parameters: Name Type Description Default df pyspark . sql . DataFrame The pyspark DataFrame to convert. required default_measure_value MeasureValue Default value to use for missing measure values. Defaults to 0. NAN_MEASURE default_dimension_value DimensionValue Default value to use for missing dimension values. Defaults to an empty string. NAN_DIMENSION max_rows int The maximum number of rows to include in the converted series list. If the df contains more rows, a random sample of the given number of rows (approximately) will be taken. MAX_ROWS Example Get series list from DataFrame columns: converter = SparkDataFrameConverter(df) series_list = converter.get_series_list() Source code in src/ipyvizzu/data/converters/spark/converter.py class SparkDataFrameConverter(DataFrameConverter): \"\"\" Converts a `pyspark` `DataFrame` into a list of dictionaries representing series. Each dictionary contains information about the series `name`, `values` and `type`. Parameters: df: The `pyspark` `DataFrame` to convert. default_measure_value: Default value to use for missing measure values. Defaults to 0. default_dimension_value: Default value to use for missing dimension values. Defaults to an empty string. max_rows: The maximum number of rows to include in the converted series list. If the `df` contains more rows, a random sample of the given number of rows (approximately) will be taken. Example: Get series list from `DataFrame` columns: converter = SparkDataFrameConverter(df) series_list = converter.get_series_list() \"\"\" # pylint: disable=too-few-public-methods def __init__( self, df: \"pyspark.sql.DataFrame\", # type: ignore default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, max_rows: int = MAX_ROWS, ) -> None: super().__init__(default_measure_value, default_dimension_value, max_rows) self._pyspark, self._pyspark_func = self._get_pyspark() self._df = self._get_sampled_df(df) def _get_pyspark(self) -> Tuple[ModuleType, ModuleType]: try: import pyspark # pylint: disable=import-outside-toplevel from pyspark.sql import functions # pylint: disable=import-outside-toplevel return pyspark, functions except ImportError as error: raise ImportError( \"pyspark is not available. Please install pyspark to use this feature.\" ) from error def _get_sampled_df( self, df: \"pyspark.sql.DataFrame\" # type: ignore ) -> \"pyspark.sql.DataFrame\": # type: ignore row_number = df.count() if row_number > self._max_rows: fraction = self._max_rows / row_number sample_df = df.sample(withReplacement=False, fraction=fraction, seed=42) return sample_df.limit(self._max_rows) return df def _get_columns(self) -> List[str]: return self._df.columns def _convert_to_series_values_and_type( self, obj: str ) -> Tuple[SeriesValues, InferType]: column_name = obj column = self._df.select(column_name) integer_type = self._pyspark.sql.types.IntegerType double_type = self._pyspark.sql.types.DoubleType if isinstance(column.schema[column_name].dataType, (integer_type, double_type)): return self._convert_to_measure_values(column_name), InferType.MEASURE return self._convert_to_dimension_values(column_name), InferType.DIMENSION def _convert_to_measure_values(self, obj: str) -> List[MeasureValue]: column_name = obj func = self._pyspark_func df = self._df.withColumn( column_name, func.when( func.col(column_name).isNull(), self._default_measure_value ).otherwise(func.col(column_name)), ) df_rdd = ( df.withColumn(column_name, func.col(column_name).cast(\"float\")) .select(column_name) .rdd ) return df_rdd.flatMap(list).collect() def _convert_to_dimension_values(self, obj: str) -> List[DimensionValue]: column_name = obj func = self._pyspark_func df = self._df.withColumn( column_name, func.when( func.col(column_name).isNull(), self._default_dimension_value ).otherwise(func.col(column_name)), ) df_rdd = ( df.withColumn(column_name, func.col(column_name).cast(\"string\")) .select(column_name) .rdd ) return df_rdd.flatMap(list).collect()","title":"SparkDataFrameConverter"},{"location":"reference/ipyvizzu/data/#ipyvizzu.data.converters.pandas","text":"This module provides modules for pandas converter.","title":"pandas"},{"location":"reference/ipyvizzu/data/#ipyvizzu.data.converters.pandas.protocol","text":"This module provides protocol classes for pandas data frame converter.","title":"protocol"},{"location":"reference/ipyvizzu/data/#ipyvizzu.data.converters.pandas.protocol.PandasDataFrame","text":"Bases: Protocol Represents a pandas DataFrame Protocol. Source code in src/ipyvizzu/data/converters/pandas/protocol.py @runtime_checkable class PandasDataFrame(Protocol): \"\"\" Represents a pandas DataFrame Protocol. \"\"\" # pylint: disable=too-few-public-methods index: Any columns: Sequence[str] sample: Callable[..., Any] __len__: Callable[[], int] __getitem__: Callable[[Any], Any]","title":"PandasDataFrame"},{"location":"reference/ipyvizzu/data/#ipyvizzu.data.converters.pandas.protocol.PandasSeries","text":"Bases: Protocol Represents a pandas Series Protocol. Source code in src/ipyvizzu/data/converters/pandas/protocol.py @runtime_checkable class PandasSeries(Protocol): \"\"\" Represents a pandas Series Protocol. \"\"\" # pylint: disable=too-few-public-methods index: Any values: Any dtype: Any __len__: Callable[[], int] __getitem__: Callable[[Any], Any]","title":"PandasSeries"},{"location":"reference/ipyvizzu/data/#ipyvizzu.data.converters.pandas.converter","text":"This module provides the PandasDataFrameConverter class, which allows converting a pandas DataFrame or Series into a list of dictionaries representing series.","title":"converter"},{"location":"reference/ipyvizzu/data/#ipyvizzu.data.converters.pandas.converter.PandasDataFrameConverter","text":"Bases: DataFrameConverter Converts a pandas DataFrame or Series into a list of dictionaries representing series. Each dictionary contains information about the series name , values and type . Parameters: Name Type Description Default df Union [ pandas . DataFrame , pandas . Series ] The pandas DataFrame or Series to convert. required default_measure_value MeasureValue Default value to use for missing measure values. Defaults to 0. NAN_MEASURE default_dimension_value DimensionValue Default value to use for missing dimension values. Defaults to an empty string. NAN_DIMENSION max_rows int The maximum number of rows to include in the converted series list. If the df contains more rows, a random sample of the given number of rows will be taken. MAX_ROWS include_index Optional [ str ] Name for the index column to include as a series. If provided, the index column will be added. Defaults to None. None Example Get series list from DataFrame columns: converter = PandasDataFrameConverter(df) series_list = converter.get_series_list() Source code in src/ipyvizzu/data/converters/pandas/converter.py class PandasDataFrameConverter(DataFrameConverter): \"\"\" Converts a `pandas` `DataFrame` or `Series` into a list of dictionaries representing series. Each dictionary contains information about the series `name`, `values` and `type`. Parameters: df: The `pandas` `DataFrame` or `Series` to convert. default_measure_value: Default value to use for missing measure values. Defaults to 0. default_dimension_value: Default value to use for missing dimension values. Defaults to an empty string. max_rows: The maximum number of rows to include in the converted series list. If the `df` contains more rows, a random sample of the given number of rows will be taken. include_index: Name for the index column to include as a series. If provided, the index column will be added. Defaults to None. Example: Get series list from `DataFrame` columns: converter = PandasDataFrameConverter(df) series_list = converter.get_series_list() \"\"\" def __init__( self, df: Union[\"pandas.DataFrame\", \"pandas.Series\"], # type: ignore default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, max_rows: int = MAX_ROWS, include_index: Optional[str] = None, ) -> None: # pylint: disable=too-many-arguments super().__init__(default_measure_value, default_dimension_value, max_rows) self._pd = self._get_pandas() self._df = self._get_sampled_df( self._convert_to_df(df) if isinstance(df, PandasSeries) else df ) self._include_index = include_index def get_series_list(self) -> List[Series]: \"\"\" Convert the `DataFrame` columns to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" series_list = super().get_series_list() index_series = self.get_series_from_index() return index_series + series_list def get_series_from_index(self) -> List[Series]: \"\"\" Convert the `DataFrame` index to a dictionary representing a series, if `include_index` is provided. Returns: A dictionary representing the index series with `name`, `values` and `type` keys. Returns `None` if `include_index` is not provided. \"\"\" if not self._include_index or self._df.index.empty: return [] df = self._pd.DataFrame({self._include_index: self._df.index}) index_series_converter = PandasDataFrameConverter( df, self._default_measure_value, self._default_dimension_value ) return index_series_converter.get_series_list() def _get_pandas(self) -> ModuleType: try: import pandas as pd # pylint: disable=import-outside-toplevel return pd except ImportError as error: raise ImportError( \"pandas is not available. Please install pandas to use this feature.\" ) from error def _convert_to_df(self, series: \"pandas.Series\") -> \"pandas.Dataframe\": # type: ignore if series.empty: return self._pd.DataFrame() return self._pd.DataFrame(series) def _get_sampled_df(self, df: \"pandas.DataFrame\") -> \"pandas.DataFrame\": # type: ignore row_number = len(df) if row_number > self._max_rows: frac = self._max_rows / row_number sampled_df = df.sample( replace=False, frac=frac, random_state=42, ) return sampled_df return df def _get_columns(self) -> List[str]: return self._df.columns def _convert_to_series_values_and_type( self, obj: str # type: ignore ) -> Tuple[SeriesValues, InferType]: column_name = obj column = self._df[column_name] if self._pd.api.types.is_numeric_dtype(column.dtype): return self._convert_to_measure_values(column), InferType.MEASURE return self._convert_to_dimension_values(column), InferType.DIMENSION def _convert_to_measure_values( self, obj: \"pandas.DataFrame\" # type: ignore ) -> List[MeasureValue]: column = obj return column.fillna(self._default_measure_value).astype(float).values.tolist() def _convert_to_dimension_values( self, obj: \"pandas.DataFrame\" # type: ignore ) -> List[DimensionValue]: column = obj return column.fillna(self._default_dimension_value).astype(str).values.tolist() get_series_list() Convert the DataFrame columns to a list of dictionaries representing series. Returns: Type Description List [ Series ] A list of dictionaries representing series, List [ Series ] where each dictionary has name , values and type keys. Source code in src/ipyvizzu/data/converters/pandas/converter.py def get_series_list(self) -> List[Series]: \"\"\" Convert the `DataFrame` columns to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" series_list = super().get_series_list() index_series = self.get_series_from_index() return index_series + series_list get_series_from_index() Convert the DataFrame index to a dictionary representing a series, if include_index is provided. Returns: Type Description List [ Series ] A dictionary representing the index series with name , values and type keys. List [ Series ] Returns None if include_index is not provided. Source code in src/ipyvizzu/data/converters/pandas/converter.py def get_series_from_index(self) -> List[Series]: \"\"\" Convert the `DataFrame` index to a dictionary representing a series, if `include_index` is provided. Returns: A dictionary representing the index series with `name`, `values` and `type` keys. Returns `None` if `include_index` is not provided. \"\"\" if not self._include_index or self._df.index.empty: return [] df = self._pd.DataFrame({self._include_index: self._df.index}) index_series_converter = PandasDataFrameConverter( df, self._default_measure_value, self._default_dimension_value ) return index_series_converter.get_series_list()","title":"PandasDataFrameConverter"},{"location":"reference/ipyvizzu/data/#ipyvizzu.data.converters.df","text":"This module provides modules for data frame converter.","title":"df"},{"location":"reference/ipyvizzu/data/#ipyvizzu.data.converters.df.type_alias","text":"This module provides typing aliases for data frame converter.","title":"type_alias"},{"location":"reference/ipyvizzu/data/#ipyvizzu.data.converters.df.type_alias.DataFrame","text":"Represents a data frame.","title":"DataFrame"},{"location":"reference/ipyvizzu/data/#ipyvizzu.data.converters.df.converter","text":"This module provides the DataFrameConverter abstract class.","title":"converter"},{"location":"reference/ipyvizzu/data/#ipyvizzu.data.converters.df.converter.DataFrameConverter","text":"Bases: ToSeriesListConverter Converts data frame into a list of dictionaries representing series. Each dictionary contains information about the series name , values and type . Source code in src/ipyvizzu/data/converters/df/converter.py class DataFrameConverter(ToSeriesListConverter): \"\"\" Converts data frame into a list of dictionaries representing series. Each dictionary contains information about the series `name`, `values` and `type`. \"\"\" # pylint: disable=too-few-public-methods def __init__( self, default_measure_value: MeasureValue, default_dimension_value: DimensionValue, max_rows: int, ) -> None: super().__init__(default_measure_value, default_dimension_value) self._max_rows = max_rows def get_series_list(self) -> List[Series]: \"\"\" Convert the `DataFrame` columns to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" series_list = [] for name in self._get_columns(): series_list.append(self._get_series_from_column(name)) return series_list def _get_series_from_column(self, column_name: str) -> Series: values, infer_type = self._convert_to_series_values_and_type(column_name) return self._convert_to_series(column_name, values, infer_type) @abstractmethod def _get_sampled_df(self, df: DataFrame) -> DataFrame: \"\"\" Returns a sampled data frame for the maximum number of rows. \"\"\" @abstractmethod def _get_columns(self) -> List[str]: \"\"\" Return column names of the data frame. \"\"\" get_series_list() Convert the DataFrame columns to a list of dictionaries representing series. Returns: Type Description List [ Series ] A list of dictionaries representing series, List [ Series ] where each dictionary has name , values and type keys. Source code in src/ipyvizzu/data/converters/df/converter.py def get_series_list(self) -> List[Series]: \"\"\" Convert the `DataFrame` columns to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" series_list = [] for name in self._get_columns(): series_list.append(self._get_series_from_column(name)) return series_list","title":"DataFrameConverter"},{"location":"reference/ipyvizzu/data/#ipyvizzu.data.converters.df.defaults","text":"This module provides default values for data frame converter.","title":"defaults"},{"location":"reference/ipyvizzu/data/#ipyvizzu.data.converters.df.defaults.MAX_ROWS","text":"Default maximum number of rows.","title":"MAX_ROWS"},{"location":"reference/ipyvizzu/data/infer_type/","text":"ipyvizzu.data.infer_type This module provides the InferType class, which stores data infer types. ipyvizzu.data.infer_type.InferType Bases: Enum An enum class for storing data infer types. Attributes: Name Type Description DIMENSION str An enum key-value for storing dimension infer type. Dimensions are categorical series that can contain strings and numbers, but both will be treated as strings. MEASURE str An enum key-value for storing measure infer type. Measures can only be numerical. Source code in src/ipyvizzu/data/infer_type.py class InferType(Enum): \"\"\" An enum class for storing data infer types. Attributes: DIMENSION: An enum key-value for storing dimension infer type. Dimensions are categorical series that can contain strings and numbers, but both will be treated as strings. MEASURE: An enum key-value for storing measure infer type. Measures can only be numerical. \"\"\" DIMENSION: str = \"dimension\" MEASURE: str = \"measure\"","title":"Infer type"},{"location":"reference/ipyvizzu/data/infer_type/#ipyvizzu.data.infer_type","text":"This module provides the InferType class, which stores data infer types.","title":"infer_type"},{"location":"reference/ipyvizzu/data/infer_type/#ipyvizzu.data.infer_type.InferType","text":"Bases: Enum An enum class for storing data infer types. Attributes: Name Type Description DIMENSION str An enum key-value for storing dimension infer type. Dimensions are categorical series that can contain strings and numbers, but both will be treated as strings. MEASURE str An enum key-value for storing measure infer type. Measures can only be numerical. Source code in src/ipyvizzu/data/infer_type.py class InferType(Enum): \"\"\" An enum class for storing data infer types. Attributes: DIMENSION: An enum key-value for storing dimension infer type. Dimensions are categorical series that can contain strings and numbers, but both will be treated as strings. MEASURE: An enum key-value for storing measure infer type. Measures can only be numerical. \"\"\" DIMENSION: str = \"dimension\" MEASURE: str = \"measure\"","title":"InferType"},{"location":"reference/ipyvizzu/data/type_alias/","text":"ipyvizzu.data.type_alias This module provides typing aliases for data used in ipyvizzu. ipyvizzu.data.type_alias.DimensionValue = str module-attribute Represents a value that can be either a string or a number, but both will be treated as strings. ipyvizzu.data.type_alias.MeasureValue = Union[int, float] module-attribute Represents a numerical value, which can be either an int or a float. ipyvizzu.data.type_alias.NestedMeasureValues = Union[MeasureValue, List['NestedMeasureValues']] module-attribute Represents a nested structure of MeasureValues. It can be a single MeasureValue or a list containing other NestedMeasureValues. ipyvizzu.data.type_alias.RecordValue = Union[DimensionValue, MeasureValue] module-attribute Represents a value that can be either a DimensionValue or a MeasureValue. ipyvizzu.data.type_alias.Record = Union[List[RecordValue], Dict[str, RecordValue]] module-attribute Represents a Record, which is a collection of RecordValues. A Record can be represented as either a list of RecordValues or a dictionary where keys are series names and values are the corresponding RecordValues. ipyvizzu.data.type_alias.SeriesValues = Union[Sequence[DimensionValue], Sequence[MeasureValue]] module-attribute Represents a collection of values for a Series. It can be a list of DimensionValues or a list of MeasureValues. ipyvizzu.data.type_alias.Series = Dict[str, Union[str, SeriesValues]] module-attribute Represents a Series in a dictionary format. It consists of a name (string), an optional type (also a string), and a values key which contains a SeriesValues.","title":"Type alias"},{"location":"reference/ipyvizzu/data/type_alias/#ipyvizzu.data.type_alias","text":"This module provides typing aliases for data used in ipyvizzu.","title":"type_alias"},{"location":"reference/ipyvizzu/data/type_alias/#ipyvizzu.data.type_alias.DimensionValue","text":"Represents a value that can be either a string or a number, but both will be treated as strings.","title":"DimensionValue"},{"location":"reference/ipyvizzu/data/type_alias/#ipyvizzu.data.type_alias.MeasureValue","text":"Represents a numerical value, which can be either an int or a float.","title":"MeasureValue"},{"location":"reference/ipyvizzu/data/type_alias/#ipyvizzu.data.type_alias.NestedMeasureValues","text":"Represents a nested structure of MeasureValues. It can be a single MeasureValue or a list containing other NestedMeasureValues.","title":"NestedMeasureValues"},{"location":"reference/ipyvizzu/data/type_alias/#ipyvizzu.data.type_alias.RecordValue","text":"Represents a value that can be either a DimensionValue or a MeasureValue.","title":"RecordValue"},{"location":"reference/ipyvizzu/data/type_alias/#ipyvizzu.data.type_alias.Record","text":"Represents a Record, which is a collection of RecordValues. A Record can be represented as either a list of RecordValues or a dictionary where keys are series names and values are the corresponding RecordValues.","title":"Record"},{"location":"reference/ipyvizzu/data/type_alias/#ipyvizzu.data.type_alias.SeriesValues","text":"Represents a collection of values for a Series. It can be a list of DimensionValues or a list of MeasureValues.","title":"SeriesValues"},{"location":"reference/ipyvizzu/data/type_alias/#ipyvizzu.data.type_alias.Series","text":"Represents a Series in a dictionary format. It consists of a name (string), an optional type (also a string), and a values key which contains a SeriesValues.","title":"Series"},{"location":"reference/ipyvizzu/data/converters/","text":"ipyvizzu.data.converters This module contains converter classes that offer a user-friendly interface for data conversion, enabling users to effortlessly transform various data formats into a standardized representation of series compatible with ipyvizzu . ipyvizzu.data.converters.converter This module provides the ToSeriesListConverter abstract class. ToSeriesListConverter Bases: ABC Converts data into a list of dictionaries representing series. Each dictionary contains information about the series name , values and type . Source code in src/ipyvizzu/data/converters/converter.py class ToSeriesListConverter(ABC): \"\"\" Converts data into a list of dictionaries representing series. Each dictionary contains information about the series `name`, `values` and `type`. \"\"\" # pylint: disable=too-few-public-methods def __init__( self, default_measure_value: MeasureValue, default_dimension_value: DimensionValue, ) -> None: self._default_measure_value = default_measure_value self._default_dimension_value = default_dimension_value @abstractmethod def get_series_list(self) -> List[Series]: \"\"\" Convert data to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" @abstractmethod def _convert_to_series_values_and_type( self, obj: Any ) -> Tuple[SeriesValues, InferType]: \"\"\" Convert object to SeriesValues and InferType. \"\"\" @abstractmethod def _convert_to_measure_values(self, obj: Any) -> List[MeasureValue]: \"\"\" Convert object to a list of MeasureValue. \"\"\" @abstractmethod def _convert_to_dimension_values(self, obj: Any) -> List[DimensionValue]: \"\"\" Convert object to a list of DimensionValue. \"\"\" def _convert_to_series( self, name: Union[str, int], values: SeriesValues, infer_type: InferType ) -> Series: return { \"name\": str(name), \"values\": values, \"type\": infer_type.value, } get_series_list() abstractmethod Convert data to a list of dictionaries representing series. Returns: Type Description List [ Series ] A list of dictionaries representing series, List [ Series ] where each dictionary has name , values and type keys. Source code in src/ipyvizzu/data/converters/converter.py @abstractmethod def get_series_list(self) -> List[Series]: \"\"\" Convert data to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" ipyvizzu.data.converters.defaults This module provides default values for converters. NAN_DIMENSION: DimensionValue = '' module-attribute Default dimension value to replace nan values. NAN_MEASURE: MeasureValue = 0 module-attribute Default measure value to replace nan values. ipyvizzu.data.converters.numpy This module provides modules for numpy converter. type_alias This module provides typing aliases for numpy converter. Index = int module-attribute Represents the index of a column. Name = str module-attribute Represents the name of a column. DType = type module-attribute Represents the dtype of a column. ColumnName = Union[Name, Dict[Index, Name]] module-attribute Represents a column name. It is a dictionary of Index:Name pairs or for single-dimensional arrays, it can be just a Name. ColumnDtype = Union[DType, Dict[Index, DType]] module-attribute Represents a column dtype. It is a dictionary of Index:DType pairs or for single-dimensional arrays, it can be just a DType. ColumnConfig = TypeVar('ColumnConfig', Name, DType) module-attribute Represents a column config. It can be Name or DType. converter This module provides the NumpyArrayConverter class, which allows converting a numpy array into a list of dictionaries representing series. NumpyArrayConverter Bases: ToSeriesListConverter Converts a numpy array into a list of dictionaries representing series. Each dictionary contains information about the series name , values and type . Parameters: Name Type Description Default np_array numpy . array The numpy array to convert. required column_name Optional [ ColumnName ] The name of a column. By default, uses column indices. Can be set with an Index:Name pair or, for single-dimensional arrays, with just the Name. None column_dtype Optional [ ColumnDtype ] The dtype of a column. By default, uses the np_array's dtype. Can be set with an Index:DType pair or, for single-dimensional arrays, with just the DType. None default_measure_value MeasureValue Default value to use for missing measure values. Defaults to 0. NAN_MEASURE default_dimension_value DimensionValue Default value to use for missing dimension values. Defaults to an empty string. NAN_DIMENSION Example Get series list from numpy array : converter = NumpyArrayConverter(np_array) series_list = converter.get_series_list() Source code in src/ipyvizzu/data/converters/numpy/converter.py class NumpyArrayConverter(ToSeriesListConverter): \"\"\" Converts a `numpy` `array` into a list of dictionaries representing series. Each dictionary contains information about the series `name`, `values` and `type`. Parameters: np_array: The `numpy` `array` to convert. column_name: The name of a column. By default, uses column indices. Can be set with an Index:Name pair or, for single-dimensional arrays, with just the Name. column_dtype: The dtype of a column. By default, uses the np_array's dtype. Can be set with an Index:DType pair or, for single-dimensional arrays, with just the DType. default_measure_value: Default value to use for missing measure values. Defaults to 0. default_dimension_value: Default value to use for missing dimension values. Defaults to an empty string. Example: Get series list from `numpy` `array`: converter = NumpyArrayConverter(np_array) series_list = converter.get_series_list() \"\"\" # pylint: disable=too-few-public-methods def __init__( self, np_array: \"numpy.array\", # type: ignore column_name: Optional[ColumnName] = None, column_dtype: Optional[ColumnDtype] = None, default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, ) -> None: # pylint: disable=too-many-arguments super().__init__(default_measure_value, default_dimension_value) self._np = self._get_numpy() self._np_array = np_array self._column_name: Dict[Index, Name] = self._get_columns_config(column_name) self._column_dtype: Dict[Index, DType] = self._get_columns_config(column_dtype) def get_series_list(self) -> List[Series]: \"\"\" Convert the `numpy` `array` to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" if self._np_array.ndim == 0: return [] if self._np_array.ndim == 1: return self._get_series_list_from_array1dim() if self._np_array.ndim == 2: return self._get_series_list_from_array2dim() raise ValueError(\"arrays larger than 2D are not supported\") def _get_series_list_from_array1dim(self) -> List[Series]: i = 0 name = self._column_name.get(i, i) values, infer_type = self._convert_to_series_values_and_type( (i, self._np_array) ) return [self._convert_to_series(name, values, infer_type)] def _get_series_list_from_array2dim(self) -> List[Series]: series_list = [] for i in range(self._np_array.shape[1]): name = self._column_name.get(i, i) values, infer_type = self._convert_to_series_values_and_type( (i, self._np_array[:, i]) ) series_list.append(self._convert_to_series(name, values, infer_type)) return series_list def _get_numpy(self) -> ModuleType: try: import numpy as np # pylint: disable=import-outside-toplevel return np except ImportError as error: raise ImportError( \"numpy is not available. Please install numpy to use this feature.\" ) from error def _get_columns_config( self, config: Optional[Union[ColumnConfig, Dict[Index, ColumnConfig]]], ) -> Dict[Index, ColumnConfig]: if config is None: return {} if not isinstance(config, dict): if not self._np_array.ndim == 1: raise ValueError(\"non dict value can only be used for a 1D array\") return {0: config} return config def _convert_to_series_values_and_type( self, obj: Tuple[int, \"numpy.array\"] # type: ignore ) -> Tuple[SeriesValues, InferType]: column = obj i = column[0] array = column[1] dtype = self._column_dtype.get(i, self._np_array.dtype) if self._np.issubdtype(dtype, self._np.number): return self._convert_to_measure_values(array), InferType.MEASURE return self._convert_to_dimension_values(array), InferType.DIMENSION def _convert_to_measure_values( self, obj: \"numpy.array\" # type: ignore ) -> List[MeasureValue]: array = obj array_float = array.astype(float) return self._np.nan_to_num( array_float, nan=self._default_measure_value ).tolist() def _convert_to_dimension_values( self, obj: \"numpy.array\" # type: ignore ) -> List[DimensionValue]: array = obj array_str = array.astype(str) replace_nan = \"nan\" mask = array_str == replace_nan array_str[mask] = self._default_dimension_value return array_str.tolist() get_series_list() Convert the numpy array to a list of dictionaries representing series. Returns: Type Description List [ Series ] A list of dictionaries representing series, List [ Series ] where each dictionary has name , values and type keys. Source code in src/ipyvizzu/data/converters/numpy/converter.py def get_series_list(self) -> List[Series]: \"\"\" Convert the `numpy` `array` to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" if self._np_array.ndim == 0: return [] if self._np_array.ndim == 1: return self._get_series_list_from_array1dim() if self._np_array.ndim == 2: return self._get_series_list_from_array2dim() raise ValueError(\"arrays larger than 2D are not supported\") ipyvizzu.data.converters.spark This module provides modules for pyspark converter. protocol This module provides protocol classes for pandas data frame converter. SparkDataFrame Bases: Protocol Represents a pyspark DataFrame Protocol. Source code in src/ipyvizzu/data/converters/spark/protocol.py @runtime_checkable class SparkDataFrame(Protocol): \"\"\" Represents a pyspark DataFrame Protocol. \"\"\" # pylint: disable=too-few-public-methods columns: Sequence[str] count: Callable[..., int] sample: Callable[..., Any] limit: Callable[..., Any] select: Callable[..., Any] withColumn: Callable[..., Any] rdd: Any converter This module provides the SparkDataFrameConverter class, which allows converting a pyspark DataFrame into a list of dictionaries representing series. SparkDataFrameConverter Bases: DataFrameConverter Converts a pyspark DataFrame into a list of dictionaries representing series. Each dictionary contains information about the series name , values and type . Parameters: Name Type Description Default df pyspark . sql . DataFrame The pyspark DataFrame to convert. required default_measure_value MeasureValue Default value to use for missing measure values. Defaults to 0. NAN_MEASURE default_dimension_value DimensionValue Default value to use for missing dimension values. Defaults to an empty string. NAN_DIMENSION max_rows int The maximum number of rows to include in the converted series list. If the df contains more rows, a random sample of the given number of rows (approximately) will be taken. MAX_ROWS Example Get series list from DataFrame columns: converter = SparkDataFrameConverter(df) series_list = converter.get_series_list() Source code in src/ipyvizzu/data/converters/spark/converter.py class SparkDataFrameConverter(DataFrameConverter): \"\"\" Converts a `pyspark` `DataFrame` into a list of dictionaries representing series. Each dictionary contains information about the series `name`, `values` and `type`. Parameters: df: The `pyspark` `DataFrame` to convert. default_measure_value: Default value to use for missing measure values. Defaults to 0. default_dimension_value: Default value to use for missing dimension values. Defaults to an empty string. max_rows: The maximum number of rows to include in the converted series list. If the `df` contains more rows, a random sample of the given number of rows (approximately) will be taken. Example: Get series list from `DataFrame` columns: converter = SparkDataFrameConverter(df) series_list = converter.get_series_list() \"\"\" # pylint: disable=too-few-public-methods def __init__( self, df: \"pyspark.sql.DataFrame\", # type: ignore default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, max_rows: int = MAX_ROWS, ) -> None: super().__init__(default_measure_value, default_dimension_value, max_rows) self._pyspark, self._pyspark_func = self._get_pyspark() self._df = self._get_sampled_df(df) def _get_pyspark(self) -> Tuple[ModuleType, ModuleType]: try: import pyspark # pylint: disable=import-outside-toplevel from pyspark.sql import functions # pylint: disable=import-outside-toplevel return pyspark, functions except ImportError as error: raise ImportError( \"pyspark is not available. Please install pyspark to use this feature.\" ) from error def _get_sampled_df( self, df: \"pyspark.sql.DataFrame\" # type: ignore ) -> \"pyspark.sql.DataFrame\": # type: ignore row_number = df.count() if row_number > self._max_rows: fraction = self._max_rows / row_number sample_df = df.sample(withReplacement=False, fraction=fraction, seed=42) return sample_df.limit(self._max_rows) return df def _get_columns(self) -> List[str]: return self._df.columns def _convert_to_series_values_and_type( self, obj: str ) -> Tuple[SeriesValues, InferType]: column_name = obj column = self._df.select(column_name) integer_type = self._pyspark.sql.types.IntegerType double_type = self._pyspark.sql.types.DoubleType if isinstance(column.schema[column_name].dataType, (integer_type, double_type)): return self._convert_to_measure_values(column_name), InferType.MEASURE return self._convert_to_dimension_values(column_name), InferType.DIMENSION def _convert_to_measure_values(self, obj: str) -> List[MeasureValue]: column_name = obj func = self._pyspark_func df = self._df.withColumn( column_name, func.when( func.col(column_name).isNull(), self._default_measure_value ).otherwise(func.col(column_name)), ) df_rdd = ( df.withColumn(column_name, func.col(column_name).cast(\"float\")) .select(column_name) .rdd ) return df_rdd.flatMap(list).collect() def _convert_to_dimension_values(self, obj: str) -> List[DimensionValue]: column_name = obj func = self._pyspark_func df = self._df.withColumn( column_name, func.when( func.col(column_name).isNull(), self._default_dimension_value ).otherwise(func.col(column_name)), ) df_rdd = ( df.withColumn(column_name, func.col(column_name).cast(\"string\")) .select(column_name) .rdd ) return df_rdd.flatMap(list).collect() ipyvizzu.data.converters.pandas This module provides modules for pandas converter. protocol This module provides protocol classes for pandas data frame converter. PandasDataFrame Bases: Protocol Represents a pandas DataFrame Protocol. Source code in src/ipyvizzu/data/converters/pandas/protocol.py @runtime_checkable class PandasDataFrame(Protocol): \"\"\" Represents a pandas DataFrame Protocol. \"\"\" # pylint: disable=too-few-public-methods index: Any columns: Sequence[str] sample: Callable[..., Any] __len__: Callable[[], int] __getitem__: Callable[[Any], Any] PandasSeries Bases: Protocol Represents a pandas Series Protocol. Source code in src/ipyvizzu/data/converters/pandas/protocol.py @runtime_checkable class PandasSeries(Protocol): \"\"\" Represents a pandas Series Protocol. \"\"\" # pylint: disable=too-few-public-methods index: Any values: Any dtype: Any __len__: Callable[[], int] __getitem__: Callable[[Any], Any] converter This module provides the PandasDataFrameConverter class, which allows converting a pandas DataFrame or Series into a list of dictionaries representing series. PandasDataFrameConverter Bases: DataFrameConverter Converts a pandas DataFrame or Series into a list of dictionaries representing series. Each dictionary contains information about the series name , values and type . Parameters: Name Type Description Default df Union [ pandas . DataFrame , pandas . Series ] The pandas DataFrame or Series to convert. required default_measure_value MeasureValue Default value to use for missing measure values. Defaults to 0. NAN_MEASURE default_dimension_value DimensionValue Default value to use for missing dimension values. Defaults to an empty string. NAN_DIMENSION max_rows int The maximum number of rows to include in the converted series list. If the df contains more rows, a random sample of the given number of rows will be taken. MAX_ROWS include_index Optional [ str ] Name for the index column to include as a series. If provided, the index column will be added. Defaults to None. None Example Get series list from DataFrame columns: converter = PandasDataFrameConverter(df) series_list = converter.get_series_list() Source code in src/ipyvizzu/data/converters/pandas/converter.py class PandasDataFrameConverter(DataFrameConverter): \"\"\" Converts a `pandas` `DataFrame` or `Series` into a list of dictionaries representing series. Each dictionary contains information about the series `name`, `values` and `type`. Parameters: df: The `pandas` `DataFrame` or `Series` to convert. default_measure_value: Default value to use for missing measure values. Defaults to 0. default_dimension_value: Default value to use for missing dimension values. Defaults to an empty string. max_rows: The maximum number of rows to include in the converted series list. If the `df` contains more rows, a random sample of the given number of rows will be taken. include_index: Name for the index column to include as a series. If provided, the index column will be added. Defaults to None. Example: Get series list from `DataFrame` columns: converter = PandasDataFrameConverter(df) series_list = converter.get_series_list() \"\"\" def __init__( self, df: Union[\"pandas.DataFrame\", \"pandas.Series\"], # type: ignore default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, max_rows: int = MAX_ROWS, include_index: Optional[str] = None, ) -> None: # pylint: disable=too-many-arguments super().__init__(default_measure_value, default_dimension_value, max_rows) self._pd = self._get_pandas() self._df = self._get_sampled_df( self._convert_to_df(df) if isinstance(df, PandasSeries) else df ) self._include_index = include_index def get_series_list(self) -> List[Series]: \"\"\" Convert the `DataFrame` columns to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" series_list = super().get_series_list() index_series = self.get_series_from_index() return index_series + series_list def get_series_from_index(self) -> List[Series]: \"\"\" Convert the `DataFrame` index to a dictionary representing a series, if `include_index` is provided. Returns: A dictionary representing the index series with `name`, `values` and `type` keys. Returns `None` if `include_index` is not provided. \"\"\" if not self._include_index or self._df.index.empty: return [] df = self._pd.DataFrame({self._include_index: self._df.index}) index_series_converter = PandasDataFrameConverter( df, self._default_measure_value, self._default_dimension_value ) return index_series_converter.get_series_list() def _get_pandas(self) -> ModuleType: try: import pandas as pd # pylint: disable=import-outside-toplevel return pd except ImportError as error: raise ImportError( \"pandas is not available. Please install pandas to use this feature.\" ) from error def _convert_to_df(self, series: \"pandas.Series\") -> \"pandas.Dataframe\": # type: ignore if series.empty: return self._pd.DataFrame() return self._pd.DataFrame(series) def _get_sampled_df(self, df: \"pandas.DataFrame\") -> \"pandas.DataFrame\": # type: ignore row_number = len(df) if row_number > self._max_rows: frac = self._max_rows / row_number sampled_df = df.sample( replace=False, frac=frac, random_state=42, ) return sampled_df return df def _get_columns(self) -> List[str]: return self._df.columns def _convert_to_series_values_and_type( self, obj: str # type: ignore ) -> Tuple[SeriesValues, InferType]: column_name = obj column = self._df[column_name] if self._pd.api.types.is_numeric_dtype(column.dtype): return self._convert_to_measure_values(column), InferType.MEASURE return self._convert_to_dimension_values(column), InferType.DIMENSION def _convert_to_measure_values( self, obj: \"pandas.DataFrame\" # type: ignore ) -> List[MeasureValue]: column = obj return column.fillna(self._default_measure_value).astype(float).values.tolist() def _convert_to_dimension_values( self, obj: \"pandas.DataFrame\" # type: ignore ) -> List[DimensionValue]: column = obj return column.fillna(self._default_dimension_value).astype(str).values.tolist() get_series_list() Convert the DataFrame columns to a list of dictionaries representing series. Returns: Type Description List [ Series ] A list of dictionaries representing series, List [ Series ] where each dictionary has name , values and type keys. Source code in src/ipyvizzu/data/converters/pandas/converter.py def get_series_list(self) -> List[Series]: \"\"\" Convert the `DataFrame` columns to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" series_list = super().get_series_list() index_series = self.get_series_from_index() return index_series + series_list get_series_from_index() Convert the DataFrame index to a dictionary representing a series, if include_index is provided. Returns: Type Description List [ Series ] A dictionary representing the index series with name , values and type keys. List [ Series ] Returns None if include_index is not provided. Source code in src/ipyvizzu/data/converters/pandas/converter.py def get_series_from_index(self) -> List[Series]: \"\"\" Convert the `DataFrame` index to a dictionary representing a series, if `include_index` is provided. Returns: A dictionary representing the index series with `name`, `values` and `type` keys. Returns `None` if `include_index` is not provided. \"\"\" if not self._include_index or self._df.index.empty: return [] df = self._pd.DataFrame({self._include_index: self._df.index}) index_series_converter = PandasDataFrameConverter( df, self._default_measure_value, self._default_dimension_value ) return index_series_converter.get_series_list() ipyvizzu.data.converters.df This module provides modules for data frame converter. type_alias This module provides typing aliases for data frame converter. DataFrame = TypeVar('DataFrame', Any, Any) module-attribute Represents a data frame. converter This module provides the DataFrameConverter abstract class. DataFrameConverter Bases: ToSeriesListConverter Converts data frame into a list of dictionaries representing series. Each dictionary contains information about the series name , values and type . Source code in src/ipyvizzu/data/converters/df/converter.py class DataFrameConverter(ToSeriesListConverter): \"\"\" Converts data frame into a list of dictionaries representing series. Each dictionary contains information about the series `name`, `values` and `type`. \"\"\" # pylint: disable=too-few-public-methods def __init__( self, default_measure_value: MeasureValue, default_dimension_value: DimensionValue, max_rows: int, ) -> None: super().__init__(default_measure_value, default_dimension_value) self._max_rows = max_rows def get_series_list(self) -> List[Series]: \"\"\" Convert the `DataFrame` columns to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" series_list = [] for name in self._get_columns(): series_list.append(self._get_series_from_column(name)) return series_list def _get_series_from_column(self, column_name: str) -> Series: values, infer_type = self._convert_to_series_values_and_type(column_name) return self._convert_to_series(column_name, values, infer_type) @abstractmethod def _get_sampled_df(self, df: DataFrame) -> DataFrame: \"\"\" Returns a sampled data frame for the maximum number of rows. \"\"\" @abstractmethod def _get_columns(self) -> List[str]: \"\"\" Return column names of the data frame. \"\"\" get_series_list() Convert the DataFrame columns to a list of dictionaries representing series. Returns: Type Description List [ Series ] A list of dictionaries representing series, List [ Series ] where each dictionary has name , values and type keys. Source code in src/ipyvizzu/data/converters/df/converter.py def get_series_list(self) -> List[Series]: \"\"\" Convert the `DataFrame` columns to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" series_list = [] for name in self._get_columns(): series_list.append(self._get_series_from_column(name)) return series_list defaults This module provides default values for data frame converter. MAX_ROWS: int = 10000 module-attribute Default maximum number of rows.","title":"Converters"},{"location":"reference/ipyvizzu/data/converters/#ipyvizzu.data.converters","text":"This module contains converter classes that offer a user-friendly interface for data conversion, enabling users to effortlessly transform various data formats into a standardized representation of series compatible with ipyvizzu .","title":"converters"},{"location":"reference/ipyvizzu/data/converters/#ipyvizzu.data.converters.converter","text":"This module provides the ToSeriesListConverter abstract class.","title":"converter"},{"location":"reference/ipyvizzu/data/converters/#ipyvizzu.data.converters.converter.ToSeriesListConverter","text":"Bases: ABC Converts data into a list of dictionaries representing series. Each dictionary contains information about the series name , values and type . Source code in src/ipyvizzu/data/converters/converter.py class ToSeriesListConverter(ABC): \"\"\" Converts data into a list of dictionaries representing series. Each dictionary contains information about the series `name`, `values` and `type`. \"\"\" # pylint: disable=too-few-public-methods def __init__( self, default_measure_value: MeasureValue, default_dimension_value: DimensionValue, ) -> None: self._default_measure_value = default_measure_value self._default_dimension_value = default_dimension_value @abstractmethod def get_series_list(self) -> List[Series]: \"\"\" Convert data to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" @abstractmethod def _convert_to_series_values_and_type( self, obj: Any ) -> Tuple[SeriesValues, InferType]: \"\"\" Convert object to SeriesValues and InferType. \"\"\" @abstractmethod def _convert_to_measure_values(self, obj: Any) -> List[MeasureValue]: \"\"\" Convert object to a list of MeasureValue. \"\"\" @abstractmethod def _convert_to_dimension_values(self, obj: Any) -> List[DimensionValue]: \"\"\" Convert object to a list of DimensionValue. \"\"\" def _convert_to_series( self, name: Union[str, int], values: SeriesValues, infer_type: InferType ) -> Series: return { \"name\": str(name), \"values\": values, \"type\": infer_type.value, }","title":"ToSeriesListConverter"},{"location":"reference/ipyvizzu/data/converters/#ipyvizzu.data.converters.converter.ToSeriesListConverter.get_series_list","text":"Convert data to a list of dictionaries representing series. Returns: Type Description List [ Series ] A list of dictionaries representing series, List [ Series ] where each dictionary has name , values and type keys. Source code in src/ipyvizzu/data/converters/converter.py @abstractmethod def get_series_list(self) -> List[Series]: \"\"\" Convert data to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\"","title":"get_series_list()"},{"location":"reference/ipyvizzu/data/converters/#ipyvizzu.data.converters.defaults","text":"This module provides default values for converters.","title":"defaults"},{"location":"reference/ipyvizzu/data/converters/#ipyvizzu.data.converters.defaults.NAN_DIMENSION","text":"Default dimension value to replace nan values.","title":"NAN_DIMENSION"},{"location":"reference/ipyvizzu/data/converters/#ipyvizzu.data.converters.defaults.NAN_MEASURE","text":"Default measure value to replace nan values.","title":"NAN_MEASURE"},{"location":"reference/ipyvizzu/data/converters/#ipyvizzu.data.converters.numpy","text":"This module provides modules for numpy converter.","title":"numpy"},{"location":"reference/ipyvizzu/data/converters/#ipyvizzu.data.converters.numpy.type_alias","text":"This module provides typing aliases for numpy converter.","title":"type_alias"},{"location":"reference/ipyvizzu/data/converters/#ipyvizzu.data.converters.numpy.type_alias.Index","text":"Represents the index of a column.","title":"Index"},{"location":"reference/ipyvizzu/data/converters/#ipyvizzu.data.converters.numpy.type_alias.Name","text":"Represents the name of a column.","title":"Name"},{"location":"reference/ipyvizzu/data/converters/#ipyvizzu.data.converters.numpy.type_alias.DType","text":"Represents the dtype of a column.","title":"DType"},{"location":"reference/ipyvizzu/data/converters/#ipyvizzu.data.converters.numpy.type_alias.ColumnName","text":"Represents a column name. It is a dictionary of Index:Name pairs or for single-dimensional arrays, it can be just a Name.","title":"ColumnName"},{"location":"reference/ipyvizzu/data/converters/#ipyvizzu.data.converters.numpy.type_alias.ColumnDtype","text":"Represents a column dtype. It is a dictionary of Index:DType pairs or for single-dimensional arrays, it can be just a DType.","title":"ColumnDtype"},{"location":"reference/ipyvizzu/data/converters/#ipyvizzu.data.converters.numpy.type_alias.ColumnConfig","text":"Represents a column config. It can be Name or DType.","title":"ColumnConfig"},{"location":"reference/ipyvizzu/data/converters/#ipyvizzu.data.converters.numpy.converter","text":"This module provides the NumpyArrayConverter class, which allows converting a numpy array into a list of dictionaries representing series.","title":"converter"},{"location":"reference/ipyvizzu/data/converters/#ipyvizzu.data.converters.numpy.converter.NumpyArrayConverter","text":"Bases: ToSeriesListConverter Converts a numpy array into a list of dictionaries representing series. Each dictionary contains information about the series name , values and type . Parameters: Name Type Description Default np_array numpy . array The numpy array to convert. required column_name Optional [ ColumnName ] The name of a column. By default, uses column indices. Can be set with an Index:Name pair or, for single-dimensional arrays, with just the Name. None column_dtype Optional [ ColumnDtype ] The dtype of a column. By default, uses the np_array's dtype. Can be set with an Index:DType pair or, for single-dimensional arrays, with just the DType. None default_measure_value MeasureValue Default value to use for missing measure values. Defaults to 0. NAN_MEASURE default_dimension_value DimensionValue Default value to use for missing dimension values. Defaults to an empty string. NAN_DIMENSION Example Get series list from numpy array : converter = NumpyArrayConverter(np_array) series_list = converter.get_series_list() Source code in src/ipyvizzu/data/converters/numpy/converter.py class NumpyArrayConverter(ToSeriesListConverter): \"\"\" Converts a `numpy` `array` into a list of dictionaries representing series. Each dictionary contains information about the series `name`, `values` and `type`. Parameters: np_array: The `numpy` `array` to convert. column_name: The name of a column. By default, uses column indices. Can be set with an Index:Name pair or, for single-dimensional arrays, with just the Name. column_dtype: The dtype of a column. By default, uses the np_array's dtype. Can be set with an Index:DType pair or, for single-dimensional arrays, with just the DType. default_measure_value: Default value to use for missing measure values. Defaults to 0. default_dimension_value: Default value to use for missing dimension values. Defaults to an empty string. Example: Get series list from `numpy` `array`: converter = NumpyArrayConverter(np_array) series_list = converter.get_series_list() \"\"\" # pylint: disable=too-few-public-methods def __init__( self, np_array: \"numpy.array\", # type: ignore column_name: Optional[ColumnName] = None, column_dtype: Optional[ColumnDtype] = None, default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, ) -> None: # pylint: disable=too-many-arguments super().__init__(default_measure_value, default_dimension_value) self._np = self._get_numpy() self._np_array = np_array self._column_name: Dict[Index, Name] = self._get_columns_config(column_name) self._column_dtype: Dict[Index, DType] = self._get_columns_config(column_dtype) def get_series_list(self) -> List[Series]: \"\"\" Convert the `numpy` `array` to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" if self._np_array.ndim == 0: return [] if self._np_array.ndim == 1: return self._get_series_list_from_array1dim() if self._np_array.ndim == 2: return self._get_series_list_from_array2dim() raise ValueError(\"arrays larger than 2D are not supported\") def _get_series_list_from_array1dim(self) -> List[Series]: i = 0 name = self._column_name.get(i, i) values, infer_type = self._convert_to_series_values_and_type( (i, self._np_array) ) return [self._convert_to_series(name, values, infer_type)] def _get_series_list_from_array2dim(self) -> List[Series]: series_list = [] for i in range(self._np_array.shape[1]): name = self._column_name.get(i, i) values, infer_type = self._convert_to_series_values_and_type( (i, self._np_array[:, i]) ) series_list.append(self._convert_to_series(name, values, infer_type)) return series_list def _get_numpy(self) -> ModuleType: try: import numpy as np # pylint: disable=import-outside-toplevel return np except ImportError as error: raise ImportError( \"numpy is not available. Please install numpy to use this feature.\" ) from error def _get_columns_config( self, config: Optional[Union[ColumnConfig, Dict[Index, ColumnConfig]]], ) -> Dict[Index, ColumnConfig]: if config is None: return {} if not isinstance(config, dict): if not self._np_array.ndim == 1: raise ValueError(\"non dict value can only be used for a 1D array\") return {0: config} return config def _convert_to_series_values_and_type( self, obj: Tuple[int, \"numpy.array\"] # type: ignore ) -> Tuple[SeriesValues, InferType]: column = obj i = column[0] array = column[1] dtype = self._column_dtype.get(i, self._np_array.dtype) if self._np.issubdtype(dtype, self._np.number): return self._convert_to_measure_values(array), InferType.MEASURE return self._convert_to_dimension_values(array), InferType.DIMENSION def _convert_to_measure_values( self, obj: \"numpy.array\" # type: ignore ) -> List[MeasureValue]: array = obj array_float = array.astype(float) return self._np.nan_to_num( array_float, nan=self._default_measure_value ).tolist() def _convert_to_dimension_values( self, obj: \"numpy.array\" # type: ignore ) -> List[DimensionValue]: array = obj array_str = array.astype(str) replace_nan = \"nan\" mask = array_str == replace_nan array_str[mask] = self._default_dimension_value return array_str.tolist()","title":"NumpyArrayConverter"},{"location":"reference/ipyvizzu/data/converters/#ipyvizzu.data.converters.numpy.converter.NumpyArrayConverter.get_series_list","text":"Convert the numpy array to a list of dictionaries representing series. Returns: Type Description List [ Series ] A list of dictionaries representing series, List [ Series ] where each dictionary has name , values and type keys. Source code in src/ipyvizzu/data/converters/numpy/converter.py def get_series_list(self) -> List[Series]: \"\"\" Convert the `numpy` `array` to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" if self._np_array.ndim == 0: return [] if self._np_array.ndim == 1: return self._get_series_list_from_array1dim() if self._np_array.ndim == 2: return self._get_series_list_from_array2dim() raise ValueError(\"arrays larger than 2D are not supported\")","title":"get_series_list()"},{"location":"reference/ipyvizzu/data/converters/#ipyvizzu.data.converters.spark","text":"This module provides modules for pyspark converter.","title":"spark"},{"location":"reference/ipyvizzu/data/converters/#ipyvizzu.data.converters.spark.protocol","text":"This module provides protocol classes for pandas data frame converter.","title":"protocol"},{"location":"reference/ipyvizzu/data/converters/#ipyvizzu.data.converters.spark.protocol.SparkDataFrame","text":"Bases: Protocol Represents a pyspark DataFrame Protocol. Source code in src/ipyvizzu/data/converters/spark/protocol.py @runtime_checkable class SparkDataFrame(Protocol): \"\"\" Represents a pyspark DataFrame Protocol. \"\"\" # pylint: disable=too-few-public-methods columns: Sequence[str] count: Callable[..., int] sample: Callable[..., Any] limit: Callable[..., Any] select: Callable[..., Any] withColumn: Callable[..., Any] rdd: Any","title":"SparkDataFrame"},{"location":"reference/ipyvizzu/data/converters/#ipyvizzu.data.converters.spark.converter","text":"This module provides the SparkDataFrameConverter class, which allows converting a pyspark DataFrame into a list of dictionaries representing series.","title":"converter"},{"location":"reference/ipyvizzu/data/converters/#ipyvizzu.data.converters.spark.converter.SparkDataFrameConverter","text":"Bases: DataFrameConverter Converts a pyspark DataFrame into a list of dictionaries representing series. Each dictionary contains information about the series name , values and type . Parameters: Name Type Description Default df pyspark . sql . DataFrame The pyspark DataFrame to convert. required default_measure_value MeasureValue Default value to use for missing measure values. Defaults to 0. NAN_MEASURE default_dimension_value DimensionValue Default value to use for missing dimension values. Defaults to an empty string. NAN_DIMENSION max_rows int The maximum number of rows to include in the converted series list. If the df contains more rows, a random sample of the given number of rows (approximately) will be taken. MAX_ROWS Example Get series list from DataFrame columns: converter = SparkDataFrameConverter(df) series_list = converter.get_series_list() Source code in src/ipyvizzu/data/converters/spark/converter.py class SparkDataFrameConverter(DataFrameConverter): \"\"\" Converts a `pyspark` `DataFrame` into a list of dictionaries representing series. Each dictionary contains information about the series `name`, `values` and `type`. Parameters: df: The `pyspark` `DataFrame` to convert. default_measure_value: Default value to use for missing measure values. Defaults to 0. default_dimension_value: Default value to use for missing dimension values. Defaults to an empty string. max_rows: The maximum number of rows to include in the converted series list. If the `df` contains more rows, a random sample of the given number of rows (approximately) will be taken. Example: Get series list from `DataFrame` columns: converter = SparkDataFrameConverter(df) series_list = converter.get_series_list() \"\"\" # pylint: disable=too-few-public-methods def __init__( self, df: \"pyspark.sql.DataFrame\", # type: ignore default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, max_rows: int = MAX_ROWS, ) -> None: super().__init__(default_measure_value, default_dimension_value, max_rows) self._pyspark, self._pyspark_func = self._get_pyspark() self._df = self._get_sampled_df(df) def _get_pyspark(self) -> Tuple[ModuleType, ModuleType]: try: import pyspark # pylint: disable=import-outside-toplevel from pyspark.sql import functions # pylint: disable=import-outside-toplevel return pyspark, functions except ImportError as error: raise ImportError( \"pyspark is not available. Please install pyspark to use this feature.\" ) from error def _get_sampled_df( self, df: \"pyspark.sql.DataFrame\" # type: ignore ) -> \"pyspark.sql.DataFrame\": # type: ignore row_number = df.count() if row_number > self._max_rows: fraction = self._max_rows / row_number sample_df = df.sample(withReplacement=False, fraction=fraction, seed=42) return sample_df.limit(self._max_rows) return df def _get_columns(self) -> List[str]: return self._df.columns def _convert_to_series_values_and_type( self, obj: str ) -> Tuple[SeriesValues, InferType]: column_name = obj column = self._df.select(column_name) integer_type = self._pyspark.sql.types.IntegerType double_type = self._pyspark.sql.types.DoubleType if isinstance(column.schema[column_name].dataType, (integer_type, double_type)): return self._convert_to_measure_values(column_name), InferType.MEASURE return self._convert_to_dimension_values(column_name), InferType.DIMENSION def _convert_to_measure_values(self, obj: str) -> List[MeasureValue]: column_name = obj func = self._pyspark_func df = self._df.withColumn( column_name, func.when( func.col(column_name).isNull(), self._default_measure_value ).otherwise(func.col(column_name)), ) df_rdd = ( df.withColumn(column_name, func.col(column_name).cast(\"float\")) .select(column_name) .rdd ) return df_rdd.flatMap(list).collect() def _convert_to_dimension_values(self, obj: str) -> List[DimensionValue]: column_name = obj func = self._pyspark_func df = self._df.withColumn( column_name, func.when( func.col(column_name).isNull(), self._default_dimension_value ).otherwise(func.col(column_name)), ) df_rdd = ( df.withColumn(column_name, func.col(column_name).cast(\"string\")) .select(column_name) .rdd ) return df_rdd.flatMap(list).collect()","title":"SparkDataFrameConverter"},{"location":"reference/ipyvizzu/data/converters/#ipyvizzu.data.converters.pandas","text":"This module provides modules for pandas converter.","title":"pandas"},{"location":"reference/ipyvizzu/data/converters/#ipyvizzu.data.converters.pandas.protocol","text":"This module provides protocol classes for pandas data frame converter.","title":"protocol"},{"location":"reference/ipyvizzu/data/converters/#ipyvizzu.data.converters.pandas.protocol.PandasDataFrame","text":"Bases: Protocol Represents a pandas DataFrame Protocol. Source code in src/ipyvizzu/data/converters/pandas/protocol.py @runtime_checkable class PandasDataFrame(Protocol): \"\"\" Represents a pandas DataFrame Protocol. \"\"\" # pylint: disable=too-few-public-methods index: Any columns: Sequence[str] sample: Callable[..., Any] __len__: Callable[[], int] __getitem__: Callable[[Any], Any]","title":"PandasDataFrame"},{"location":"reference/ipyvizzu/data/converters/#ipyvizzu.data.converters.pandas.protocol.PandasSeries","text":"Bases: Protocol Represents a pandas Series Protocol. Source code in src/ipyvizzu/data/converters/pandas/protocol.py @runtime_checkable class PandasSeries(Protocol): \"\"\" Represents a pandas Series Protocol. \"\"\" # pylint: disable=too-few-public-methods index: Any values: Any dtype: Any __len__: Callable[[], int] __getitem__: Callable[[Any], Any]","title":"PandasSeries"},{"location":"reference/ipyvizzu/data/converters/#ipyvizzu.data.converters.pandas.converter","text":"This module provides the PandasDataFrameConverter class, which allows converting a pandas DataFrame or Series into a list of dictionaries representing series.","title":"converter"},{"location":"reference/ipyvizzu/data/converters/#ipyvizzu.data.converters.pandas.converter.PandasDataFrameConverter","text":"Bases: DataFrameConverter Converts a pandas DataFrame or Series into a list of dictionaries representing series. Each dictionary contains information about the series name , values and type . Parameters: Name Type Description Default df Union [ pandas . DataFrame , pandas . Series ] The pandas DataFrame or Series to convert. required default_measure_value MeasureValue Default value to use for missing measure values. Defaults to 0. NAN_MEASURE default_dimension_value DimensionValue Default value to use for missing dimension values. Defaults to an empty string. NAN_DIMENSION max_rows int The maximum number of rows to include in the converted series list. If the df contains more rows, a random sample of the given number of rows will be taken. MAX_ROWS include_index Optional [ str ] Name for the index column to include as a series. If provided, the index column will be added. Defaults to None. None Example Get series list from DataFrame columns: converter = PandasDataFrameConverter(df) series_list = converter.get_series_list() Source code in src/ipyvizzu/data/converters/pandas/converter.py class PandasDataFrameConverter(DataFrameConverter): \"\"\" Converts a `pandas` `DataFrame` or `Series` into a list of dictionaries representing series. Each dictionary contains information about the series `name`, `values` and `type`. Parameters: df: The `pandas` `DataFrame` or `Series` to convert. default_measure_value: Default value to use for missing measure values. Defaults to 0. default_dimension_value: Default value to use for missing dimension values. Defaults to an empty string. max_rows: The maximum number of rows to include in the converted series list. If the `df` contains more rows, a random sample of the given number of rows will be taken. include_index: Name for the index column to include as a series. If provided, the index column will be added. Defaults to None. Example: Get series list from `DataFrame` columns: converter = PandasDataFrameConverter(df) series_list = converter.get_series_list() \"\"\" def __init__( self, df: Union[\"pandas.DataFrame\", \"pandas.Series\"], # type: ignore default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, max_rows: int = MAX_ROWS, include_index: Optional[str] = None, ) -> None: # pylint: disable=too-many-arguments super().__init__(default_measure_value, default_dimension_value, max_rows) self._pd = self._get_pandas() self._df = self._get_sampled_df( self._convert_to_df(df) if isinstance(df, PandasSeries) else df ) self._include_index = include_index def get_series_list(self) -> List[Series]: \"\"\" Convert the `DataFrame` columns to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" series_list = super().get_series_list() index_series = self.get_series_from_index() return index_series + series_list def get_series_from_index(self) -> List[Series]: \"\"\" Convert the `DataFrame` index to a dictionary representing a series, if `include_index` is provided. Returns: A dictionary representing the index series with `name`, `values` and `type` keys. Returns `None` if `include_index` is not provided. \"\"\" if not self._include_index or self._df.index.empty: return [] df = self._pd.DataFrame({self._include_index: self._df.index}) index_series_converter = PandasDataFrameConverter( df, self._default_measure_value, self._default_dimension_value ) return index_series_converter.get_series_list() def _get_pandas(self) -> ModuleType: try: import pandas as pd # pylint: disable=import-outside-toplevel return pd except ImportError as error: raise ImportError( \"pandas is not available. Please install pandas to use this feature.\" ) from error def _convert_to_df(self, series: \"pandas.Series\") -> \"pandas.Dataframe\": # type: ignore if series.empty: return self._pd.DataFrame() return self._pd.DataFrame(series) def _get_sampled_df(self, df: \"pandas.DataFrame\") -> \"pandas.DataFrame\": # type: ignore row_number = len(df) if row_number > self._max_rows: frac = self._max_rows / row_number sampled_df = df.sample( replace=False, frac=frac, random_state=42, ) return sampled_df return df def _get_columns(self) -> List[str]: return self._df.columns def _convert_to_series_values_and_type( self, obj: str # type: ignore ) -> Tuple[SeriesValues, InferType]: column_name = obj column = self._df[column_name] if self._pd.api.types.is_numeric_dtype(column.dtype): return self._convert_to_measure_values(column), InferType.MEASURE return self._convert_to_dimension_values(column), InferType.DIMENSION def _convert_to_measure_values( self, obj: \"pandas.DataFrame\" # type: ignore ) -> List[MeasureValue]: column = obj return column.fillna(self._default_measure_value).astype(float).values.tolist() def _convert_to_dimension_values( self, obj: \"pandas.DataFrame\" # type: ignore ) -> List[DimensionValue]: column = obj return column.fillna(self._default_dimension_value).astype(str).values.tolist()","title":"PandasDataFrameConverter"},{"location":"reference/ipyvizzu/data/converters/#ipyvizzu.data.converters.pandas.converter.PandasDataFrameConverter.get_series_list","text":"Convert the DataFrame columns to a list of dictionaries representing series. Returns: Type Description List [ Series ] A list of dictionaries representing series, List [ Series ] where each dictionary has name , values and type keys. Source code in src/ipyvizzu/data/converters/pandas/converter.py def get_series_list(self) -> List[Series]: \"\"\" Convert the `DataFrame` columns to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" series_list = super().get_series_list() index_series = self.get_series_from_index() return index_series + series_list","title":"get_series_list()"},{"location":"reference/ipyvizzu/data/converters/#ipyvizzu.data.converters.pandas.converter.PandasDataFrameConverter.get_series_from_index","text":"Convert the DataFrame index to a dictionary representing a series, if include_index is provided. Returns: Type Description List [ Series ] A dictionary representing the index series with name , values and type keys. List [ Series ] Returns None if include_index is not provided. Source code in src/ipyvizzu/data/converters/pandas/converter.py def get_series_from_index(self) -> List[Series]: \"\"\" Convert the `DataFrame` index to a dictionary representing a series, if `include_index` is provided. Returns: A dictionary representing the index series with `name`, `values` and `type` keys. Returns `None` if `include_index` is not provided. \"\"\" if not self._include_index or self._df.index.empty: return [] df = self._pd.DataFrame({self._include_index: self._df.index}) index_series_converter = PandasDataFrameConverter( df, self._default_measure_value, self._default_dimension_value ) return index_series_converter.get_series_list()","title":"get_series_from_index()"},{"location":"reference/ipyvizzu/data/converters/#ipyvizzu.data.converters.df","text":"This module provides modules for data frame converter.","title":"df"},{"location":"reference/ipyvizzu/data/converters/#ipyvizzu.data.converters.df.type_alias","text":"This module provides typing aliases for data frame converter.","title":"type_alias"},{"location":"reference/ipyvizzu/data/converters/#ipyvizzu.data.converters.df.type_alias.DataFrame","text":"Represents a data frame.","title":"DataFrame"},{"location":"reference/ipyvizzu/data/converters/#ipyvizzu.data.converters.df.converter","text":"This module provides the DataFrameConverter abstract class.","title":"converter"},{"location":"reference/ipyvizzu/data/converters/#ipyvizzu.data.converters.df.converter.DataFrameConverter","text":"Bases: ToSeriesListConverter Converts data frame into a list of dictionaries representing series. Each dictionary contains information about the series name , values and type . Source code in src/ipyvizzu/data/converters/df/converter.py class DataFrameConverter(ToSeriesListConverter): \"\"\" Converts data frame into a list of dictionaries representing series. Each dictionary contains information about the series `name`, `values` and `type`. \"\"\" # pylint: disable=too-few-public-methods def __init__( self, default_measure_value: MeasureValue, default_dimension_value: DimensionValue, max_rows: int, ) -> None: super().__init__(default_measure_value, default_dimension_value) self._max_rows = max_rows def get_series_list(self) -> List[Series]: \"\"\" Convert the `DataFrame` columns to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" series_list = [] for name in self._get_columns(): series_list.append(self._get_series_from_column(name)) return series_list def _get_series_from_column(self, column_name: str) -> Series: values, infer_type = self._convert_to_series_values_and_type(column_name) return self._convert_to_series(column_name, values, infer_type) @abstractmethod def _get_sampled_df(self, df: DataFrame) -> DataFrame: \"\"\" Returns a sampled data frame for the maximum number of rows. \"\"\" @abstractmethod def _get_columns(self) -> List[str]: \"\"\" Return column names of the data frame. \"\"\"","title":"DataFrameConverter"},{"location":"reference/ipyvizzu/data/converters/#ipyvizzu.data.converters.df.converter.DataFrameConverter.get_series_list","text":"Convert the DataFrame columns to a list of dictionaries representing series. Returns: Type Description List [ Series ] A list of dictionaries representing series, List [ Series ] where each dictionary has name , values and type keys. Source code in src/ipyvizzu/data/converters/df/converter.py def get_series_list(self) -> List[Series]: \"\"\" Convert the `DataFrame` columns to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" series_list = [] for name in self._get_columns(): series_list.append(self._get_series_from_column(name)) return series_list","title":"get_series_list()"},{"location":"reference/ipyvizzu/data/converters/#ipyvizzu.data.converters.df.defaults","text":"This module provides default values for data frame converter.","title":"defaults"},{"location":"reference/ipyvizzu/data/converters/#ipyvizzu.data.converters.df.defaults.MAX_ROWS","text":"Default maximum number of rows.","title":"MAX_ROWS"},{"location":"reference/ipyvizzu/data/converters/converter/","text":"ipyvizzu.data.converters.converter This module provides the ToSeriesListConverter abstract class. ipyvizzu.data.converters.converter.ToSeriesListConverter Bases: ABC Converts data into a list of dictionaries representing series. Each dictionary contains information about the series name , values and type . Source code in src/ipyvizzu/data/converters/converter.py class ToSeriesListConverter(ABC): \"\"\" Converts data into a list of dictionaries representing series. Each dictionary contains information about the series `name`, `values` and `type`. \"\"\" # pylint: disable=too-few-public-methods def __init__( self, default_measure_value: MeasureValue, default_dimension_value: DimensionValue, ) -> None: self._default_measure_value = default_measure_value self._default_dimension_value = default_dimension_value @abstractmethod def get_series_list(self) -> List[Series]: \"\"\" Convert data to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" @abstractmethod def _convert_to_series_values_and_type( self, obj: Any ) -> Tuple[SeriesValues, InferType]: \"\"\" Convert object to SeriesValues and InferType. \"\"\" @abstractmethod def _convert_to_measure_values(self, obj: Any) -> List[MeasureValue]: \"\"\" Convert object to a list of MeasureValue. \"\"\" @abstractmethod def _convert_to_dimension_values(self, obj: Any) -> List[DimensionValue]: \"\"\" Convert object to a list of DimensionValue. \"\"\" def _convert_to_series( self, name: Union[str, int], values: SeriesValues, infer_type: InferType ) -> Series: return { \"name\": str(name), \"values\": values, \"type\": infer_type.value, } get_series_list() abstractmethod Convert data to a list of dictionaries representing series. Returns: Type Description List [ Series ] A list of dictionaries representing series, List [ Series ] where each dictionary has name , values and type keys. Source code in src/ipyvizzu/data/converters/converter.py @abstractmethod def get_series_list(self) -> List[Series]: \"\"\" Convert data to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\"","title":"Converter"},{"location":"reference/ipyvizzu/data/converters/converter/#ipyvizzu.data.converters.converter","text":"This module provides the ToSeriesListConverter abstract class.","title":"converter"},{"location":"reference/ipyvizzu/data/converters/converter/#ipyvizzu.data.converters.converter.ToSeriesListConverter","text":"Bases: ABC Converts data into a list of dictionaries representing series. Each dictionary contains information about the series name , values and type . Source code in src/ipyvizzu/data/converters/converter.py class ToSeriesListConverter(ABC): \"\"\" Converts data into a list of dictionaries representing series. Each dictionary contains information about the series `name`, `values` and `type`. \"\"\" # pylint: disable=too-few-public-methods def __init__( self, default_measure_value: MeasureValue, default_dimension_value: DimensionValue, ) -> None: self._default_measure_value = default_measure_value self._default_dimension_value = default_dimension_value @abstractmethod def get_series_list(self) -> List[Series]: \"\"\" Convert data to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" @abstractmethod def _convert_to_series_values_and_type( self, obj: Any ) -> Tuple[SeriesValues, InferType]: \"\"\" Convert object to SeriesValues and InferType. \"\"\" @abstractmethod def _convert_to_measure_values(self, obj: Any) -> List[MeasureValue]: \"\"\" Convert object to a list of MeasureValue. \"\"\" @abstractmethod def _convert_to_dimension_values(self, obj: Any) -> List[DimensionValue]: \"\"\" Convert object to a list of DimensionValue. \"\"\" def _convert_to_series( self, name: Union[str, int], values: SeriesValues, infer_type: InferType ) -> Series: return { \"name\": str(name), \"values\": values, \"type\": infer_type.value, }","title":"ToSeriesListConverter"},{"location":"reference/ipyvizzu/data/converters/converter/#ipyvizzu.data.converters.converter.ToSeriesListConverter.get_series_list","text":"Convert data to a list of dictionaries representing series. Returns: Type Description List [ Series ] A list of dictionaries representing series, List [ Series ] where each dictionary has name , values and type keys. Source code in src/ipyvizzu/data/converters/converter.py @abstractmethod def get_series_list(self) -> List[Series]: \"\"\" Convert data to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\"","title":"get_series_list()"},{"location":"reference/ipyvizzu/data/converters/defaults/","text":"ipyvizzu.data.converters.defaults This module provides default values for converters. ipyvizzu.data.converters.defaults.NAN_DIMENSION: DimensionValue = '' module-attribute Default dimension value to replace nan values. ipyvizzu.data.converters.defaults.NAN_MEASURE: MeasureValue = 0 module-attribute Default measure value to replace nan values.","title":"Defaults"},{"location":"reference/ipyvizzu/data/converters/defaults/#ipyvizzu.data.converters.defaults","text":"This module provides default values for converters.","title":"defaults"},{"location":"reference/ipyvizzu/data/converters/defaults/#ipyvizzu.data.converters.defaults.NAN_DIMENSION","text":"Default dimension value to replace nan values.","title":"NAN_DIMENSION"},{"location":"reference/ipyvizzu/data/converters/defaults/#ipyvizzu.data.converters.defaults.NAN_MEASURE","text":"Default measure value to replace nan values.","title":"NAN_MEASURE"},{"location":"reference/ipyvizzu/data/converters/df/","text":"ipyvizzu.data.converters.df This module provides modules for data frame converter. ipyvizzu.data.converters.df.type_alias This module provides typing aliases for data frame converter. DataFrame = TypeVar('DataFrame', Any, Any) module-attribute Represents a data frame. ipyvizzu.data.converters.df.converter This module provides the DataFrameConverter abstract class. DataFrameConverter Bases: ToSeriesListConverter Converts data frame into a list of dictionaries representing series. Each dictionary contains information about the series name , values and type . Source code in src/ipyvizzu/data/converters/df/converter.py class DataFrameConverter(ToSeriesListConverter): \"\"\" Converts data frame into a list of dictionaries representing series. Each dictionary contains information about the series `name`, `values` and `type`. \"\"\" # pylint: disable=too-few-public-methods def __init__( self, default_measure_value: MeasureValue, default_dimension_value: DimensionValue, max_rows: int, ) -> None: super().__init__(default_measure_value, default_dimension_value) self._max_rows = max_rows def get_series_list(self) -> List[Series]: \"\"\" Convert the `DataFrame` columns to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" series_list = [] for name in self._get_columns(): series_list.append(self._get_series_from_column(name)) return series_list def _get_series_from_column(self, column_name: str) -> Series: values, infer_type = self._convert_to_series_values_and_type(column_name) return self._convert_to_series(column_name, values, infer_type) @abstractmethod def _get_sampled_df(self, df: DataFrame) -> DataFrame: \"\"\" Returns a sampled data frame for the maximum number of rows. \"\"\" @abstractmethod def _get_columns(self) -> List[str]: \"\"\" Return column names of the data frame. \"\"\" get_series_list() Convert the DataFrame columns to a list of dictionaries representing series. Returns: Type Description List [ Series ] A list of dictionaries representing series, List [ Series ] where each dictionary has name , values and type keys. Source code in src/ipyvizzu/data/converters/df/converter.py def get_series_list(self) -> List[Series]: \"\"\" Convert the `DataFrame` columns to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" series_list = [] for name in self._get_columns(): series_list.append(self._get_series_from_column(name)) return series_list ipyvizzu.data.converters.df.defaults This module provides default values for data frame converter. MAX_ROWS: int = 10000 module-attribute Default maximum number of rows.","title":"Df"},{"location":"reference/ipyvizzu/data/converters/df/#ipyvizzu.data.converters.df","text":"This module provides modules for data frame converter.","title":"df"},{"location":"reference/ipyvizzu/data/converters/df/#ipyvizzu.data.converters.df.type_alias","text":"This module provides typing aliases for data frame converter.","title":"type_alias"},{"location":"reference/ipyvizzu/data/converters/df/#ipyvizzu.data.converters.df.type_alias.DataFrame","text":"Represents a data frame.","title":"DataFrame"},{"location":"reference/ipyvizzu/data/converters/df/#ipyvizzu.data.converters.df.converter","text":"This module provides the DataFrameConverter abstract class.","title":"converter"},{"location":"reference/ipyvizzu/data/converters/df/#ipyvizzu.data.converters.df.converter.DataFrameConverter","text":"Bases: ToSeriesListConverter Converts data frame into a list of dictionaries representing series. Each dictionary contains information about the series name , values and type . Source code in src/ipyvizzu/data/converters/df/converter.py class DataFrameConverter(ToSeriesListConverter): \"\"\" Converts data frame into a list of dictionaries representing series. Each dictionary contains information about the series `name`, `values` and `type`. \"\"\" # pylint: disable=too-few-public-methods def __init__( self, default_measure_value: MeasureValue, default_dimension_value: DimensionValue, max_rows: int, ) -> None: super().__init__(default_measure_value, default_dimension_value) self._max_rows = max_rows def get_series_list(self) -> List[Series]: \"\"\" Convert the `DataFrame` columns to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" series_list = [] for name in self._get_columns(): series_list.append(self._get_series_from_column(name)) return series_list def _get_series_from_column(self, column_name: str) -> Series: values, infer_type = self._convert_to_series_values_and_type(column_name) return self._convert_to_series(column_name, values, infer_type) @abstractmethod def _get_sampled_df(self, df: DataFrame) -> DataFrame: \"\"\" Returns a sampled data frame for the maximum number of rows. \"\"\" @abstractmethod def _get_columns(self) -> List[str]: \"\"\" Return column names of the data frame. \"\"\"","title":"DataFrameConverter"},{"location":"reference/ipyvizzu/data/converters/df/#ipyvizzu.data.converters.df.converter.DataFrameConverter.get_series_list","text":"Convert the DataFrame columns to a list of dictionaries representing series. Returns: Type Description List [ Series ] A list of dictionaries representing series, List [ Series ] where each dictionary has name , values and type keys. Source code in src/ipyvizzu/data/converters/df/converter.py def get_series_list(self) -> List[Series]: \"\"\" Convert the `DataFrame` columns to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" series_list = [] for name in self._get_columns(): series_list.append(self._get_series_from_column(name)) return series_list","title":"get_series_list()"},{"location":"reference/ipyvizzu/data/converters/df/#ipyvizzu.data.converters.df.defaults","text":"This module provides default values for data frame converter.","title":"defaults"},{"location":"reference/ipyvizzu/data/converters/df/#ipyvizzu.data.converters.df.defaults.MAX_ROWS","text":"Default maximum number of rows.","title":"MAX_ROWS"},{"location":"reference/ipyvizzu/data/converters/df/converter/","text":"ipyvizzu.data.converters.df.converter This module provides the DataFrameConverter abstract class. ipyvizzu.data.converters.df.converter.DataFrameConverter Bases: ToSeriesListConverter Converts data frame into a list of dictionaries representing series. Each dictionary contains information about the series name , values and type . Source code in src/ipyvizzu/data/converters/df/converter.py class DataFrameConverter(ToSeriesListConverter): \"\"\" Converts data frame into a list of dictionaries representing series. Each dictionary contains information about the series `name`, `values` and `type`. \"\"\" # pylint: disable=too-few-public-methods def __init__( self, default_measure_value: MeasureValue, default_dimension_value: DimensionValue, max_rows: int, ) -> None: super().__init__(default_measure_value, default_dimension_value) self._max_rows = max_rows def get_series_list(self) -> List[Series]: \"\"\" Convert the `DataFrame` columns to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" series_list = [] for name in self._get_columns(): series_list.append(self._get_series_from_column(name)) return series_list def _get_series_from_column(self, column_name: str) -> Series: values, infer_type = self._convert_to_series_values_and_type(column_name) return self._convert_to_series(column_name, values, infer_type) @abstractmethod def _get_sampled_df(self, df: DataFrame) -> DataFrame: \"\"\" Returns a sampled data frame for the maximum number of rows. \"\"\" @abstractmethod def _get_columns(self) -> List[str]: \"\"\" Return column names of the data frame. \"\"\" get_series_list() Convert the DataFrame columns to a list of dictionaries representing series. Returns: Type Description List [ Series ] A list of dictionaries representing series, List [ Series ] where each dictionary has name , values and type keys. Source code in src/ipyvizzu/data/converters/df/converter.py def get_series_list(self) -> List[Series]: \"\"\" Convert the `DataFrame` columns to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" series_list = [] for name in self._get_columns(): series_list.append(self._get_series_from_column(name)) return series_list","title":"Converter"},{"location":"reference/ipyvizzu/data/converters/df/converter/#ipyvizzu.data.converters.df.converter","text":"This module provides the DataFrameConverter abstract class.","title":"converter"},{"location":"reference/ipyvizzu/data/converters/df/converter/#ipyvizzu.data.converters.df.converter.DataFrameConverter","text":"Bases: ToSeriesListConverter Converts data frame into a list of dictionaries representing series. Each dictionary contains information about the series name , values and type . Source code in src/ipyvizzu/data/converters/df/converter.py class DataFrameConverter(ToSeriesListConverter): \"\"\" Converts data frame into a list of dictionaries representing series. Each dictionary contains information about the series `name`, `values` and `type`. \"\"\" # pylint: disable=too-few-public-methods def __init__( self, default_measure_value: MeasureValue, default_dimension_value: DimensionValue, max_rows: int, ) -> None: super().__init__(default_measure_value, default_dimension_value) self._max_rows = max_rows def get_series_list(self) -> List[Series]: \"\"\" Convert the `DataFrame` columns to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" series_list = [] for name in self._get_columns(): series_list.append(self._get_series_from_column(name)) return series_list def _get_series_from_column(self, column_name: str) -> Series: values, infer_type = self._convert_to_series_values_and_type(column_name) return self._convert_to_series(column_name, values, infer_type) @abstractmethod def _get_sampled_df(self, df: DataFrame) -> DataFrame: \"\"\" Returns a sampled data frame for the maximum number of rows. \"\"\" @abstractmethod def _get_columns(self) -> List[str]: \"\"\" Return column names of the data frame. \"\"\"","title":"DataFrameConverter"},{"location":"reference/ipyvizzu/data/converters/df/converter/#ipyvizzu.data.converters.df.converter.DataFrameConverter.get_series_list","text":"Convert the DataFrame columns to a list of dictionaries representing series. Returns: Type Description List [ Series ] A list of dictionaries representing series, List [ Series ] where each dictionary has name , values and type keys. Source code in src/ipyvizzu/data/converters/df/converter.py def get_series_list(self) -> List[Series]: \"\"\" Convert the `DataFrame` columns to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" series_list = [] for name in self._get_columns(): series_list.append(self._get_series_from_column(name)) return series_list","title":"get_series_list()"},{"location":"reference/ipyvizzu/data/converters/df/defaults/","text":"ipyvizzu.data.converters.df.defaults This module provides default values for data frame converter. ipyvizzu.data.converters.df.defaults.MAX_ROWS: int = 10000 module-attribute Default maximum number of rows.","title":"Defaults"},{"location":"reference/ipyvizzu/data/converters/df/defaults/#ipyvizzu.data.converters.df.defaults","text":"This module provides default values for data frame converter.","title":"defaults"},{"location":"reference/ipyvizzu/data/converters/df/defaults/#ipyvizzu.data.converters.df.defaults.MAX_ROWS","text":"Default maximum number of rows.","title":"MAX_ROWS"},{"location":"reference/ipyvizzu/data/converters/df/type_alias/","text":"ipyvizzu.data.converters.df.type_alias This module provides typing aliases for data frame converter. ipyvizzu.data.converters.df.type_alias.DataFrame = TypeVar('DataFrame', Any, Any) module-attribute Represents a data frame.","title":"Type alias"},{"location":"reference/ipyvizzu/data/converters/df/type_alias/#ipyvizzu.data.converters.df.type_alias","text":"This module provides typing aliases for data frame converter.","title":"type_alias"},{"location":"reference/ipyvizzu/data/converters/df/type_alias/#ipyvizzu.data.converters.df.type_alias.DataFrame","text":"Represents a data frame.","title":"DataFrame"},{"location":"reference/ipyvizzu/data/converters/numpy/","text":"ipyvizzu.data.converters.numpy This module provides modules for numpy converter. ipyvizzu.data.converters.numpy.type_alias This module provides typing aliases for numpy converter. Index = int module-attribute Represents the index of a column. Name = str module-attribute Represents the name of a column. DType = type module-attribute Represents the dtype of a column. ColumnName = Union[Name, Dict[Index, Name]] module-attribute Represents a column name. It is a dictionary of Index:Name pairs or for single-dimensional arrays, it can be just a Name. ColumnDtype = Union[DType, Dict[Index, DType]] module-attribute Represents a column dtype. It is a dictionary of Index:DType pairs or for single-dimensional arrays, it can be just a DType. ColumnConfig = TypeVar('ColumnConfig', Name, DType) module-attribute Represents a column config. It can be Name or DType. ipyvizzu.data.converters.numpy.converter This module provides the NumpyArrayConverter class, which allows converting a numpy array into a list of dictionaries representing series. NumpyArrayConverter Bases: ToSeriesListConverter Converts a numpy array into a list of dictionaries representing series. Each dictionary contains information about the series name , values and type . Parameters: Name Type Description Default np_array numpy . array The numpy array to convert. required column_name Optional [ ColumnName ] The name of a column. By default, uses column indices. Can be set with an Index:Name pair or, for single-dimensional arrays, with just the Name. None column_dtype Optional [ ColumnDtype ] The dtype of a column. By default, uses the np_array's dtype. Can be set with an Index:DType pair or, for single-dimensional arrays, with just the DType. None default_measure_value MeasureValue Default value to use for missing measure values. Defaults to 0. NAN_MEASURE default_dimension_value DimensionValue Default value to use for missing dimension values. Defaults to an empty string. NAN_DIMENSION Example Get series list from numpy array : converter = NumpyArrayConverter(np_array) series_list = converter.get_series_list() Source code in src/ipyvizzu/data/converters/numpy/converter.py class NumpyArrayConverter(ToSeriesListConverter): \"\"\" Converts a `numpy` `array` into a list of dictionaries representing series. Each dictionary contains information about the series `name`, `values` and `type`. Parameters: np_array: The `numpy` `array` to convert. column_name: The name of a column. By default, uses column indices. Can be set with an Index:Name pair or, for single-dimensional arrays, with just the Name. column_dtype: The dtype of a column. By default, uses the np_array's dtype. Can be set with an Index:DType pair or, for single-dimensional arrays, with just the DType. default_measure_value: Default value to use for missing measure values. Defaults to 0. default_dimension_value: Default value to use for missing dimension values. Defaults to an empty string. Example: Get series list from `numpy` `array`: converter = NumpyArrayConverter(np_array) series_list = converter.get_series_list() \"\"\" # pylint: disable=too-few-public-methods def __init__( self, np_array: \"numpy.array\", # type: ignore column_name: Optional[ColumnName] = None, column_dtype: Optional[ColumnDtype] = None, default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, ) -> None: # pylint: disable=too-many-arguments super().__init__(default_measure_value, default_dimension_value) self._np = self._get_numpy() self._np_array = np_array self._column_name: Dict[Index, Name] = self._get_columns_config(column_name) self._column_dtype: Dict[Index, DType] = self._get_columns_config(column_dtype) def get_series_list(self) -> List[Series]: \"\"\" Convert the `numpy` `array` to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" if self._np_array.ndim == 0: return [] if self._np_array.ndim == 1: return self._get_series_list_from_array1dim() if self._np_array.ndim == 2: return self._get_series_list_from_array2dim() raise ValueError(\"arrays larger than 2D are not supported\") def _get_series_list_from_array1dim(self) -> List[Series]: i = 0 name = self._column_name.get(i, i) values, infer_type = self._convert_to_series_values_and_type( (i, self._np_array) ) return [self._convert_to_series(name, values, infer_type)] def _get_series_list_from_array2dim(self) -> List[Series]: series_list = [] for i in range(self._np_array.shape[1]): name = self._column_name.get(i, i) values, infer_type = self._convert_to_series_values_and_type( (i, self._np_array[:, i]) ) series_list.append(self._convert_to_series(name, values, infer_type)) return series_list def _get_numpy(self) -> ModuleType: try: import numpy as np # pylint: disable=import-outside-toplevel return np except ImportError as error: raise ImportError( \"numpy is not available. Please install numpy to use this feature.\" ) from error def _get_columns_config( self, config: Optional[Union[ColumnConfig, Dict[Index, ColumnConfig]]], ) -> Dict[Index, ColumnConfig]: if config is None: return {} if not isinstance(config, dict): if not self._np_array.ndim == 1: raise ValueError(\"non dict value can only be used for a 1D array\") return {0: config} return config def _convert_to_series_values_and_type( self, obj: Tuple[int, \"numpy.array\"] # type: ignore ) -> Tuple[SeriesValues, InferType]: column = obj i = column[0] array = column[1] dtype = self._column_dtype.get(i, self._np_array.dtype) if self._np.issubdtype(dtype, self._np.number): return self._convert_to_measure_values(array), InferType.MEASURE return self._convert_to_dimension_values(array), InferType.DIMENSION def _convert_to_measure_values( self, obj: \"numpy.array\" # type: ignore ) -> List[MeasureValue]: array = obj array_float = array.astype(float) return self._np.nan_to_num( array_float, nan=self._default_measure_value ).tolist() def _convert_to_dimension_values( self, obj: \"numpy.array\" # type: ignore ) -> List[DimensionValue]: array = obj array_str = array.astype(str) replace_nan = \"nan\" mask = array_str == replace_nan array_str[mask] = self._default_dimension_value return array_str.tolist() get_series_list() Convert the numpy array to a list of dictionaries representing series. Returns: Type Description List [ Series ] A list of dictionaries representing series, List [ Series ] where each dictionary has name , values and type keys. Source code in src/ipyvizzu/data/converters/numpy/converter.py def get_series_list(self) -> List[Series]: \"\"\" Convert the `numpy` `array` to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" if self._np_array.ndim == 0: return [] if self._np_array.ndim == 1: return self._get_series_list_from_array1dim() if self._np_array.ndim == 2: return self._get_series_list_from_array2dim() raise ValueError(\"arrays larger than 2D are not supported\")","title":"Numpy"},{"location":"reference/ipyvizzu/data/converters/numpy/#ipyvizzu.data.converters.numpy","text":"This module provides modules for numpy converter.","title":"numpy"},{"location":"reference/ipyvizzu/data/converters/numpy/#ipyvizzu.data.converters.numpy.type_alias","text":"This module provides typing aliases for numpy converter.","title":"type_alias"},{"location":"reference/ipyvizzu/data/converters/numpy/#ipyvizzu.data.converters.numpy.type_alias.Index","text":"Represents the index of a column.","title":"Index"},{"location":"reference/ipyvizzu/data/converters/numpy/#ipyvizzu.data.converters.numpy.type_alias.Name","text":"Represents the name of a column.","title":"Name"},{"location":"reference/ipyvizzu/data/converters/numpy/#ipyvizzu.data.converters.numpy.type_alias.DType","text":"Represents the dtype of a column.","title":"DType"},{"location":"reference/ipyvizzu/data/converters/numpy/#ipyvizzu.data.converters.numpy.type_alias.ColumnName","text":"Represents a column name. It is a dictionary of Index:Name pairs or for single-dimensional arrays, it can be just a Name.","title":"ColumnName"},{"location":"reference/ipyvizzu/data/converters/numpy/#ipyvizzu.data.converters.numpy.type_alias.ColumnDtype","text":"Represents a column dtype. It is a dictionary of Index:DType pairs or for single-dimensional arrays, it can be just a DType.","title":"ColumnDtype"},{"location":"reference/ipyvizzu/data/converters/numpy/#ipyvizzu.data.converters.numpy.type_alias.ColumnConfig","text":"Represents a column config. It can be Name or DType.","title":"ColumnConfig"},{"location":"reference/ipyvizzu/data/converters/numpy/#ipyvizzu.data.converters.numpy.converter","text":"This module provides the NumpyArrayConverter class, which allows converting a numpy array into a list of dictionaries representing series.","title":"converter"},{"location":"reference/ipyvizzu/data/converters/numpy/#ipyvizzu.data.converters.numpy.converter.NumpyArrayConverter","text":"Bases: ToSeriesListConverter Converts a numpy array into a list of dictionaries representing series. Each dictionary contains information about the series name , values and type . Parameters: Name Type Description Default np_array numpy . array The numpy array to convert. required column_name Optional [ ColumnName ] The name of a column. By default, uses column indices. Can be set with an Index:Name pair or, for single-dimensional arrays, with just the Name. None column_dtype Optional [ ColumnDtype ] The dtype of a column. By default, uses the np_array's dtype. Can be set with an Index:DType pair or, for single-dimensional arrays, with just the DType. None default_measure_value MeasureValue Default value to use for missing measure values. Defaults to 0. NAN_MEASURE default_dimension_value DimensionValue Default value to use for missing dimension values. Defaults to an empty string. NAN_DIMENSION Example Get series list from numpy array : converter = NumpyArrayConverter(np_array) series_list = converter.get_series_list() Source code in src/ipyvizzu/data/converters/numpy/converter.py class NumpyArrayConverter(ToSeriesListConverter): \"\"\" Converts a `numpy` `array` into a list of dictionaries representing series. Each dictionary contains information about the series `name`, `values` and `type`. Parameters: np_array: The `numpy` `array` to convert. column_name: The name of a column. By default, uses column indices. Can be set with an Index:Name pair or, for single-dimensional arrays, with just the Name. column_dtype: The dtype of a column. By default, uses the np_array's dtype. Can be set with an Index:DType pair or, for single-dimensional arrays, with just the DType. default_measure_value: Default value to use for missing measure values. Defaults to 0. default_dimension_value: Default value to use for missing dimension values. Defaults to an empty string. Example: Get series list from `numpy` `array`: converter = NumpyArrayConverter(np_array) series_list = converter.get_series_list() \"\"\" # pylint: disable=too-few-public-methods def __init__( self, np_array: \"numpy.array\", # type: ignore column_name: Optional[ColumnName] = None, column_dtype: Optional[ColumnDtype] = None, default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, ) -> None: # pylint: disable=too-many-arguments super().__init__(default_measure_value, default_dimension_value) self._np = self._get_numpy() self._np_array = np_array self._column_name: Dict[Index, Name] = self._get_columns_config(column_name) self._column_dtype: Dict[Index, DType] = self._get_columns_config(column_dtype) def get_series_list(self) -> List[Series]: \"\"\" Convert the `numpy` `array` to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" if self._np_array.ndim == 0: return [] if self._np_array.ndim == 1: return self._get_series_list_from_array1dim() if self._np_array.ndim == 2: return self._get_series_list_from_array2dim() raise ValueError(\"arrays larger than 2D are not supported\") def _get_series_list_from_array1dim(self) -> List[Series]: i = 0 name = self._column_name.get(i, i) values, infer_type = self._convert_to_series_values_and_type( (i, self._np_array) ) return [self._convert_to_series(name, values, infer_type)] def _get_series_list_from_array2dim(self) -> List[Series]: series_list = [] for i in range(self._np_array.shape[1]): name = self._column_name.get(i, i) values, infer_type = self._convert_to_series_values_and_type( (i, self._np_array[:, i]) ) series_list.append(self._convert_to_series(name, values, infer_type)) return series_list def _get_numpy(self) -> ModuleType: try: import numpy as np # pylint: disable=import-outside-toplevel return np except ImportError as error: raise ImportError( \"numpy is not available. Please install numpy to use this feature.\" ) from error def _get_columns_config( self, config: Optional[Union[ColumnConfig, Dict[Index, ColumnConfig]]], ) -> Dict[Index, ColumnConfig]: if config is None: return {} if not isinstance(config, dict): if not self._np_array.ndim == 1: raise ValueError(\"non dict value can only be used for a 1D array\") return {0: config} return config def _convert_to_series_values_and_type( self, obj: Tuple[int, \"numpy.array\"] # type: ignore ) -> Tuple[SeriesValues, InferType]: column = obj i = column[0] array = column[1] dtype = self._column_dtype.get(i, self._np_array.dtype) if self._np.issubdtype(dtype, self._np.number): return self._convert_to_measure_values(array), InferType.MEASURE return self._convert_to_dimension_values(array), InferType.DIMENSION def _convert_to_measure_values( self, obj: \"numpy.array\" # type: ignore ) -> List[MeasureValue]: array = obj array_float = array.astype(float) return self._np.nan_to_num( array_float, nan=self._default_measure_value ).tolist() def _convert_to_dimension_values( self, obj: \"numpy.array\" # type: ignore ) -> List[DimensionValue]: array = obj array_str = array.astype(str) replace_nan = \"nan\" mask = array_str == replace_nan array_str[mask] = self._default_dimension_value return array_str.tolist()","title":"NumpyArrayConverter"},{"location":"reference/ipyvizzu/data/converters/numpy/#ipyvizzu.data.converters.numpy.converter.NumpyArrayConverter.get_series_list","text":"Convert the numpy array to a list of dictionaries representing series. Returns: Type Description List [ Series ] A list of dictionaries representing series, List [ Series ] where each dictionary has name , values and type keys. Source code in src/ipyvizzu/data/converters/numpy/converter.py def get_series_list(self) -> List[Series]: \"\"\" Convert the `numpy` `array` to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" if self._np_array.ndim == 0: return [] if self._np_array.ndim == 1: return self._get_series_list_from_array1dim() if self._np_array.ndim == 2: return self._get_series_list_from_array2dim() raise ValueError(\"arrays larger than 2D are not supported\")","title":"get_series_list()"},{"location":"reference/ipyvizzu/data/converters/numpy/converter/","text":"ipyvizzu.data.converters.numpy.converter This module provides the NumpyArrayConverter class, which allows converting a numpy array into a list of dictionaries representing series. ipyvizzu.data.converters.numpy.converter.NumpyArrayConverter Bases: ToSeriesListConverter Converts a numpy array into a list of dictionaries representing series. Each dictionary contains information about the series name , values and type . Parameters: Name Type Description Default np_array numpy . array The numpy array to convert. required column_name Optional [ ColumnName ] The name of a column. By default, uses column indices. Can be set with an Index:Name pair or, for single-dimensional arrays, with just the Name. None column_dtype Optional [ ColumnDtype ] The dtype of a column. By default, uses the np_array's dtype. Can be set with an Index:DType pair or, for single-dimensional arrays, with just the DType. None default_measure_value MeasureValue Default value to use for missing measure values. Defaults to 0. NAN_MEASURE default_dimension_value DimensionValue Default value to use for missing dimension values. Defaults to an empty string. NAN_DIMENSION Example Get series list from numpy array : converter = NumpyArrayConverter(np_array) series_list = converter.get_series_list() Source code in src/ipyvizzu/data/converters/numpy/converter.py class NumpyArrayConverter(ToSeriesListConverter): \"\"\" Converts a `numpy` `array` into a list of dictionaries representing series. Each dictionary contains information about the series `name`, `values` and `type`. Parameters: np_array: The `numpy` `array` to convert. column_name: The name of a column. By default, uses column indices. Can be set with an Index:Name pair or, for single-dimensional arrays, with just the Name. column_dtype: The dtype of a column. By default, uses the np_array's dtype. Can be set with an Index:DType pair or, for single-dimensional arrays, with just the DType. default_measure_value: Default value to use for missing measure values. Defaults to 0. default_dimension_value: Default value to use for missing dimension values. Defaults to an empty string. Example: Get series list from `numpy` `array`: converter = NumpyArrayConverter(np_array) series_list = converter.get_series_list() \"\"\" # pylint: disable=too-few-public-methods def __init__( self, np_array: \"numpy.array\", # type: ignore column_name: Optional[ColumnName] = None, column_dtype: Optional[ColumnDtype] = None, default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, ) -> None: # pylint: disable=too-many-arguments super().__init__(default_measure_value, default_dimension_value) self._np = self._get_numpy() self._np_array = np_array self._column_name: Dict[Index, Name] = self._get_columns_config(column_name) self._column_dtype: Dict[Index, DType] = self._get_columns_config(column_dtype) def get_series_list(self) -> List[Series]: \"\"\" Convert the `numpy` `array` to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" if self._np_array.ndim == 0: return [] if self._np_array.ndim == 1: return self._get_series_list_from_array1dim() if self._np_array.ndim == 2: return self._get_series_list_from_array2dim() raise ValueError(\"arrays larger than 2D are not supported\") def _get_series_list_from_array1dim(self) -> List[Series]: i = 0 name = self._column_name.get(i, i) values, infer_type = self._convert_to_series_values_and_type( (i, self._np_array) ) return [self._convert_to_series(name, values, infer_type)] def _get_series_list_from_array2dim(self) -> List[Series]: series_list = [] for i in range(self._np_array.shape[1]): name = self._column_name.get(i, i) values, infer_type = self._convert_to_series_values_and_type( (i, self._np_array[:, i]) ) series_list.append(self._convert_to_series(name, values, infer_type)) return series_list def _get_numpy(self) -> ModuleType: try: import numpy as np # pylint: disable=import-outside-toplevel return np except ImportError as error: raise ImportError( \"numpy is not available. Please install numpy to use this feature.\" ) from error def _get_columns_config( self, config: Optional[Union[ColumnConfig, Dict[Index, ColumnConfig]]], ) -> Dict[Index, ColumnConfig]: if config is None: return {} if not isinstance(config, dict): if not self._np_array.ndim == 1: raise ValueError(\"non dict value can only be used for a 1D array\") return {0: config} return config def _convert_to_series_values_and_type( self, obj: Tuple[int, \"numpy.array\"] # type: ignore ) -> Tuple[SeriesValues, InferType]: column = obj i = column[0] array = column[1] dtype = self._column_dtype.get(i, self._np_array.dtype) if self._np.issubdtype(dtype, self._np.number): return self._convert_to_measure_values(array), InferType.MEASURE return self._convert_to_dimension_values(array), InferType.DIMENSION def _convert_to_measure_values( self, obj: \"numpy.array\" # type: ignore ) -> List[MeasureValue]: array = obj array_float = array.astype(float) return self._np.nan_to_num( array_float, nan=self._default_measure_value ).tolist() def _convert_to_dimension_values( self, obj: \"numpy.array\" # type: ignore ) -> List[DimensionValue]: array = obj array_str = array.astype(str) replace_nan = \"nan\" mask = array_str == replace_nan array_str[mask] = self._default_dimension_value return array_str.tolist() get_series_list() Convert the numpy array to a list of dictionaries representing series. Returns: Type Description List [ Series ] A list of dictionaries representing series, List [ Series ] where each dictionary has name , values and type keys. Source code in src/ipyvizzu/data/converters/numpy/converter.py def get_series_list(self) -> List[Series]: \"\"\" Convert the `numpy` `array` to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" if self._np_array.ndim == 0: return [] if self._np_array.ndim == 1: return self._get_series_list_from_array1dim() if self._np_array.ndim == 2: return self._get_series_list_from_array2dim() raise ValueError(\"arrays larger than 2D are not supported\")","title":"Converter"},{"location":"reference/ipyvizzu/data/converters/numpy/converter/#ipyvizzu.data.converters.numpy.converter","text":"This module provides the NumpyArrayConverter class, which allows converting a numpy array into a list of dictionaries representing series.","title":"converter"},{"location":"reference/ipyvizzu/data/converters/numpy/converter/#ipyvizzu.data.converters.numpy.converter.NumpyArrayConverter","text":"Bases: ToSeriesListConverter Converts a numpy array into a list of dictionaries representing series. Each dictionary contains information about the series name , values and type . Parameters: Name Type Description Default np_array numpy . array The numpy array to convert. required column_name Optional [ ColumnName ] The name of a column. By default, uses column indices. Can be set with an Index:Name pair or, for single-dimensional arrays, with just the Name. None column_dtype Optional [ ColumnDtype ] The dtype of a column. By default, uses the np_array's dtype. Can be set with an Index:DType pair or, for single-dimensional arrays, with just the DType. None default_measure_value MeasureValue Default value to use for missing measure values. Defaults to 0. NAN_MEASURE default_dimension_value DimensionValue Default value to use for missing dimension values. Defaults to an empty string. NAN_DIMENSION Example Get series list from numpy array : converter = NumpyArrayConverter(np_array) series_list = converter.get_series_list() Source code in src/ipyvizzu/data/converters/numpy/converter.py class NumpyArrayConverter(ToSeriesListConverter): \"\"\" Converts a `numpy` `array` into a list of dictionaries representing series. Each dictionary contains information about the series `name`, `values` and `type`. Parameters: np_array: The `numpy` `array` to convert. column_name: The name of a column. By default, uses column indices. Can be set with an Index:Name pair or, for single-dimensional arrays, with just the Name. column_dtype: The dtype of a column. By default, uses the np_array's dtype. Can be set with an Index:DType pair or, for single-dimensional arrays, with just the DType. default_measure_value: Default value to use for missing measure values. Defaults to 0. default_dimension_value: Default value to use for missing dimension values. Defaults to an empty string. Example: Get series list from `numpy` `array`: converter = NumpyArrayConverter(np_array) series_list = converter.get_series_list() \"\"\" # pylint: disable=too-few-public-methods def __init__( self, np_array: \"numpy.array\", # type: ignore column_name: Optional[ColumnName] = None, column_dtype: Optional[ColumnDtype] = None, default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, ) -> None: # pylint: disable=too-many-arguments super().__init__(default_measure_value, default_dimension_value) self._np = self._get_numpy() self._np_array = np_array self._column_name: Dict[Index, Name] = self._get_columns_config(column_name) self._column_dtype: Dict[Index, DType] = self._get_columns_config(column_dtype) def get_series_list(self) -> List[Series]: \"\"\" Convert the `numpy` `array` to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" if self._np_array.ndim == 0: return [] if self._np_array.ndim == 1: return self._get_series_list_from_array1dim() if self._np_array.ndim == 2: return self._get_series_list_from_array2dim() raise ValueError(\"arrays larger than 2D are not supported\") def _get_series_list_from_array1dim(self) -> List[Series]: i = 0 name = self._column_name.get(i, i) values, infer_type = self._convert_to_series_values_and_type( (i, self._np_array) ) return [self._convert_to_series(name, values, infer_type)] def _get_series_list_from_array2dim(self) -> List[Series]: series_list = [] for i in range(self._np_array.shape[1]): name = self._column_name.get(i, i) values, infer_type = self._convert_to_series_values_and_type( (i, self._np_array[:, i]) ) series_list.append(self._convert_to_series(name, values, infer_type)) return series_list def _get_numpy(self) -> ModuleType: try: import numpy as np # pylint: disable=import-outside-toplevel return np except ImportError as error: raise ImportError( \"numpy is not available. Please install numpy to use this feature.\" ) from error def _get_columns_config( self, config: Optional[Union[ColumnConfig, Dict[Index, ColumnConfig]]], ) -> Dict[Index, ColumnConfig]: if config is None: return {} if not isinstance(config, dict): if not self._np_array.ndim == 1: raise ValueError(\"non dict value can only be used for a 1D array\") return {0: config} return config def _convert_to_series_values_and_type( self, obj: Tuple[int, \"numpy.array\"] # type: ignore ) -> Tuple[SeriesValues, InferType]: column = obj i = column[0] array = column[1] dtype = self._column_dtype.get(i, self._np_array.dtype) if self._np.issubdtype(dtype, self._np.number): return self._convert_to_measure_values(array), InferType.MEASURE return self._convert_to_dimension_values(array), InferType.DIMENSION def _convert_to_measure_values( self, obj: \"numpy.array\" # type: ignore ) -> List[MeasureValue]: array = obj array_float = array.astype(float) return self._np.nan_to_num( array_float, nan=self._default_measure_value ).tolist() def _convert_to_dimension_values( self, obj: \"numpy.array\" # type: ignore ) -> List[DimensionValue]: array = obj array_str = array.astype(str) replace_nan = \"nan\" mask = array_str == replace_nan array_str[mask] = self._default_dimension_value return array_str.tolist()","title":"NumpyArrayConverter"},{"location":"reference/ipyvizzu/data/converters/numpy/converter/#ipyvizzu.data.converters.numpy.converter.NumpyArrayConverter.get_series_list","text":"Convert the numpy array to a list of dictionaries representing series. Returns: Type Description List [ Series ] A list of dictionaries representing series, List [ Series ] where each dictionary has name , values and type keys. Source code in src/ipyvizzu/data/converters/numpy/converter.py def get_series_list(self) -> List[Series]: \"\"\" Convert the `numpy` `array` to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" if self._np_array.ndim == 0: return [] if self._np_array.ndim == 1: return self._get_series_list_from_array1dim() if self._np_array.ndim == 2: return self._get_series_list_from_array2dim() raise ValueError(\"arrays larger than 2D are not supported\")","title":"get_series_list()"},{"location":"reference/ipyvizzu/data/converters/numpy/type_alias/","text":"ipyvizzu.data.converters.numpy.type_alias This module provides typing aliases for numpy converter. ipyvizzu.data.converters.numpy.type_alias.Index = int module-attribute Represents the index of a column. ipyvizzu.data.converters.numpy.type_alias.Name = str module-attribute Represents the name of a column. ipyvizzu.data.converters.numpy.type_alias.DType = type module-attribute Represents the dtype of a column. ipyvizzu.data.converters.numpy.type_alias.ColumnName = Union[Name, Dict[Index, Name]] module-attribute Represents a column name. It is a dictionary of Index:Name pairs or for single-dimensional arrays, it can be just a Name. ipyvizzu.data.converters.numpy.type_alias.ColumnDtype = Union[DType, Dict[Index, DType]] module-attribute Represents a column dtype. It is a dictionary of Index:DType pairs or for single-dimensional arrays, it can be just a DType. ipyvizzu.data.converters.numpy.type_alias.ColumnConfig = TypeVar('ColumnConfig', Name, DType) module-attribute Represents a column config. It can be Name or DType.","title":"Type alias"},{"location":"reference/ipyvizzu/data/converters/numpy/type_alias/#ipyvizzu.data.converters.numpy.type_alias","text":"This module provides typing aliases for numpy converter.","title":"type_alias"},{"location":"reference/ipyvizzu/data/converters/numpy/type_alias/#ipyvizzu.data.converters.numpy.type_alias.Index","text":"Represents the index of a column.","title":"Index"},{"location":"reference/ipyvizzu/data/converters/numpy/type_alias/#ipyvizzu.data.converters.numpy.type_alias.Name","text":"Represents the name of a column.","title":"Name"},{"location":"reference/ipyvizzu/data/converters/numpy/type_alias/#ipyvizzu.data.converters.numpy.type_alias.DType","text":"Represents the dtype of a column.","title":"DType"},{"location":"reference/ipyvizzu/data/converters/numpy/type_alias/#ipyvizzu.data.converters.numpy.type_alias.ColumnName","text":"Represents a column name. It is a dictionary of Index:Name pairs or for single-dimensional arrays, it can be just a Name.","title":"ColumnName"},{"location":"reference/ipyvizzu/data/converters/numpy/type_alias/#ipyvizzu.data.converters.numpy.type_alias.ColumnDtype","text":"Represents a column dtype. It is a dictionary of Index:DType pairs or for single-dimensional arrays, it can be just a DType.","title":"ColumnDtype"},{"location":"reference/ipyvizzu/data/converters/numpy/type_alias/#ipyvizzu.data.converters.numpy.type_alias.ColumnConfig","text":"Represents a column config. It can be Name or DType.","title":"ColumnConfig"},{"location":"reference/ipyvizzu/data/converters/pandas/","text":"ipyvizzu.data.converters.pandas This module provides modules for pandas converter. ipyvizzu.data.converters.pandas.protocol This module provides protocol classes for pandas data frame converter. PandasDataFrame Bases: Protocol Represents a pandas DataFrame Protocol. Source code in src/ipyvizzu/data/converters/pandas/protocol.py @runtime_checkable class PandasDataFrame(Protocol): \"\"\" Represents a pandas DataFrame Protocol. \"\"\" # pylint: disable=too-few-public-methods index: Any columns: Sequence[str] sample: Callable[..., Any] __len__: Callable[[], int] __getitem__: Callable[[Any], Any] PandasSeries Bases: Protocol Represents a pandas Series Protocol. Source code in src/ipyvizzu/data/converters/pandas/protocol.py @runtime_checkable class PandasSeries(Protocol): \"\"\" Represents a pandas Series Protocol. \"\"\" # pylint: disable=too-few-public-methods index: Any values: Any dtype: Any __len__: Callable[[], int] __getitem__: Callable[[Any], Any] ipyvizzu.data.converters.pandas.converter This module provides the PandasDataFrameConverter class, which allows converting a pandas DataFrame or Series into a list of dictionaries representing series. PandasDataFrameConverter Bases: DataFrameConverter Converts a pandas DataFrame or Series into a list of dictionaries representing series. Each dictionary contains information about the series name , values and type . Parameters: Name Type Description Default df Union [ pandas . DataFrame , pandas . Series ] The pandas DataFrame or Series to convert. required default_measure_value MeasureValue Default value to use for missing measure values. Defaults to 0. NAN_MEASURE default_dimension_value DimensionValue Default value to use for missing dimension values. Defaults to an empty string. NAN_DIMENSION max_rows int The maximum number of rows to include in the converted series list. If the df contains more rows, a random sample of the given number of rows will be taken. MAX_ROWS include_index Optional [ str ] Name for the index column to include as a series. If provided, the index column will be added. Defaults to None. None Example Get series list from DataFrame columns: converter = PandasDataFrameConverter(df) series_list = converter.get_series_list() Source code in src/ipyvizzu/data/converters/pandas/converter.py class PandasDataFrameConverter(DataFrameConverter): \"\"\" Converts a `pandas` `DataFrame` or `Series` into a list of dictionaries representing series. Each dictionary contains information about the series `name`, `values` and `type`. Parameters: df: The `pandas` `DataFrame` or `Series` to convert. default_measure_value: Default value to use for missing measure values. Defaults to 0. default_dimension_value: Default value to use for missing dimension values. Defaults to an empty string. max_rows: The maximum number of rows to include in the converted series list. If the `df` contains more rows, a random sample of the given number of rows will be taken. include_index: Name for the index column to include as a series. If provided, the index column will be added. Defaults to None. Example: Get series list from `DataFrame` columns: converter = PandasDataFrameConverter(df) series_list = converter.get_series_list() \"\"\" def __init__( self, df: Union[\"pandas.DataFrame\", \"pandas.Series\"], # type: ignore default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, max_rows: int = MAX_ROWS, include_index: Optional[str] = None, ) -> None: # pylint: disable=too-many-arguments super().__init__(default_measure_value, default_dimension_value, max_rows) self._pd = self._get_pandas() self._df = self._get_sampled_df( self._convert_to_df(df) if isinstance(df, PandasSeries) else df ) self._include_index = include_index def get_series_list(self) -> List[Series]: \"\"\" Convert the `DataFrame` columns to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" series_list = super().get_series_list() index_series = self.get_series_from_index() return index_series + series_list def get_series_from_index(self) -> List[Series]: \"\"\" Convert the `DataFrame` index to a dictionary representing a series, if `include_index` is provided. Returns: A dictionary representing the index series with `name`, `values` and `type` keys. Returns `None` if `include_index` is not provided. \"\"\" if not self._include_index or self._df.index.empty: return [] df = self._pd.DataFrame({self._include_index: self._df.index}) index_series_converter = PandasDataFrameConverter( df, self._default_measure_value, self._default_dimension_value ) return index_series_converter.get_series_list() def _get_pandas(self) -> ModuleType: try: import pandas as pd # pylint: disable=import-outside-toplevel return pd except ImportError as error: raise ImportError( \"pandas is not available. Please install pandas to use this feature.\" ) from error def _convert_to_df(self, series: \"pandas.Series\") -> \"pandas.Dataframe\": # type: ignore if series.empty: return self._pd.DataFrame() return self._pd.DataFrame(series) def _get_sampled_df(self, df: \"pandas.DataFrame\") -> \"pandas.DataFrame\": # type: ignore row_number = len(df) if row_number > self._max_rows: frac = self._max_rows / row_number sampled_df = df.sample( replace=False, frac=frac, random_state=42, ) return sampled_df return df def _get_columns(self) -> List[str]: return self._df.columns def _convert_to_series_values_and_type( self, obj: str # type: ignore ) -> Tuple[SeriesValues, InferType]: column_name = obj column = self._df[column_name] if self._pd.api.types.is_numeric_dtype(column.dtype): return self._convert_to_measure_values(column), InferType.MEASURE return self._convert_to_dimension_values(column), InferType.DIMENSION def _convert_to_measure_values( self, obj: \"pandas.DataFrame\" # type: ignore ) -> List[MeasureValue]: column = obj return column.fillna(self._default_measure_value).astype(float).values.tolist() def _convert_to_dimension_values( self, obj: \"pandas.DataFrame\" # type: ignore ) -> List[DimensionValue]: column = obj return column.fillna(self._default_dimension_value).astype(str).values.tolist() get_series_list() Convert the DataFrame columns to a list of dictionaries representing series. Returns: Type Description List [ Series ] A list of dictionaries representing series, List [ Series ] where each dictionary has name , values and type keys. Source code in src/ipyvizzu/data/converters/pandas/converter.py def get_series_list(self) -> List[Series]: \"\"\" Convert the `DataFrame` columns to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" series_list = super().get_series_list() index_series = self.get_series_from_index() return index_series + series_list get_series_from_index() Convert the DataFrame index to a dictionary representing a series, if include_index is provided. Returns: Type Description List [ Series ] A dictionary representing the index series with name , values and type keys. List [ Series ] Returns None if include_index is not provided. Source code in src/ipyvizzu/data/converters/pandas/converter.py def get_series_from_index(self) -> List[Series]: \"\"\" Convert the `DataFrame` index to a dictionary representing a series, if `include_index` is provided. Returns: A dictionary representing the index series with `name`, `values` and `type` keys. Returns `None` if `include_index` is not provided. \"\"\" if not self._include_index or self._df.index.empty: return [] df = self._pd.DataFrame({self._include_index: self._df.index}) index_series_converter = PandasDataFrameConverter( df, self._default_measure_value, self._default_dimension_value ) return index_series_converter.get_series_list()","title":"Pandas"},{"location":"reference/ipyvizzu/data/converters/pandas/#ipyvizzu.data.converters.pandas","text":"This module provides modules for pandas converter.","title":"pandas"},{"location":"reference/ipyvizzu/data/converters/pandas/#ipyvizzu.data.converters.pandas.protocol","text":"This module provides protocol classes for pandas data frame converter.","title":"protocol"},{"location":"reference/ipyvizzu/data/converters/pandas/#ipyvizzu.data.converters.pandas.protocol.PandasDataFrame","text":"Bases: Protocol Represents a pandas DataFrame Protocol. Source code in src/ipyvizzu/data/converters/pandas/protocol.py @runtime_checkable class PandasDataFrame(Protocol): \"\"\" Represents a pandas DataFrame Protocol. \"\"\" # pylint: disable=too-few-public-methods index: Any columns: Sequence[str] sample: Callable[..., Any] __len__: Callable[[], int] __getitem__: Callable[[Any], Any]","title":"PandasDataFrame"},{"location":"reference/ipyvizzu/data/converters/pandas/#ipyvizzu.data.converters.pandas.protocol.PandasSeries","text":"Bases: Protocol Represents a pandas Series Protocol. Source code in src/ipyvizzu/data/converters/pandas/protocol.py @runtime_checkable class PandasSeries(Protocol): \"\"\" Represents a pandas Series Protocol. \"\"\" # pylint: disable=too-few-public-methods index: Any values: Any dtype: Any __len__: Callable[[], int] __getitem__: Callable[[Any], Any]","title":"PandasSeries"},{"location":"reference/ipyvizzu/data/converters/pandas/#ipyvizzu.data.converters.pandas.converter","text":"This module provides the PandasDataFrameConverter class, which allows converting a pandas DataFrame or Series into a list of dictionaries representing series.","title":"converter"},{"location":"reference/ipyvizzu/data/converters/pandas/#ipyvizzu.data.converters.pandas.converter.PandasDataFrameConverter","text":"Bases: DataFrameConverter Converts a pandas DataFrame or Series into a list of dictionaries representing series. Each dictionary contains information about the series name , values and type . Parameters: Name Type Description Default df Union [ pandas . DataFrame , pandas . Series ] The pandas DataFrame or Series to convert. required default_measure_value MeasureValue Default value to use for missing measure values. Defaults to 0. NAN_MEASURE default_dimension_value DimensionValue Default value to use for missing dimension values. Defaults to an empty string. NAN_DIMENSION max_rows int The maximum number of rows to include in the converted series list. If the df contains more rows, a random sample of the given number of rows will be taken. MAX_ROWS include_index Optional [ str ] Name for the index column to include as a series. If provided, the index column will be added. Defaults to None. None Example Get series list from DataFrame columns: converter = PandasDataFrameConverter(df) series_list = converter.get_series_list() Source code in src/ipyvizzu/data/converters/pandas/converter.py class PandasDataFrameConverter(DataFrameConverter): \"\"\" Converts a `pandas` `DataFrame` or `Series` into a list of dictionaries representing series. Each dictionary contains information about the series `name`, `values` and `type`. Parameters: df: The `pandas` `DataFrame` or `Series` to convert. default_measure_value: Default value to use for missing measure values. Defaults to 0. default_dimension_value: Default value to use for missing dimension values. Defaults to an empty string. max_rows: The maximum number of rows to include in the converted series list. If the `df` contains more rows, a random sample of the given number of rows will be taken. include_index: Name for the index column to include as a series. If provided, the index column will be added. Defaults to None. Example: Get series list from `DataFrame` columns: converter = PandasDataFrameConverter(df) series_list = converter.get_series_list() \"\"\" def __init__( self, df: Union[\"pandas.DataFrame\", \"pandas.Series\"], # type: ignore default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, max_rows: int = MAX_ROWS, include_index: Optional[str] = None, ) -> None: # pylint: disable=too-many-arguments super().__init__(default_measure_value, default_dimension_value, max_rows) self._pd = self._get_pandas() self._df = self._get_sampled_df( self._convert_to_df(df) if isinstance(df, PandasSeries) else df ) self._include_index = include_index def get_series_list(self) -> List[Series]: \"\"\" Convert the `DataFrame` columns to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" series_list = super().get_series_list() index_series = self.get_series_from_index() return index_series + series_list def get_series_from_index(self) -> List[Series]: \"\"\" Convert the `DataFrame` index to a dictionary representing a series, if `include_index` is provided. Returns: A dictionary representing the index series with `name`, `values` and `type` keys. Returns `None` if `include_index` is not provided. \"\"\" if not self._include_index or self._df.index.empty: return [] df = self._pd.DataFrame({self._include_index: self._df.index}) index_series_converter = PandasDataFrameConverter( df, self._default_measure_value, self._default_dimension_value ) return index_series_converter.get_series_list() def _get_pandas(self) -> ModuleType: try: import pandas as pd # pylint: disable=import-outside-toplevel return pd except ImportError as error: raise ImportError( \"pandas is not available. Please install pandas to use this feature.\" ) from error def _convert_to_df(self, series: \"pandas.Series\") -> \"pandas.Dataframe\": # type: ignore if series.empty: return self._pd.DataFrame() return self._pd.DataFrame(series) def _get_sampled_df(self, df: \"pandas.DataFrame\") -> \"pandas.DataFrame\": # type: ignore row_number = len(df) if row_number > self._max_rows: frac = self._max_rows / row_number sampled_df = df.sample( replace=False, frac=frac, random_state=42, ) return sampled_df return df def _get_columns(self) -> List[str]: return self._df.columns def _convert_to_series_values_and_type( self, obj: str # type: ignore ) -> Tuple[SeriesValues, InferType]: column_name = obj column = self._df[column_name] if self._pd.api.types.is_numeric_dtype(column.dtype): return self._convert_to_measure_values(column), InferType.MEASURE return self._convert_to_dimension_values(column), InferType.DIMENSION def _convert_to_measure_values( self, obj: \"pandas.DataFrame\" # type: ignore ) -> List[MeasureValue]: column = obj return column.fillna(self._default_measure_value).astype(float).values.tolist() def _convert_to_dimension_values( self, obj: \"pandas.DataFrame\" # type: ignore ) -> List[DimensionValue]: column = obj return column.fillna(self._default_dimension_value).astype(str).values.tolist()","title":"PandasDataFrameConverter"},{"location":"reference/ipyvizzu/data/converters/pandas/#ipyvizzu.data.converters.pandas.converter.PandasDataFrameConverter.get_series_list","text":"Convert the DataFrame columns to a list of dictionaries representing series. Returns: Type Description List [ Series ] A list of dictionaries representing series, List [ Series ] where each dictionary has name , values and type keys. Source code in src/ipyvizzu/data/converters/pandas/converter.py def get_series_list(self) -> List[Series]: \"\"\" Convert the `DataFrame` columns to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" series_list = super().get_series_list() index_series = self.get_series_from_index() return index_series + series_list","title":"get_series_list()"},{"location":"reference/ipyvizzu/data/converters/pandas/#ipyvizzu.data.converters.pandas.converter.PandasDataFrameConverter.get_series_from_index","text":"Convert the DataFrame index to a dictionary representing a series, if include_index is provided. Returns: Type Description List [ Series ] A dictionary representing the index series with name , values and type keys. List [ Series ] Returns None if include_index is not provided. Source code in src/ipyvizzu/data/converters/pandas/converter.py def get_series_from_index(self) -> List[Series]: \"\"\" Convert the `DataFrame` index to a dictionary representing a series, if `include_index` is provided. Returns: A dictionary representing the index series with `name`, `values` and `type` keys. Returns `None` if `include_index` is not provided. \"\"\" if not self._include_index or self._df.index.empty: return [] df = self._pd.DataFrame({self._include_index: self._df.index}) index_series_converter = PandasDataFrameConverter( df, self._default_measure_value, self._default_dimension_value ) return index_series_converter.get_series_list()","title":"get_series_from_index()"},{"location":"reference/ipyvizzu/data/converters/pandas/converter/","text":"ipyvizzu.data.converters.pandas.converter This module provides the PandasDataFrameConverter class, which allows converting a pandas DataFrame or Series into a list of dictionaries representing series. ipyvizzu.data.converters.pandas.converter.PandasDataFrameConverter Bases: DataFrameConverter Converts a pandas DataFrame or Series into a list of dictionaries representing series. Each dictionary contains information about the series name , values and type . Parameters: Name Type Description Default df Union [ pandas . DataFrame , pandas . Series ] The pandas DataFrame or Series to convert. required default_measure_value MeasureValue Default value to use for missing measure values. Defaults to 0. NAN_MEASURE default_dimension_value DimensionValue Default value to use for missing dimension values. Defaults to an empty string. NAN_DIMENSION max_rows int The maximum number of rows to include in the converted series list. If the df contains more rows, a random sample of the given number of rows will be taken. MAX_ROWS include_index Optional [ str ] Name for the index column to include as a series. If provided, the index column will be added. Defaults to None. None Example Get series list from DataFrame columns: converter = PandasDataFrameConverter(df) series_list = converter.get_series_list() Source code in src/ipyvizzu/data/converters/pandas/converter.py class PandasDataFrameConverter(DataFrameConverter): \"\"\" Converts a `pandas` `DataFrame` or `Series` into a list of dictionaries representing series. Each dictionary contains information about the series `name`, `values` and `type`. Parameters: df: The `pandas` `DataFrame` or `Series` to convert. default_measure_value: Default value to use for missing measure values. Defaults to 0. default_dimension_value: Default value to use for missing dimension values. Defaults to an empty string. max_rows: The maximum number of rows to include in the converted series list. If the `df` contains more rows, a random sample of the given number of rows will be taken. include_index: Name for the index column to include as a series. If provided, the index column will be added. Defaults to None. Example: Get series list from `DataFrame` columns: converter = PandasDataFrameConverter(df) series_list = converter.get_series_list() \"\"\" def __init__( self, df: Union[\"pandas.DataFrame\", \"pandas.Series\"], # type: ignore default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, max_rows: int = MAX_ROWS, include_index: Optional[str] = None, ) -> None: # pylint: disable=too-many-arguments super().__init__(default_measure_value, default_dimension_value, max_rows) self._pd = self._get_pandas() self._df = self._get_sampled_df( self._convert_to_df(df) if isinstance(df, PandasSeries) else df ) self._include_index = include_index def get_series_list(self) -> List[Series]: \"\"\" Convert the `DataFrame` columns to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" series_list = super().get_series_list() index_series = self.get_series_from_index() return index_series + series_list def get_series_from_index(self) -> List[Series]: \"\"\" Convert the `DataFrame` index to a dictionary representing a series, if `include_index` is provided. Returns: A dictionary representing the index series with `name`, `values` and `type` keys. Returns `None` if `include_index` is not provided. \"\"\" if not self._include_index or self._df.index.empty: return [] df = self._pd.DataFrame({self._include_index: self._df.index}) index_series_converter = PandasDataFrameConverter( df, self._default_measure_value, self._default_dimension_value ) return index_series_converter.get_series_list() def _get_pandas(self) -> ModuleType: try: import pandas as pd # pylint: disable=import-outside-toplevel return pd except ImportError as error: raise ImportError( \"pandas is not available. Please install pandas to use this feature.\" ) from error def _convert_to_df(self, series: \"pandas.Series\") -> \"pandas.Dataframe\": # type: ignore if series.empty: return self._pd.DataFrame() return self._pd.DataFrame(series) def _get_sampled_df(self, df: \"pandas.DataFrame\") -> \"pandas.DataFrame\": # type: ignore row_number = len(df) if row_number > self._max_rows: frac = self._max_rows / row_number sampled_df = df.sample( replace=False, frac=frac, random_state=42, ) return sampled_df return df def _get_columns(self) -> List[str]: return self._df.columns def _convert_to_series_values_and_type( self, obj: str # type: ignore ) -> Tuple[SeriesValues, InferType]: column_name = obj column = self._df[column_name] if self._pd.api.types.is_numeric_dtype(column.dtype): return self._convert_to_measure_values(column), InferType.MEASURE return self._convert_to_dimension_values(column), InferType.DIMENSION def _convert_to_measure_values( self, obj: \"pandas.DataFrame\" # type: ignore ) -> List[MeasureValue]: column = obj return column.fillna(self._default_measure_value).astype(float).values.tolist() def _convert_to_dimension_values( self, obj: \"pandas.DataFrame\" # type: ignore ) -> List[DimensionValue]: column = obj return column.fillna(self._default_dimension_value).astype(str).values.tolist() get_series_list() Convert the DataFrame columns to a list of dictionaries representing series. Returns: Type Description List [ Series ] A list of dictionaries representing series, List [ Series ] where each dictionary has name , values and type keys. Source code in src/ipyvizzu/data/converters/pandas/converter.py def get_series_list(self) -> List[Series]: \"\"\" Convert the `DataFrame` columns to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" series_list = super().get_series_list() index_series = self.get_series_from_index() return index_series + series_list get_series_from_index() Convert the DataFrame index to a dictionary representing a series, if include_index is provided. Returns: Type Description List [ Series ] A dictionary representing the index series with name , values and type keys. List [ Series ] Returns None if include_index is not provided. Source code in src/ipyvizzu/data/converters/pandas/converter.py def get_series_from_index(self) -> List[Series]: \"\"\" Convert the `DataFrame` index to a dictionary representing a series, if `include_index` is provided. Returns: A dictionary representing the index series with `name`, `values` and `type` keys. Returns `None` if `include_index` is not provided. \"\"\" if not self._include_index or self._df.index.empty: return [] df = self._pd.DataFrame({self._include_index: self._df.index}) index_series_converter = PandasDataFrameConverter( df, self._default_measure_value, self._default_dimension_value ) return index_series_converter.get_series_list()","title":"Converter"},{"location":"reference/ipyvizzu/data/converters/pandas/converter/#ipyvizzu.data.converters.pandas.converter","text":"This module provides the PandasDataFrameConverter class, which allows converting a pandas DataFrame or Series into a list of dictionaries representing series.","title":"converter"},{"location":"reference/ipyvizzu/data/converters/pandas/converter/#ipyvizzu.data.converters.pandas.converter.PandasDataFrameConverter","text":"Bases: DataFrameConverter Converts a pandas DataFrame or Series into a list of dictionaries representing series. Each dictionary contains information about the series name , values and type . Parameters: Name Type Description Default df Union [ pandas . DataFrame , pandas . Series ] The pandas DataFrame or Series to convert. required default_measure_value MeasureValue Default value to use for missing measure values. Defaults to 0. NAN_MEASURE default_dimension_value DimensionValue Default value to use for missing dimension values. Defaults to an empty string. NAN_DIMENSION max_rows int The maximum number of rows to include in the converted series list. If the df contains more rows, a random sample of the given number of rows will be taken. MAX_ROWS include_index Optional [ str ] Name for the index column to include as a series. If provided, the index column will be added. Defaults to None. None Example Get series list from DataFrame columns: converter = PandasDataFrameConverter(df) series_list = converter.get_series_list() Source code in src/ipyvizzu/data/converters/pandas/converter.py class PandasDataFrameConverter(DataFrameConverter): \"\"\" Converts a `pandas` `DataFrame` or `Series` into a list of dictionaries representing series. Each dictionary contains information about the series `name`, `values` and `type`. Parameters: df: The `pandas` `DataFrame` or `Series` to convert. default_measure_value: Default value to use for missing measure values. Defaults to 0. default_dimension_value: Default value to use for missing dimension values. Defaults to an empty string. max_rows: The maximum number of rows to include in the converted series list. If the `df` contains more rows, a random sample of the given number of rows will be taken. include_index: Name for the index column to include as a series. If provided, the index column will be added. Defaults to None. Example: Get series list from `DataFrame` columns: converter = PandasDataFrameConverter(df) series_list = converter.get_series_list() \"\"\" def __init__( self, df: Union[\"pandas.DataFrame\", \"pandas.Series\"], # type: ignore default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, max_rows: int = MAX_ROWS, include_index: Optional[str] = None, ) -> None: # pylint: disable=too-many-arguments super().__init__(default_measure_value, default_dimension_value, max_rows) self._pd = self._get_pandas() self._df = self._get_sampled_df( self._convert_to_df(df) if isinstance(df, PandasSeries) else df ) self._include_index = include_index def get_series_list(self) -> List[Series]: \"\"\" Convert the `DataFrame` columns to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" series_list = super().get_series_list() index_series = self.get_series_from_index() return index_series + series_list def get_series_from_index(self) -> List[Series]: \"\"\" Convert the `DataFrame` index to a dictionary representing a series, if `include_index` is provided. Returns: A dictionary representing the index series with `name`, `values` and `type` keys. Returns `None` if `include_index` is not provided. \"\"\" if not self._include_index or self._df.index.empty: return [] df = self._pd.DataFrame({self._include_index: self._df.index}) index_series_converter = PandasDataFrameConverter( df, self._default_measure_value, self._default_dimension_value ) return index_series_converter.get_series_list() def _get_pandas(self) -> ModuleType: try: import pandas as pd # pylint: disable=import-outside-toplevel return pd except ImportError as error: raise ImportError( \"pandas is not available. Please install pandas to use this feature.\" ) from error def _convert_to_df(self, series: \"pandas.Series\") -> \"pandas.Dataframe\": # type: ignore if series.empty: return self._pd.DataFrame() return self._pd.DataFrame(series) def _get_sampled_df(self, df: \"pandas.DataFrame\") -> \"pandas.DataFrame\": # type: ignore row_number = len(df) if row_number > self._max_rows: frac = self._max_rows / row_number sampled_df = df.sample( replace=False, frac=frac, random_state=42, ) return sampled_df return df def _get_columns(self) -> List[str]: return self._df.columns def _convert_to_series_values_and_type( self, obj: str # type: ignore ) -> Tuple[SeriesValues, InferType]: column_name = obj column = self._df[column_name] if self._pd.api.types.is_numeric_dtype(column.dtype): return self._convert_to_measure_values(column), InferType.MEASURE return self._convert_to_dimension_values(column), InferType.DIMENSION def _convert_to_measure_values( self, obj: \"pandas.DataFrame\" # type: ignore ) -> List[MeasureValue]: column = obj return column.fillna(self._default_measure_value).astype(float).values.tolist() def _convert_to_dimension_values( self, obj: \"pandas.DataFrame\" # type: ignore ) -> List[DimensionValue]: column = obj return column.fillna(self._default_dimension_value).astype(str).values.tolist()","title":"PandasDataFrameConverter"},{"location":"reference/ipyvizzu/data/converters/pandas/converter/#ipyvizzu.data.converters.pandas.converter.PandasDataFrameConverter.get_series_list","text":"Convert the DataFrame columns to a list of dictionaries representing series. Returns: Type Description List [ Series ] A list of dictionaries representing series, List [ Series ] where each dictionary has name , values and type keys. Source code in src/ipyvizzu/data/converters/pandas/converter.py def get_series_list(self) -> List[Series]: \"\"\" Convert the `DataFrame` columns to a list of dictionaries representing series. Returns: A list of dictionaries representing series, where each dictionary has `name`, `values` and `type` keys. \"\"\" series_list = super().get_series_list() index_series = self.get_series_from_index() return index_series + series_list","title":"get_series_list()"},{"location":"reference/ipyvizzu/data/converters/pandas/converter/#ipyvizzu.data.converters.pandas.converter.PandasDataFrameConverter.get_series_from_index","text":"Convert the DataFrame index to a dictionary representing a series, if include_index is provided. Returns: Type Description List [ Series ] A dictionary representing the index series with name , values and type keys. List [ Series ] Returns None if include_index is not provided. Source code in src/ipyvizzu/data/converters/pandas/converter.py def get_series_from_index(self) -> List[Series]: \"\"\" Convert the `DataFrame` index to a dictionary representing a series, if `include_index` is provided. Returns: A dictionary representing the index series with `name`, `values` and `type` keys. Returns `None` if `include_index` is not provided. \"\"\" if not self._include_index or self._df.index.empty: return [] df = self._pd.DataFrame({self._include_index: self._df.index}) index_series_converter = PandasDataFrameConverter( df, self._default_measure_value, self._default_dimension_value ) return index_series_converter.get_series_list()","title":"get_series_from_index()"},{"location":"reference/ipyvizzu/data/converters/pandas/protocol/","text":"ipyvizzu.data.converters.pandas.protocol This module provides protocol classes for pandas data frame converter. ipyvizzu.data.converters.pandas.protocol.PandasDataFrame Bases: Protocol Represents a pandas DataFrame Protocol. Source code in src/ipyvizzu/data/converters/pandas/protocol.py @runtime_checkable class PandasDataFrame(Protocol): \"\"\" Represents a pandas DataFrame Protocol. \"\"\" # pylint: disable=too-few-public-methods index: Any columns: Sequence[str] sample: Callable[..., Any] __len__: Callable[[], int] __getitem__: Callable[[Any], Any] ipyvizzu.data.converters.pandas.protocol.PandasSeries Bases: Protocol Represents a pandas Series Protocol. Source code in src/ipyvizzu/data/converters/pandas/protocol.py @runtime_checkable class PandasSeries(Protocol): \"\"\" Represents a pandas Series Protocol. \"\"\" # pylint: disable=too-few-public-methods index: Any values: Any dtype: Any __len__: Callable[[], int] __getitem__: Callable[[Any], Any]","title":"Protocol"},{"location":"reference/ipyvizzu/data/converters/pandas/protocol/#ipyvizzu.data.converters.pandas.protocol","text":"This module provides protocol classes for pandas data frame converter.","title":"protocol"},{"location":"reference/ipyvizzu/data/converters/pandas/protocol/#ipyvizzu.data.converters.pandas.protocol.PandasDataFrame","text":"Bases: Protocol Represents a pandas DataFrame Protocol. Source code in src/ipyvizzu/data/converters/pandas/protocol.py @runtime_checkable class PandasDataFrame(Protocol): \"\"\" Represents a pandas DataFrame Protocol. \"\"\" # pylint: disable=too-few-public-methods index: Any columns: Sequence[str] sample: Callable[..., Any] __len__: Callable[[], int] __getitem__: Callable[[Any], Any]","title":"PandasDataFrame"},{"location":"reference/ipyvizzu/data/converters/pandas/protocol/#ipyvizzu.data.converters.pandas.protocol.PandasSeries","text":"Bases: Protocol Represents a pandas Series Protocol. Source code in src/ipyvizzu/data/converters/pandas/protocol.py @runtime_checkable class PandasSeries(Protocol): \"\"\" Represents a pandas Series Protocol. \"\"\" # pylint: disable=too-few-public-methods index: Any values: Any dtype: Any __len__: Callable[[], int] __getitem__: Callable[[Any], Any]","title":"PandasSeries"},{"location":"reference/ipyvizzu/data/converters/spark/","text":"ipyvizzu.data.converters.spark This module provides modules for pyspark converter. ipyvizzu.data.converters.spark.protocol This module provides protocol classes for pandas data frame converter. SparkDataFrame Bases: Protocol Represents a pyspark DataFrame Protocol. Source code in src/ipyvizzu/data/converters/spark/protocol.py @runtime_checkable class SparkDataFrame(Protocol): \"\"\" Represents a pyspark DataFrame Protocol. \"\"\" # pylint: disable=too-few-public-methods columns: Sequence[str] count: Callable[..., int] sample: Callable[..., Any] limit: Callable[..., Any] select: Callable[..., Any] withColumn: Callable[..., Any] rdd: Any ipyvizzu.data.converters.spark.converter This module provides the SparkDataFrameConverter class, which allows converting a pyspark DataFrame into a list of dictionaries representing series. SparkDataFrameConverter Bases: DataFrameConverter Converts a pyspark DataFrame into a list of dictionaries representing series. Each dictionary contains information about the series name , values and type . Parameters: Name Type Description Default df pyspark . sql . DataFrame The pyspark DataFrame to convert. required default_measure_value MeasureValue Default value to use for missing measure values. Defaults to 0. NAN_MEASURE default_dimension_value DimensionValue Default value to use for missing dimension values. Defaults to an empty string. NAN_DIMENSION max_rows int The maximum number of rows to include in the converted series list. If the df contains more rows, a random sample of the given number of rows (approximately) will be taken. MAX_ROWS Example Get series list from DataFrame columns: converter = SparkDataFrameConverter(df) series_list = converter.get_series_list() Source code in src/ipyvizzu/data/converters/spark/converter.py class SparkDataFrameConverter(DataFrameConverter): \"\"\" Converts a `pyspark` `DataFrame` into a list of dictionaries representing series. Each dictionary contains information about the series `name`, `values` and `type`. Parameters: df: The `pyspark` `DataFrame` to convert. default_measure_value: Default value to use for missing measure values. Defaults to 0. default_dimension_value: Default value to use for missing dimension values. Defaults to an empty string. max_rows: The maximum number of rows to include in the converted series list. If the `df` contains more rows, a random sample of the given number of rows (approximately) will be taken. Example: Get series list from `DataFrame` columns: converter = SparkDataFrameConverter(df) series_list = converter.get_series_list() \"\"\" # pylint: disable=too-few-public-methods def __init__( self, df: \"pyspark.sql.DataFrame\", # type: ignore default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, max_rows: int = MAX_ROWS, ) -> None: super().__init__(default_measure_value, default_dimension_value, max_rows) self._pyspark, self._pyspark_func = self._get_pyspark() self._df = self._get_sampled_df(df) def _get_pyspark(self) -> Tuple[ModuleType, ModuleType]: try: import pyspark # pylint: disable=import-outside-toplevel from pyspark.sql import functions # pylint: disable=import-outside-toplevel return pyspark, functions except ImportError as error: raise ImportError( \"pyspark is not available. Please install pyspark to use this feature.\" ) from error def _get_sampled_df( self, df: \"pyspark.sql.DataFrame\" # type: ignore ) -> \"pyspark.sql.DataFrame\": # type: ignore row_number = df.count() if row_number > self._max_rows: fraction = self._max_rows / row_number sample_df = df.sample(withReplacement=False, fraction=fraction, seed=42) return sample_df.limit(self._max_rows) return df def _get_columns(self) -> List[str]: return self._df.columns def _convert_to_series_values_and_type( self, obj: str ) -> Tuple[SeriesValues, InferType]: column_name = obj column = self._df.select(column_name) integer_type = self._pyspark.sql.types.IntegerType double_type = self._pyspark.sql.types.DoubleType if isinstance(column.schema[column_name].dataType, (integer_type, double_type)): return self._convert_to_measure_values(column_name), InferType.MEASURE return self._convert_to_dimension_values(column_name), InferType.DIMENSION def _convert_to_measure_values(self, obj: str) -> List[MeasureValue]: column_name = obj func = self._pyspark_func df = self._df.withColumn( column_name, func.when( func.col(column_name).isNull(), self._default_measure_value ).otherwise(func.col(column_name)), ) df_rdd = ( df.withColumn(column_name, func.col(column_name).cast(\"float\")) .select(column_name) .rdd ) return df_rdd.flatMap(list).collect() def _convert_to_dimension_values(self, obj: str) -> List[DimensionValue]: column_name = obj func = self._pyspark_func df = self._df.withColumn( column_name, func.when( func.col(column_name).isNull(), self._default_dimension_value ).otherwise(func.col(column_name)), ) df_rdd = ( df.withColumn(column_name, func.col(column_name).cast(\"string\")) .select(column_name) .rdd ) return df_rdd.flatMap(list).collect()","title":"Spark"},{"location":"reference/ipyvizzu/data/converters/spark/#ipyvizzu.data.converters.spark","text":"This module provides modules for pyspark converter.","title":"spark"},{"location":"reference/ipyvizzu/data/converters/spark/#ipyvizzu.data.converters.spark.protocol","text":"This module provides protocol classes for pandas data frame converter.","title":"protocol"},{"location":"reference/ipyvizzu/data/converters/spark/#ipyvizzu.data.converters.spark.protocol.SparkDataFrame","text":"Bases: Protocol Represents a pyspark DataFrame Protocol. Source code in src/ipyvizzu/data/converters/spark/protocol.py @runtime_checkable class SparkDataFrame(Protocol): \"\"\" Represents a pyspark DataFrame Protocol. \"\"\" # pylint: disable=too-few-public-methods columns: Sequence[str] count: Callable[..., int] sample: Callable[..., Any] limit: Callable[..., Any] select: Callable[..., Any] withColumn: Callable[..., Any] rdd: Any","title":"SparkDataFrame"},{"location":"reference/ipyvizzu/data/converters/spark/#ipyvizzu.data.converters.spark.converter","text":"This module provides the SparkDataFrameConverter class, which allows converting a pyspark DataFrame into a list of dictionaries representing series.","title":"converter"},{"location":"reference/ipyvizzu/data/converters/spark/#ipyvizzu.data.converters.spark.converter.SparkDataFrameConverter","text":"Bases: DataFrameConverter Converts a pyspark DataFrame into a list of dictionaries representing series. Each dictionary contains information about the series name , values and type . Parameters: Name Type Description Default df pyspark . sql . DataFrame The pyspark DataFrame to convert. required default_measure_value MeasureValue Default value to use for missing measure values. Defaults to 0. NAN_MEASURE default_dimension_value DimensionValue Default value to use for missing dimension values. Defaults to an empty string. NAN_DIMENSION max_rows int The maximum number of rows to include in the converted series list. If the df contains more rows, a random sample of the given number of rows (approximately) will be taken. MAX_ROWS Example Get series list from DataFrame columns: converter = SparkDataFrameConverter(df) series_list = converter.get_series_list() Source code in src/ipyvizzu/data/converters/spark/converter.py class SparkDataFrameConverter(DataFrameConverter): \"\"\" Converts a `pyspark` `DataFrame` into a list of dictionaries representing series. Each dictionary contains information about the series `name`, `values` and `type`. Parameters: df: The `pyspark` `DataFrame` to convert. default_measure_value: Default value to use for missing measure values. Defaults to 0. default_dimension_value: Default value to use for missing dimension values. Defaults to an empty string. max_rows: The maximum number of rows to include in the converted series list. If the `df` contains more rows, a random sample of the given number of rows (approximately) will be taken. Example: Get series list from `DataFrame` columns: converter = SparkDataFrameConverter(df) series_list = converter.get_series_list() \"\"\" # pylint: disable=too-few-public-methods def __init__( self, df: \"pyspark.sql.DataFrame\", # type: ignore default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, max_rows: int = MAX_ROWS, ) -> None: super().__init__(default_measure_value, default_dimension_value, max_rows) self._pyspark, self._pyspark_func = self._get_pyspark() self._df = self._get_sampled_df(df) def _get_pyspark(self) -> Tuple[ModuleType, ModuleType]: try: import pyspark # pylint: disable=import-outside-toplevel from pyspark.sql import functions # pylint: disable=import-outside-toplevel return pyspark, functions except ImportError as error: raise ImportError( \"pyspark is not available. Please install pyspark to use this feature.\" ) from error def _get_sampled_df( self, df: \"pyspark.sql.DataFrame\" # type: ignore ) -> \"pyspark.sql.DataFrame\": # type: ignore row_number = df.count() if row_number > self._max_rows: fraction = self._max_rows / row_number sample_df = df.sample(withReplacement=False, fraction=fraction, seed=42) return sample_df.limit(self._max_rows) return df def _get_columns(self) -> List[str]: return self._df.columns def _convert_to_series_values_and_type( self, obj: str ) -> Tuple[SeriesValues, InferType]: column_name = obj column = self._df.select(column_name) integer_type = self._pyspark.sql.types.IntegerType double_type = self._pyspark.sql.types.DoubleType if isinstance(column.schema[column_name].dataType, (integer_type, double_type)): return self._convert_to_measure_values(column_name), InferType.MEASURE return self._convert_to_dimension_values(column_name), InferType.DIMENSION def _convert_to_measure_values(self, obj: str) -> List[MeasureValue]: column_name = obj func = self._pyspark_func df = self._df.withColumn( column_name, func.when( func.col(column_name).isNull(), self._default_measure_value ).otherwise(func.col(column_name)), ) df_rdd = ( df.withColumn(column_name, func.col(column_name).cast(\"float\")) .select(column_name) .rdd ) return df_rdd.flatMap(list).collect() def _convert_to_dimension_values(self, obj: str) -> List[DimensionValue]: column_name = obj func = self._pyspark_func df = self._df.withColumn( column_name, func.when( func.col(column_name).isNull(), self._default_dimension_value ).otherwise(func.col(column_name)), ) df_rdd = ( df.withColumn(column_name, func.col(column_name).cast(\"string\")) .select(column_name) .rdd ) return df_rdd.flatMap(list).collect()","title":"SparkDataFrameConverter"},{"location":"reference/ipyvizzu/data/converters/spark/converter/","text":"ipyvizzu.data.converters.spark.converter This module provides the SparkDataFrameConverter class, which allows converting a pyspark DataFrame into a list of dictionaries representing series. ipyvizzu.data.converters.spark.converter.SparkDataFrameConverter Bases: DataFrameConverter Converts a pyspark DataFrame into a list of dictionaries representing series. Each dictionary contains information about the series name , values and type . Parameters: Name Type Description Default df pyspark . sql . DataFrame The pyspark DataFrame to convert. required default_measure_value MeasureValue Default value to use for missing measure values. Defaults to 0. NAN_MEASURE default_dimension_value DimensionValue Default value to use for missing dimension values. Defaults to an empty string. NAN_DIMENSION max_rows int The maximum number of rows to include in the converted series list. If the df contains more rows, a random sample of the given number of rows (approximately) will be taken. MAX_ROWS Example Get series list from DataFrame columns: converter = SparkDataFrameConverter(df) series_list = converter.get_series_list() Source code in src/ipyvizzu/data/converters/spark/converter.py class SparkDataFrameConverter(DataFrameConverter): \"\"\" Converts a `pyspark` `DataFrame` into a list of dictionaries representing series. Each dictionary contains information about the series `name`, `values` and `type`. Parameters: df: The `pyspark` `DataFrame` to convert. default_measure_value: Default value to use for missing measure values. Defaults to 0. default_dimension_value: Default value to use for missing dimension values. Defaults to an empty string. max_rows: The maximum number of rows to include in the converted series list. If the `df` contains more rows, a random sample of the given number of rows (approximately) will be taken. Example: Get series list from `DataFrame` columns: converter = SparkDataFrameConverter(df) series_list = converter.get_series_list() \"\"\" # pylint: disable=too-few-public-methods def __init__( self, df: \"pyspark.sql.DataFrame\", # type: ignore default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, max_rows: int = MAX_ROWS, ) -> None: super().__init__(default_measure_value, default_dimension_value, max_rows) self._pyspark, self._pyspark_func = self._get_pyspark() self._df = self._get_sampled_df(df) def _get_pyspark(self) -> Tuple[ModuleType, ModuleType]: try: import pyspark # pylint: disable=import-outside-toplevel from pyspark.sql import functions # pylint: disable=import-outside-toplevel return pyspark, functions except ImportError as error: raise ImportError( \"pyspark is not available. Please install pyspark to use this feature.\" ) from error def _get_sampled_df( self, df: \"pyspark.sql.DataFrame\" # type: ignore ) -> \"pyspark.sql.DataFrame\": # type: ignore row_number = df.count() if row_number > self._max_rows: fraction = self._max_rows / row_number sample_df = df.sample(withReplacement=False, fraction=fraction, seed=42) return sample_df.limit(self._max_rows) return df def _get_columns(self) -> List[str]: return self._df.columns def _convert_to_series_values_and_type( self, obj: str ) -> Tuple[SeriesValues, InferType]: column_name = obj column = self._df.select(column_name) integer_type = self._pyspark.sql.types.IntegerType double_type = self._pyspark.sql.types.DoubleType if isinstance(column.schema[column_name].dataType, (integer_type, double_type)): return self._convert_to_measure_values(column_name), InferType.MEASURE return self._convert_to_dimension_values(column_name), InferType.DIMENSION def _convert_to_measure_values(self, obj: str) -> List[MeasureValue]: column_name = obj func = self._pyspark_func df = self._df.withColumn( column_name, func.when( func.col(column_name).isNull(), self._default_measure_value ).otherwise(func.col(column_name)), ) df_rdd = ( df.withColumn(column_name, func.col(column_name).cast(\"float\")) .select(column_name) .rdd ) return df_rdd.flatMap(list).collect() def _convert_to_dimension_values(self, obj: str) -> List[DimensionValue]: column_name = obj func = self._pyspark_func df = self._df.withColumn( column_name, func.when( func.col(column_name).isNull(), self._default_dimension_value ).otherwise(func.col(column_name)), ) df_rdd = ( df.withColumn(column_name, func.col(column_name).cast(\"string\")) .select(column_name) .rdd ) return df_rdd.flatMap(list).collect()","title":"Converter"},{"location":"reference/ipyvizzu/data/converters/spark/converter/#ipyvizzu.data.converters.spark.converter","text":"This module provides the SparkDataFrameConverter class, which allows converting a pyspark DataFrame into a list of dictionaries representing series.","title":"converter"},{"location":"reference/ipyvizzu/data/converters/spark/converter/#ipyvizzu.data.converters.spark.converter.SparkDataFrameConverter","text":"Bases: DataFrameConverter Converts a pyspark DataFrame into a list of dictionaries representing series. Each dictionary contains information about the series name , values and type . Parameters: Name Type Description Default df pyspark . sql . DataFrame The pyspark DataFrame to convert. required default_measure_value MeasureValue Default value to use for missing measure values. Defaults to 0. NAN_MEASURE default_dimension_value DimensionValue Default value to use for missing dimension values. Defaults to an empty string. NAN_DIMENSION max_rows int The maximum number of rows to include in the converted series list. If the df contains more rows, a random sample of the given number of rows (approximately) will be taken. MAX_ROWS Example Get series list from DataFrame columns: converter = SparkDataFrameConverter(df) series_list = converter.get_series_list() Source code in src/ipyvizzu/data/converters/spark/converter.py class SparkDataFrameConverter(DataFrameConverter): \"\"\" Converts a `pyspark` `DataFrame` into a list of dictionaries representing series. Each dictionary contains information about the series `name`, `values` and `type`. Parameters: df: The `pyspark` `DataFrame` to convert. default_measure_value: Default value to use for missing measure values. Defaults to 0. default_dimension_value: Default value to use for missing dimension values. Defaults to an empty string. max_rows: The maximum number of rows to include in the converted series list. If the `df` contains more rows, a random sample of the given number of rows (approximately) will be taken. Example: Get series list from `DataFrame` columns: converter = SparkDataFrameConverter(df) series_list = converter.get_series_list() \"\"\" # pylint: disable=too-few-public-methods def __init__( self, df: \"pyspark.sql.DataFrame\", # type: ignore default_measure_value: MeasureValue = NAN_MEASURE, default_dimension_value: DimensionValue = NAN_DIMENSION, max_rows: int = MAX_ROWS, ) -> None: super().__init__(default_measure_value, default_dimension_value, max_rows) self._pyspark, self._pyspark_func = self._get_pyspark() self._df = self._get_sampled_df(df) def _get_pyspark(self) -> Tuple[ModuleType, ModuleType]: try: import pyspark # pylint: disable=import-outside-toplevel from pyspark.sql import functions # pylint: disable=import-outside-toplevel return pyspark, functions except ImportError as error: raise ImportError( \"pyspark is not available. Please install pyspark to use this feature.\" ) from error def _get_sampled_df( self, df: \"pyspark.sql.DataFrame\" # type: ignore ) -> \"pyspark.sql.DataFrame\": # type: ignore row_number = df.count() if row_number > self._max_rows: fraction = self._max_rows / row_number sample_df = df.sample(withReplacement=False, fraction=fraction, seed=42) return sample_df.limit(self._max_rows) return df def _get_columns(self) -> List[str]: return self._df.columns def _convert_to_series_values_and_type( self, obj: str ) -> Tuple[SeriesValues, InferType]: column_name = obj column = self._df.select(column_name) integer_type = self._pyspark.sql.types.IntegerType double_type = self._pyspark.sql.types.DoubleType if isinstance(column.schema[column_name].dataType, (integer_type, double_type)): return self._convert_to_measure_values(column_name), InferType.MEASURE return self._convert_to_dimension_values(column_name), InferType.DIMENSION def _convert_to_measure_values(self, obj: str) -> List[MeasureValue]: column_name = obj func = self._pyspark_func df = self._df.withColumn( column_name, func.when( func.col(column_name).isNull(), self._default_measure_value ).otherwise(func.col(column_name)), ) df_rdd = ( df.withColumn(column_name, func.col(column_name).cast(\"float\")) .select(column_name) .rdd ) return df_rdd.flatMap(list).collect() def _convert_to_dimension_values(self, obj: str) -> List[DimensionValue]: column_name = obj func = self._pyspark_func df = self._df.withColumn( column_name, func.when( func.col(column_name).isNull(), self._default_dimension_value ).otherwise(func.col(column_name)), ) df_rdd = ( df.withColumn(column_name, func.col(column_name).cast(\"string\")) .select(column_name) .rdd ) return df_rdd.flatMap(list).collect()","title":"SparkDataFrameConverter"},{"location":"reference/ipyvizzu/data/converters/spark/protocol/","text":"ipyvizzu.data.converters.spark.protocol This module provides protocol classes for pandas data frame converter. ipyvizzu.data.converters.spark.protocol.SparkDataFrame Bases: Protocol Represents a pyspark DataFrame Protocol. Source code in src/ipyvizzu/data/converters/spark/protocol.py @runtime_checkable class SparkDataFrame(Protocol): \"\"\" Represents a pyspark DataFrame Protocol. \"\"\" # pylint: disable=too-few-public-methods columns: Sequence[str] count: Callable[..., int] sample: Callable[..., Any] limit: Callable[..., Any] select: Callable[..., Any] withColumn: Callable[..., Any] rdd: Any","title":"Protocol"},{"location":"reference/ipyvizzu/data/converters/spark/protocol/#ipyvizzu.data.converters.spark.protocol","text":"This module provides protocol classes for pandas data frame converter.","title":"protocol"},{"location":"reference/ipyvizzu/data/converters/spark/protocol/#ipyvizzu.data.converters.spark.protocol.SparkDataFrame","text":"Bases: Protocol Represents a pyspark DataFrame Protocol. Source code in src/ipyvizzu/data/converters/spark/protocol.py @runtime_checkable class SparkDataFrame(Protocol): \"\"\" Represents a pyspark DataFrame Protocol. \"\"\" # pylint: disable=too-few-public-methods columns: Sequence[str] count: Callable[..., int] sample: Callable[..., Any] limit: Callable[..., Any] select: Callable[..., Any] withColumn: Callable[..., Any] rdd: Any","title":"SparkDataFrame"},{"location":"reference/ipyvizzu/integrations/","text":"ipyvizzu.integrations A module for integrations. ipyvizzu.integrations.fugue A module for Fugue integration. Example Users should not instantiate this module directly. As long as you installed fugue and ipyvizzu, the extension is auto-registered. from fugue import fsql fsql(''' SELECT a, SUM(b) AS b FROM spark.table GROUP BY a ORDER BY b OUTPUT USING vizzu:bar(x=\"a\", y=\"b\", title=\"title\") ''').run(spark_session)","title":"Integrations"},{"location":"reference/ipyvizzu/integrations/#ipyvizzu.integrations","text":"A module for integrations.","title":"integrations"},{"location":"reference/ipyvizzu/integrations/#ipyvizzu.integrations.fugue","text":"A module for Fugue integration. Example Users should not instantiate this module directly. As long as you installed fugue and ipyvizzu, the extension is auto-registered. from fugue import fsql fsql(''' SELECT a, SUM(b) AS b FROM spark.table GROUP BY a ORDER BY b OUTPUT USING vizzu:bar(x=\"a\", y=\"b\", title=\"title\") ''').run(spark_session)","title":"fugue"},{"location":"reference/ipyvizzu/integrations/fugue/","text":"ipyvizzu.integrations.fugue A module for Fugue integration. Example Users should not instantiate this module directly. As long as you installed fugue and ipyvizzu, the extension is auto-registered. from fugue import fsql fsql(''' SELECT a, SUM(b) AS b FROM spark.table GROUP BY a ORDER BY b OUTPUT USING vizzu:bar(x=\"a\", y=\"b\", title=\"title\") ''').run(spark_session)","title":"Fugue"},{"location":"reference/ipyvizzu/integrations/fugue/#ipyvizzu.integrations.fugue","text":"A module for Fugue integration. Example Users should not instantiate this module directly. As long as you installed fugue and ipyvizzu, the extension is auto-registered. from fugue import fsql fsql(''' SELECT a, SUM(b) AS b FROM spark.table GROUP BY a ORDER BY b OUTPUT USING vizzu:bar(x=\"a\", y=\"b\", title=\"title\") ''').run(spark_session)","title":"fugue"},{"location":"showcases/","text":"Showcases src='https://lib.vizzuhq.com/0.8/showcases/music.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/showcases/musicformats.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/showcases/nadal.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/showcases/sales.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/showcases/titanic.mp4' type='video/mp4'>","title":"Showcases"},{"location":"showcases/#showcases","text":"src='https://lib.vizzuhq.com/0.8/showcases/music.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/showcases/musicformats.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/showcases/nadal.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/showcases/sales.mp4' type='video/mp4'> src='https://lib.vizzuhq.com/0.8/showcases/titanic.mp4' type='video/mp4'>","title":"Showcases"},{"location":"showcases/music/","text":"Music formats import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/showcases/music/music.csv\", dtype={\"Year\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"x\": \"Year\", \"y\": [\"Format\", \"Revenue [m$]\"], \"color\": \"Format\", \"geometry\": \"area\", \"align\": \"center\", \"title\": \"Music Revenue by Format 1973-2020\", } ), Style( { \"plot\": { \"xAxis\": {\"label\": {\"fontSize\": 9, \"angle\": 2.0}}, \"marker\": { \"colorPalette\": \"#b74c20FF #c47f58FF #1c9761FF\" + \" #ea4549FF #875792FF #3562b6FF\" + \" #ee7c34FF #efae3aFF\" }, } } ), ) chart.animate( Config( { \"align\": \"stretch\", \"title\": \"Music Revenue by Format 1973-2020(%)\", } ), delay=1, ) chart.animate( Config( { \"align\": \"center\", \"title\": \"Music Revenue by Format 1973-2020\", } ), delay=1, ) chart.animate(Config({\"split\": True}), delay=1) chart.animate( Data.filter( \"record.Format == 'Vinyl' ||record.Format == 'Streaming'\" ), Config({\"title\": \"Revenue of Vinyl & Streaming 1973-2020\"}), delay=1, ) chart.animate( Data.filter(None), Config( {\"title\": \"Music Revenue by Format 1973-2020\", \"split\": False} ), delay=1, ) chart.animate( Config( { \"x\": \"Year\", \"y\": \"Revenue [m$]\", \"noop\": \"Format\", \"align\": \"none\", \"geometry\": \"line\", } ), delay=1, )","title":"Music formats"},{"location":"showcases/music/#music-formats","text":"import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/showcases/music/music.csv\", dtype={\"Year\": str}, ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"x\": \"Year\", \"y\": [\"Format\", \"Revenue [m$]\"], \"color\": \"Format\", \"geometry\": \"area\", \"align\": \"center\", \"title\": \"Music Revenue by Format 1973-2020\", } ), Style( { \"plot\": { \"xAxis\": {\"label\": {\"fontSize\": 9, \"angle\": 2.0}}, \"marker\": { \"colorPalette\": \"#b74c20FF #c47f58FF #1c9761FF\" + \" #ea4549FF #875792FF #3562b6FF\" + \" #ee7c34FF #efae3aFF\" }, } } ), ) chart.animate( Config( { \"align\": \"stretch\", \"title\": \"Music Revenue by Format 1973-2020(%)\", } ), delay=1, ) chart.animate( Config( { \"align\": \"center\", \"title\": \"Music Revenue by Format 1973-2020\", } ), delay=1, ) chart.animate(Config({\"split\": True}), delay=1) chart.animate( Data.filter( \"record.Format == 'Vinyl' ||record.Format == 'Streaming'\" ), Config({\"title\": \"Revenue of Vinyl & Streaming 1973-2020\"}), delay=1, ) chart.animate( Data.filter(None), Config( {\"title\": \"Music Revenue by Format 1973-2020\", \"split\": False} ), delay=1, ) chart.animate( Config( { \"x\": \"Year\", \"y\": \"Revenue [m$]\", \"noop\": \"Format\", \"align\": \"none\", \"geometry\": \"line\", } ), delay=1, )","title":"Music formats"},{"location":"showcases/musicformats/","text":"Music formats (Year by Year) import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/showcases/musicformats/musicformats.csv\", dtype={\"Year\": str}, ) data = Data() data.add_df(df) config = { \"channels\": { \"y\": { \"set\": [\"Format\"], }, \"x\": {\"set\": [\"Revenue [m$]\"]}, \"label\": {\"set\": [\"Revenue [m$]\"]}, \"color\": {\"set\": [\"Format\"]}, }, \"sort\": \"byValue\", } style = Style( { \"plot\": { \"paddingLeft\": 100, \"paddingTop\": 25, \"yAxis\": { \"color\": \"#ffffff00\", \"label\": {\"paddingRight\": 10}, }, \"xAxis\": { \"title\": {\"color\": \"#ffffff00\"}, \"label\": { \"color\": \"#ffffff00\", \"numberFormat\": \"grouped\", }, }, \"marker\": { \"colorPalette\": \"#b74c20FF #c47f58FF #1c9761FF\" + \" #ea4549FF #875792FF #3562b6FF\" + \" #ee7c34FF #efae3aFF\" }, }, } ) chart = Chart(display=DisplayTarget.END) chart.animate(data, style) for year in range(1973, 2021): config[\"title\"] = f\"Music Revenue by Format - Year by Year {year}\" chart.animate( Data.filter(f\"parseInt(record.Year) == {year}\"), Config(config), duration=0.2, x={\"easing\": \"linear\", \"delay\": 0}, y={\"delay\": 0}, show={\"delay\": 0}, hide={\"delay\": 0}, title={\"duration\": 0, \"delay\": 0}, ) chart.animate( Config( { \"channels\": { \"x\": {\"attach\": [\"Year\"]}, \"label\": {\"set\": None}, } } ), duration=0.3, ) chart.animate( Data.filter(\"record.Year == '2020' || record.Year == '1972'\"), Config({\"title\": \"Lets see the total of the last 47 years\"}), duration=2, ) chart.animate(Config({\"sort\": \"none\"}), delay=0, duration=2) for year in reversed(range(1973, 2020)): chart.animate( Data.filter( f\"parseInt(record.Year) >= {year} || record.Year == '1972'\" ), Config({\"split\": True}), Style({\"plot.xAxis.interlacing.color\": \"#ffffff\"}), duration=0.005, ) chart.animate( Data.filter(\"record.Year != '1972'\"), Config({\"split\": False}), duration=1.5, ) chart.animate( Config({\"channels\": {\"x\": {\"detach\": [\"Year\"]}}}), duration=0 ) chart.animate( Config({\"channels\": {\"label\": {\"set\": [\"Revenue [m$]\"]}}}), duration=0.1, ) chart.animate( Config( { \"channels\": { \"x\": {\"attach\": [\"Year\"]}, \"label\": {\"detach\": [\"Revenue [m$]\"]}, } } ), duration=1, ) chart.animate( Config( { \"channels\": { \"x\": {\"set\": [\"Year\"]}, \"y\": { \"set\": [\"Revenue [m$]\", \"Format\"], \"range\": {\"min\": None, \"max\": None}, }, \"color\": {\"set\": [\"Format\"]}, }, \"title\": \"Music Revenue by Format in the USA 1973 - 2020\", \"split\": True, } ), Style( { \"plot\": { \"paddingLeft\": 7.5, \"paddingTop\": 25, \"xAxis\": { \"label\": { \"fontSize\": 9, \"angle\": 2.0, \"color\": \"#8e8e8e\", } }, \"yAxis\": { \"interlacing\": {\"color\": \"#ffffff00\"}, \"title\": {\"color\": \"#ffffff00\"}, \"label\": {\"color\": \"#ffffff00\"}, }, } } ), duration=2, ) chart.animate(Config({\"geometry\": \"area\"}), duration=1) chart.animate( Config( { \"channels\": { \"x\": {\"set\": [\"Year\"]}, \"y\": {\"range\": {\"max\": \"110%\"}}, }, \"align\": \"center\", \"split\": False, } ), Style({\"plot.marker.borderWidth\": 1}), duration=1, )","title":"Music formats (Year by Year)"},{"location":"showcases/musicformats/#music-formats-year-by-year","text":"import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/showcases/musicformats/musicformats.csv\", dtype={\"Year\": str}, ) data = Data() data.add_df(df) config = { \"channels\": { \"y\": { \"set\": [\"Format\"], }, \"x\": {\"set\": [\"Revenue [m$]\"]}, \"label\": {\"set\": [\"Revenue [m$]\"]}, \"color\": {\"set\": [\"Format\"]}, }, \"sort\": \"byValue\", } style = Style( { \"plot\": { \"paddingLeft\": 100, \"paddingTop\": 25, \"yAxis\": { \"color\": \"#ffffff00\", \"label\": {\"paddingRight\": 10}, }, \"xAxis\": { \"title\": {\"color\": \"#ffffff00\"}, \"label\": { \"color\": \"#ffffff00\", \"numberFormat\": \"grouped\", }, }, \"marker\": { \"colorPalette\": \"#b74c20FF #c47f58FF #1c9761FF\" + \" #ea4549FF #875792FF #3562b6FF\" + \" #ee7c34FF #efae3aFF\" }, }, } ) chart = Chart(display=DisplayTarget.END) chart.animate(data, style) for year in range(1973, 2021): config[\"title\"] = f\"Music Revenue by Format - Year by Year {year}\" chart.animate( Data.filter(f\"parseInt(record.Year) == {year}\"), Config(config), duration=0.2, x={\"easing\": \"linear\", \"delay\": 0}, y={\"delay\": 0}, show={\"delay\": 0}, hide={\"delay\": 0}, title={\"duration\": 0, \"delay\": 0}, ) chart.animate( Config( { \"channels\": { \"x\": {\"attach\": [\"Year\"]}, \"label\": {\"set\": None}, } } ), duration=0.3, ) chart.animate( Data.filter(\"record.Year == '2020' || record.Year == '1972'\"), Config({\"title\": \"Lets see the total of the last 47 years\"}), duration=2, ) chart.animate(Config({\"sort\": \"none\"}), delay=0, duration=2) for year in reversed(range(1973, 2020)): chart.animate( Data.filter( f\"parseInt(record.Year) >= {year} || record.Year == '1972'\" ), Config({\"split\": True}), Style({\"plot.xAxis.interlacing.color\": \"#ffffff\"}), duration=0.005, ) chart.animate( Data.filter(\"record.Year != '1972'\"), Config({\"split\": False}), duration=1.5, ) chart.animate( Config({\"channels\": {\"x\": {\"detach\": [\"Year\"]}}}), duration=0 ) chart.animate( Config({\"channels\": {\"label\": {\"set\": [\"Revenue [m$]\"]}}}), duration=0.1, ) chart.animate( Config( { \"channels\": { \"x\": {\"attach\": [\"Year\"]}, \"label\": {\"detach\": [\"Revenue [m$]\"]}, } } ), duration=1, ) chart.animate( Config( { \"channels\": { \"x\": {\"set\": [\"Year\"]}, \"y\": { \"set\": [\"Revenue [m$]\", \"Format\"], \"range\": {\"min\": None, \"max\": None}, }, \"color\": {\"set\": [\"Format\"]}, }, \"title\": \"Music Revenue by Format in the USA 1973 - 2020\", \"split\": True, } ), Style( { \"plot\": { \"paddingLeft\": 7.5, \"paddingTop\": 25, \"xAxis\": { \"label\": { \"fontSize\": 9, \"angle\": 2.0, \"color\": \"#8e8e8e\", } }, \"yAxis\": { \"interlacing\": {\"color\": \"#ffffff00\"}, \"title\": {\"color\": \"#ffffff00\"}, \"label\": {\"color\": \"#ffffff00\"}, }, } } ), duration=2, ) chart.animate(Config({\"geometry\": \"area\"}), duration=1) chart.animate( Config( { \"channels\": { \"x\": {\"set\": [\"Year\"]}, \"y\": {\"range\": {\"max\": \"110%\"}}, }, \"align\": \"center\", \"split\": False, } ), Style({\"plot.marker.borderWidth\": 1}), duration=1, )","title":"Music formats (Year by Year)"},{"location":"showcases/nadal/","text":"Rafael Nadal's matches import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/showcases/nadal/nadal.csv\", dtype={ \"Year\": str, \"Round\": str, \"Round2\": str, \"Order_GS\": str, \"Order_all\": str, \"Total_GS\": str, \"Top\": str, }, ) data = Data() data.add_df(df) chart = Chart(display=DisplayTarget.END) chart.animate(data) chart.animate( data.filter(\"record.Year != 'Total'\"), Config( { \"x\": \"Year\", \"y\": \"Round2\", \"color\": { \"set\": \"Result_Num\", \"range\": {\"min\": -1, \"max\": 1}, }, \"size\": None, \"orientation\": \"horizontal\", \"geometry\": \"rectangle\", \"title\": \"Rafael Nadal's matches at the Roland Garros\", \"legend\": \"size\", } ), Style( { \"title\": { \"paddingTop\": 50, \"paddingBottom\": 0, }, \"plot\": { \"marker\": { \"borderWidth\": 3, \"borderOpacity\": 0, \"colorPalette\": \"#1EB55FFF #AD0000FF #AEAEAEFF\", \"colorGradient\": \"#AEAEAEFF 0.000000, #AD0000FF 0.500000, #1EB55FFF 1.000000\", }, \"paddingLeft\": 20, \"paddingBottom\": \"3.5em\", \"paddingTop\": \"2.5em\", \"xAxis\": {\"interlacing\": {\"color\": \"#ffffff00\"}}, \"yAxis\": {\"label\": {\"fontSize\": \"120%\"}}, }, \"logo\": {\"width\": 100}, } ), ) chart.animate( Config( {\"lightness\": \"Won\", \"title\": \"Won 112 out of 116 (96.5%)\"} ), Style( {\"plot\": {\"marker\": {\"maxLightness\": 0, \"minLightness\": 0.8}}} ), delay=4, ) chart.animate( Config( {\"lightness\": \"Lost\", \"title\": \"Lost 3 times, retired once\"} ), delay=4, ) chart.animate( Config({\"lightness\": None, \"title\": \"\"}), Style( { \"plot\": { \"marker\": {\"maxLightness\": None, \"minLightness\": None} } } ), delay=4, ) chart.animate( Config( { \"lightness\": \"3SetWin\", \"title\": \"90 wins (80%) in straight sets\", } ), Style( {\"plot\": {\"marker\": {\"maxLightness\": 0, \"minLightness\": 0.8}}} ), ) chart.animate( Config( { \"lightness\": \"Straightwin\", \"title\": \"Won 4 titles without dropping a set\", } ), delay=3, ) chart.animate( Config({\"lightness\": None, \"title\": \"\"}), Style( { \"plot\": { \"marker\": {\"maxLightness\": None, \"minLightness\": None} } } ), delay=4, ) chart.animate( Config( { \"lightness\": \"Novak\", \"title\": \"Played the most times against Djokovic - 10 matches\", } ), Style( {\"plot\": {\"marker\": {\"maxLightness\": 0, \"minLightness\": 0.8}}} ), ) chart.animate( Config( { \"lightness\": \"Roger\", \"title\": \"Second on this list is Federer - with 6 encounters\", } ), delay=4, ) chart.animate( Config( { \"lightness\": \"Final\", \"title\": \"Rafa won all of his 14 finals\", } ), delay=4, ) chart.animate( data.filter(\"record.Year != 'Total' && record.Round == 'F'\"), Config( { \"y\": {\"set\": \"Round2\", \"range\": {\"max\": 1, \"min\": -5}}, \"x\": \"Count\", \"lightness\": None, \"noop\": \"Year\", \"label\": None, \"title\": \"\", } ), Style( { \"plot\": { \"marker\": { \"borderWidth\": 0, \"colorPalette\": \"#C6652A #CDA02E #47B0FF #329564 #5C88F2 #91A9B5 #DBC4B1\", \"maxLightness\": None, \"minLightness\": None, \"label\": { \"position\": \"center\", \"format\": \"dimensionsFirst\", }, }, \"xAxis\": { \"title\": {\"color\": \"#ffffff00\"}, \"label\": {\"color\": \"#ffffff00\"}, \"interlacing\": {\"color\": \"#ffffff00\"}, }, \"yAxis\": { \"title\": {\"color\": \"#ffffff00\"}, \"label\": {\"color\": \"#ffffff00\", \"fontSize\": None}, }, } } ), delay=3, ) chart.animate( data.filter( \"\"\" record.Year == \"Total\" && record.Tournament == \"Roland Garros\" && record.Player == \"Nadal\" \"\"\" ), Config( { \"noop\": [\"Level\", \"Round2\"], \"label\": [\"Player\", \"Tournament\", \"Count\"], \"y\": {\"set\": [\"Player\", \"Tournament\"]}, } ), duration=0, ) chart.animate(Config({\"noop\": \"Level\"}), duration=0) chart.animate( data.filter( \"record.Year == 'Total' && record.Round == 'GS' && record.Top == '1'\" ), Config( { \"y\": { \"set\": [\"Player\", \"Tournament\", \"Level\"], \"range\": {\"max\": None, \"min\": None}, }, \"title\": \"Rafa won the same Grand Slam title the most times\", \"color\": \"Level\", \"legend\": \"color\", \"noop\": None, \"sort\": \"byValue\", } ), ) chart.animate( data.filter('record.Year == \"Total\" && record.Top == \"1\"'), Config( { \"y\": { \"set\": [\"Player\", \"Tournament\", \"Level\"], \"range\": {\"max\": 19, \"min\": 7}, }, \"x\": [\"Count\"], \"title\": \"Winning the same ATP title - Rafa is 1st, 2nd, 3rd & 4th!\", } ), delay=5, ) chart.animate( data.filter( 'record.Year == \"Total\" && record.Round == \"GS\" && record.Top == \"1\"' ), Config( { \"y\": { \"set\": [\"Player\", \"Tournament\", \"Level\"], \"range\": {\"max\": None, \"min\": None}, }, \"x\": [\"Count\"], \"title\": \"\", \"color\": \"Level\", } ), delay=5, ) chart.animate(Config({\"x\": [\"Count\", \"Total_GS\"], \"label\": \"Player\"})) chart.animate( data.filter(\"record.Year == 'Total' && record.Round == 'GS'\"), Config( { \"y\": { \"set\": [\"Player\"], \"range\": {\"max\": None, \"min\": None}, }, \"x\": [\"Count\", \"Tournament\", \"Level\", \"Total_GS\"], \"title\": \"Rafa also leads in the number of total Grand Slams won\", } ), ) chart.animate( Config({\"label\": [\"Total_GS\"]}), Style( { \"plot\": { \"marker\": { \"label\": { \"position\": \"right\", \"filter\": \"color(#666666FF)\", } } } } ), )","title":"Rafael Nadal's matches"},{"location":"showcases/nadal/#rafael-nadals-matches","text":"import pandas as pd from ipyvizzu import Chart, Data, Config, Style, DisplayTarget df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/showcases/nadal/nadal.csv\", dtype={ \"Year\": str, \"Round\": str, \"Round2\": str, \"Order_GS\": str, \"Order_all\": str, \"Total_GS\": str, \"Top\": str, }, ) data = Data() data.add_df(df) chart = Chart(display=DisplayTarget.END) chart.animate(data) chart.animate( data.filter(\"record.Year != 'Total'\"), Config( { \"x\": \"Year\", \"y\": \"Round2\", \"color\": { \"set\": \"Result_Num\", \"range\": {\"min\": -1, \"max\": 1}, }, \"size\": None, \"orientation\": \"horizontal\", \"geometry\": \"rectangle\", \"title\": \"Rafael Nadal's matches at the Roland Garros\", \"legend\": \"size\", } ), Style( { \"title\": { \"paddingTop\": 50, \"paddingBottom\": 0, }, \"plot\": { \"marker\": { \"borderWidth\": 3, \"borderOpacity\": 0, \"colorPalette\": \"#1EB55FFF #AD0000FF #AEAEAEFF\", \"colorGradient\": \"#AEAEAEFF 0.000000, #AD0000FF 0.500000, #1EB55FFF 1.000000\", }, \"paddingLeft\": 20, \"paddingBottom\": \"3.5em\", \"paddingTop\": \"2.5em\", \"xAxis\": {\"interlacing\": {\"color\": \"#ffffff00\"}}, \"yAxis\": {\"label\": {\"fontSize\": \"120%\"}}, }, \"logo\": {\"width\": 100}, } ), ) chart.animate( Config( {\"lightness\": \"Won\", \"title\": \"Won 112 out of 116 (96.5%)\"} ), Style( {\"plot\": {\"marker\": {\"maxLightness\": 0, \"minLightness\": 0.8}}} ), delay=4, ) chart.animate( Config( {\"lightness\": \"Lost\", \"title\": \"Lost 3 times, retired once\"} ), delay=4, ) chart.animate( Config({\"lightness\": None, \"title\": \"\"}), Style( { \"plot\": { \"marker\": {\"maxLightness\": None, \"minLightness\": None} } } ), delay=4, ) chart.animate( Config( { \"lightness\": \"3SetWin\", \"title\": \"90 wins (80%) in straight sets\", } ), Style( {\"plot\": {\"marker\": {\"maxLightness\": 0, \"minLightness\": 0.8}}} ), ) chart.animate( Config( { \"lightness\": \"Straightwin\", \"title\": \"Won 4 titles without dropping a set\", } ), delay=3, ) chart.animate( Config({\"lightness\": None, \"title\": \"\"}), Style( { \"plot\": { \"marker\": {\"maxLightness\": None, \"minLightness\": None} } } ), delay=4, ) chart.animate( Config( { \"lightness\": \"Novak\", \"title\": \"Played the most times against Djokovic - 10 matches\", } ), Style( {\"plot\": {\"marker\": {\"maxLightness\": 0, \"minLightness\": 0.8}}} ), ) chart.animate( Config( { \"lightness\": \"Roger\", \"title\": \"Second on this list is Federer - with 6 encounters\", } ), delay=4, ) chart.animate( Config( { \"lightness\": \"Final\", \"title\": \"Rafa won all of his 14 finals\", } ), delay=4, ) chart.animate( data.filter(\"record.Year != 'Total' && record.Round == 'F'\"), Config( { \"y\": {\"set\": \"Round2\", \"range\": {\"max\": 1, \"min\": -5}}, \"x\": \"Count\", \"lightness\": None, \"noop\": \"Year\", \"label\": None, \"title\": \"\", } ), Style( { \"plot\": { \"marker\": { \"borderWidth\": 0, \"colorPalette\": \"#C6652A #CDA02E #47B0FF #329564 #5C88F2 #91A9B5 #DBC4B1\", \"maxLightness\": None, \"minLightness\": None, \"label\": { \"position\": \"center\", \"format\": \"dimensionsFirst\", }, }, \"xAxis\": { \"title\": {\"color\": \"#ffffff00\"}, \"label\": {\"color\": \"#ffffff00\"}, \"interlacing\": {\"color\": \"#ffffff00\"}, }, \"yAxis\": { \"title\": {\"color\": \"#ffffff00\"}, \"label\": {\"color\": \"#ffffff00\", \"fontSize\": None}, }, } } ), delay=3, ) chart.animate( data.filter( \"\"\" record.Year == \"Total\" && record.Tournament == \"Roland Garros\" && record.Player == \"Nadal\" \"\"\" ), Config( { \"noop\": [\"Level\", \"Round2\"], \"label\": [\"Player\", \"Tournament\", \"Count\"], \"y\": {\"set\": [\"Player\", \"Tournament\"]}, } ), duration=0, ) chart.animate(Config({\"noop\": \"Level\"}), duration=0) chart.animate( data.filter( \"record.Year == 'Total' && record.Round == 'GS' && record.Top == '1'\" ), Config( { \"y\": { \"set\": [\"Player\", \"Tournament\", \"Level\"], \"range\": {\"max\": None, \"min\": None}, }, \"title\": \"Rafa won the same Grand Slam title the most times\", \"color\": \"Level\", \"legend\": \"color\", \"noop\": None, \"sort\": \"byValue\", } ), ) chart.animate( data.filter('record.Year == \"Total\" && record.Top == \"1\"'), Config( { \"y\": { \"set\": [\"Player\", \"Tournament\", \"Level\"], \"range\": {\"max\": 19, \"min\": 7}, }, \"x\": [\"Count\"], \"title\": \"Winning the same ATP title - Rafa is 1st, 2nd, 3rd & 4th!\", } ), delay=5, ) chart.animate( data.filter( 'record.Year == \"Total\" && record.Round == \"GS\" && record.Top == \"1\"' ), Config( { \"y\": { \"set\": [\"Player\", \"Tournament\", \"Level\"], \"range\": {\"max\": None, \"min\": None}, }, \"x\": [\"Count\"], \"title\": \"\", \"color\": \"Level\", } ), delay=5, ) chart.animate(Config({\"x\": [\"Count\", \"Total_GS\"], \"label\": \"Player\"})) chart.animate( data.filter(\"record.Year == 'Total' && record.Round == 'GS'\"), Config( { \"y\": { \"set\": [\"Player\"], \"range\": {\"max\": None, \"min\": None}, }, \"x\": [\"Count\", \"Tournament\", \"Level\", \"Total_GS\"], \"title\": \"Rafa also leads in the number of total Grand Slams won\", } ), ) chart.animate( Config({\"label\": [\"Total_GS\"]}), Style( { \"plot\": { \"marker\": { \"label\": { \"position\": \"right\", \"filter\": \"color(#666666FF)\", } } } } ), )","title":"Rafael Nadal's matches"},{"location":"showcases/sales/","text":"Sales import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/showcases/sales/sales.csv\" ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Data.filter(\"record['Product'] == 'Shoes'\"), Config( { \"x\": \"Region\", \"y\": [\"Sales\", \"Product\"], \"label\": \"Sales\", \"color\": \"Product\", \"title\": \"Sales of Shoes\", } ), ) chart.animate( Data.filter( \"record['Product'] == 'Shoes' || record['Product'] == 'Handbags'\" ), Config({\"title\": \"Sales of Shoes & Handbags\"}), delay=1, ) chart.animate( Data.filter(\"record['Product'] != 'Accessories'\"), Config({\"title\": \"Sales of Shoes, Handbags & Gloves\"}), delay=1, ) chart.animate( Data.filter(None), Config({\"title\": \"Sales of All Products\"}), delay=1, ) chart.animate( Config( { \"y\": [\"Revenue [$]\", \"Product\"], \"label\": \"Revenue [$]\", \"title\": \"Revenue of All Products\", } ), delay=1, ) chart.animate( Config({\"x\": [\"Region\", \"Revenue [$]\"], \"y\": \"Product\"}), delay=2 ) chart.animate(Config({\"x\": \"Revenue [$]\", \"y\": \"Product\"})) chart.animate( Config({\"coordSystem\": \"polar\", \"sort\": \"byValue\"}), delay=1 )","title":"Sales"},{"location":"showcases/sales/#sales","text":"import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/showcases/sales/sales.csv\" ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Data.filter(\"record['Product'] == 'Shoes'\"), Config( { \"x\": \"Region\", \"y\": [\"Sales\", \"Product\"], \"label\": \"Sales\", \"color\": \"Product\", \"title\": \"Sales of Shoes\", } ), ) chart.animate( Data.filter( \"record['Product'] == 'Shoes' || record['Product'] == 'Handbags'\" ), Config({\"title\": \"Sales of Shoes & Handbags\"}), delay=1, ) chart.animate( Data.filter(\"record['Product'] != 'Accessories'\"), Config({\"title\": \"Sales of Shoes, Handbags & Gloves\"}), delay=1, ) chart.animate( Data.filter(None), Config({\"title\": \"Sales of All Products\"}), delay=1, ) chart.animate( Config( { \"y\": [\"Revenue [$]\", \"Product\"], \"label\": \"Revenue [$]\", \"title\": \"Revenue of All Products\", } ), delay=1, ) chart.animate( Config({\"x\": [\"Region\", \"Revenue [$]\"], \"y\": \"Product\"}), delay=2 ) chart.animate(Config({\"x\": \"Revenue [$]\", \"y\": \"Product\"})) chart.animate( Config({\"coordSystem\": \"polar\", \"sort\": \"byValue\"}), delay=1 )","title":"Sales"},{"location":"showcases/titanic/","text":"Passengers of the Titanic import pandas as pd from ipyvizzu import Chart, Data, Config df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/showcases/titanic/titanic.csv\" ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) chart.animate( Config( { \"x\": [\"Count\", \"Sex\", \"Survived\"], \"y\": None, \"coordSystem\": \"polar\", } ) )","title":"Passengers of the Titanic"},{"location":"showcases/titanic/#passengers-of-the-titanic","text":"import pandas as pd from ipyvizzu import Chart, Data, Config df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/showcases/titanic/titanic.csv\" ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"x\": \"Count\", \"y\": \"Sex\", \"label\": \"Count\", \"title\": \"Passengers of the Titanic\", } ) ) chart.animate( Config( { \"x\": [\"Count\", \"Survived\"], \"label\": [\"Count\", \"Survived\"], \"color\": \"Survived\", } ) ) chart.animate(Config({\"x\": \"Count\", \"y\": [\"Sex\", \"Survived\"]})) chart.animate( Config( { \"x\": [\"Count\", \"Sex\", \"Survived\"], \"y\": None, \"coordSystem\": \"polar\", } ) )","title":"Passengers of the Titanic"},{"location":"tutorial/","text":"Tutorial This is the tutorial of ipyvizzu - the Python integration of the free, open-source JavaScript / C++ library Vizzu . You can create animated charts, data stories, interactive reports and dashboards with it in Jupyter and similar notebooks and app building platforms. This is an excellent starting point to get acquainted with ipyvizzu , as it walks you through the installation of the library, introduces the logic it employs and the different settings to control how your animated charts look and behave. The tutorial is organized into chapters that introduce the concept and the details of ipyvizzu step-by-step. You can find the list of chapters at the end of this page and in the menu. Basic logic of ipyvizzu The foundation of an ipyvizzu chart is the animation. The animation contains states describing the chart's configuration, such as the data series on the chart, the coordinate system, labels, titles, etc. A static chart is the result of a single animation state. When there are more states, ipyvizzu automatically transitions between these. The animate method initiates the animation into a new state by describing the new chart and how ipyvizzu should transition to it. The animate method has non-keyword and keyword arguments. The non-keyword arguments sets the chart, and the (optional) keyword arguments determines how ipyvizzu should animate to that state. There are three types of non-keyword arguments: data : this is where you add the data that you want to visualize config : this is where you can add or remove series to the chart and set general settings like the chart title, the geometry, the alignment etc. style : this is where you can set how your chart looks Installation pip install ipyvizzu Visit Installation chapter for more options and details. Usage Note ipyvizzu generates JavaScript code, then the vizzu calls are evaluated by the browser. Therefore if a blank space appears where the chart should be, check the console log of your browser. vizzu reports its errors there. If you get a vizzu error in your browser console that is not straightforward to understand, please clean your browser cache first, because it might be caused by an older version being stored in your browser. Chart settings Data Axes, title, tooltip Aggregating data Geometry Channels & legend Group/stack Sorting Align & range Changing dimensions Orientation, split & polar Filtering & adding new records Without coordinates & noop channel Color palette & fonts Chart layout Animation options Animation control & keyframes Events Shorthands & Store Chart presets Style","title":"Tutorial"},{"location":"tutorial/#tutorial","text":"This is the tutorial of ipyvizzu - the Python integration of the free, open-source JavaScript / C++ library Vizzu . You can create animated charts, data stories, interactive reports and dashboards with it in Jupyter and similar notebooks and app building platforms. This is an excellent starting point to get acquainted with ipyvizzu , as it walks you through the installation of the library, introduces the logic it employs and the different settings to control how your animated charts look and behave. The tutorial is organized into chapters that introduce the concept and the details of ipyvizzu step-by-step. You can find the list of chapters at the end of this page and in the menu.","title":"Tutorial"},{"location":"tutorial/#basic-logic-of-ipyvizzu","text":"The foundation of an ipyvizzu chart is the animation. The animation contains states describing the chart's configuration, such as the data series on the chart, the coordinate system, labels, titles, etc. A static chart is the result of a single animation state. When there are more states, ipyvizzu automatically transitions between these. The animate method initiates the animation into a new state by describing the new chart and how ipyvizzu should transition to it. The animate method has non-keyword and keyword arguments. The non-keyword arguments sets the chart, and the (optional) keyword arguments determines how ipyvizzu should animate to that state. There are three types of non-keyword arguments: data : this is where you add the data that you want to visualize config : this is where you can add or remove series to the chart and set general settings like the chart title, the geometry, the alignment etc. style : this is where you can set how your chart looks","title":"Basic logic of ipyvizzu"},{"location":"tutorial/#installation","text":"pip install ipyvizzu Visit Installation chapter for more options and details.","title":"Installation"},{"location":"tutorial/#usage","text":"Note ipyvizzu generates JavaScript code, then the vizzu calls are evaluated by the browser. Therefore if a blank space appears where the chart should be, check the console log of your browser. vizzu reports its errors there. If you get a vizzu error in your browser console that is not straightforward to understand, please clean your browser cache first, because it might be caused by an older version being stored in your browser. Chart settings Data Axes, title, tooltip Aggregating data Geometry Channels & legend Group/stack Sorting Align & range Changing dimensions Orientation, split & polar Filtering & adding new records Without coordinates & noop channel Color palette & fonts Chart layout Animation options Animation control & keyframes Events Shorthands & Store Chart presets Style","title":"Usage"},{"location":"tutorial/aggregating_data/","text":"Aggregating data The default logic of ipyvizzu is to show the sum of values that are in the categories added to a chart. So if we create a simple vertical bar chart by adding the Popularity measure to the y-axis, the height of the bar will be the sum of all Popularity values and when we add Genres to the x-axis, the height of the bars will be the sum of Popularity values in each category within Genres . Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_data.csv\" ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate(Config({\"channels\": {\"y\": {\"set\": [\"Popularity\"]}}})) chart.animate(Config({\"channels\": {\"x\": {\"set\": [\"Genres\"]}}})) Next to the default logic of sum, there are a handful of other aggregation logics that are available in ipyvizzu : min , max , mean , count and distinct . Let's go through them to see how they work. Minimum value: the height of the bars show the minimum value in the Popularity measure in each of the Genres . chart.animate( Config({ \"channels\": { \"y\": { \"set\": [\"min(Popularity)\"] } } }) ) Maximum value: the height of the bars show the maximum value in the Popularity measure in each of the Genres . chart.animate( Config({ \"channels\": { \"y\": { \"set\": [\"max(Popularity)\"] } } }) ) Mean value: the height of the bars show the mean value of the Popularity measure in each of the Genres . chart.animate( Config({ \"channels\": { \"y\": { \"set\": [\"mean(Popularity)\"] } } }) ) Count: the height of the bars show the number of items (rows if you will) in each of the Genres . chart.animate( Config({ \"channels\": { \"y\": { \"set\": [\"count()\"] } } }) ) Distinct: the height of the bars show the number of distinct categories of Kinds in each of the Genres . Note Distinct aggregation logic relates to dimensions like Genres and not to measures like Popularity . chart.animate( Config({ \"channels\": { \"y\": { \"set\": [\"distinct(Kinds)\"] } } }) ) Sum: this is how you can get back to the default aggregation logic of ipyvizzu that sums the Popularity values in each of the Genres . chart.animate( Config({ \"channels\": { \"y\": { \"set\": [\"sum(Popularity)\"] } } })","title":"Aggregating data"},{"location":"tutorial/aggregating_data/#aggregating-data","text":"The default logic of ipyvizzu is to show the sum of values that are in the categories added to a chart. So if we create a simple vertical bar chart by adding the Popularity measure to the y-axis, the height of the bar will be the sum of all Popularity values and when we add Genres to the x-axis, the height of the bars will be the sum of Popularity values in each category within Genres . Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_data.csv\" ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate(Config({\"channels\": {\"y\": {\"set\": [\"Popularity\"]}}})) chart.animate(Config({\"channels\": {\"x\": {\"set\": [\"Genres\"]}}})) Next to the default logic of sum, there are a handful of other aggregation logics that are available in ipyvizzu : min , max , mean , count and distinct . Let's go through them to see how they work. Minimum value: the height of the bars show the minimum value in the Popularity measure in each of the Genres . chart.animate( Config({ \"channels\": { \"y\": { \"set\": [\"min(Popularity)\"] } } }) ) Maximum value: the height of the bars show the maximum value in the Popularity measure in each of the Genres . chart.animate( Config({ \"channels\": { \"y\": { \"set\": [\"max(Popularity)\"] } } }) ) Mean value: the height of the bars show the mean value of the Popularity measure in each of the Genres . chart.animate( Config({ \"channels\": { \"y\": { \"set\": [\"mean(Popularity)\"] } } }) ) Count: the height of the bars show the number of items (rows if you will) in each of the Genres . chart.animate( Config({ \"channels\": { \"y\": { \"set\": [\"count()\"] } } }) ) Distinct: the height of the bars show the number of distinct categories of Kinds in each of the Genres . Note Distinct aggregation logic relates to dimensions like Genres and not to measures like Popularity . chart.animate( Config({ \"channels\": { \"y\": { \"set\": [\"distinct(Kinds)\"] } } }) ) Sum: this is how you can get back to the default aggregation logic of ipyvizzu that sums the Popularity values in each of the Genres . chart.animate( Config({ \"channels\": { \"y\": { \"set\": [\"sum(Popularity)\"] } } })","title":"Aggregating data"},{"location":"tutorial/align_range/","text":"Align & range ipyvizzu offers different options to align your chart elements and to set the range of values shown on the axes. Alignment can be used to create charts like a stream chart where the elements are vertically centered. A good example for using range is when you fix the y-axis so that it would not adapt to the data being shown. Centered alignment. The effect of this parameter depends on the orientation of the chart. For example, on a column chart, elements will be vertically centered, whereas on a bar chart, horizontally. Info In the first example, the y-axis labels are hidden because they don't properly represent the values shown on the column chart anymore, as the chart elements float off the x-axis. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_data.csv\" ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\", \"Kinds\"]}, \"x\": {\"set\": [\"Genres\"]}, \"label\": {\"attach\": [\"Popularity\"]}, }, \"color\": {\"attach\": [\"Kinds\"]}, } ) ) Change align and configures the y axis labels to disappear during the animation. chart.animate( Config({\"align\": \"center\", \"channels\": {\"y\": {\"labels\": False}}}) ) Stretched alignment. This way the elements will proportionally fill the entire plot area, effectively showing proportions in stacked charts. This is why the scale will also switch from values to percentages when used. chart.animate(Config({\"align\": \"stretch\"})) Getting back to the default alignment. chart.animate( Config({\"align\": \"none\", \"channels\": {\"y\": {\"labels\": True}}}) ) You can set the range of an axis by setting the minimum and maximum values of it. Both parameters are optional so that you can set only one of those, and you either set specific values or a relative value by adding the % sign. In this example, we set the range of the y-axis in a way that the max value is 150% of the biggest element\u2019s value. chart.animate(Config({\"channels\": {\"y\": {\"range\": {\"max\": \"150%\"}}}})) You can also set the range for an axis with a dimension on it. You can even use this feature to filter certain elements, just like in the following example. chart.animate( Config( { \"channels\": { \"x\": { \"range\": { \"min\": -2, \"max\": 3, } } } } ) ) Ranges have certain defaults depending on the chart's configuration, based on common data viz guidelines because we wanted to make it easy for you to create sleek charts. For example, in the cartesian coordinate system, the range will be automatically set to the max:110% for an axis with a measure on it. Polar coordinates work differently, as you can see for yourself in the Orientation, split & polar chapter . Whenever you want to set your ranges back to the default value, just set them to \"auto\" . chart.animate( Config( { \"channels\": { \"y\": { \"range\": {\"max\": \"auto\"}, }, \"x\": { \"range\": { \"min\": \"auto\", \"max\": \"auto\", } }, } } ) )","title":"Align & range"},{"location":"tutorial/align_range/#align-range","text":"ipyvizzu offers different options to align your chart elements and to set the range of values shown on the axes. Alignment can be used to create charts like a stream chart where the elements are vertically centered. A good example for using range is when you fix the y-axis so that it would not adapt to the data being shown. Centered alignment. The effect of this parameter depends on the orientation of the chart. For example, on a column chart, elements will be vertically centered, whereas on a bar chart, horizontally. Info In the first example, the y-axis labels are hidden because they don't properly represent the values shown on the column chart anymore, as the chart elements float off the x-axis. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_data.csv\" ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\", \"Kinds\"]}, \"x\": {\"set\": [\"Genres\"]}, \"label\": {\"attach\": [\"Popularity\"]}, }, \"color\": {\"attach\": [\"Kinds\"]}, } ) ) Change align and configures the y axis labels to disappear during the animation. chart.animate( Config({\"align\": \"center\", \"channels\": {\"y\": {\"labels\": False}}}) ) Stretched alignment. This way the elements will proportionally fill the entire plot area, effectively showing proportions in stacked charts. This is why the scale will also switch from values to percentages when used. chart.animate(Config({\"align\": \"stretch\"})) Getting back to the default alignment. chart.animate( Config({\"align\": \"none\", \"channels\": {\"y\": {\"labels\": True}}}) ) You can set the range of an axis by setting the minimum and maximum values of it. Both parameters are optional so that you can set only one of those, and you either set specific values or a relative value by adding the % sign. In this example, we set the range of the y-axis in a way that the max value is 150% of the biggest element\u2019s value. chart.animate(Config({\"channels\": {\"y\": {\"range\": {\"max\": \"150%\"}}}})) You can also set the range for an axis with a dimension on it. You can even use this feature to filter certain elements, just like in the following example. chart.animate( Config( { \"channels\": { \"x\": { \"range\": { \"min\": -2, \"max\": 3, } } } } ) ) Ranges have certain defaults depending on the chart's configuration, based on common data viz guidelines because we wanted to make it easy for you to create sleek charts. For example, in the cartesian coordinate system, the range will be automatically set to the max:110% for an axis with a measure on it. Polar coordinates work differently, as you can see for yourself in the Orientation, split & polar chapter . Whenever you want to set your ranges back to the default value, just set them to \"auto\" . chart.animate( Config( { \"channels\": { \"y\": { \"range\": {\"max\": \"auto\"}, }, \"x\": { \"range\": { \"min\": \"auto\", \"max\": \"auto\", } }, } } ) )","title":"Align &amp; range"},{"location":"tutorial/animation_control_keyframes/","text":"Animation control & keyframes Using the control property provided by the chart you can play, pause, stop, seek or reverse the animations. In this step, we seek forward to 50% of progress after the animation starts. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Keyframe df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_data.csv\" ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\", \"Kinds\"]}, \"x\": {\"set\": [\"Genres\"]}, \"label\": {\"attach\": [\"Popularity\"]}, }, \"color\": {\"attach\": [\"Kinds\"]}, } ) ) chart.animate( Config( { \"channels\": { \"x\": {\"attach\": [\"Kinds\"]}, \"y\": {\"detach\": [\"Kinds\"]}, }, } ) ) chart.control.seek(\"50%\") You can also control the initial position and play state of the animation through the keyword arguments of the animate method. chart.animate( Config( { \"channels\": { \"x\": {\"detach\": [\"Kinds\"]}, \"y\": {\"attach\": [\"Kinds\"]}, }, } ), playState=\"paused\", position=0.5, ) chart.control.play() You may want to control multiple animations as a single one. You can do this by boundling them together and passing them to a single animate call. To do this, you need to create a Keyframe object from the arguments of every single animate call and then passing them into a single animate call. chart.animate( Keyframe( Config( { \"channels\": { \"x\": {\"attach\": [\"Kinds\"]}, \"y\": {\"detach\": [\"Kinds\"]}, }, } ), duration=0.5, ), Keyframe( Config( { \"channels\": { \"x\": {\"detach\": [\"Kinds\"]}, \"y\": {\"attach\": [\"Kinds\"]}, } } ), duration=1, ), )","title":"Animation control & keyframes"},{"location":"tutorial/animation_control_keyframes/#animation-control-keyframes","text":"Using the control property provided by the chart you can play, pause, stop, seek or reverse the animations. In this step, we seek forward to 50% of progress after the animation starts. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Keyframe df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_data.csv\" ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\", \"Kinds\"]}, \"x\": {\"set\": [\"Genres\"]}, \"label\": {\"attach\": [\"Popularity\"]}, }, \"color\": {\"attach\": [\"Kinds\"]}, } ) ) chart.animate( Config( { \"channels\": { \"x\": {\"attach\": [\"Kinds\"]}, \"y\": {\"detach\": [\"Kinds\"]}, }, } ) ) chart.control.seek(\"50%\") You can also control the initial position and play state of the animation through the keyword arguments of the animate method. chart.animate( Config( { \"channels\": { \"x\": {\"detach\": [\"Kinds\"]}, \"y\": {\"attach\": [\"Kinds\"]}, }, } ), playState=\"paused\", position=0.5, ) chart.control.play() You may want to control multiple animations as a single one. You can do this by boundling them together and passing them to a single animate call. To do this, you need to create a Keyframe object from the arguments of every single animate call and then passing them into a single animate call. chart.animate( Keyframe( Config( { \"channels\": { \"x\": {\"attach\": [\"Kinds\"]}, \"y\": {\"detach\": [\"Kinds\"]}, }, } ), duration=0.5, ), Keyframe( Config( { \"channels\": { \"x\": {\"detach\": [\"Kinds\"]}, \"y\": {\"attach\": [\"Kinds\"]}, } } ), duration=1, ), )","title":"Animation control &amp; keyframes"},{"location":"tutorial/animation_options/","text":"Animation options In ipyvizzu you can set the timing and duration of the animation. You can do this either for the whole animation, or for animation groups such as the elements moving along the x-axis or the y-axis, appearing or disappearing or when the coordinate system is changed. Let\u2019s see first a simple example when a stacked column chart is grouped using the default animation options. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_data.csv\" ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\", \"Kinds\"]}, \"x\": {\"set\": [\"Genres\"]}, }, \"label\": {\"attach\": [\"Popularity\"]}, \"color\": {\"set\": [\"Kinds\"]}, } ) ) chart.animate( Config( { \"channels\": { \"y\": {\"detach\": [\"Kinds\"]}, \"x\": {\"attach\": [\"Kinds\"]}, } } ) ) We stack the columns, still with the default options. chart.animate( Config( { \"channels\": { \"x\": {\"detach\": [\"Kinds\"]}, \"y\": {\"attach\": [\"Kinds\"]}, } } ) ) Now we change the animation settings for the elements moving along the y-axis and also the change in styles, more specifically when the labels on the markers move from the center of the chart elements to the top of them. chart.animate( Config( { \"channels\": { \"y\": {\"detach\": [\"Kinds\"]}, \"x\": {\"attach\": [\"Kinds\"]}, } } ), y={\"duration\": 2, \"delay\": 2}, style={\"duration\": 2, \"delay\": 4}, ) This is an example of changing the settings for the whole animation at once. chart.animate( Config( { \"channels\": { \"x\": {\"detach\": [\"Kinds\"]}, \"y\": {\"attach\": [\"Kinds\"]}, } } ), duration=1, easing=\"linear\", ) When the two settings are combined, ipyvizzu will use the general animation options and spread the unique settings for specific groups proportionally. This is why you can see the same animation as two steps before but happening much quicker since the duration of the whole animation is set to 1 second. chart.animate( Config( { \"channels\": { \"y\": {\"detach\": [\"Kinds\"]}, \"x\": {\"attach\": [\"Kinds\"]}, } } ), duration=1, easing=\"linear\", y={\"duration\": 2, \"delay\": 2}, style={\"duration\": 2, \"delay\": 4}, ) The default unit for animation is seconds, but you can set other units. chart.animate( Config( { \"channels\": { \"x\": {\"detach\": [\"Kinds\"]}, \"y\": {\"attach\": [\"Kinds\"]}, } } ), duration=\"500ms\", )","title":"Animation options"},{"location":"tutorial/animation_options/#animation-options","text":"In ipyvizzu you can set the timing and duration of the animation. You can do this either for the whole animation, or for animation groups such as the elements moving along the x-axis or the y-axis, appearing or disappearing or when the coordinate system is changed. Let\u2019s see first a simple example when a stacked column chart is grouped using the default animation options. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_data.csv\" ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\", \"Kinds\"]}, \"x\": {\"set\": [\"Genres\"]}, }, \"label\": {\"attach\": [\"Popularity\"]}, \"color\": {\"set\": [\"Kinds\"]}, } ) ) chart.animate( Config( { \"channels\": { \"y\": {\"detach\": [\"Kinds\"]}, \"x\": {\"attach\": [\"Kinds\"]}, } } ) ) We stack the columns, still with the default options. chart.animate( Config( { \"channels\": { \"x\": {\"detach\": [\"Kinds\"]}, \"y\": {\"attach\": [\"Kinds\"]}, } } ) ) Now we change the animation settings for the elements moving along the y-axis and also the change in styles, more specifically when the labels on the markers move from the center of the chart elements to the top of them. chart.animate( Config( { \"channels\": { \"y\": {\"detach\": [\"Kinds\"]}, \"x\": {\"attach\": [\"Kinds\"]}, } } ), y={\"duration\": 2, \"delay\": 2}, style={\"duration\": 2, \"delay\": 4}, ) This is an example of changing the settings for the whole animation at once. chart.animate( Config( { \"channels\": { \"x\": {\"detach\": [\"Kinds\"]}, \"y\": {\"attach\": [\"Kinds\"]}, } } ), duration=1, easing=\"linear\", ) When the two settings are combined, ipyvizzu will use the general animation options and spread the unique settings for specific groups proportionally. This is why you can see the same animation as two steps before but happening much quicker since the duration of the whole animation is set to 1 second. chart.animate( Config( { \"channels\": { \"y\": {\"detach\": [\"Kinds\"]}, \"x\": {\"attach\": [\"Kinds\"]}, } } ), duration=1, easing=\"linear\", y={\"duration\": 2, \"delay\": 2}, style={\"duration\": 2, \"delay\": 4}, ) The default unit for animation is seconds, but you can set other units. chart.animate( Config( { \"channels\": { \"x\": {\"detach\": [\"Kinds\"]}, \"y\": {\"attach\": [\"Kinds\"]}, } } ), duration=\"500ms\", )","title":"Animation options"},{"location":"tutorial/axes_title_tooltip/","text":"Axes, title, tooltip To build a chart with ipyvizzu , you have to add data series to the channels. Channels will be explained more in-depth later, but for now, think of channels as different elements of the chart we can bind data to. The simplest and most often used channels are the x and y-axes. The first step is to create a simple column chart, adding one of the dimensions from the data set we added in the previous chapter ( Genres ) to the x-axis and the measure ( Popularity ) to the y-axis using the set property. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, ChartProperty, Data, Config df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_data.csv\" ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\"]}, \"x\": {\"set\": [\"Genres\"]}, } } ) ) In the next step, the chart is rearranged by putting both series on the y-axis using once again the set property, resulting in a single column chart. ipyvizzu automatically animates between the initial state and this one. chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\", \"Genres\"]}, \"x\": {\"set\": None}, } } ) ) Instead of set, you can use attach and detach to add or remove series to/from the channels. chart.animate( Config( { \"channels\": { \"y\": {\"detach\": [\"Popularity\"]}, \"x\": {\"attach\": [\"Popularity\"]}, } } ) ) Using attach & detach makes it easier to build your animated charts step-by-step, however you either have to keep in mind what you had on which channel in the previous step or add the following code to access the actual configuration of the chart. Add the following code to log the actual configuration of the chart in the browser console. chart.log(ChartProperty.CONFIG) Setting the chart title with the title command. chart.animate(Config({\"title\": \"My first chart\"})) Switching on the tooltips that appear on the chart elements when the user hovers over them with their mouse by adding the ( \"tooltip\" , True ) parameters to the chart.feature method. chart.feature(\"tooltip\", True)","title":"Axes, title, tooltip"},{"location":"tutorial/axes_title_tooltip/#axes-title-tooltip","text":"To build a chart with ipyvizzu , you have to add data series to the channels. Channels will be explained more in-depth later, but for now, think of channels as different elements of the chart we can bind data to. The simplest and most often used channels are the x and y-axes. The first step is to create a simple column chart, adding one of the dimensions from the data set we added in the previous chapter ( Genres ) to the x-axis and the measure ( Popularity ) to the y-axis using the set property. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, ChartProperty, Data, Config df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_data.csv\" ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\"]}, \"x\": {\"set\": [\"Genres\"]}, } } ) ) In the next step, the chart is rearranged by putting both series on the y-axis using once again the set property, resulting in a single column chart. ipyvizzu automatically animates between the initial state and this one. chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\", \"Genres\"]}, \"x\": {\"set\": None}, } } ) ) Instead of set, you can use attach and detach to add or remove series to/from the channels. chart.animate( Config( { \"channels\": { \"y\": {\"detach\": [\"Popularity\"]}, \"x\": {\"attach\": [\"Popularity\"]}, } } ) ) Using attach & detach makes it easier to build your animated charts step-by-step, however you either have to keep in mind what you had on which channel in the previous step or add the following code to access the actual configuration of the chart. Add the following code to log the actual configuration of the chart in the browser console. chart.log(ChartProperty.CONFIG) Setting the chart title with the title command. chart.animate(Config({\"title\": \"My first chart\"})) Switching on the tooltips that appear on the chart elements when the user hovers over them with their mouse by adding the ( \"tooltip\" , True ) parameters to the chart.feature method. chart.feature(\"tooltip\", True)","title":"Axes, title, tooltip"},{"location":"tutorial/changing_dimensions/","text":"Changing dimensions The simplest of dimension-changing operations are aggregate and drill-down. These features basically mean that you either add or remove an additional dimension to/from an axis or another channel. Let\u2019s aggregate together the elements by getting the Genres dimension off the x-axis. By taking it off the chart, only one chart element remains for every color, and ipyvizzu automatically calculates and shows the aggregate value of the elements. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_data.csv\" ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\", \"Kinds\"]}, \"x\": {\"set\": [\"Genres\"]}, \"label\": {\"attach\": [\"Popularity\"]}, }, \"color\": {\"attach\": [\"Kinds\"]}, } ) ) chart.animate( Config( { \"channels\": { \"x\": {\"set\": None}, } } ) ) When you simultaneously add and remove dimensions, the partitioning of the underlying data to markers on the chart changes. There are multiple ways to transition through these kinds of operations using. By default, the markers are aggregated to the common base of the two states, then drilled down to the target state, as shown below. chart.animate( Config( { \"channels\": { \"y\": { \"detach\": [\"Kinds\"], }, \"x\": { \"set\": [\"Genres\"], }, \"color\": { \"set\": None, }, } } ) ) You can change this setting and drill down to the union of the two states instead, and then aggregate to the target state: chart.animate( Config( { \"channels\": { \"x\": { \"detach\": [\"Genres\"], \"attach\": [\"Kinds\"], }, } } ), regroupStrategy=\"drilldown\", ) There is also the option to fade the chart between the states: chart.animate( Config( { \"channels\": { \"x\": { \"detach\": [\"Kinds\"], \"attach\": [\"Genres\"], }, } } ), regroupStrategy=\"fade\", ) To simply drill down, the same dimension is put back on the y-axis. chart.animate( Config( { \"channels\": { \"y\": { \"attach\": [\"Kinds\"], }, \"color\": { \"set\": [\"Kinds\"], }, } } ) )","title":"Changing dimensions"},{"location":"tutorial/changing_dimensions/#changing-dimensions","text":"The simplest of dimension-changing operations are aggregate and drill-down. These features basically mean that you either add or remove an additional dimension to/from an axis or another channel. Let\u2019s aggregate together the elements by getting the Genres dimension off the x-axis. By taking it off the chart, only one chart element remains for every color, and ipyvizzu automatically calculates and shows the aggregate value of the elements. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_data.csv\" ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\", \"Kinds\"]}, \"x\": {\"set\": [\"Genres\"]}, \"label\": {\"attach\": [\"Popularity\"]}, }, \"color\": {\"attach\": [\"Kinds\"]}, } ) ) chart.animate( Config( { \"channels\": { \"x\": {\"set\": None}, } } ) ) When you simultaneously add and remove dimensions, the partitioning of the underlying data to markers on the chart changes. There are multiple ways to transition through these kinds of operations using. By default, the markers are aggregated to the common base of the two states, then drilled down to the target state, as shown below. chart.animate( Config( { \"channels\": { \"y\": { \"detach\": [\"Kinds\"], }, \"x\": { \"set\": [\"Genres\"], }, \"color\": { \"set\": None, }, } } ) ) You can change this setting and drill down to the union of the two states instead, and then aggregate to the target state: chart.animate( Config( { \"channels\": { \"x\": { \"detach\": [\"Genres\"], \"attach\": [\"Kinds\"], }, } } ), regroupStrategy=\"drilldown\", ) There is also the option to fade the chart between the states: chart.animate( Config( { \"channels\": { \"x\": { \"detach\": [\"Kinds\"], \"attach\": [\"Genres\"], }, } } ), regroupStrategy=\"fade\", ) To simply drill down, the same dimension is put back on the y-axis. chart.animate( Config( { \"channels\": { \"y\": { \"attach\": [\"Kinds\"], }, \"color\": { \"set\": [\"Kinds\"], }, } } ) )","title":"Changing dimensions"},{"location":"tutorial/channels_legend/","text":"Channels & legend Besides the x-axis and the y-axis, there are five more channels in ipyvizzu you can use to visualize your data. Similarly to the axes you can put any number of dimensions and/or one measure to a channel. In the following example the four most commonly used channels are shown. The fifth, noop channel is introduced later in the Without coordinates & noop channel chapter. Data on the label channel will be written on the markers on the chart. ipyvizzu automatically determines the best way to position these labels, but you can set them differently with the Style object introduced in the Color palette & fonts chapter. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_data.csv\" ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\"]}, \"x\": {\"set\": [\"Genres\"]}, }, } ) ) chart.animate( Config({\"channels\": {\"label\": {\"attach\": [\"Popularity\"]}}}) ) The lightness channel sets the lightness of the markers. In this case the same measure ( Popularity ) is added to it that is on the y-axis, meaning that columns\u2019 height and lightness represent the same values. The legend for the lightness channel is turned on using the legend property. Info This is an example when we explicitly instruct ipyvizzu to show the legend. By default ipyvizzu automatically shows/hides the legend when it's necessary. You can also turn it off with the legend : None command or set back to automatic mode with legend : \"auto\" . chart.animate( Config( { \"channels\": {\"lightness\": {\"attach\": [\"Popularity\"]}}, \"legend\": \"lightness\", } ) ) The color channel sets the color of the markers. The same dimension ( Genres ) is put on it that is on the x-axis resulting in each bar having a different color. If a measure is put on the color channel, a color range will be used. Info The value on the lightness channel is removed in this step as it doesn\u2019t make sense to use it together with the color channel in this case. chart.animate( Config( { \"channels\": {\"color\": {\"attach\": [\"Genres\"]}}, \"legend\": \"color\", } ) ) The size channel sets the size of the markers if the geometry is circle - where size sets the radius of the circles - or line - where size determines line width. It is ignored when using rectangle or area geometry. This is why we change the geometry to circle in the example. chart.animate( Config( { \"channels\": {\"size\": {\"set\": [\"Popularity\"]}}, \"geometry\": \"circle\", } ) )","title":"Channels & legend"},{"location":"tutorial/channels_legend/#channels-legend","text":"Besides the x-axis and the y-axis, there are five more channels in ipyvizzu you can use to visualize your data. Similarly to the axes you can put any number of dimensions and/or one measure to a channel. In the following example the four most commonly used channels are shown. The fifth, noop channel is introduced later in the Without coordinates & noop channel chapter. Data on the label channel will be written on the markers on the chart. ipyvizzu automatically determines the best way to position these labels, but you can set them differently with the Style object introduced in the Color palette & fonts chapter. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_data.csv\" ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\"]}, \"x\": {\"set\": [\"Genres\"]}, }, } ) ) chart.animate( Config({\"channels\": {\"label\": {\"attach\": [\"Popularity\"]}}}) ) The lightness channel sets the lightness of the markers. In this case the same measure ( Popularity ) is added to it that is on the y-axis, meaning that columns\u2019 height and lightness represent the same values. The legend for the lightness channel is turned on using the legend property. Info This is an example when we explicitly instruct ipyvizzu to show the legend. By default ipyvizzu automatically shows/hides the legend when it's necessary. You can also turn it off with the legend : None command or set back to automatic mode with legend : \"auto\" . chart.animate( Config( { \"channels\": {\"lightness\": {\"attach\": [\"Popularity\"]}}, \"legend\": \"lightness\", } ) ) The color channel sets the color of the markers. The same dimension ( Genres ) is put on it that is on the x-axis resulting in each bar having a different color. If a measure is put on the color channel, a color range will be used. Info The value on the lightness channel is removed in this step as it doesn\u2019t make sense to use it together with the color channel in this case. chart.animate( Config( { \"channels\": {\"color\": {\"attach\": [\"Genres\"]}}, \"legend\": \"color\", } ) ) The size channel sets the size of the markers if the geometry is circle - where size sets the radius of the circles - or line - where size determines line width. It is ignored when using rectangle or area geometry. This is why we change the geometry to circle in the example. chart.animate( Config( { \"channels\": {\"size\": {\"set\": [\"Popularity\"]}}, \"geometry\": \"circle\", } ) )","title":"Channels &amp; legend"},{"location":"tutorial/chart_layout/","text":"Chart layout ipyvizzu has three separate parts of the chart layout: the plot area that contains the chart, the title containing the chart title on the top, and the legend on the left. ipyvizzu automatically hides the legend when it\u2019s unnecessary to show it. When the title is not in use, ipyvizzu hides that part automatically as well. Each of these parts have their own paddings on all four sides that adjust to the chart size by default, but can also be set with the appropriate settings in the Style object. All size parameters can be set in pixel, percentage and em. We add different background colors to the parts of the layout to show how they are aligned. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_data.csv\" ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\", \"Kinds\"]}, \"x\": {\"set\": [\"Genres\"]}, }, \"label\": {\"attach\": [\"Popularity\"]}, \"color\": {\"set\": [\"Kinds\"]}, } ) ) chart.animate( Style( { \"title\": {\"backgroundColor\": \"#A0A0A0\"}, \"plot\": {\"backgroundColor\": \"#D2D2D2\"}, \"legend\": {\"backgroundColor\": \"#808080\"}, } ) ) Setting the width of the legend. chart.animate(Style({\"legend\": {\"width\": 50}})) Setting the legend width back to its default value. chart.animate(Style({\"legend\": {\"width\": None}})) Changing the title paddings. By default, the title is horizontally centered above the chart. In this example, we set the title\u2019s left padding, resulting in the text moving to the right. chart.animate( Style( { \"title\": { \"paddingTop\": 20, \"paddingBottom\": 20, \"paddingLeft\": 200, } } ) ) Setting the title paddings back to their default values. chart.animate( Style( { \"title\": { \"paddingTop\": None, \"paddingBottom\": None, \"paddingLeft\": None, } } ) ) Changing the paddings of the plot area to position the plot. The texts on the axes are drawn on the padding of the plot and not the plot itself. chart.animate( Style({\"plot\": {\"paddingLeft\": 100, \"paddingRight\": 100}}) ) Setting the plot paddings back to their default values. chart.animate( Style({\"plot\": {\"paddingLeft\": None, \"paddingRight\": None}}) )","title":"Chart layout"},{"location":"tutorial/chart_layout/#chart-layout","text":"ipyvizzu has three separate parts of the chart layout: the plot area that contains the chart, the title containing the chart title on the top, and the legend on the left. ipyvizzu automatically hides the legend when it\u2019s unnecessary to show it. When the title is not in use, ipyvizzu hides that part automatically as well. Each of these parts have their own paddings on all four sides that adjust to the chart size by default, but can also be set with the appropriate settings in the Style object. All size parameters can be set in pixel, percentage and em. We add different background colors to the parts of the layout to show how they are aligned. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_data.csv\" ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\", \"Kinds\"]}, \"x\": {\"set\": [\"Genres\"]}, }, \"label\": {\"attach\": [\"Popularity\"]}, \"color\": {\"set\": [\"Kinds\"]}, } ) ) chart.animate( Style( { \"title\": {\"backgroundColor\": \"#A0A0A0\"}, \"plot\": {\"backgroundColor\": \"#D2D2D2\"}, \"legend\": {\"backgroundColor\": \"#808080\"}, } ) ) Setting the width of the legend. chart.animate(Style({\"legend\": {\"width\": 50}})) Setting the legend width back to its default value. chart.animate(Style({\"legend\": {\"width\": None}})) Changing the title paddings. By default, the title is horizontally centered above the chart. In this example, we set the title\u2019s left padding, resulting in the text moving to the right. chart.animate( Style( { \"title\": { \"paddingTop\": 20, \"paddingBottom\": 20, \"paddingLeft\": 200, } } ) ) Setting the title paddings back to their default values. chart.animate( Style( { \"title\": { \"paddingTop\": None, \"paddingBottom\": None, \"paddingLeft\": None, } } ) ) Changing the paddings of the plot area to position the plot. The texts on the axes are drawn on the padding of the plot and not the plot itself. chart.animate( Style({\"plot\": {\"paddingLeft\": 100, \"paddingRight\": 100}}) ) Setting the plot paddings back to their default values. chart.animate( Style({\"plot\": {\"paddingLeft\": None, \"paddingRight\": None}}) )","title":"Chart layout"},{"location":"tutorial/chart_presets/","text":"Chart presets Throughout this tutorial, we have shown you how to create charts with ipyvizzu using a chart type-agnostic, uniform way without being limited to a predefined set of available charts. But sometimes, when you know the chart type you want to use, it is easier to start with that and skip configuring it from scratch. For this reason, ipyvizzu provides preset chart configurations for many known chart types. See the preset gallery for all available presets. Use the preset methods of the Config class to build a chart based on a preset. These methods return chart configuration objects that can be passed to the animate method. For example, this is how to create a stacked bubble chart using its preset. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_data.csv\" ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.stackedBubble( { \"size\": \"Popularity\", \"color\": \"Kinds\", \"stackedBy\": \"Genres\", } ) ) Presets will override all channels, removing all previously set series from the chart. Using a preset will also explicitly set most chart configuration parameters. Exceptions to this are the legend , title , reverse , and sort properties that can be set while using a preset. Here's an example of a preset where chart elements are sorted by value. chart.animate( Config.radialStackedBar( { \"angle\": \"Popularity\", \"radius\": \"Genres\", \"stackedBy\": \"Kinds\", \"sort\": \"byValue\", } ) ) As you will see, the preset doesn't override the previously configured sorting and wouldn't affect the rest of the chart config parameters mentioned above either. Presets will affect chart configuration, but you might also want to set the style or the underlying data. chart.animate( Config.radialBar( { \"angle\": \"Popularity\", \"radius\": \"Genres\", } ), Style({\"plot.xAxis.interlacing.color\": \"#ffffff00\"}), )","title":"Chart presets"},{"location":"tutorial/chart_presets/#chart-presets","text":"Throughout this tutorial, we have shown you how to create charts with ipyvizzu using a chart type-agnostic, uniform way without being limited to a predefined set of available charts. But sometimes, when you know the chart type you want to use, it is easier to start with that and skip configuring it from scratch. For this reason, ipyvizzu provides preset chart configurations for many known chart types. See the preset gallery for all available presets. Use the preset methods of the Config class to build a chart based on a preset. These methods return chart configuration objects that can be passed to the animate method. For example, this is how to create a stacked bubble chart using its preset. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_data.csv\" ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config.stackedBubble( { \"size\": \"Popularity\", \"color\": \"Kinds\", \"stackedBy\": \"Genres\", } ) ) Presets will override all channels, removing all previously set series from the chart. Using a preset will also explicitly set most chart configuration parameters. Exceptions to this are the legend , title , reverse , and sort properties that can be set while using a preset. Here's an example of a preset where chart elements are sorted by value. chart.animate( Config.radialStackedBar( { \"angle\": \"Popularity\", \"radius\": \"Genres\", \"stackedBy\": \"Kinds\", \"sort\": \"byValue\", } ) ) As you will see, the preset doesn't override the previously configured sorting and wouldn't affect the rest of the chart config parameters mentioned above either. Presets will affect chart configuration, but you might also want to set the style or the underlying data. chart.animate( Config.radialBar( { \"angle\": \"Popularity\", \"radius\": \"Genres\", } ), Style({\"plot.xAxis.interlacing.color\": \"#ffffff00\"}), )","title":"Chart presets"},{"location":"tutorial/chart_settings/","text":"Chart settings You can change the behaviour of the chart with the constructor arguments and the chart properties detailed below. Constructor arguments Chart size The size of the chart can be changed with width and height constructor arguments. Info width and height constructor arguments are optional, the default values are 800px and 480px . You can set them to any valid cssText value. from ipyvizzu import Chart chart = Chart(width=\"100%\", height=\"500px\") Display behavior There are multiple options for the logic of where and how the chart is displayed within the notebook and this behavior can be changed with the display constructor argument. Info display constructor argument is optional, the default value is DisplayTarget.ACTUAL . Note Not all options work in all environments, check the Environments chapter for more details. Actual Chart is relocated and displayed after each cell that has been run. This is set by default or if display is set to DisplayTarget.ACTUAL . from ipyvizzu import Chart, DisplayTarget chart = Chart(display=DisplayTarget.ACTUAL) Begin Chart is displayed after the cell with the chart constructor if display is set to DisplayTarget.BEGIN . from ipyvizzu import Chart, DisplayTarget chart = Chart(display=DisplayTarget.BEGIN) End If display is set to DisplayTarget.END , then in case one cell is excuted, the chart will be displayed after the cell. If multiple cells are run at once, the chart appears after the last cell set to run. from ipyvizzu import Chart, DisplayTarget chart = Chart(display=DisplayTarget.END) Tip By combining the above display options with the store function you can replay the original animation when you replay a cell. Another way to replay animations is to use our new extension ipyvizzu-story that enables you to build, present and share animated data stories in data science notebooks with a very similar syntax to ipyvizzu 's. Info DisplayTarget.ACTUAL , DisplayTarget.BEGIN and DisplayTarget.END use IPython.display.display_javascript function. Manual Chart is displayed only when a display function is called if display is set to DisplayTarget.MANUAL . Note Even though it runs in more environments, the disadvantage of using MANUAL DisplayTarget is that the chart cannot be modified after calling a display function, without all the cells modifying the chart being rerun. One of the display functions is the _repr_html_ method which is supported in most environments. from ipyvizzu import Chart, DisplayTarget chart = Chart(display=DisplayTarget.MANUAL) # ... chart The other display function is the show method. from ipyvizzu import Chart, DisplayTarget chart = Chart(display=DisplayTarget.MANUAL) # ... chart.show() Info DisplayTarget.MANUAL with the show method uses IPython.display.display_javascript function. Vizzu library ipyvizzu requires and automatically downloads the Vizzu JavaScript/C++ library from jsDelivr CDN , but you can also use a self-hosted version. Info vizzu constructor argument is optional, the default value is Chart.VIZZU Install Vizzu via npm : npm install vizzu After it is hosted on a server, you can use that url. from ipyvizzu import Chart chart = Chart(vizzu=\"<url>/vizzu.min.js\") Properties Analytics The usage statistics feature in ipyvizzu allows aggregate usage data collection using Plausible 's algorithm. Enabling this feature helps us follow the progress and overall trends of our library, allowing us to focus our resources effectively and better serve our users. We do not track, collect, or store any personal data or personally identifiable information. All data is isolated to a single day, a single site, and a single device only. Usage statistics feature is optional, and by default, it is enabled (default value: True ). Users can choose to opt-out if they prefer not to participate in data collection. Please note that even when this feature is enabled, publishing anything made with ipyvizzu remains GDPR compatible. To disable usage statistics feature, set analytics property to False . from ipyvizzu import Chart chart = Chart() chart.analytics = False Scroll into view When the scroll into view feature is turned on, ipyvizzu is able to automatically scroll to the chart being animated to view in the browser. If manual scrolling is detected while auto-scrolling, ipyvizzu will stop auto-scroll until the notebook is replayed again. Info Scroll into view feature is optional, the default value is False . Note Scroll into view feature does not work in all environments, check the Environments chapter for more details. To enable scroll into view feature, set scroll_into_view property to True . from ipyvizzu import Chart chart = Chart() chart.scroll_into_view = True","title":"Chart settings"},{"location":"tutorial/chart_settings/#chart-settings","text":"You can change the behaviour of the chart with the constructor arguments and the chart properties detailed below.","title":"Chart settings"},{"location":"tutorial/chart_settings/#constructor-arguments","text":"","title":"Constructor arguments"},{"location":"tutorial/chart_settings/#chart-size","text":"The size of the chart can be changed with width and height constructor arguments. Info width and height constructor arguments are optional, the default values are 800px and 480px . You can set them to any valid cssText value. from ipyvizzu import Chart chart = Chart(width=\"100%\", height=\"500px\")","title":"Chart size"},{"location":"tutorial/chart_settings/#display-behavior","text":"There are multiple options for the logic of where and how the chart is displayed within the notebook and this behavior can be changed with the display constructor argument. Info display constructor argument is optional, the default value is DisplayTarget.ACTUAL . Note Not all options work in all environments, check the Environments chapter for more details.","title":"Display behavior"},{"location":"tutorial/chart_settings/#actual","text":"Chart is relocated and displayed after each cell that has been run. This is set by default or if display is set to DisplayTarget.ACTUAL . from ipyvizzu import Chart, DisplayTarget chart = Chart(display=DisplayTarget.ACTUAL)","title":"Actual"},{"location":"tutorial/chart_settings/#begin","text":"Chart is displayed after the cell with the chart constructor if display is set to DisplayTarget.BEGIN . from ipyvizzu import Chart, DisplayTarget chart = Chart(display=DisplayTarget.BEGIN)","title":"Begin"},{"location":"tutorial/chart_settings/#end","text":"If display is set to DisplayTarget.END , then in case one cell is excuted, the chart will be displayed after the cell. If multiple cells are run at once, the chart appears after the last cell set to run. from ipyvizzu import Chart, DisplayTarget chart = Chart(display=DisplayTarget.END) Tip By combining the above display options with the store function you can replay the original animation when you replay a cell. Another way to replay animations is to use our new extension ipyvizzu-story that enables you to build, present and share animated data stories in data science notebooks with a very similar syntax to ipyvizzu 's. Info DisplayTarget.ACTUAL , DisplayTarget.BEGIN and DisplayTarget.END use IPython.display.display_javascript function.","title":"End"},{"location":"tutorial/chart_settings/#manual","text":"Chart is displayed only when a display function is called if display is set to DisplayTarget.MANUAL . Note Even though it runs in more environments, the disadvantage of using MANUAL DisplayTarget is that the chart cannot be modified after calling a display function, without all the cells modifying the chart being rerun. One of the display functions is the _repr_html_ method which is supported in most environments. from ipyvizzu import Chart, DisplayTarget chart = Chart(display=DisplayTarget.MANUAL) # ... chart The other display function is the show method. from ipyvizzu import Chart, DisplayTarget chart = Chart(display=DisplayTarget.MANUAL) # ... chart.show() Info DisplayTarget.MANUAL with the show method uses IPython.display.display_javascript function.","title":"Manual"},{"location":"tutorial/chart_settings/#vizzu-library","text":"ipyvizzu requires and automatically downloads the Vizzu JavaScript/C++ library from jsDelivr CDN , but you can also use a self-hosted version. Info vizzu constructor argument is optional, the default value is Chart.VIZZU Install Vizzu via npm : npm install vizzu After it is hosted on a server, you can use that url. from ipyvizzu import Chart chart = Chart(vizzu=\"<url>/vizzu.min.js\")","title":"Vizzu library"},{"location":"tutorial/chart_settings/#properties","text":"","title":"Properties"},{"location":"tutorial/chart_settings/#analytics","text":"The usage statistics feature in ipyvizzu allows aggregate usage data collection using Plausible 's algorithm. Enabling this feature helps us follow the progress and overall trends of our library, allowing us to focus our resources effectively and better serve our users. We do not track, collect, or store any personal data or personally identifiable information. All data is isolated to a single day, a single site, and a single device only. Usage statistics feature is optional, and by default, it is enabled (default value: True ). Users can choose to opt-out if they prefer not to participate in data collection. Please note that even when this feature is enabled, publishing anything made with ipyvizzu remains GDPR compatible. To disable usage statistics feature, set analytics property to False . from ipyvizzu import Chart chart = Chart() chart.analytics = False","title":"Analytics"},{"location":"tutorial/chart_settings/#scroll-into-view","text":"When the scroll into view feature is turned on, ipyvizzu is able to automatically scroll to the chart being animated to view in the browser. If manual scrolling is detected while auto-scrolling, ipyvizzu will stop auto-scroll until the notebook is replayed again. Info Scroll into view feature is optional, the default value is False . Note Scroll into view feature does not work in all environments, check the Environments chapter for more details. To enable scroll into view feature, set scroll_into_view property to True . from ipyvizzu import Chart chart = Chart() chart.scroll_into_view = True","title":"Scroll into view"},{"location":"tutorial/color_palette_fonts/","text":"Color palette & fonts This and the next chapter provide a quick intro to the styling of the charts. You can either use the Style object like in the following examples or use CSS . By using CSS , it's easier to set the same style for multiple charts on one page or re-use style settings. If you use CSS , don't change the set parameters later on via the Style object. The font sizes automatically adjust to the chart size to help readability, and can also be set separately or for specific groups. The color palette is changed to the colors we add here. The order of the dimension\u2019s items in the data set determine which color belongs to which item as the colors are added one-by-one. If you want to use the same setting via CSS , you should add --vizzu-plot-marker-colorPalette: #9355e8FF #123456FF #BDAF10FF; . Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style, ChartProperty df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_data.csv\" ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\", \"Kinds\"]}, \"x\": {\"set\": [\"Genres\"]}, }, \"label\": {\"attach\": [\"Popularity\"]}, \"color\": {\"set\": [\"Kinds\"]}, } ) ) chart.animate( Style( { \"plot\": { \"marker\": { \"colorPalette\": \"#9355e8FF #123456FF #BDAF10FF\" } } } ) ) The actual style settings of the chart can be logged in the browser console via the STYLE property. chart.log(ChartProperty.STYLE) Changing the title font size will only affect the title; all other font sizes remain the same. CSS version: --vizzu-title-fontSize: 50; . chart.animate(Style({\"title\": {\"fontSize\": 50}})) This is how to set the font size back to its default value. chart.animate(Style({\"title\": {\"fontSize\": None}})) In case you change the font size of the whole chart with the top-level fontSize parameter then every font on the chart will grow/shrink proportionally. The size refers to the font size of the axis labels by default. chart.animate(Style({\"fontSize\": 20})) You can reset styles to default on any levels by setting them to None . chart.animate(Style(None)) For information on all available style parameters see the Style chapter or the Vizzu Code reference .","title":"Color palette & fonts"},{"location":"tutorial/color_palette_fonts/#color-palette-fonts","text":"This and the next chapter provide a quick intro to the styling of the charts. You can either use the Style object like in the following examples or use CSS . By using CSS , it's easier to set the same style for multiple charts on one page or re-use style settings. If you use CSS , don't change the set parameters later on via the Style object. The font sizes automatically adjust to the chart size to help readability, and can also be set separately or for specific groups. The color palette is changed to the colors we add here. The order of the dimension\u2019s items in the data set determine which color belongs to which item as the colors are added one-by-one. If you want to use the same setting via CSS , you should add --vizzu-plot-marker-colorPalette: #9355e8FF #123456FF #BDAF10FF; . Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style, ChartProperty df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_data.csv\" ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\", \"Kinds\"]}, \"x\": {\"set\": [\"Genres\"]}, }, \"label\": {\"attach\": [\"Popularity\"]}, \"color\": {\"set\": [\"Kinds\"]}, } ) ) chart.animate( Style( { \"plot\": { \"marker\": { \"colorPalette\": \"#9355e8FF #123456FF #BDAF10FF\" } } } ) ) The actual style settings of the chart can be logged in the browser console via the STYLE property. chart.log(ChartProperty.STYLE) Changing the title font size will only affect the title; all other font sizes remain the same. CSS version: --vizzu-title-fontSize: 50; . chart.animate(Style({\"title\": {\"fontSize\": 50}})) This is how to set the font size back to its default value. chart.animate(Style({\"title\": {\"fontSize\": None}})) In case you change the font size of the whole chart with the top-level fontSize parameter then every font on the chart will grow/shrink proportionally. The size refers to the font size of the axis labels by default. chart.animate(Style({\"fontSize\": 20})) You can reset styles to default on any levels by setting them to None . chart.animate(Style(None)) For information on all available style parameters see the Style chapter or the Vizzu Code reference .","title":"Color palette &amp; fonts"},{"location":"tutorial/data/","text":"Data Data types ipyvizzu currently supports two types of data series: dimensions and measures. Dimensions slice the data cube ipyvizzu uses, whereas measures are values within the cube. Dimensions are categorical series that can contain strings and numbers, but both will be treated as strings. Temporal data such as dates or timestamps should also be added as dimensions. By default, ipyvizzu will draw the elements on the chart in the order they are provided in the data set. Thus we suggest adding temporal data in a sorted format from oldest to newest. Measures at the moment can only be numerical. Adding data There are multiple ways you can add data to ipyvizzu . Using pandas DataFrame Specify data by series - column after column if you think of a spreadsheet Specify data by records - row after row Using data cube form Using JSON Tip You should set the data in the first animate call. chart.animate(data) Genres Kinds Popularity Pop Hard 114 Rock Hard 96 Jazz Hard 78 Metal Hard 52 Pop Smooth 56 Rock Experimental 36 Jazz Smooth 174 Metal Smooth 121 Pop Experimental 127 Rock Experimental 83 Jazz Experimental 94 Metal Experimental 58 Using pandas DataFrame Use add_df method for adding pandas DataFrame to Data . import pandas as pd from ipyvizzu import Data data = { \"Genres\": [ \"Pop\", \"Rock\", \"Jazz\", \"Metal\", \"Pop\", \"Rock\", \"Jazz\", \"Metal\", \"Pop\", \"Rock\", \"Jazz\", \"Metal\", ], \"Kinds\": [ \"Hard\", \"Hard\", \"Hard\", \"Hard\", \"Smooth\", \"Experimental\", \"Smooth\", \"Smooth\", \"Experimental\", \"Experimental\", \"Experimental\", \"Experimental\", ], \"Popularity\": [ 114, 96, 78, 52, 56, 36, 174, 121, 127, 83, 94, 58, ], } df = pd.DataFrame(data) data = Data() data.add_df(df) Info ipyvizzu makes a difference between two types of data, numeric (measure) and not numeric (dimension). A column's dtype specifies that the column is handled as a measure or as a dimension. It is also possible to add the data frame's index as a series column while adding the data frame import pandas as pd from ipyvizzu import Data df = pd.DataFrame( {\"Popularity\": [114, 96, 78]}, index=[\"x\", \"y\", \"z\"] ) data = Data() data.add_df(df, include_index=\"IndexColumnName\") or later with the add_df_index method. import pandas as pd from ipyvizzu import Data df = pd.DataFrame( {\"Popularity\": [114, 96, 78]}, index=[\"x\", \"y\", \"z\"] ) data = Data() data.add_df_index(df, column_name=\"IndexColumnName\") data.add_df(df) Note If you want to work with pandas DataFrame and ipyvizzu , you need to install pandas or install it as an extra: pip install ipyvizzu[pandas] Using csv Download music_data.csv here . import pandas as pd from ipyvizzu import Data df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_data.csv\" ) data = Data() data.add_df(df) Using Excel spreadsheet Download music_data.xlsx here . import pandas as pd from ipyvizzu import Data df = pd.read_excel( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_data.xlsx\" ) data = Data() data.add_df(df) Using Google Sheets import pandas as pd from ipyvizzu import Data google_sheet_id = \"<Google Sheet id>\" worksheet_name = \"<Worksheet name>\" df = pd.read_csv( f\"https://docs.google.com/spreadsheets/d/{google_sheet_id}/gviz/tq?tqx=out:csv&sheet={worksheet_name}\" ) data = Data() data.add_df(df) For example if the url is https://docs.google.com/spreadsheets/d/abcd1234/edit#gid=0 then google_sheet_id here is abcd1234 . Using SQLite import pandas as pd import sqlite3 from ipyvizzu import Data # establish a connection to the SQLite database conn = sqlite3.connect(\"mydatabase.db\") # read data from a SQLite table into a pandas DataFrame df = pd.read_sql(\"SELECT * FROM mytable\", conn) # close the connection conn.close() data = Data() data.add_df(df) Note You'll need to adjust the SQL query and the database connection parameters to match your specific use case. Using MySQL import pandas as pd import mysql.connector from ipyvizzu import Data # establish a connection to the MySQL database conn = mysql.connector.connect( user=\"myusername\", password=\"mypassword\", host=\"myhost\", database=\"mydatabase\", ) # read data from a MySQL table into a pandas DataFrame df = pd.read_sql(\"SELECT * FROM mytable\", con=conn) # close the connection conn.close() data = Data() data.add_df(df) Note You'll need to adjust the SQL query and the database connection parameters to match your specific use case. Using PostgreSQL import pandas as pd import psycopg2 from ipyvizzu import Data # establish a connection to the PostgreSQL database conn = psycopg2.connect( user=\"myusername\", password=\"mypassword\", host=\"myhost\", port=\"5432\", database=\"mydatabase\", ) # read data from a PostgreSQL table into a pandas DataFrame df = pd.read_sql(\"SELECT * FROM mytable\", con=conn) # close the connection conn.close() data = Data() data.add_df(df) Note You'll need to adjust the SQL query and the database connection parameters to match your specific use case. Using Microsoft SQL Server import pandas as pd import pyodbc from ipyvizzu import Data # establish a connection to the Microsoft SQL Server database conn = pyodbc.connect( \"Driver={SQL Server};\" \"Server=myserver;\" \"Database=mydatabase;\" \"UID=myusername;\" \"PWD=mypassword\" ) # read data from a SQL Server table into a pandas DataFrame df = pd.read_sql(\"SELECT * FROM mytable\", con=conn) # close the connection conn.close() data = Data() data.add_df(df) Note You'll need to adjust the SQL query and the database connection parameters to match your specific use case. Using pyspark DataFrame Use add_df method for adding pyspark DataFrame to Data . from pyspark.sql import SparkSession from pyspark.sql.types import ( StructType, StructField, StringType, IntegerType, ) from ipyvizzu import Data spark = SparkSession.builder.appName(\"ipyvizzu\").getOrCreate() spark_schema = StructType( [ StructField(\"Genres\", StringType(), True), StructField(\"Kinds\", StringType(), True), StructField(\"Popularity\", IntegerType(), True), ] ) spark_data = [ (\"Pop\", \"Hard\", 114), (\"Rock\", \"Hard\", 96), (\"Jazz\", \"Hard\", 78), (\"Metal\", \"Hard\", 52), (\"Pop\", \"Smooth\", 56), (\"Rock\", \"Experimental\", 36), (\"Jazz\", \"Smooth\", 174), (\"Metal\", \"Smooth\", 121), (\"Pop\", \"Experimental\", 127), (\"Rock\", \"Experimental\", 83), (\"Jazz\", \"Experimental\", 94), (\"Metal\", \"Experimental\", 58), ] df = spark.createDataFrame(spark_data, spark_schema) data = Data() data.add_df(df) Note If you want to work with pyspark DataFrame and ipyvizzu , you need to install pyspark or install it as an extra: pip install ipyvizzu[pyspark] Using numpy Array Use add_np_array method for adding numpy Array to Data . import numpy as np from ipyvizzu import Data numpy_array = np.array( [ [\"Pop\", \"Hard\", 114], [\"Rock\", \"Hard\", 96], [\"Jazz\", \"Hard\", 78], [\"Metal\", \"Hard\", 52], [\"Pop\", \"Smooth\", 56], [\"Rock\", \"Experimental\", 36], [\"Jazz\", \"Smooth\", 174], [\"Metal\", \"Smooth\", 121], [\"Pop\", \"Experimental\", 127], [\"Rock\", \"Experimental\", 83], [\"Jazz\", \"Experimental\", 94], [\"Metal\", \"Experimental\", 58], ] ) data = Data() data.add_np_array( numpy_array, column_name={0: \"Genres\", 1: \"Kinds\", 2: \"Popularity\"}, column_dtype={2: int}, ) Info Arrays with dimensions higher than 2 are not supported. If column_name dictionary is not added, column indices will be used as names. If column_dtype dictionary is not added, every column will use numpy_array.dtype . Note If you want to work with numpy Array and ipyvizzu , you need to install numpy or install it as an extra: pip install ipyvizzu[numpy] Specify data by series When you specify the data by series or by records, it has to be in first normal form. Here is an example of that: from ipyvizzu import Data data = Data() data.add_series( \"Genres\", [ \"Pop\", \"Rock\", \"Jazz\", \"Metal\", \"Pop\", \"Rock\", \"Jazz\", \"Metal\", \"Pop\", \"Rock\", \"Jazz\", \"Metal\", ], type=\"dimension\", ) data.add_series( \"Kinds\", [ \"Hard\", \"Hard\", \"Hard\", \"Hard\", \"Smooth\", \"Experimental\", \"Smooth\", \"Smooth\", \"Experimental\", \"Experimental\", \"Experimental\", \"Experimental\", ], type=\"dimension\", ) data.add_series( \"Popularity\", [114, 96, 78, 52, 56, 36, 174, 121, 127, 83, 94, 58], type=\"measure\", ) Specify data by records from ipyvizzu import Data data = Data() data.add_series(\"Genres\", type=\"dimension\") data.add_series(\"Kinds\", type=\"dimension\") data.add_series(\"Popularity\", type=\"measure\") record = [\"Pop\", \"Hard\", 114] data.add_record(record) records = [ [\"Rock\", \"Hard\", 96], [\"Jazz\", \"Hard\", 78], [\"Metal\", \"Hard\", 52], [\"Pop\", \"Smooth\", 56], [\"Rock\", \"Experimental\", 36], [\"Jazz\", \"Smooth\", 174], [\"Metal\", \"Smooth\", 121], [\"Pop\", \"Experimental\", 127], [\"Rock\", \"Experimental\", 83], [\"Jazz\", \"Experimental\", 94], [\"Metal\", \"Experimental\", 58], ] data.add_records(records) Where records can be lists as shown above or dictionaries: records = [ { \"Genres\": \"Pop\", \"Kinds\": \"Hard\", \"Popularity\": 114, }, { \"Genres\": \"Rock\", \"Kinds\": \"Hard\", \"Popularity\": 96, }, # ... ] Using data cube form Note In the example below, the record Rock,Experimental,36 has been replaced with Rock,Smooth,36 in order to illustrate that only data with same dimensions can be used in the data cube form. Genres Pop Rock Jazz Metal Kinds Hard 114 96 78 52 Smooth 56 36 74 121 Experimental 127 83 94 58 Popularity from ipyvizzu import Data data = Data() data.add_dimension(\"Genres\", [\"Pop\", \"Rock\", \"Jazz\", \"Metal\"]) data.add_dimension(\"Kinds\", [\"Hard\", \"Smooth\", \"Experimental\"]) data.add_measure( \"Popularity\", [ [114, 96, 78, 52], [56, 36, 174, 121], [127, 83, 94, 58], ], ) Using JSON Download music_data.json here (in this example the data stored in the data cube form). from ipyvizzu import Data data = Data.from_json(\"../assets/data/music_data.json\")","title":"Data"},{"location":"tutorial/data/#data","text":"","title":"Data"},{"location":"tutorial/data/#data-types","text":"ipyvizzu currently supports two types of data series: dimensions and measures. Dimensions slice the data cube ipyvizzu uses, whereas measures are values within the cube. Dimensions are categorical series that can contain strings and numbers, but both will be treated as strings. Temporal data such as dates or timestamps should also be added as dimensions. By default, ipyvizzu will draw the elements on the chart in the order they are provided in the data set. Thus we suggest adding temporal data in a sorted format from oldest to newest. Measures at the moment can only be numerical.","title":"Data types"},{"location":"tutorial/data/#adding-data","text":"There are multiple ways you can add data to ipyvizzu . Using pandas DataFrame Specify data by series - column after column if you think of a spreadsheet Specify data by records - row after row Using data cube form Using JSON Tip You should set the data in the first animate call. chart.animate(data) Genres Kinds Popularity Pop Hard 114 Rock Hard 96 Jazz Hard 78 Metal Hard 52 Pop Smooth 56 Rock Experimental 36 Jazz Smooth 174 Metal Smooth 121 Pop Experimental 127 Rock Experimental 83 Jazz Experimental 94 Metal Experimental 58","title":"Adding data"},{"location":"tutorial/data/#using-pandas-dataframe","text":"Use add_df method for adding pandas DataFrame to Data . import pandas as pd from ipyvizzu import Data data = { \"Genres\": [ \"Pop\", \"Rock\", \"Jazz\", \"Metal\", \"Pop\", \"Rock\", \"Jazz\", \"Metal\", \"Pop\", \"Rock\", \"Jazz\", \"Metal\", ], \"Kinds\": [ \"Hard\", \"Hard\", \"Hard\", \"Hard\", \"Smooth\", \"Experimental\", \"Smooth\", \"Smooth\", \"Experimental\", \"Experimental\", \"Experimental\", \"Experimental\", ], \"Popularity\": [ 114, 96, 78, 52, 56, 36, 174, 121, 127, 83, 94, 58, ], } df = pd.DataFrame(data) data = Data() data.add_df(df) Info ipyvizzu makes a difference between two types of data, numeric (measure) and not numeric (dimension). A column's dtype specifies that the column is handled as a measure or as a dimension. It is also possible to add the data frame's index as a series column while adding the data frame import pandas as pd from ipyvizzu import Data df = pd.DataFrame( {\"Popularity\": [114, 96, 78]}, index=[\"x\", \"y\", \"z\"] ) data = Data() data.add_df(df, include_index=\"IndexColumnName\") or later with the add_df_index method. import pandas as pd from ipyvizzu import Data df = pd.DataFrame( {\"Popularity\": [114, 96, 78]}, index=[\"x\", \"y\", \"z\"] ) data = Data() data.add_df_index(df, column_name=\"IndexColumnName\") data.add_df(df) Note If you want to work with pandas DataFrame and ipyvizzu , you need to install pandas or install it as an extra: pip install ipyvizzu[pandas]","title":"Using pandas DataFrame"},{"location":"tutorial/data/#using-csv","text":"Download music_data.csv here . import pandas as pd from ipyvizzu import Data df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_data.csv\" ) data = Data() data.add_df(df)","title":"Using csv"},{"location":"tutorial/data/#using-excel-spreadsheet","text":"Download music_data.xlsx here . import pandas as pd from ipyvizzu import Data df = pd.read_excel( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_data.xlsx\" ) data = Data() data.add_df(df)","title":"Using Excel spreadsheet"},{"location":"tutorial/data/#using-google-sheets","text":"import pandas as pd from ipyvizzu import Data google_sheet_id = \"<Google Sheet id>\" worksheet_name = \"<Worksheet name>\" df = pd.read_csv( f\"https://docs.google.com/spreadsheets/d/{google_sheet_id}/gviz/tq?tqx=out:csv&sheet={worksheet_name}\" ) data = Data() data.add_df(df) For example if the url is https://docs.google.com/spreadsheets/d/abcd1234/edit#gid=0 then google_sheet_id here is abcd1234 .","title":"Using Google Sheets"},{"location":"tutorial/data/#using-sqlite","text":"import pandas as pd import sqlite3 from ipyvizzu import Data # establish a connection to the SQLite database conn = sqlite3.connect(\"mydatabase.db\") # read data from a SQLite table into a pandas DataFrame df = pd.read_sql(\"SELECT * FROM mytable\", conn) # close the connection conn.close() data = Data() data.add_df(df) Note You'll need to adjust the SQL query and the database connection parameters to match your specific use case.","title":"Using SQLite"},{"location":"tutorial/data/#using-mysql","text":"import pandas as pd import mysql.connector from ipyvizzu import Data # establish a connection to the MySQL database conn = mysql.connector.connect( user=\"myusername\", password=\"mypassword\", host=\"myhost\", database=\"mydatabase\", ) # read data from a MySQL table into a pandas DataFrame df = pd.read_sql(\"SELECT * FROM mytable\", con=conn) # close the connection conn.close() data = Data() data.add_df(df) Note You'll need to adjust the SQL query and the database connection parameters to match your specific use case.","title":"Using MySQL"},{"location":"tutorial/data/#using-postgresql","text":"import pandas as pd import psycopg2 from ipyvizzu import Data # establish a connection to the PostgreSQL database conn = psycopg2.connect( user=\"myusername\", password=\"mypassword\", host=\"myhost\", port=\"5432\", database=\"mydatabase\", ) # read data from a PostgreSQL table into a pandas DataFrame df = pd.read_sql(\"SELECT * FROM mytable\", con=conn) # close the connection conn.close() data = Data() data.add_df(df) Note You'll need to adjust the SQL query and the database connection parameters to match your specific use case.","title":"Using PostgreSQL"},{"location":"tutorial/data/#using-microsoft-sql-server","text":"import pandas as pd import pyodbc from ipyvizzu import Data # establish a connection to the Microsoft SQL Server database conn = pyodbc.connect( \"Driver={SQL Server};\" \"Server=myserver;\" \"Database=mydatabase;\" \"UID=myusername;\" \"PWD=mypassword\" ) # read data from a SQL Server table into a pandas DataFrame df = pd.read_sql(\"SELECT * FROM mytable\", con=conn) # close the connection conn.close() data = Data() data.add_df(df) Note You'll need to adjust the SQL query and the database connection parameters to match your specific use case.","title":"Using Microsoft SQL Server"},{"location":"tutorial/data/#using-pyspark-dataframe","text":"Use add_df method for adding pyspark DataFrame to Data . from pyspark.sql import SparkSession from pyspark.sql.types import ( StructType, StructField, StringType, IntegerType, ) from ipyvizzu import Data spark = SparkSession.builder.appName(\"ipyvizzu\").getOrCreate() spark_schema = StructType( [ StructField(\"Genres\", StringType(), True), StructField(\"Kinds\", StringType(), True), StructField(\"Popularity\", IntegerType(), True), ] ) spark_data = [ (\"Pop\", \"Hard\", 114), (\"Rock\", \"Hard\", 96), (\"Jazz\", \"Hard\", 78), (\"Metal\", \"Hard\", 52), (\"Pop\", \"Smooth\", 56), (\"Rock\", \"Experimental\", 36), (\"Jazz\", \"Smooth\", 174), (\"Metal\", \"Smooth\", 121), (\"Pop\", \"Experimental\", 127), (\"Rock\", \"Experimental\", 83), (\"Jazz\", \"Experimental\", 94), (\"Metal\", \"Experimental\", 58), ] df = spark.createDataFrame(spark_data, spark_schema) data = Data() data.add_df(df) Note If you want to work with pyspark DataFrame and ipyvizzu , you need to install pyspark or install it as an extra: pip install ipyvizzu[pyspark]","title":"Using pyspark DataFrame"},{"location":"tutorial/data/#using-numpy-array","text":"Use add_np_array method for adding numpy Array to Data . import numpy as np from ipyvizzu import Data numpy_array = np.array( [ [\"Pop\", \"Hard\", 114], [\"Rock\", \"Hard\", 96], [\"Jazz\", \"Hard\", 78], [\"Metal\", \"Hard\", 52], [\"Pop\", \"Smooth\", 56], [\"Rock\", \"Experimental\", 36], [\"Jazz\", \"Smooth\", 174], [\"Metal\", \"Smooth\", 121], [\"Pop\", \"Experimental\", 127], [\"Rock\", \"Experimental\", 83], [\"Jazz\", \"Experimental\", 94], [\"Metal\", \"Experimental\", 58], ] ) data = Data() data.add_np_array( numpy_array, column_name={0: \"Genres\", 1: \"Kinds\", 2: \"Popularity\"}, column_dtype={2: int}, ) Info Arrays with dimensions higher than 2 are not supported. If column_name dictionary is not added, column indices will be used as names. If column_dtype dictionary is not added, every column will use numpy_array.dtype . Note If you want to work with numpy Array and ipyvizzu , you need to install numpy or install it as an extra: pip install ipyvizzu[numpy]","title":"Using numpy Array"},{"location":"tutorial/data/#specify-data-by-series","text":"When you specify the data by series or by records, it has to be in first normal form. Here is an example of that: from ipyvizzu import Data data = Data() data.add_series( \"Genres\", [ \"Pop\", \"Rock\", \"Jazz\", \"Metal\", \"Pop\", \"Rock\", \"Jazz\", \"Metal\", \"Pop\", \"Rock\", \"Jazz\", \"Metal\", ], type=\"dimension\", ) data.add_series( \"Kinds\", [ \"Hard\", \"Hard\", \"Hard\", \"Hard\", \"Smooth\", \"Experimental\", \"Smooth\", \"Smooth\", \"Experimental\", \"Experimental\", \"Experimental\", \"Experimental\", ], type=\"dimension\", ) data.add_series( \"Popularity\", [114, 96, 78, 52, 56, 36, 174, 121, 127, 83, 94, 58], type=\"measure\", )","title":"Specify data by series"},{"location":"tutorial/data/#specify-data-by-records","text":"from ipyvizzu import Data data = Data() data.add_series(\"Genres\", type=\"dimension\") data.add_series(\"Kinds\", type=\"dimension\") data.add_series(\"Popularity\", type=\"measure\") record = [\"Pop\", \"Hard\", 114] data.add_record(record) records = [ [\"Rock\", \"Hard\", 96], [\"Jazz\", \"Hard\", 78], [\"Metal\", \"Hard\", 52], [\"Pop\", \"Smooth\", 56], [\"Rock\", \"Experimental\", 36], [\"Jazz\", \"Smooth\", 174], [\"Metal\", \"Smooth\", 121], [\"Pop\", \"Experimental\", 127], [\"Rock\", \"Experimental\", 83], [\"Jazz\", \"Experimental\", 94], [\"Metal\", \"Experimental\", 58], ] data.add_records(records) Where records can be lists as shown above or dictionaries: records = [ { \"Genres\": \"Pop\", \"Kinds\": \"Hard\", \"Popularity\": 114, }, { \"Genres\": \"Rock\", \"Kinds\": \"Hard\", \"Popularity\": 96, }, # ... ]","title":"Specify data by records"},{"location":"tutorial/data/#using-data-cube-form","text":"Note In the example below, the record Rock,Experimental,36 has been replaced with Rock,Smooth,36 in order to illustrate that only data with same dimensions can be used in the data cube form. Genres Pop Rock Jazz Metal Kinds Hard 114 96 78 52 Smooth 56 36 74 121 Experimental 127 83 94 58 Popularity from ipyvizzu import Data data = Data() data.add_dimension(\"Genres\", [\"Pop\", \"Rock\", \"Jazz\", \"Metal\"]) data.add_dimension(\"Kinds\", [\"Hard\", \"Smooth\", \"Experimental\"]) data.add_measure( \"Popularity\", [ [114, 96, 78, 52], [56, 36, 174, 121], [127, 83, 94, 58], ], )","title":"Using data cube form"},{"location":"tutorial/data/#using-json","text":"Download music_data.json here (in this example the data stored in the data cube form). from ipyvizzu import Data data = Data.from_json(\"../assets/data/music_data.json\")","title":"Using JSON"},{"location":"tutorial/events/","text":"Events You can register handlers for various events. There are mouse events ( click , mouseon ), animation events ( begin , update , complete ), and rendering events that are called before rendering the chart elements. Handlers can be registered/unregistered with the on , off method pair. Note Currently on method only accept handler's JavaScript expression as string. The event can be accessed via the event object, see the examples below. We are registering a handler for the click event which will show an alert block with information about the clicked marker. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_data.csv\" ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\", \"Kinds\"]}, \"x\": {\"set\": [\"Genres\"]}, }, \"label\": {\"attach\": [\"Popularity\"]}, \"color\": {\"set\": [\"Kinds\"]}, } ) ) click_handler = \"alert(JSON.stringify(event.data));\" click = chart.on(\"click\", click_handler) Unregistering the previously registered handler. chart.off(click) Here we override the axis label color for Jazz to red and all others to gray. label_draw_handler = ( \"event.renderingContext.fillStyle =\" + \" (event.data.text === 'Jazz') ? 'red' : 'gray';\" ) label_draw = chart.on(\"plot-axis-label-draw\", label_draw_handler) Unregistering the previously registered handler. chart.off(label_draw) The default behaviour of all events can be blocked by calling the event's preventDefault method. Here we block the drawing of the Vizzu logo in the bottom right corner of the chart. logo_draw_handler = \"event.preventDefault();\" logo_draw = chart.on(\"logo-draw\", logo_draw_handler) Unregistering the previously registered handler. chart.off(logo_draw) You can also add a background image to the chart using the preventDefault method. bgimage_draw_handler = \"\"\" const bgImage = new Image(); bgImage.src = \"https://vizzuhq.com/images/logo/logo.svg\"; // Get the dimensions of the chart canvas const vizzuCanvasWidth = event.renderingContext.canvas.width; const vizzuCanvasHeight = event.renderingContext.canvas.height; // Calculate the aspect ratios of the image and the canvas const imageAspectRatio = bgImage.width / bgImage.height; const canvasAspectRatio = vizzuCanvasWidth / vizzuCanvasHeight; // Calculate the dimensions and position of the image on the canvas let imageWidth; let imageHeight; if (imageAspectRatio > canvasAspectRatio) { imageWidth = vizzuCanvasWidth; imageHeight = vizzuCanvasWidth / imageAspectRatio; } else { imageHeight = vizzuCanvasHeight; imageWidth = vizzuCanvasHeight * imageAspectRatio; } const xOffset = (vizzuCanvasWidth - imageWidth) / 2; const yOffset = (vizzuCanvasHeight - imageHeight) / 2; // Draw the background image on the canvas event.renderingContext.drawImage( bgImage, xOffset, yOffset, imageWidth, imageHeight ); event.preventDefault(); \"\"\" bgimage_draw = chart.on(\"background-draw\", bgimage_draw_handler) Info - How to make interlacing transparent chart.animate( Style( { \"plot\": { \"xAxis\": {\"interlacing\": {\"color\": \"#ffffff00\"}}, \"yAxis\": {\"interlacing\": {\"color\": \"#ffffff00\"}}, }, } ), ) Unregistering the previously registered handler. chart.off(bgimage_draw)","title":"Events"},{"location":"tutorial/events/#events","text":"You can register handlers for various events. There are mouse events ( click , mouseon ), animation events ( begin , update , complete ), and rendering events that are called before rendering the chart elements. Handlers can be registered/unregistered with the on , off method pair. Note Currently on method only accept handler's JavaScript expression as string. The event can be accessed via the event object, see the examples below. We are registering a handler for the click event which will show an alert block with information about the clicked marker. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_data.csv\" ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\", \"Kinds\"]}, \"x\": {\"set\": [\"Genres\"]}, }, \"label\": {\"attach\": [\"Popularity\"]}, \"color\": {\"set\": [\"Kinds\"]}, } ) ) click_handler = \"alert(JSON.stringify(event.data));\" click = chart.on(\"click\", click_handler) Unregistering the previously registered handler. chart.off(click) Here we override the axis label color for Jazz to red and all others to gray. label_draw_handler = ( \"event.renderingContext.fillStyle =\" + \" (event.data.text === 'Jazz') ? 'red' : 'gray';\" ) label_draw = chart.on(\"plot-axis-label-draw\", label_draw_handler) Unregistering the previously registered handler. chart.off(label_draw) The default behaviour of all events can be blocked by calling the event's preventDefault method. Here we block the drawing of the Vizzu logo in the bottom right corner of the chart. logo_draw_handler = \"event.preventDefault();\" logo_draw = chart.on(\"logo-draw\", logo_draw_handler) Unregistering the previously registered handler. chart.off(logo_draw) You can also add a background image to the chart using the preventDefault method. bgimage_draw_handler = \"\"\" const bgImage = new Image(); bgImage.src = \"https://vizzuhq.com/images/logo/logo.svg\"; // Get the dimensions of the chart canvas const vizzuCanvasWidth = event.renderingContext.canvas.width; const vizzuCanvasHeight = event.renderingContext.canvas.height; // Calculate the aspect ratios of the image and the canvas const imageAspectRatio = bgImage.width / bgImage.height; const canvasAspectRatio = vizzuCanvasWidth / vizzuCanvasHeight; // Calculate the dimensions and position of the image on the canvas let imageWidth; let imageHeight; if (imageAspectRatio > canvasAspectRatio) { imageWidth = vizzuCanvasWidth; imageHeight = vizzuCanvasWidth / imageAspectRatio; } else { imageHeight = vizzuCanvasHeight; imageWidth = vizzuCanvasHeight * imageAspectRatio; } const xOffset = (vizzuCanvasWidth - imageWidth) / 2; const yOffset = (vizzuCanvasHeight - imageHeight) / 2; // Draw the background image on the canvas event.renderingContext.drawImage( bgImage, xOffset, yOffset, imageWidth, imageHeight ); event.preventDefault(); \"\"\" bgimage_draw = chart.on(\"background-draw\", bgimage_draw_handler) Info - How to make interlacing transparent chart.animate( Style( { \"plot\": { \"xAxis\": {\"interlacing\": {\"color\": \"#ffffff00\"}}, \"yAxis\": {\"interlacing\": {\"color\": \"#ffffff00\"}}, }, } ), ) Unregistering the previously registered handler. chart.off(bgimage_draw)","title":"Events"},{"location":"tutorial/filter_add_new_records/","text":"Filtering & adding new records Filtering enables you to zoom in or out within a chart, allowing the viewer to focus on certain selected elements, or get more context. You can also add new records to the data on the chart which makes it easy to work with real-time sources. Note Currently filter and set_filter methods only accept JavaScript expression as string. The data fields can be accessed via the record object, see the examples below. We add two items from the Genres dimension - using the || operator - to the filter, so the chart elements that belong to the other two items will vanish from the chart. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_data.csv\" ) data1 = Data() data1.add_df(df) chart = Chart() chart.animate(data1) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\", \"Kinds\"]}, \"x\": {\"set\": [\"Genres\"]}, \"label\": {\"attach\": [\"Popularity\"]}, }, \"color\": {\"attach\": [\"Kinds\"]}, } ) ) filter1 = Data.filter( \"record['Genres'] == 'Pop' || record['Genres'] == 'Metal'\" ) chart.animate(filter1) Now we add a cross-filter that includes items from both the Genres and the Kinds dimensions. This way we override the filter from the previous state. If we weren't update the filter, ipyvizzu would use it in subsequent states. filter2 = Data.filter( \"(record['Genres'] == 'Pop' || record['Genres'] == 'Metal')\" + \" && record['Kinds'] == 'Smooth'\" ) chart.animate(filter2) Switching the filter off to get back to the original view. chart.animate(Data.filter(None)) Here we add another record to the data set and update the chart accordingly. records = [ [\"Soul\", \"Hard\", 91], [\"Soul\", \"Smooth\", 57], [\"Soul\", \"Experimental\", 115], ] data2 = Data() data2.add_records(records) chart.animate(data2) Info Combining this option with the store function makes it easy to update previously configured states with fresh data since this function saves the config and style parameters of the chart into a variable but not the data.","title":"Filtering & adding new records"},{"location":"tutorial/filter_add_new_records/#filtering-adding-new-records","text":"Filtering enables you to zoom in or out within a chart, allowing the viewer to focus on certain selected elements, or get more context. You can also add new records to the data on the chart which makes it easy to work with real-time sources. Note Currently filter and set_filter methods only accept JavaScript expression as string. The data fields can be accessed via the record object, see the examples below. We add two items from the Genres dimension - using the || operator - to the filter, so the chart elements that belong to the other two items will vanish from the chart. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_data.csv\" ) data1 = Data() data1.add_df(df) chart = Chart() chart.animate(data1) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\", \"Kinds\"]}, \"x\": {\"set\": [\"Genres\"]}, \"label\": {\"attach\": [\"Popularity\"]}, }, \"color\": {\"attach\": [\"Kinds\"]}, } ) ) filter1 = Data.filter( \"record['Genres'] == 'Pop' || record['Genres'] == 'Metal'\" ) chart.animate(filter1) Now we add a cross-filter that includes items from both the Genres and the Kinds dimensions. This way we override the filter from the previous state. If we weren't update the filter, ipyvizzu would use it in subsequent states. filter2 = Data.filter( \"(record['Genres'] == 'Pop' || record['Genres'] == 'Metal')\" + \" && record['Kinds'] == 'Smooth'\" ) chart.animate(filter2) Switching the filter off to get back to the original view. chart.animate(Data.filter(None)) Here we add another record to the data set and update the chart accordingly. records = [ [\"Soul\", \"Hard\", 91], [\"Soul\", \"Smooth\", 57], [\"Soul\", \"Experimental\", 115], ] data2 = Data() data2.add_records(records) chart.animate(data2) Info Combining this option with the store function makes it easy to update previously configured states with fresh data since this function saves the config and style parameters of the chart into a variable but not the data.","title":"Filtering &amp; adding new records"},{"location":"tutorial/geometry/","text":"Geometry In ipyvizzu you can set the geometric elements used to represent your data by the geometry property within the config object. This is where the library shines - beautifully animating between the geometries! Switching the geometry to area. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_data.csv\" ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\"]}, \"x\": {\"set\": [\"Genres\"]}, }, } ) ) chart.animate(Config({\"geometry\": \"area\"})) Drawing a line chart. chart.animate(Config({\"geometry\": \"line\"})) Switching the geometry to circle. This setting is the most useful when used together with the size channel, as shown in the next chapter of the tutorial. chart.animate(Config({\"geometry\": \"circle\"})) Rectangle geometry is the default setting in ipyvizzu , used for most common charts like bar and column charts. chart.animate( Config( { \"geometry\": \"rectangle \", } ) )","title":"Geometry"},{"location":"tutorial/geometry/#geometry","text":"In ipyvizzu you can set the geometric elements used to represent your data by the geometry property within the config object. This is where the library shines - beautifully animating between the geometries! Switching the geometry to area. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_data.csv\" ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\"]}, \"x\": {\"set\": [\"Genres\"]}, }, } ) ) chart.animate(Config({\"geometry\": \"area\"})) Drawing a line chart. chart.animate(Config({\"geometry\": \"line\"})) Switching the geometry to circle. This setting is the most useful when used together with the size channel, as shown in the next chapter of the tutorial. chart.animate(Config({\"geometry\": \"circle\"})) Rectangle geometry is the default setting in ipyvizzu , used for most common charts like bar and column charts. chart.animate( Config( { \"geometry\": \"rectangle \", } ) )","title":"Geometry"},{"location":"tutorial/group_stack/","text":"Group/stack The following example shows how to group and stack elements of a bar chart. To get a stacked chart, you need to add a new dimension to the same channel where the measure is: the y-axis. However, since doing only this would result in multiple column chart elements with the same color stacked on top of each other, we also add the same dimension to the color channel. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_data.csv\" ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\"]}, \"x\": {\"set\": [\"Genres\"]}, }, } ) ) chart.animate( Config( { \"channels\": { \"y\": {\"attach\": [\"Kinds\"]}, \"color\": {\"attach\": [\"Kinds\"]}, } } ) ) By detaching this newly added dimension from the y-axis and attaching it to the x-axis, you get a grouped bar chart in a way that is easy to follow for the viewer. chart.animate( Config( { \"channels\": { \"y\": {\"detach\": [\"Kinds\"]}, \"x\": {\"attach\": [\"Kinds\"]}, }, } ) ) In order to change the category via which the elements are grouped, just change the order of the dimension with another one on the same axis. chart.animate( Config( { \"channels\": { \"x\": {\"set\": [\"Kinds\", \"Genres\"]}, }, } ) ) To stack a grouped chart, you just have to do the same thing the other way around: detach the dimension from the x-axis and attach it to the y-axis. chart.animate( Config( { \"channels\": { \"y\": {\"attach\": \"Kinds\"}, \"x\": {\"detach\": \"Kinds\"}, }, } ) )","title":"Group/stack"},{"location":"tutorial/group_stack/#groupstack","text":"The following example shows how to group and stack elements of a bar chart. To get a stacked chart, you need to add a new dimension to the same channel where the measure is: the y-axis. However, since doing only this would result in multiple column chart elements with the same color stacked on top of each other, we also add the same dimension to the color channel. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_data.csv\" ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\"]}, \"x\": {\"set\": [\"Genres\"]}, }, } ) ) chart.animate( Config( { \"channels\": { \"y\": {\"attach\": [\"Kinds\"]}, \"color\": {\"attach\": [\"Kinds\"]}, } } ) ) By detaching this newly added dimension from the y-axis and attaching it to the x-axis, you get a grouped bar chart in a way that is easy to follow for the viewer. chart.animate( Config( { \"channels\": { \"y\": {\"detach\": [\"Kinds\"]}, \"x\": {\"attach\": [\"Kinds\"]}, }, } ) ) In order to change the category via which the elements are grouped, just change the order of the dimension with another one on the same axis. chart.animate( Config( { \"channels\": { \"x\": {\"set\": [\"Kinds\", \"Genres\"]}, }, } ) ) To stack a grouped chart, you just have to do the same thing the other way around: detach the dimension from the x-axis and attach it to the y-axis. chart.animate( Config( { \"channels\": { \"y\": {\"attach\": \"Kinds\"}, \"x\": {\"detach\": \"Kinds\"}, }, } ) )","title":"Group/stack"},{"location":"tutorial/orientation_split_polar/","text":"Orientation, split & polar Now that you are familiar with the basic logic and operation of ipyvizzu , let's dive in with some more advanced features that you can use to create animated data stories and show the data from different perspectives. Switching orientation means that you put a measure from one axis to the other to see the data from a different perspective. This is once again a state you should only use temporarily. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_data.csv\" ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\", \"Kinds\"]}, \"x\": {\"set\": [\"Genres\"]}, \"label\": {\"attach\": [\"Popularity\"]}, }, \"color\": {\"attach\": [\"Kinds\"]}, } ) ) chart.animate( Config( { \"channels\": { \"y\": { \"detach\": [\"Popularity\"], }, \"x\": { \"attach\": [\"Popularity\"], }, } } ) ) By turning the split parameter on, you can see stacked elements side-by-side, which enables the comparison of the components. chart.animate(Config({\"split\": True})) Merging the components by turning the split parameter off. chart.animate(Config({\"split\": False})) We aggregate the data by removing the Genres dimension from the x-axis. chart.animate( Config( { \"channels\": { \"x\": { \"detach\": [\"Genres\"], } } } ) ) Switching from cartesian coordinates to polar. When doing so, it is worth setting the axis range on the axis with the dimension so that the viewers can easily compare the values shown. If you want to return to the default cartesian coordinates, just set the coordSystem parameter to \"cartesian\" . Info The range of the x-axis is automatically set to max:133% as this is the standard way to show radial charts. chart.animate( Config( { \"channels\": { \"y\": { \"range\": { \"min\": \"-30%\", }, }, }, \"coordSystem\": \"polar\", } ) )","title":"Orientation, split & polar"},{"location":"tutorial/orientation_split_polar/#orientation-split-polar","text":"Now that you are familiar with the basic logic and operation of ipyvizzu , let's dive in with some more advanced features that you can use to create animated data stories and show the data from different perspectives. Switching orientation means that you put a measure from one axis to the other to see the data from a different perspective. This is once again a state you should only use temporarily. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_data.csv\" ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\", \"Kinds\"]}, \"x\": {\"set\": [\"Genres\"]}, \"label\": {\"attach\": [\"Popularity\"]}, }, \"color\": {\"attach\": [\"Kinds\"]}, } ) ) chart.animate( Config( { \"channels\": { \"y\": { \"detach\": [\"Popularity\"], }, \"x\": { \"attach\": [\"Popularity\"], }, } } ) ) By turning the split parameter on, you can see stacked elements side-by-side, which enables the comparison of the components. chart.animate(Config({\"split\": True})) Merging the components by turning the split parameter off. chart.animate(Config({\"split\": False})) We aggregate the data by removing the Genres dimension from the x-axis. chart.animate( Config( { \"channels\": { \"x\": { \"detach\": [\"Genres\"], } } } ) ) Switching from cartesian coordinates to polar. When doing so, it is worth setting the axis range on the axis with the dimension so that the viewers can easily compare the values shown. If you want to return to the default cartesian coordinates, just set the coordSystem parameter to \"cartesian\" . Info The range of the x-axis is automatically set to max:133% as this is the standard way to show radial charts. chart.animate( Config( { \"channels\": { \"y\": { \"range\": { \"min\": \"-30%\", }, }, }, \"coordSystem\": \"polar\", } ) )","title":"Orientation, split &amp; polar"},{"location":"tutorial/shorthands_store/","text":"Shorthands & Store To assist you with the development we added various shorthands that will make your code more compact. We also added store functions, which enable you to save either a chart state or a whole animation into a variable that you can reuse later instead of setting up that state or animation once again. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_data.csv\" ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"title\": \"Store function\", \"channels\": { \"y\": {\"set\": [\"Popularity\", \"Kinds\"]}, \"x\": {\"set\": [\"Genres\"]}, }, \"label\": {\"attach\": [\"Popularity\"]}, \"color\": {\"set\": [\"Kinds\"]}, } ) ) chart.animate( Config( { \"align\": \"stretch\", } ) ) Let's save this state by calling the store function. snapshot = chart.store() If you set/attach/detach just one series on a channel, you don't have to put that series into an array. Also, let's save this animation by calling the store method of the control chart object. chart.animate( Config( { \"channels\": { # \"x\": { \"attach\": [ \"Kinds\" ] }, \"x\": {\"attach\": \"Kinds\"}, # \"y\": { \"detach\": [ \"Kinds\" ] }, \"y\": {\"detach\": \"Kinds\"}, }, \"align\": \"none\", } ) ) animation = chart.control.store() If you use set on a channel and no other options like range, you don't have to express that channel as an object. If you only set one series on a channel you can simply write the series' name after the channel name. chart.animate( Config( { \"channels\": { # \"y\": { \"set\": [ \"Kinds\", \"Popularity\" ] }, \"y\": [\"Kinds\", \"Popularity\"], # \"x\": { \"set\": [ \"Genres\" ] }, \"x\": \"Genres\", } } ) ) In any case, you can simply omit the channel object, ipyvizzu will automatically recognize the channels by their names. chart.animate( Config( { # \"channels\": { \"y\": \"Kinds\", \"x\": [\"Genres\", \"Popularity\"] # } } ) ) Instead of creating nested objects, you can set the styles like this. chart.animate( Style( { # \"plot\": { \"xAxis\": { \"label\": { \"fontSize\": \"150%\" } } }, \"plot.xAxis.label.fontSize\": \"150%\", \"title.backgroundColor\": \"#A0A0A0\", } ) ) This is how you can reuse a previously stored animation. chart.animate(animation) You can also get back to a state that you previously stored. chart.animate(snapshot)","title":"Shorthands & Store"},{"location":"tutorial/shorthands_store/#shorthands-store","text":"To assist you with the development we added various shorthands that will make your code more compact. We also added store functions, which enable you to save either a chart state or a whole animation into a variable that you can reuse later instead of setting up that state or animation once again. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config, Style df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_data.csv\" ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"title\": \"Store function\", \"channels\": { \"y\": {\"set\": [\"Popularity\", \"Kinds\"]}, \"x\": {\"set\": [\"Genres\"]}, }, \"label\": {\"attach\": [\"Popularity\"]}, \"color\": {\"set\": [\"Kinds\"]}, } ) ) chart.animate( Config( { \"align\": \"stretch\", } ) ) Let's save this state by calling the store function. snapshot = chart.store() If you set/attach/detach just one series on a channel, you don't have to put that series into an array. Also, let's save this animation by calling the store method of the control chart object. chart.animate( Config( { \"channels\": { # \"x\": { \"attach\": [ \"Kinds\" ] }, \"x\": {\"attach\": \"Kinds\"}, # \"y\": { \"detach\": [ \"Kinds\" ] }, \"y\": {\"detach\": \"Kinds\"}, }, \"align\": \"none\", } ) ) animation = chart.control.store() If you use set on a channel and no other options like range, you don't have to express that channel as an object. If you only set one series on a channel you can simply write the series' name after the channel name. chart.animate( Config( { \"channels\": { # \"y\": { \"set\": [ \"Kinds\", \"Popularity\" ] }, \"y\": [\"Kinds\", \"Popularity\"], # \"x\": { \"set\": [ \"Genres\" ] }, \"x\": \"Genres\", } } ) ) In any case, you can simply omit the channel object, ipyvizzu will automatically recognize the channels by their names. chart.animate( Config( { # \"channels\": { \"y\": \"Kinds\", \"x\": [\"Genres\", \"Popularity\"] # } } ) ) Instead of creating nested objects, you can set the styles like this. chart.animate( Style( { # \"plot\": { \"xAxis\": { \"label\": { \"fontSize\": \"150%\" } } }, \"plot.xAxis.label.fontSize\": \"150%\", \"title.backgroundColor\": \"#A0A0A0\", } ) ) This is how you can reuse a previously stored animation. chart.animate(animation) You can also get back to a state that you previously stored. chart.animate(snapshot)","title":"Shorthands &amp; Store"},{"location":"tutorial/sorting/","text":"Sorting ipyvizzu provides multiple options to sort data. By default, the data is sorted by the order it is added to ipyvizzu . This is why we suggest to add temporal data such as dates in chronological order - from oldest to newest. You can also sort the elements by value, which will provide you with an ascending order. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_data.csv\" ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\", \"Kinds\"]}, \"x\": {\"set\": [\"Genres\"]}, \"label\": {\"attach\": [\"Popularity\"]}, }, \"color\": {\"attach\": [\"Kinds\"]}, } ) ) chart.animate( Config( { \"sort\": \"byValue\", } ) ) If you want descending order instead, you have to set the reverse parameter to True . When used without setting the sorting to byValue , the elements will be in the opposite order than they are in the data set added to ipyvizzu . chart.animate( Config( { \"reverse\": True, } ) ) This is how to switch back to the default sorting. chart.animate( Config( { \"sort\": \"none\", \"reverse\": False, } ) ) When you have more than one dimension on a channel, their order determines how the elements are grouped. For example, below - each set of bars is first organized by Genres , and then we have one bar for each of Kinds . chart.animate( Config( { \"channels\": { \"y\": {\"detach\": [\"Kinds\"]}, \"x\": {\"set\": [\"Genres\", \"Kinds\"]}, } } ) ) When switching the order of dimensions on the x-axis ipyvizzu will rearrange the elements according to this new logic. Note The legend is automatically removed during the animation. chart.animate( Config( { \"channels\": { \"x\": {\"set\": [\"Kinds\", \"Genres\"]}, } } ) )","title":"Sorting"},{"location":"tutorial/sorting/#sorting","text":"ipyvizzu provides multiple options to sort data. By default, the data is sorted by the order it is added to ipyvizzu . This is why we suggest to add temporal data such as dates in chronological order - from oldest to newest. You can also sort the elements by value, which will provide you with an ascending order. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_data.csv\" ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Popularity\", \"Kinds\"]}, \"x\": {\"set\": [\"Genres\"]}, \"label\": {\"attach\": [\"Popularity\"]}, }, \"color\": {\"attach\": [\"Kinds\"]}, } ) ) chart.animate( Config( { \"sort\": \"byValue\", } ) ) If you want descending order instead, you have to set the reverse parameter to True . When used without setting the sorting to byValue , the elements will be in the opposite order than they are in the data set added to ipyvizzu . chart.animate( Config( { \"reverse\": True, } ) ) This is how to switch back to the default sorting. chart.animate( Config( { \"sort\": \"none\", \"reverse\": False, } ) ) When you have more than one dimension on a channel, their order determines how the elements are grouped. For example, below - each set of bars is first organized by Genres , and then we have one bar for each of Kinds . chart.animate( Config( { \"channels\": { \"y\": {\"detach\": [\"Kinds\"]}, \"x\": {\"set\": [\"Genres\", \"Kinds\"]}, } } ) ) When switching the order of dimensions on the x-axis ipyvizzu will rearrange the elements according to this new logic. Note The legend is automatically removed during the animation. chart.animate( Config( { \"channels\": { \"x\": {\"set\": [\"Kinds\", \"Genres\"]}, } } ) )","title":"Sorting"},{"location":"tutorial/style/","text":"Style ipyizzu offers a wide variety of styling options when you want to personalize the look and feel of your animated charts. The styling properties are organized into a hierarchical structure. Font styles, when set on a higher level of this hierarchy, will be inherited on all lower levels. You can use absolute sizing ( px , pt ) and relative ( % , em , vw ). Similarly to all other parameters of the animate method, ipyizzu will animate the changes in the styling of the charts. This provides an excellent opportunity to check and control the effect of these changes. Styling properties You can find below the complete list of the available styling properties and their default values. + expand all backgroundColor: #FFFFFFFF borderColor: #FFFFFFFF borderWidth: 0.000000 fontFamily: Roboto, sans-serif fontSize: 1.000000em fontStyle: normal fontWeight: normal + legend \u2003backgroundColor: #00000000 \u2003borderColor: #00000000 \u2003borderWidth: 0.000000 \u2003+ label \u2003\u2003backgroundColor: #00000000 \u2003\u2003color: #999999FF \u2003\u2003fontFamily: \u2003\u2003fontSize: 1.000000em \u2003\u2003fontStyle: normal \u2003\u2003fontWeight: normal \u2003\u2003maxFractionDigits: 3.000000 \u2003\u2003numberFormat: prefixed \u2003\u2003numberScale: k,M,G,T,P,E,Z,Y \u2003\u2003paddingBottom: 0.416667em \u2003\u2003paddingLeft: 0.416667em \u2003\u2003paddingRight: 0.416667em \u2003\u2003paddingTop: 0.416667em \u2003\u2003textAlign: left \u2003+ marker \u2003\u2003size: 1.285714em \u2003\u2003type: circle \u2003maxWidth: 30.000000% \u2003paddingBottom: 5.000000em \u2003paddingLeft: 1.666667em \u2003paddingRight: 0.416667em \u2003paddingTop: 0.833333em \u2003+ title \u2003\u2003backgroundColor: #00000000 \u2003\u2003color: #999999FF \u2003\u2003fontFamily: \u2003\u2003fontSize: 1.166667em \u2003\u2003fontStyle: normal \u2003\u2003fontWeight: normal \u2003\u2003maxFractionDigits: 3.000000 \u2003\u2003numberFormat: prefixed \u2003\u2003numberScale: k,M,G,T,P,E,Z,Y \u2003\u2003paddingBottom: 0.357143em \u2003\u2003paddingLeft: 0.357143em \u2003\u2003paddingRight: 0.357143em \u2003\u2003paddingTop: 0.857143em \u2003\u2003textAlign: left \u2003width: 8.333333em + logo \u2003filter: color(#D8D8D8FF) \u2003paddingBottom: 47.500000% \u2003paddingLeft: 40.000000% \u2003paddingRight: 40.000000% \u2003paddingTop: 47.500000% \u2003width: 3.186307em paddingBottom: 0.833333em paddingLeft: 0.416667em paddingRight: 0.416667em paddingTop: 0.416667em + plot \u2003areaColor: #00000000 \u2003backgroundColor: #00000000 \u2003borderColor: #00000000 \u2003borderWidth: 0.000000 \u2003+ marker \u2003\u2003borderOpacity: 1.000000 \u2003\u2003borderOpacityMode: premultiplied \u2003\u2003borderWidth: 1.000000 \u2003\u2003circleMaxRadius: 0.050000 \u2003\u2003circleMinRadius: 0.005000 \u2003\u2003colorGradient: #4171CDFF 0.000000, #8536C7FF 0.250000, #C33E7FFF 0.500000, #E9974EFF 0.750000, #F3F239FF 1.000000 \u2003\u2003colorPalette: #4171CDFF #03AE71FF #F4941BFF #F4C204FF #D49664FF #F25456FF #9E67ABFF #BCA604FF #846E1CFF #FC763CFF #B462ACFF #F492FCFF #BC4A94FF #9C7EF4FF #9C52B4FF #6CA2FCFF #5C6EBCFF #7C868CFF #AC968CFF #4C7450FF #AC7A4CFF #7CAE54FF #4C7450FF #9C1A6CFF #AC3E94FF #B41204FF \u2003\u2003fillOpacity: 1.000000 \u2003\u2003+ guides \u2003\u2003\u2003color: #E8E8E8FF \u2003\u2003\u2003lineWidth: 0.500000 \u2003\u2003+ label \u2003\u2003\u2003angle: 0.000000rad \u2003\u2003\u2003backgroundColor: #00000000 \u2003\u2003\u2003color: #00000000 \u2003\u2003\u2003filter: lightness(0.000000) \u2003\u2003\u2003fontFamily: \u2003\u2003\u2003fontSize: 0.916667em \u2003\u2003\u2003fontStyle: normal \u2003\u2003\u2003fontWeight: bold \u2003\u2003\u2003format: measureFirst \u2003\u2003\u2003maxFractionDigits: 3.000000 \u2003\u2003\u2003numberFormat: grouped \u2003\u2003\u2003numberScale: k,M,G,T,P,E,Z,Y \u2003\u2003\u2003orientation: horizontal \u2003\u2003\u2003paddingBottom: 0.454545em \u2003\u2003\u2003paddingLeft: 0.454545em \u2003\u2003\u2003paddingRight: 0.454545em \u2003\u2003\u2003paddingTop: 0.454545em \u2003\u2003\u2003position: center \u2003\u2003\u2003textAlign: center \u2003\u2003lineMaxWidth: 0.010000 \u2003\u2003lineMinWidth: 0.001000 \u2003\u2003maxLightness: 0.400000 \u2003\u2003minLightness: -0.400000 \u2003\u2003rectangleSpacing: null \u2003overflow: hidden \u2003paddingBottom: 5.000000em \u2003paddingLeft: 6.666667em \u2003paddingRight: 3.750000em \u2003paddingTop: 4.166667em \u2003+ xAxis \u2003\u2003color: #CCCCCCFF \u2003\u2003+ guides \u2003\u2003\u2003color: #EDEDEDFF \u2003\u2003\u2003lineWidth: 1.000000 \u2003\u2003+ interlacing \u2003\u2003\u2003color: #F7F7F7FF \u2003\u2003+ label \u2003\u2003\u2003angle: 0.000000rad \u2003\u2003\u2003backgroundColor: #00000000 \u2003\u2003\u2003color: #999999FF \u2003\u2003\u2003fontFamily: \u2003\u2003\u2003fontSize: 1.000000em \u2003\u2003\u2003fontStyle: normal \u2003\u2003\u2003fontWeight: normal \u2003\u2003\u2003maxFractionDigits: 3.000000 \u2003\u2003\u2003numberFormat: prefixed \u2003\u2003\u2003numberScale: k,M,G,T,P,E,Z,Y \u2003\u2003\u2003orientation: horizontal \u2003\u2003\u2003paddingBottom: 0.666667em \u2003\u2003\u2003paddingLeft: 0.666667em \u2003\u2003\u2003paddingRight: 0.666667em \u2003\u2003\u2003paddingTop: 0.666667em \u2003\u2003\u2003position: min-edge \u2003\u2003\u2003side: negative \u2003\u2003\u2003textAlign: left \u2003\u2003+ ticks \u2003\u2003\u2003color: #CCCCCCFF \u2003\u2003\u2003length: 0.416667em \u2003\u2003\u2003lineWidth: 1.000000 \u2003\u2003\u2003position: outside \u2003\u2003+ title \u2003\u2003\u2003backgroundColor: #00000000 \u2003\u2003\u2003color: #999999FF \u2003\u2003\u2003fontFamily: \u2003\u2003\u2003fontSize: 1.166667em \u2003\u2003\u2003fontStyle: normal \u2003\u2003\u2003fontWeight: normal \u2003\u2003\u2003maxFractionDigits: 3.000000 \u2003\u2003\u2003numberFormat: prefixed \u2003\u2003\u2003numberScale: k,M,G,T,P,E,Z,Y \u2003\u2003\u2003orientation: horizontal \u2003\u2003\u2003paddingBottom: 1.714286em \u2003\u2003\u2003paddingLeft: 0.357143em \u2003\u2003\u2003paddingRight: 0.357143em \u2003\u2003\u2003paddingTop: 1.714286em \u2003\u2003\u2003position: min-edge \u2003\u2003\u2003side: negative \u2003\u2003\u2003textAlign: left \u2003\u2003\u2003vposition: middle \u2003\u2003\u2003vside: upon \u2003+ yAxis \u2003\u2003color: #CCCCCCFF \u2003\u2003+ guides \u2003\u2003\u2003color: #EDEDEDFF \u2003\u2003\u2003lineWidth: 1.000000 \u2003\u2003+ interlacing \u2003\u2003\u2003color: #F7F7F7FF \u2003\u2003+ label \u2003\u2003\u2003angle: 0.000000rad \u2003\u2003\u2003backgroundColor: #00000000 \u2003\u2003\u2003color: #999999FF \u2003\u2003\u2003fontFamily: \u2003\u2003\u2003fontSize: 1.000000em \u2003\u2003\u2003fontStyle: normal \u2003\u2003\u2003fontWeight: normal \u2003\u2003\u2003maxFractionDigits: 3.000000 \u2003\u2003\u2003numberFormat: prefixed \u2003\u2003\u2003numberScale: k,M,G,T,P,E,Z,Y \u2003\u2003\u2003orientation: horizontal \u2003\u2003\u2003paddingBottom: 0.666667em \u2003\u2003\u2003paddingLeft: 0.666667em \u2003\u2003\u2003paddingRight: 0.666667em \u2003\u2003\u2003paddingTop: 0.666667em \u2003\u2003\u2003position: min-edge \u2003\u2003\u2003side: negative \u2003\u2003\u2003textAlign: left \u2003\u2003+ ticks \u2003\u2003\u2003color: #CCCCCCFF \u2003\u2003\u2003length: 0.416667em \u2003\u2003\u2003lineWidth: 1.000000 \u2003\u2003\u2003position: outside \u2003\u2003+ title \u2003\u2003\u2003backgroundColor: #00000000 \u2003\u2003\u2003color: #999999FF \u2003\u2003\u2003fontFamily: \u2003\u2003\u2003fontSize: 1.166667em \u2003\u2003\u2003fontStyle: normal \u2003\u2003\u2003fontWeight: normal \u2003\u2003\u2003maxFractionDigits: 3.000000 \u2003\u2003\u2003numberFormat: prefixed \u2003\u2003\u2003numberScale: k,M,G,T,P,E,Z,Y \u2003\u2003\u2003orientation: horizontal \u2003\u2003\u2003paddingBottom: 1.071429em \u2003\u2003\u2003paddingLeft: 0.357143em \u2003\u2003\u2003paddingRight: 0.357143em \u2003\u2003\u2003paddingTop: 1.071429em \u2003\u2003\u2003position: min-edge \u2003\u2003\u2003side: upon \u2003\u2003\u2003textAlign: left \u2003\u2003\u2003vposition: end \u2003\u2003\u2003vside: positive + title \u2003backgroundColor: #00000000 \u2003color: #494949FF \u2003fontFamily: \u2003fontSize: 2.166667em \u2003fontStyle: normal \u2003fontWeight: normal \u2003maxFractionDigits: 3.000000 \u2003numberFormat: prefixed \u2003numberScale: k,M,G,T,P,E,Z,Y \u2003paddingBottom: 0.000000px \u2003paddingLeft: 0.384615em \u2003paddingRight: 0.384615em \u2003paddingTop: 0.576923em \u2003textAlign: center + tooltip \u2003arrowSize: 8.000000 \u2003backgroundColor: #FFFFFFFF \u2003borderColor: #D8D8D8FF \u2003borderRadius: 3.000000 \u2003borderWidth: 1.000000 \u2003color: #191919FF \u2003distance: 2.000000 \u2003dropShadow: 3.000000 \u2003fontFamily: \u2003fontSize: 12.000000px \u2003fontStyle: normal \u2003fontWeight: normal \u2003layout: multiLine \u2003seriesName: \u2003shadowColor: #0000000A","title":"Style"},{"location":"tutorial/style/#style","text":"ipyizzu offers a wide variety of styling options when you want to personalize the look and feel of your animated charts. The styling properties are organized into a hierarchical structure. Font styles, when set on a higher level of this hierarchy, will be inherited on all lower levels. You can use absolute sizing ( px , pt ) and relative ( % , em , vw ). Similarly to all other parameters of the animate method, ipyizzu will animate the changes in the styling of the charts. This provides an excellent opportunity to check and control the effect of these changes.","title":"Style"},{"location":"tutorial/style/#styling-properties","text":"You can find below the complete list of the available styling properties and their default values. + expand all backgroundColor: #FFFFFFFF borderColor: #FFFFFFFF borderWidth: 0.000000 fontFamily: Roboto, sans-serif fontSize: 1.000000em fontStyle: normal fontWeight: normal + legend \u2003backgroundColor: #00000000 \u2003borderColor: #00000000 \u2003borderWidth: 0.000000 \u2003+ label \u2003\u2003backgroundColor: #00000000 \u2003\u2003color: #999999FF \u2003\u2003fontFamily: \u2003\u2003fontSize: 1.000000em \u2003\u2003fontStyle: normal \u2003\u2003fontWeight: normal \u2003\u2003maxFractionDigits: 3.000000 \u2003\u2003numberFormat: prefixed \u2003\u2003numberScale: k,M,G,T,P,E,Z,Y \u2003\u2003paddingBottom: 0.416667em \u2003\u2003paddingLeft: 0.416667em \u2003\u2003paddingRight: 0.416667em \u2003\u2003paddingTop: 0.416667em \u2003\u2003textAlign: left \u2003+ marker \u2003\u2003size: 1.285714em \u2003\u2003type: circle \u2003maxWidth: 30.000000% \u2003paddingBottom: 5.000000em \u2003paddingLeft: 1.666667em \u2003paddingRight: 0.416667em \u2003paddingTop: 0.833333em \u2003+ title \u2003\u2003backgroundColor: #00000000 \u2003\u2003color: #999999FF \u2003\u2003fontFamily: \u2003\u2003fontSize: 1.166667em \u2003\u2003fontStyle: normal \u2003\u2003fontWeight: normal \u2003\u2003maxFractionDigits: 3.000000 \u2003\u2003numberFormat: prefixed \u2003\u2003numberScale: k,M,G,T,P,E,Z,Y \u2003\u2003paddingBottom: 0.357143em \u2003\u2003paddingLeft: 0.357143em \u2003\u2003paddingRight: 0.357143em \u2003\u2003paddingTop: 0.857143em \u2003\u2003textAlign: left \u2003width: 8.333333em + logo \u2003filter: color(#D8D8D8FF) \u2003paddingBottom: 47.500000% \u2003paddingLeft: 40.000000% \u2003paddingRight: 40.000000% \u2003paddingTop: 47.500000% \u2003width: 3.186307em paddingBottom: 0.833333em paddingLeft: 0.416667em paddingRight: 0.416667em paddingTop: 0.416667em + plot \u2003areaColor: #00000000 \u2003backgroundColor: #00000000 \u2003borderColor: #00000000 \u2003borderWidth: 0.000000 \u2003+ marker \u2003\u2003borderOpacity: 1.000000 \u2003\u2003borderOpacityMode: premultiplied \u2003\u2003borderWidth: 1.000000 \u2003\u2003circleMaxRadius: 0.050000 \u2003\u2003circleMinRadius: 0.005000 \u2003\u2003colorGradient: #4171CDFF 0.000000, #8536C7FF 0.250000, #C33E7FFF 0.500000, #E9974EFF 0.750000, #F3F239FF 1.000000 \u2003\u2003colorPalette: #4171CDFF #03AE71FF #F4941BFF #F4C204FF #D49664FF #F25456FF #9E67ABFF #BCA604FF #846E1CFF #FC763CFF #B462ACFF #F492FCFF #BC4A94FF #9C7EF4FF #9C52B4FF #6CA2FCFF #5C6EBCFF #7C868CFF #AC968CFF #4C7450FF #AC7A4CFF #7CAE54FF #4C7450FF #9C1A6CFF #AC3E94FF #B41204FF \u2003\u2003fillOpacity: 1.000000 \u2003\u2003+ guides \u2003\u2003\u2003color: #E8E8E8FF \u2003\u2003\u2003lineWidth: 0.500000 \u2003\u2003+ label \u2003\u2003\u2003angle: 0.000000rad \u2003\u2003\u2003backgroundColor: #00000000 \u2003\u2003\u2003color: #00000000 \u2003\u2003\u2003filter: lightness(0.000000) \u2003\u2003\u2003fontFamily: \u2003\u2003\u2003fontSize: 0.916667em \u2003\u2003\u2003fontStyle: normal \u2003\u2003\u2003fontWeight: bold \u2003\u2003\u2003format: measureFirst \u2003\u2003\u2003maxFractionDigits: 3.000000 \u2003\u2003\u2003numberFormat: grouped \u2003\u2003\u2003numberScale: k,M,G,T,P,E,Z,Y \u2003\u2003\u2003orientation: horizontal \u2003\u2003\u2003paddingBottom: 0.454545em \u2003\u2003\u2003paddingLeft: 0.454545em \u2003\u2003\u2003paddingRight: 0.454545em \u2003\u2003\u2003paddingTop: 0.454545em \u2003\u2003\u2003position: center \u2003\u2003\u2003textAlign: center \u2003\u2003lineMaxWidth: 0.010000 \u2003\u2003lineMinWidth: 0.001000 \u2003\u2003maxLightness: 0.400000 \u2003\u2003minLightness: -0.400000 \u2003\u2003rectangleSpacing: null \u2003overflow: hidden \u2003paddingBottom: 5.000000em \u2003paddingLeft: 6.666667em \u2003paddingRight: 3.750000em \u2003paddingTop: 4.166667em \u2003+ xAxis \u2003\u2003color: #CCCCCCFF \u2003\u2003+ guides \u2003\u2003\u2003color: #EDEDEDFF \u2003\u2003\u2003lineWidth: 1.000000 \u2003\u2003+ interlacing \u2003\u2003\u2003color: #F7F7F7FF \u2003\u2003+ label \u2003\u2003\u2003angle: 0.000000rad \u2003\u2003\u2003backgroundColor: #00000000 \u2003\u2003\u2003color: #999999FF \u2003\u2003\u2003fontFamily: \u2003\u2003\u2003fontSize: 1.000000em \u2003\u2003\u2003fontStyle: normal \u2003\u2003\u2003fontWeight: normal \u2003\u2003\u2003maxFractionDigits: 3.000000 \u2003\u2003\u2003numberFormat: prefixed \u2003\u2003\u2003numberScale: k,M,G,T,P,E,Z,Y \u2003\u2003\u2003orientation: horizontal \u2003\u2003\u2003paddingBottom: 0.666667em \u2003\u2003\u2003paddingLeft: 0.666667em \u2003\u2003\u2003paddingRight: 0.666667em \u2003\u2003\u2003paddingTop: 0.666667em \u2003\u2003\u2003position: min-edge \u2003\u2003\u2003side: negative \u2003\u2003\u2003textAlign: left \u2003\u2003+ ticks \u2003\u2003\u2003color: #CCCCCCFF \u2003\u2003\u2003length: 0.416667em \u2003\u2003\u2003lineWidth: 1.000000 \u2003\u2003\u2003position: outside \u2003\u2003+ title \u2003\u2003\u2003backgroundColor: #00000000 \u2003\u2003\u2003color: #999999FF \u2003\u2003\u2003fontFamily: \u2003\u2003\u2003fontSize: 1.166667em \u2003\u2003\u2003fontStyle: normal \u2003\u2003\u2003fontWeight: normal \u2003\u2003\u2003maxFractionDigits: 3.000000 \u2003\u2003\u2003numberFormat: prefixed \u2003\u2003\u2003numberScale: k,M,G,T,P,E,Z,Y \u2003\u2003\u2003orientation: horizontal \u2003\u2003\u2003paddingBottom: 1.714286em \u2003\u2003\u2003paddingLeft: 0.357143em \u2003\u2003\u2003paddingRight: 0.357143em \u2003\u2003\u2003paddingTop: 1.714286em \u2003\u2003\u2003position: min-edge \u2003\u2003\u2003side: negative \u2003\u2003\u2003textAlign: left \u2003\u2003\u2003vposition: middle \u2003\u2003\u2003vside: upon \u2003+ yAxis \u2003\u2003color: #CCCCCCFF \u2003\u2003+ guides \u2003\u2003\u2003color: #EDEDEDFF \u2003\u2003\u2003lineWidth: 1.000000 \u2003\u2003+ interlacing \u2003\u2003\u2003color: #F7F7F7FF \u2003\u2003+ label \u2003\u2003\u2003angle: 0.000000rad \u2003\u2003\u2003backgroundColor: #00000000 \u2003\u2003\u2003color: #999999FF \u2003\u2003\u2003fontFamily: \u2003\u2003\u2003fontSize: 1.000000em \u2003\u2003\u2003fontStyle: normal \u2003\u2003\u2003fontWeight: normal \u2003\u2003\u2003maxFractionDigits: 3.000000 \u2003\u2003\u2003numberFormat: prefixed \u2003\u2003\u2003numberScale: k,M,G,T,P,E,Z,Y \u2003\u2003\u2003orientation: horizontal \u2003\u2003\u2003paddingBottom: 0.666667em \u2003\u2003\u2003paddingLeft: 0.666667em \u2003\u2003\u2003paddingRight: 0.666667em \u2003\u2003\u2003paddingTop: 0.666667em \u2003\u2003\u2003position: min-edge \u2003\u2003\u2003side: negative \u2003\u2003\u2003textAlign: left \u2003\u2003+ ticks \u2003\u2003\u2003color: #CCCCCCFF \u2003\u2003\u2003length: 0.416667em \u2003\u2003\u2003lineWidth: 1.000000 \u2003\u2003\u2003position: outside \u2003\u2003+ title \u2003\u2003\u2003backgroundColor: #00000000 \u2003\u2003\u2003color: #999999FF \u2003\u2003\u2003fontFamily: \u2003\u2003\u2003fontSize: 1.166667em \u2003\u2003\u2003fontStyle: normal \u2003\u2003\u2003fontWeight: normal \u2003\u2003\u2003maxFractionDigits: 3.000000 \u2003\u2003\u2003numberFormat: prefixed \u2003\u2003\u2003numberScale: k,M,G,T,P,E,Z,Y \u2003\u2003\u2003orientation: horizontal \u2003\u2003\u2003paddingBottom: 1.071429em \u2003\u2003\u2003paddingLeft: 0.357143em \u2003\u2003\u2003paddingRight: 0.357143em \u2003\u2003\u2003paddingTop: 1.071429em \u2003\u2003\u2003position: min-edge \u2003\u2003\u2003side: upon \u2003\u2003\u2003textAlign: left \u2003\u2003\u2003vposition: end \u2003\u2003\u2003vside: positive + title \u2003backgroundColor: #00000000 \u2003color: #494949FF \u2003fontFamily: \u2003fontSize: 2.166667em \u2003fontStyle: normal \u2003fontWeight: normal \u2003maxFractionDigits: 3.000000 \u2003numberFormat: prefixed \u2003numberScale: k,M,G,T,P,E,Z,Y \u2003paddingBottom: 0.000000px \u2003paddingLeft: 0.384615em \u2003paddingRight: 0.384615em \u2003paddingTop: 0.576923em \u2003textAlign: center + tooltip \u2003arrowSize: 8.000000 \u2003backgroundColor: #FFFFFFFF \u2003borderColor: #D8D8D8FF \u2003borderRadius: 3.000000 \u2003borderWidth: 1.000000 \u2003color: #191919FF \u2003distance: 2.000000 \u2003dropShadow: 3.000000 \u2003fontFamily: \u2003fontSize: 12.000000px \u2003fontStyle: normal \u2003fontWeight: normal \u2003layout: multiLine \u2003seriesName: \u2003shadowColor: #0000000A","title":"Styling properties"},{"location":"tutorial/without_coordinates_noop_channel/","text":"Without coordinates & noop channel Certain chart types have neither measures nor dimensions on the axes such as treemaps and bubble charts. This is a case when the noop channel comes in handy for grouping and stacking elements in these kinds of charts. To get to a treemap, we have to detach all dimensions and the measure from the axes and put two of them on the size channel, whereas the other dimension is still on the color channel. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_data.csv\" ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Kinds\", \"Popularity\"]}, \"x\": {\"set\": [\"Genres\"]}, \"label\": {\"attach\": [\"Popularity\"]}, }, \"color\": {\"set\": [\"Kinds\"]}, } ) ) chart.animate( Config( { \"channels\": { \"y\": { \"set\": None, }, \"x\": { \"set\": None, }, \"size\": { \"attach\": [\"Genres\", \"Popularity\"], }, } } ) ) Getting from a treemap to a bubble chart is simply by changing the geometry to circle. This bubble chart is stacked by the Kinds dimension that is on the size channel - this is why the bubbles are in separate, small groups. chart.animate( Config( { \"geometry\": \"circle\", } ) ) In order to show all bubbles as one group, we use the noop (no operations) channel for the Genres dimension. The noop channel enables us to have a dimension on the chart, that doesn\u2019t affect any parameter of the elements, only their count. chart.animate( Config( { \"channels\": { \"size\": {\"detach\": \"Genres\"}, \"noop\": {\"set\": \"Genres\"}, } } ) )","title":"Without coordinates & noop channel"},{"location":"tutorial/without_coordinates_noop_channel/#without-coordinates-noop-channel","text":"Certain chart types have neither measures nor dimensions on the axes such as treemaps and bubble charts. This is a case when the noop channel comes in handy for grouping and stacking elements in these kinds of charts. To get to a treemap, we have to detach all dimensions and the measure from the axes and put two of them on the size channel, whereas the other dimension is still on the color channel. Info - How to setup Chart import pandas as pd from ipyvizzu import Chart, Data, Config df = pd.read_csv( \"https://ipyvizzu.vizzuhq.com/0.16/assets/data/music_data.csv\" ) data = Data() data.add_df(df) chart = Chart() chart.animate(data) chart.animate( Config( { \"channels\": { \"y\": {\"set\": [\"Kinds\", \"Popularity\"]}, \"x\": {\"set\": [\"Genres\"]}, \"label\": {\"attach\": [\"Popularity\"]}, }, \"color\": {\"set\": [\"Kinds\"]}, } ) ) chart.animate( Config( { \"channels\": { \"y\": { \"set\": None, }, \"x\": { \"set\": None, }, \"size\": { \"attach\": [\"Genres\", \"Popularity\"], }, } } ) ) Getting from a treemap to a bubble chart is simply by changing the geometry to circle. This bubble chart is stacked by the Kinds dimension that is on the size channel - this is why the bubbles are in separate, small groups. chart.animate( Config( { \"geometry\": \"circle\", } ) ) In order to show all bubbles as one group, we use the noop (no operations) channel for the Genres dimension. The noop channel enables us to have a dimension on the chart, that doesn\u2019t affect any parameter of the elements, only their count. chart.animate( Config( { \"channels\": { \"size\": {\"detach\": \"Genres\"}, \"noop\": {\"set\": \"Genres\"}, } } ) )","title":"Without coordinates &amp; noop channel"},{"location":"coverage/","text":"article h1, article > a, .md-sidebar--secondary { display: none !important; } var coviframe = document.getElementById(\"coviframe\"); function resizeIframe() { coviframe.style.height = coviframe.contentWindow.document.documentElement.offsetHeight + 'px'; } coviframe.contentWindow.document.body.onclick = function() { coviframe.contentWindow.location.reload(); }","title":"Coverage report"}]}