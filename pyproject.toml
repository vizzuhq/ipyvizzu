[project]
name = "ipyvizzu"
dynamic = ["version"]
description = "Build animated charts in Jupyter Notebook and similar environments with a simple Python syntax."
authors = [
    {name = "Vizzu Inc.", email = "hello@vizzuhq.com"},
]
readme = "README.md"
requires-python = ">=3.6"
dependencies = [
    "typing_extensions ; python_version < '3.8'",
    "IPython",
    "jsonschema",
]
license = {text = "Apache-2.0"}
classifiers = [
    "Environment :: Console",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
]
keywords = [
    "python",
    "chart",
    "charts",
    "dataviz",
    "jupyter",
    "animation",
    "ipython",
    "graphs",
    "storytelling",
    "jupyter-notebook",
    "data-visualization",
    "graphing",
    "plotting",
    "charting",
    "vizzu"
]

[project.optional-dependencies]
pandas = [
    "pandas",
]
pyspark = [
    "pyspark",
]
numpy = [
    "numpy",
]
fugue = [
    "fugue >= 0.8.1 ; python_version >= '3.7'",
]

[project.urls]
Homepage = "https://ipyvizzu.vizzuhq.com"
Documentation = "https://ipyvizzu.vizzuhq.com"
Source = "https://github.com/vizzuhq/ipyvizzu"
Tracker = "https://github.com/vizzuhq/ipyvizzu/issues"

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.pdm.package-dir]
ipyvizzu = "src/ipyvizzu"

[tool.pdm.version]
source = "file"
path = "src/ipyvizzu/__version__.py"

[tool.pdm.scripts]
lock = {composite = ["lock-py", "lock-js"]}
lock-py = "pdm lock --no-default -d"
lock-js = "yarn up"

format = {composite = ["format-src", "format-docs", "format-tools"]}
format-src = {composite = ["format-src-py", "format-src-js"]}
format-src-py = {composite = ["format-black src tests"]}
format-src-js = {composite = ["format-prettier src tests"]}
format-docs = {composite = ["format-docs-py", "format-docs-js"]}
format-docs-py = {composite = ["format-mdformat docs README.md CONTRIBUTING.md CODE_OF_CONDUCT.md"]}
format-docs-js = {composite = ["format-prettier docs"]}
format-tools = {composite = ["format-tools-py", "format-tools-js"]}
format-tools-py = {composite = ["format-black tools"]}
format-tools-js = {composite = ["format-prettier package.json tools .github"]}
format-black = "black --diff --check"
format-mdformat = "python ./tools/ci/std_check.py mdformat --wrap 80 --end-of-line keep --line-length 70 --check"
format-prettier = "yarn prettier -c" 

lint = {composite = ["lint-src", "lint-docs", "lint-tools"]}
lint-src = {composite = ["lint-src-py", "lint-src-js"]}
lint-src-py = {composite = ["lint-pylint src tests"]}
lint-src-js = {composite = ["lint-eslint src"]}
lint-docs = {composite = ["lint-docs-js"]}
lint-docs-js = {composite = ["lint-eslint docs"]}
lint-tools = {composite = ["lint-tools-py", "lint-tools-js"]}
lint-tools-py = {composite = ["lint-pylint tools"]}
lint-tools-js = {composite = ["lint-eslint tools"]}
lint-pylint = "pylint"
lint-eslint = "yarn eslint --ext .js,.cjs,.mjs"

type = {composite = ["type-src", "type-tools"]}
type-src = {composite = ["type-src-py"]}
type-src-py = {composite = ["type-mypy src tests"]}
type-tools = {composite = ["type-tools-py"]}
type-tools-py = {composite = ["type-mypy tools"]}
type-mypy = "mypy"

test = "tox"

ci = {composite = ["ci-src", "ci-docs", "ci-tools"]}
ci-src = {composite = ["ci-src-py", "ci-src-js"]}
ci-src-py = {composite = ["format-src-py ", "lint-src-py ", "type-src-py", "test"]}
ci-src-js = {composite = ["format-src-js ", "lint-src-js "]}
ci-docs = {composite = ["ci-docs-py", "ci-docs-js"]}
ci-docs-py = {composite = ["format-docs-py "]}
ci-docs-js = {composite = ["format-docs-js ", "lint-docs-js "]}
ci-tools = {composite = ["ci-tools-py", "ci-tools-js"]}
ci-tools-py = {composite = ["format-tools-py", "lint-tools-py", "type-tools-py"]}
ci-tools-js = {composite = ["format-tools-js ", "lint-tools-js "]}

fix-format = {composite = ["fix-format-src", "fix-format-docs", "fix-format-tools"]}
fix-format-src = {composite = ["fix-format-src-py", "fix-format-src-js"]}
fix-format-src-py = {composite = ["fix-format-black src tests"]}
fix-format-src-js = {composite = ["fix-format-prettier src tests"]}
fix-format-docs = {composite = ["fix-format-docs-py", "fix-format-docs-js"]}
fix-format-docs-py = {composite = ["fix-format-mdformat docs README.md CONTRIBUTING.md CODE_OF_CONDUCT.md"]}
fix-format-docs-js = {composite = ["fix-format-prettier docs"]}
fix-format-tools = {composite = ["fix-format-tools-py", "fix-format-tools-js"]}
fix-format-tools-py = {composite = ["fix-format-black tools"]}
fix-format-tools-js = {composite = ["fix-format-prettier package.json tools .github"]}
fix-format-black = "black"
fix-format-mdformat = "python ./tools/ci/std_check.py mdformat --wrap 80 --end-of-line keep --line-length 70"
fix-format-prettier = "yarn prettier -w"

fix-lint = {composite = ["fix-lint-src", "fix-lint-docs", "fix-lint-tools"]}
fix-lint-src = {composite = ["fix-lint-src-js"]}
fix-lint-src-js = {composite = ["fix-lint-eslint src"]}
fix-lint-docs = {composite = ["fix-lint-docs-js"]}
fix-lint-docs-js = {composite = ["fix-lint-eslint docs"]}
fix-lint-tools = {composite = ["fix-lint-tools-js"]}
fix-lint-tools-js = {composite = ["fix-lint-eslint tools"]}
fix-lint-eslint = "yarn eslint --ext .js,.cjs,.mjs --fix"

build-docs = "mkdocs build -f ./tools/docs/mkdocs.yml"
deploy-docs = "python ./tools/docs/deploy.py"

deploy = "pip install -e ."
build = {composite = ["python ./tools/ci/version.py False", "pdm build", "twine check dist/*.tar.gz dist/*.whl"]}
release = {composite = ["build", "python ./tools/ci/version.py True"]}

[tool.tox]
legacy_tox_ini = """
[tox]
envlist =
    py{36,37,38,39,310,311}
    coverage

[testenv]
setenv =
    COVERAGE_FILE = .coverage/env/.coverage.{envname}
deps =
    coverage[toml]
extras =
    pandas
    pyspark
    numpy
commands =
    python -m coverage run --branch --source ipyvizzu -m unittest discover tests
    python -m coverage report -m
    python -c "import os; pyenv='{envname}'; os.rename('.coverage/env/.coverage.' + pyenv, '.coverage/env/.coverage.3.' + pyenv[3:])"

[testenv:py{37,38,39,310,311}]
package = editable
deps =
    {[testenv]deps}
    openpyxl
    packaging
extras =
    {[testenv]extras}
    fugue

[testenv:coverage]
skip_install = True
commands =
    python -m coverage combine --keep --data-file .coverage/.coverage .coverage/env/
    python -m coverage html --data-file .coverage/.coverage -d .coverage/html
    python -m coverage report --data-file .coverage/.coverage -m --fail-under=100
"""

[tool.pdm.dev-dependencies]
packagetool = [
    "twine ; python_version >= '3.10'"
]
packagedeps = [
    "IPython ; python_version >= '3.10'",
    "jsonschema ; python_version >= '3.10'",
    "pandas ; python_version >= '3.10'",
    "pandas-stubs ; python_version >= '3.10'",
    "pyspark ; python_version >= '3.10'",
    "numpy ; python_version >= '3.10'",
    "fugue >= 0.8.1 ; python_version >= '3.10'",
]
codequality = [
    "pre-commit ; python_version >= '3.10'",
    "black ; python_version >= '3.10'",
    "pylint ; python_version >= '3.10'",
    "mypy ; python_version >= '3.10'",
    "tox ; python_version >= '3.10'",
]
env = [
    "notebook ; python_version >= '3.10'",
]
docs = [
    "mdformat ; python_version >= '3.10'",
    "mdformat-beautysh ; python_version >= '3.10'",
    "mdformat-black ; python_version >= '3.10'",
    "mdformat-configurable-black ; python_version >= '3.10'",
    "mdformat-config ; python_version >= '3.10'",
    "mdformat-web ; python_version >= '3.10'",
    "mdformat-admon ; python_version >= '3.10'",
    "mdformat-gfm ; python_version >= '3.10'",
    "mdformat-tables ; python_version >= '3.10'",
    "mdformat-footnote ; python_version >= '3.10'",
    "mdformat-frontmatter ; python_version >= '3.10'",
    "mdx_truly_sane_lists ; python_version >= '3.10'",
    "markdown ; python_version >= '3.10'",
    "types-Markdown ; python_version >= '3.10'",
    "pyyaml ; python_version >= '3.10'",
    "types-pyyaml ; python_version >= '3.10'",
    "requests ; python_version >= '3.10'",
    "types-requests ; python_version >= '3.10'",
    "mkdocs ; python_version >= '3.10'",
    "mkdocs-material ; python_version >= '3.10'",
    "mkdocs-section-index ; python_version >= '3.10'",
    "mkdocs-literate-nav ; python_version >= '3.10'",
    "mkdocs-autorefs ; python_version >= '3.10'",
    "mkdocstrings[python] ; python_version >= '3.10'",
    "mkdocs-gen-files ; python_version >= '3.10'",
    "mkdocs-coverage ; python_version >= '3.10'",
    "mike ; python_version >= '3.10'",
]

[tool.pylint.messages-control]
disable = ["fixme"]
good-names= ["i", "df"]

[tool.coverage.paths]
source = ["src/", ".tox/py*/lib/python*/site-packages/"]
